
F7EthernetLwIP_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c13c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000044b4  0801c340  0801c340  0002c340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080207f4  080207f4  00040338  2**0
                  CONTENTS
  4 .ARM          00000008  080207f4  080207f4  000307f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080207fc  080207fc  00040338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080207fc  080207fc  000307fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020800  08020800  00030800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08020804  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f8  080209fc  000401f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000298  08020a9c  00040298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000778ac  20000338  08020b3c  00040338  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20077be4  08020b3c  00047be4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00040366  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003bad9  00000000  00000000  000403a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008be8  00000000  00000000  0007be82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029e8  00000000  00000000  00084a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002157  00000000  00000000  00087458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003cad8  00000000  00000000  000895af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00043257  00000000  00000000  000c6087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00125d8c  00000000  00000000  001092de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000c098  00000000  00000000  0022f06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007d  00000000  00000000  0023b104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000338 	.word	0x20000338
 800021c:	00000000 	.word	0x00000000
 8000220:	0801c324 	.word	0x0801c324

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000033c 	.word	0x2000033c
 800023c:	0801c324 	.word	0x0801c324

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <vApplicationGetIdleTaskMemory+0x2c>)
 80009e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <vApplicationGetIdleTaskMemory+0x30>)
 80009ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000354 	.word	0x20000354
 8000a04:	200003f4 	.word	0x200003f4

08000a08 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
    //具体哪个串口可以更改huart1为其它串�???????
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1 , 0xffff);
 8000a10:	1d39      	adds	r1, r7, #4
 8000a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a16:	2201      	movs	r2, #1
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <__io_putchar+0x20>)
 8000a1a:	f004 fa2d 	bl	8004e78 <HAL_UART_Transmit>
    return ch;
 8000a1e:	687b      	ldr	r3, [r7, #4]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200005f4 	.word	0x200005f4

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b08c      	sub	sp, #48	; 0x30
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a32:	f000 fe5b 	bl	80016ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a36:	f000 f831 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3a:	f000 f8fd 	bl	8000c38 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a3e:	f000 f89d 	bl	8000b7c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a42:	f000 f8cb 	bl	8000bdc <MX_USB_OTG_FS_PCD_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <main+0x60>)
 8000a48:	f107 0420 	add.w	r4, r7, #32
 8000a4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 f9de 	bl	8006e1a <osMessageCreate>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <main+0x64>)
 8000a62:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <main+0x68>)
 8000a66:	1d3c      	adds	r4, r7, #4
 8000a68:	461d      	mov	r5, r3
 8000a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f006 f808 	bl	8006a90 <osThreadCreate>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <main+0x6c>)
 8000a84:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a86:	f005 ffec 	bl	8006a62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <main+0x5e>
 8000a8c:	0801c340 	.word	0x0801c340
 8000a90:	20000b88 	.word	0x20000b88
 8000a94:	0801c35c 	.word	0x0801c35c
 8000a98:	20000b84 	.word	0x20000b84

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	; 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	2234      	movs	r2, #52	; 0x34
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f018 f90f 	bl	8018cce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ac0:	f002 fd1e 	bl	8003500 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <SystemClock_Config+0xd8>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a2a      	ldr	r2, [pc, #168]	; (8000b74 <SystemClock_Config+0xd8>)
 8000aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <SystemClock_Config+0xd8>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <SystemClock_Config+0xdc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <SystemClock_Config+0xdc>)
 8000ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemClock_Config+0xdc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000af8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000afc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afe:	2302      	movs	r3, #2
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b0c:	23d8      	movs	r3, #216	; 0xd8
 8000b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b14:	2309      	movs	r3, #9
 8000b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 fd4d 	bl	80035c0 <HAL_RCC_OscConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b2c:	f000 f978 	bl	8000e20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b30:	f002 fcf6 	bl	8003520 <HAL_PWREx_EnableOverDrive>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b3a:	f000 f971 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	230f      	movs	r3, #15
 8000b40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b42:	2302      	movs	r3, #2
 8000b44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	2107      	movs	r1, #7
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 ffdd 	bl	8003b1c <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b68:	f000 f95a 	bl	8000e20 <Error_Handler>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3750      	adds	r7, #80	; 0x50
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40007000 	.word	0x40007000

08000b7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <MX_USART3_UART_Init+0x5c>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000bc0:	f004 f90c 	bl	8004ddc <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bca:	f000 f929 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200005f4 	.word	0x200005f4
 8000bd8:	40004800 	.word	0x40004800

08000bdc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000be6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	2206      	movs	r2, #6
 8000bec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c20:	f002 fb25 	bl	800326e <HAL_PCD_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c2a:	f000 f8f9 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000067c 	.word	0x2000067c

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	4b47      	ldr	r3, [pc, #284]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a46      	ldr	r2, [pc, #280]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b44      	ldr	r3, [pc, #272]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a40      	ldr	r2, [pc, #256]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b3e      	ldr	r3, [pc, #248]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b3b      	ldr	r3, [pc, #236]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a3a      	ldr	r2, [pc, #232]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a34      	ldr	r2, [pc, #208]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a2e      	ldr	r2, [pc, #184]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a28      	ldr	r2, [pc, #160]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_GPIO_Init+0x134>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ce4:	4822      	ldr	r0, [pc, #136]	; (8000d70 <MX_GPIO_Init+0x138>)
 8000ce6:	f002 fa8f 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2140      	movs	r1, #64	; 0x40
 8000cee:	4821      	ldr	r0, [pc, #132]	; (8000d74 <MX_GPIO_Init+0x13c>)
 8000cf0:	f002 fa8a 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481b      	ldr	r0, [pc, #108]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000d0c:	f002 f8d0 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d10:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_GPIO_Init+0x138>)
 8000d2a:	f002 f8c1 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d2e:	2340      	movs	r3, #64	; 0x40
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <MX_GPIO_Init+0x13c>)
 8000d46:	f002 f8b3 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_GPIO_Init+0x13c>)
 8000d5e:	f002 f8a7 	bl	8002eb0 <HAL_GPIO_Init>

}
 8000d62:	bf00      	nop
 8000d64:	3730      	adds	r7, #48	; 0x30
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400
 8000d74:	40021800 	.word	0x40021800
 8000d78:	40020800 	.word	0x40020800

08000d7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	f5ad 6dc5 	sub.w	sp, sp, #1576	; 0x628
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8000d88:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8000d8c:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000d8e:	f005 f805 	bl	8005d9c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
//  TCP_Client_Init();
  int soctemp=create_tcp_client();
 8000d92:	f000 facf 	bl	8001334 <create_tcp_client>
 8000d96:	f8c7 0620 	str.w	r0, [r7, #1568]	; 0x620
//  double t=0,y=0;
  int t=0,y=0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
  /* Infinite loop */
  for(;;)
  {
//	sprintf(send_buf,"{\"t\": %f, \"y\": %f}\n{\"t\": %f, \"y\": %f}\n{\"t\": %f, \"y\": %f}\n{\"t\": %f, \"y\": %f}\n",t,y,t,y,t,y,t,y);
//	sprintf(send_buf,"{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n",t,y,t,y,t,y,t,y);
	sprintf(send_buf,"12345678901234567890123456789012345678901234567890\n12345678901234567890123456789012345678901234567890\n12345678901234567890123456789012345678901234567890\n"
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	4912      	ldr	r1, [pc, #72]	; (8000df4 <StartDefaultTask+0x78>)
 8000dac:	4618      	mov	r0, r3
 8000dae:	f017 ff01 	bl	8018bb4 <siprintf>
//	sprintf(send_buf,"{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n",t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y);
//	sprintf(send_buf,"{\"t\": %d, \"y\": %d}\n",(int)t,(int)y);
//	t+=0.05;
//	if(t>4)t=0;
//	y=sin(t*7);
	t+=1;
 8000db2:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8000db6:	3301      	adds	r3, #1
 8000db8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
	if(t>100)t=0;
 8000dbc:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8000dc0:	2b64      	cmp	r3, #100	; 0x64
 8000dc2:	dd02      	ble.n	8000dca <StartDefaultTask+0x4e>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
	y=t*2;//(int)sin(t*7);
 8000dca:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
	//发�?�数据到服务�???????
//	send_json_data(client_pcb, send_buf);
	tcp_client_send(soctemp, send_buf);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f8d7 0620 	ldr.w	r0, [r7, #1568]	; 0x620
 8000dde:	f000 fae7 	bl	80013b0 <tcp_client_send>
    osDelay(5);
 8000de2:	2005      	movs	r0, #5
 8000de4:	f005 fea0 	bl	8006b28 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000de8:	2101      	movs	r1, #1
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <StartDefaultTask+0x7c>)
 8000dec:	f002 fa25 	bl	800323a <HAL_GPIO_TogglePin>
	sprintf(send_buf,"12345678901234567890123456789012345678901234567890\n12345678901234567890123456789012345678901234567890\n12345678901234567890123456789012345678901234567890\n"
 8000df0:	e7d9      	b.n	8000da6 <StartDefaultTask+0x2a>
 8000df2:	bf00      	nop
 8000df4:	0801c378 	.word	0x0801c378
 8000df8:	40020400 	.word	0x40020400

08000dfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e0e:	f000 fc7b 	bl	8001708 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40010000 	.word	0x40010000

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	210f      	movs	r1, #15
 8000e66:	f06f 0001 	mvn.w	r0, #1
 8000e6a:	f000 fd49 	bl	8001900 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0ae      	sub	sp, #184	; 0xb8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2290      	movs	r2, #144	; 0x90
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f017 ff16 	bl	8018cce <memset>
  if(huart->Instance==USART3)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <HAL_UART_MspInit+0xb4>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d13c      	bne.n	8000f26 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 f886 	bl	8003fcc <HAL_RCCEx_PeriphCLKConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ec6:	f7ff ffab 	bl	8000e20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000efa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f14:	2307      	movs	r3, #7
 8000f16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_UART_MspInit+0xbc>)
 8000f22:	f001 ffc5 	bl	8002eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	37b8      	adds	r7, #184	; 0xb8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40004800 	.word	0x40004800
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020c00 	.word	0x40020c00

08000f3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0ae      	sub	sp, #184	; 0xb8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2290      	movs	r2, #144	; 0x90
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f017 feb6 	bl	8018cce <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f6a:	d159      	bne.n	8001020 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 f825 	bl	8003fcc <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f88:	f7ff ff4a 	bl	8000e20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <HAL_PCD_MspInit+0xec>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4a25      	ldr	r2, [pc, #148]	; (8001028 <HAL_PCD_MspInit+0xec>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6313      	str	r3, [r2, #48]	; 0x30
 8000f98:	4b23      	ldr	r3, [pc, #140]	; (8001028 <HAL_PCD_MspInit+0xec>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fa4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4818      	ldr	r0, [pc, #96]	; (800102c <HAL_PCD_MspInit+0xf0>)
 8000fcc:	f001 ff70 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4810      	ldr	r0, [pc, #64]	; (800102c <HAL_PCD_MspInit+0xf0>)
 8000fec:	f001 ff60 	bl	8002eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_PCD_MspInit+0xec>)
 8000ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <HAL_PCD_MspInit+0xec>)
 8000ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffa:	6353      	str	r3, [r2, #52]	; 0x34
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_PCD_MspInit+0xec>)
 8000ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <HAL_PCD_MspInit+0xec>)
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_PCD_MspInit+0xec>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	6453      	str	r3, [r2, #68]	; 0x44
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_PCD_MspInit+0xec>)
 8001016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001020:	bf00      	nop
 8001022:	37b8      	adds	r7, #184	; 0xb8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000

08001030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001040:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <HAL_InitTick+0xd0>)
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	4a2e      	ldr	r2, [pc, #184]	; (8001100 <HAL_InitTick+0xd0>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6453      	str	r3, [r2, #68]	; 0x44
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <HAL_InitTick+0xd0>)
 800104e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001058:	f107 020c 	add.w	r2, r7, #12
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f002 ff80 	bl	8003f68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001068:	f002 ff6a 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 800106c:	4603      	mov	r3, r0
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001074:	4a23      	ldr	r2, [pc, #140]	; (8001104 <HAL_InitTick+0xd4>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	0c9b      	lsrs	r3, r3, #18
 800107c:	3b01      	subs	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_InitTick+0xd8>)
 8001082:	4a22      	ldr	r2, [pc, #136]	; (800110c <HAL_InitTick+0xdc>)
 8001084:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_InitTick+0xd8>)
 8001088:	f240 32e7 	movw	r2, #999	; 0x3e7
 800108c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <HAL_InitTick+0xd8>)
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <HAL_InitTick+0xd8>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_InitTick+0xd8>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_InitTick+0xd8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80010a6:	4818      	ldr	r0, [pc, #96]	; (8001108 <HAL_InitTick+0xd8>)
 80010a8:	f003 fbb8 	bl	800481c <HAL_TIM_Base_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80010b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d11b      	bne.n	80010f2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80010ba:	4813      	ldr	r0, [pc, #76]	; (8001108 <HAL_InitTick+0xd8>)
 80010bc:	f003 fc10 	bl	80048e0 <HAL_TIM_Base_Start_IT>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80010c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d111      	bne.n	80010f2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010ce:	2019      	movs	r0, #25
 80010d0:	f000 fc32 	bl	8001938 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	d808      	bhi.n	80010ec <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80010da:	2200      	movs	r2, #0
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	2019      	movs	r0, #25
 80010e0:	f000 fc0e 	bl	8001900 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_InitTick+0xe0>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e002      	b.n	80010f2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3730      	adds	r7, #48	; 0x30
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	431bde83 	.word	0x431bde83
 8001108:	20000b8c 	.word	0x20000b8c
 800110c:	40010000 	.word	0x40010000
 8001110:	20000004 	.word	0x20000004

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001146:	f003 fc43 	bl	80049d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000b8c 	.word	0x20000b8c

08001154 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <ETH_IRQHandler+0x10>)
 800115a:	f000 ffd5 	bl	8002108 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200055c0 	.word	0x200055c0

08001168 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <ETH_WKUP_IRQHandler+0x10>)
 800116e:	f000 ffcb 	bl	8002108 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200055c0 	.word	0x200055c0

0800117c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
	return 1;
 8001180:	2301      	movs	r3, #1
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_kill>:

int _kill(int pid, int sig)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <_kill+0x20>)
 8001198:	2216      	movs	r2, #22
 800119a:	601a      	str	r2, [r3, #0]
	return -1;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20077bd4 	.word	0x20077bd4

080011b0 <_exit>:

void _exit (int status)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ffe5 	bl	800118c <_kill>
	while (1) {}		/* Make sure we hang here */
 80011c2:	e7fe      	b.n	80011c2 <_exit+0x12>

080011c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e00a      	b.n	80011ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011d6:	f3af 8000 	nop.w
 80011da:	4601      	mov	r1, r0
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	b2ca      	uxtb	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf0      	blt.n	80011d6 <_read+0x12>
	}

return len;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e009      	b.n	8001224 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	60ba      	str	r2, [r7, #8]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fbf5 	bl	8000a08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	dbf1      	blt.n	8001210 <_write+0x12>
	}
	return len;
 800122c:	687b      	ldr	r3, [r7, #4]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_close>:

int _close(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	return -1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800125e:	605a      	str	r2, [r3, #4]
	return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_isatty>:

int _isatty(int file)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
	return 1;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d205      	bcs.n	80012dc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <_sbrk+0x6c>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a06      	ldr	r2, [pc, #24]	; (8001304 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	20080000 	.word	0x20080000
 8001300:	00000400 	.word	0x00000400
 8001304:	20000bd8 	.word	0x20000bd8
 8001308:	20077be8 	.word	0x20077be8
 800130c:	20077bd4 	.word	0x20077bd4

08001310 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <create_tcp_client>:
//#define SERVER_IP "208.68.36.87" // 服务器IP地址
//#define SERVER_IP "192.168.2.19" // 服务器IP地址
#define SERVER_IP "192.168.2.89" // 服务器IP地址
#define SERVER_PORT 2333         // 服务器端口号

int create_tcp_client(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
    int sock;
    struct sockaddr_in server_address;

    // 创建socket
    sock = lwip_socket(AF_INET, SOCK_STREAM, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2101      	movs	r1, #1
 800133e:	2002      	movs	r0, #2
 8001340:	f00a fd18 	bl	800bd74 <lwip_socket>
 8001344:	6178      	str	r0, [r7, #20]
    if (sock < 0) {
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b00      	cmp	r3, #0
 800134a:	da05      	bge.n	8001358 <create_tcp_client+0x24>
    	printf("soc create error...\n\r");
 800134c:	4815      	ldr	r0, [pc, #84]	; (80013a4 <create_tcp_client+0x70>)
 800134e:	f017 fc1f 	bl	8018b90 <iprintf>
        return -1; // Socket创建失败
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e020      	b.n	800139a <create_tcp_client+0x66>
    }

    // 设置服务器地址
    server_address.sin_family = AF_INET;
 8001358:	2302      	movs	r3, #2
 800135a:	717b      	strb	r3, [r7, #5]
    server_address.sin_port = htons(SERVER_PORT);
 800135c:	f640 101d 	movw	r0, #2333	; 0x91d
 8001360:	f00b f8ac 	bl	800c4bc <lwip_htons>
 8001364:	4603      	mov	r3, r0
 8001366:	80fb      	strh	r3, [r7, #6]
    inet_aton(SERVER_IP, &server_address.sin_addr.s_addr);
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	3304      	adds	r3, #4
 800136c:	4619      	mov	r1, r3
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <create_tcp_client+0x74>)
 8001370:	f015 fa2c 	bl	80167cc <ip4addr_aton>

    // 连接服务器
    if (lwip_connect(sock, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2210      	movs	r2, #16
 8001378:	4619      	mov	r1, r3
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f00a fb6a 	bl	800ba54 <lwip_connect>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	da08      	bge.n	8001398 <create_tcp_client+0x64>
        lwip_close(sock);
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f00a fb0e 	bl	800b9a8 <lwip_close>
    	printf("connect error...\n\r");
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <create_tcp_client+0x78>)
 800138e:	f017 fbff 	bl	8018b90 <iprintf>
        return -2; // 连接失败
 8001392:	f06f 0301 	mvn.w	r3, #1
 8001396:	e000      	b.n	800139a <create_tcp_client+0x66>
    }

    return sock; // 返回socket描述符
 8001398:	697b      	ldr	r3, [r7, #20]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	0801c710 	.word	0x0801c710
 80013a8:	0801c728 	.word	0x0801c728
 80013ac:	0801c738 	.word	0x0801c738

080013b0 <tcp_client_send>:
void tcp_client_send(int sock, const char *data) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	err_t err;
    err = lwip_send(sock, data, strlen(data), 0);
 80013ba:	6838      	ldr	r0, [r7, #0]
 80013bc:	f7fe ff90 	bl	80002e0 <strlen>
 80013c0:	4602      	mov	r2, r0
 80013c2:	2300      	movs	r3, #0
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f00a fbc4 	bl	800bb54 <lwip_send>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
//		printf("memerr..\n\r");
		// 处理错误
		// ERR_MEM 如果发送缓冲区太小不能放下全部数据
		// 其他错误码表示其他问题
	}
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f4:	4c0b      	ldr	r4, [pc, #44]	; (8001424 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001402:	f7ff ff85 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f017 fd23 	bl	8018e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff fb0f 	bl	8000a2c <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800141c:	08020804 	.word	0x08020804
  ldr r2, =_sbss
 8001420:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8001424:	20077be4 	.word	0x20077be4

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>

0800142a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <LAN8742_RegisterBusIO+0x28>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <LAN8742_RegisterBusIO+0x28>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <LAN8742_RegisterBusIO+0x28>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e014      	b.n	8001482 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d17c      	bne.n	80015a8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	e01c      	b.n	8001502 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	f107 0208 	add.w	r2, r7, #8
 80014d0:	2112      	movs	r1, #18
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	4798      	blx	r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da03      	bge.n	80014e4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80014dc:	f06f 0304 	mvn.w	r3, #4
 80014e0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80014e2:	e00b      	b.n	80014fc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d105      	bne.n	80014fc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
         break;
 80014fa:	e005      	b.n	8001508 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b1f      	cmp	r3, #31
 8001506:	d9df      	bls.n	80014c8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b1f      	cmp	r3, #31
 800150e:	d902      	bls.n	8001516 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001510:	f06f 0302 	mvn.w	r3, #2
 8001514:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d145      	bne.n	80015a8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6810      	ldr	r0, [r2, #0]
 8001524:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001528:	2100      	movs	r1, #0
 800152a:	4798      	blx	r3
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	db37      	blt.n	80015a2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6810      	ldr	r0, [r2, #0]
 800153a:	f107 0208 	add.w	r2, r7, #8
 800153e:	2100      	movs	r1, #0
 8001540:	4798      	blx	r3
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	db28      	blt.n	800159a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4798      	blx	r3
 800154e:	4603      	mov	r3, r0
 8001550:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001552:	e01c      	b.n	800158e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4798      	blx	r3
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001566:	d80e      	bhi.n	8001586 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6810      	ldr	r0, [r2, #0]
 8001570:	f107 0208 	add.w	r2, r7, #8
 8001574:	2100      	movs	r1, #0
 8001576:	4798      	blx	r3
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	da07      	bge.n	800158e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800157e:	f06f 0304 	mvn.w	r3, #4
 8001582:	613b      	str	r3, [r7, #16]
                 break;
 8001584:	e010      	b.n	80015a8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001586:	f06f 0301 	mvn.w	r3, #1
 800158a:	613b      	str	r3, [r7, #16]
               break;
 800158c:	e00c      	b.n	80015a8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1dd      	bne.n	8001554 <LAN8742_Init+0xc6>
 8001598:	e006      	b.n	80015a8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800159a:	f06f 0304 	mvn.w	r3, #4
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	e002      	b.n	80015a8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80015a2:	f06f 0303 	mvn.w	r3, #3
 80015a6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d112      	bne.n	80015d4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4798      	blx	r3
 80015b4:	4603      	mov	r3, r0
 80015b6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80015b8:	bf00      	nop
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	4798      	blx	r3
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015cc:	d9f5      	bls.n	80015ba <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80015d4:	693b      	ldr	r3, [r7, #16]
 }
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6810      	ldr	r0, [r2, #0]
 80015f2:	f107 020c 	add.w	r2, r7, #12
 80015f6:	2101      	movs	r1, #1
 80015f8:	4798      	blx	r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da02      	bge.n	8001606 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001600:	f06f 0304 	mvn.w	r3, #4
 8001604:	e06e      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6810      	ldr	r0, [r2, #0]
 800160e:	f107 020c 	add.w	r2, r7, #12
 8001612:	2101      	movs	r1, #1
 8001614:	4798      	blx	r3
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	da02      	bge.n	8001622 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800161c:	f06f 0304 	mvn.w	r3, #4
 8001620:	e060      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800162c:	2301      	movs	r3, #1
 800162e:	e059      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6810      	ldr	r0, [r2, #0]
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	2100      	movs	r1, #0
 800163e:	4798      	blx	r3
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	da02      	bge.n	800164c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001646:	f06f 0304 	mvn.w	r3, #4
 800164a:	e04b      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d11b      	bne.n	800168e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d006      	beq.n	800166e <LAN8742_GetLinkState+0x90>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800166a:	2302      	movs	r3, #2
 800166c:	e03a      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001678:	2303      	movs	r3, #3
 800167a:	e033      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001686:	2304      	movs	r3, #4
 8001688:	e02c      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800168a:	2305      	movs	r3, #5
 800168c:	e02a      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6810      	ldr	r0, [r2, #0]
 8001696:	f107 020c 	add.w	r2, r7, #12
 800169a:	211f      	movs	r1, #31
 800169c:	4798      	blx	r3
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da02      	bge.n	80016aa <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80016a4:	f06f 0304 	mvn.w	r3, #4
 80016a8:	e01c      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80016b4:	2306      	movs	r3, #6
 80016b6:	e015      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 031c 	and.w	r3, r3, #28
 80016be:	2b18      	cmp	r3, #24
 80016c0:	d101      	bne.n	80016c6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80016c2:	2302      	movs	r3, #2
 80016c4:	e00e      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f003 031c 	and.w	r3, r3, #28
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d101      	bne.n	80016d4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e007      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 031c 	and.w	r3, r3, #28
 80016da:	2b14      	cmp	r3, #20
 80016dc:	d101      	bne.n	80016e2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80016de:	2304      	movs	r3, #4
 80016e0:	e000      	b.n	80016e4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016e2:	2305      	movs	r3, #5
    }				
  }
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 f8fa 	bl	80018ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f6:	200f      	movs	r0, #15
 80016f8:	f7ff fc9a 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016fc:	f7ff fb96 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008
 800172c:	20000bdc 	.word	0x20000bdc

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000bdc 	.word	0x20000bdc

08001748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ffee 	bl	8001730 <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d005      	beq.n	800176e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_Delay+0x44>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800176e:	bf00      	nop
 8001770:	f7ff ffde 	bl	8001730 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d8f7      	bhi.n	8001770 <HAL_Delay+0x28>
  {
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000008 	.word	0x20000008

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <__NVIC_SetPriorityGrouping+0x40>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x40>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00
 80017d4:	05fa0000 	.word	0x05fa0000

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ff4c 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001912:	f7ff ff61 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 8001916:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	6978      	ldr	r0, [r7, #20]
 800191e:	f7ff ffb1 	bl	8001884 <NVIC_EncodePriority>
 8001922:	4602      	mov	r2, r0
 8001924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff80 	bl	8001830 <__NVIC_SetPriority>
}
 8001930:	bf00      	nop
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff54 	bl	80017f4 <__NVIC_EnableIRQ>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06a      	b.n	8001a3c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800196c:	2b00      	cmp	r3, #0
 800196e:	d106      	bne.n	800197e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2223      	movs	r2, #35	; 0x23
 8001974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f004 fe27 	bl	80065cc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <HAL_ETH_Init+0xf0>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	4a30      	ldr	r2, [pc, #192]	; (8001a44 <HAL_ETH_Init+0xf0>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001988:	6453      	str	r3, [r2, #68]	; 0x44
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <HAL_ETH_Init+0xf0>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_ETH_Init+0xf4>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <HAL_ETH_Init+0xf4>)
 800199c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_ETH_Init+0xf4>)
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4927      	ldr	r1, [pc, #156]	; (8001a48 <HAL_ETH_Init+0xf4>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_ETH_Init+0xf4>)
 80019b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019cc:	f7ff feb0 	bl	8001730 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019d2:	e011      	b.n	80019f8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019d4:	f7ff feac 	bl	8001730 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019e2:	d909      	bls.n	80019f8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2204      	movs	r2, #4
 80019e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	22e0      	movs	r2, #224	; 0xe0
 80019f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e021      	b.n	8001a3c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1e4      	bne.n	80019d4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 ffac 	bl	8002968 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f001 f853 	bl	8002abc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f001 f8a9 	bl	8002b6e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	461a      	mov	r2, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f001 f811 	bl	8002a4c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2210      	movs	r2, #16
 8001a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40013800 	.word	0x40013800

08001a4c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d150      	bne.n	8001b00 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2223      	movs	r2, #35	; 0x23
 8001a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2204      	movs	r2, #4
 8001a6a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fa7b 	bl	8001f68 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0208 	orr.w	r2, r2, #8
 8001a80:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff fe5c 	bl	8001748 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0204 	orr.w	r2, r2, #4
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff fe49 	bl	8001748 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fdf3 	bl	80026aa <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ada:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001af2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2223      	movs	r2, #35	; 0x23
 8001af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	e000      	b.n	8001b02 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
  }
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d17b      	bne.n	8001c16 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2223      	movs	r2, #35	; 0x23
 8001b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001b3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_ETH_Start_IT+0x114>)
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2204      	movs	r2, #4
 8001b68:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f9fc 	bl	8001f68 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0208 	orr.w	r2, r2, #8
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7ff fddd 	bl	8001748 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0204 	orr.w	r2, r2, #4
 8001ba4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f7ff fdca 	bl	8001748 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fd74 	bl	80026aa <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bd8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bf0:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfa:	69d9      	ldr	r1, [r3, #28]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_ETH_Start_IT+0x118>)
 8001c02:	430b      	orrs	r3, r1
 8001c04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c08:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2223      	movs	r2, #35	; 0x23
 8001c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
  }
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	00020060 	.word	0x00020060
 8001c24:	0001a0c1 	.word	0x0001a0c1

08001c28 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c36:	2b23      	cmp	r3, #35	; 0x23
 8001c38:	d16e      	bne.n	8001d18 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2223      	movs	r2, #35	; 0x23
 8001c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	69d9      	ldr	r1, [r3, #28]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <HAL_ETH_Stop_IT+0xfc>)
 8001c52:	400b      	ands	r3, r1
 8001c54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c58:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c70:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	f023 0302 	bic.w	r3, r3, #2
 8001c84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c88:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0204 	bic.w	r2, r2, #4
 8001c98:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f7ff fd50 	bl	8001748 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fcfa 	bl	80026aa <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0208 	bic.w	r2, r2, #8
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff fd3a 	bl	8001748 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e00e      	b.n	8001d00 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	3212      	adds	r2, #18
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d9ed      	bls.n	8001ce2 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2210      	movs	r2, #16
 8001d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
  }
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	fffe5f3e 	.word	0xfffe5f3e

08001d28 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e045      	b.n	8001dd8 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d52:	2b23      	cmp	r3, #35	; 0x23
 8001d54:	d13f      	bne.n	8001dd6 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 ff70 	bl	8002c48 <ETH_Prepare_Tx_Descriptors>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d74:	f043 0202 	orr.w	r2, r3, #2
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e02a      	b.n	8001dd8 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d82:	f3bf 8f4f 	dsb	sy
}
 8001d86:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d904      	bls.n	8001da4 <HAL_ETH_Transmit_IT+0x7c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	1f1a      	subs	r2, r3, #4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00d      	beq.n	8001dd2 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2300      	movs	r3, #0
 8001dd0:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
  }
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0a8      	b.n	8001f5e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e12:	2b23      	cmp	r3, #35	; 0x23
 8001e14:	d001      	beq.n	8001e1a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0a1      	b.n	8001f5e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	3212      	adds	r2, #18
 8001e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e30:	f1c3 0304 	rsb	r3, r3, #4
 8001e34:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e36:	e06a      	b.n	8001f0e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	69da      	ldr	r2, [r3, #28]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d103      	bne.n	8001e68 <HAL_ETH_ReadData+0x88>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d040      	beq.n	8001eea <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e9c:	3b04      	subs	r3, #4
 8001e9e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	f004 fd53 	bl	8006974 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	441a      	add	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3301      	adds	r3, #1
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d902      	bls.n	8001efc <HAL_ETH_ReadData+0x11c>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3b04      	subs	r3, #4
 8001efa:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	3212      	adds	r2, #18
 8001f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f06:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db06      	blt.n	8001f24 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d202      	bcs.n	8001f24 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d089      	beq.n	8001e38 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	441a      	add	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f815 	bl	8001f68 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d108      	bne.n	8001f5c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e000      	b.n	8001f5e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3720      	adds	r7, #32
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001f74:	2301      	movs	r3, #1
 8001f76:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f7c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	3212      	adds	r2, #18
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f8e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001f90:	e040      	b.n	8002014 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d112      	bne.n	8001fc0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 fcb8 	bl	8006914 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	74fb      	strb	r3, [r7, #19]
 8001fae:	e007      	b.n	8001fc0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d026      	beq.n	8002014 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d103      	bne.n	8001fd6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	4a1e      	ldr	r2, [pc, #120]	; (800204c <ETH_UpdateDescriptor+0xe4>)
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	e003      	b.n	8001fde <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001fdc:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001fde:	f3bf 8f5f 	dmb	sy
}
 8001fe2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d902      	bls.n	8002002 <ETH_UpdateDescriptor+0x9a>
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3b04      	subs	r3, #4
 8002000:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	3212      	adds	r2, #18
 8002008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200c:	617b      	str	r3, [r7, #20]
      desccount--;
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	3b01      	subs	r3, #1
 8002012:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <ETH_UpdateDescriptor+0xb8>
 800201a:	7cfb      	ldrb	r3, [r7, #19]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1b8      	bne.n	8001f92 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	429a      	cmp	r2, r3
 8002028:	d00c      	beq.n	8002044 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002032:	461a      	mov	r2, r3
 8002034:	2300      	movs	r3, #0
 8002036:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002044:	bf00      	nop
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	800045f8 	.word	0x800045f8

08002050 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3318      	adds	r3, #24
 800205c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800206a:	2301      	movs	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800206e:	e03f      	b.n	80020f0 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002070:	2301      	movs	r3, #1
 8002072:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3b01      	subs	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	3304      	adds	r3, #4
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	3301      	adds	r3, #1
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002098:	7bbb      	ldrb	r3, [r7, #14]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d028      	beq.n	80020f0 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68d9      	ldr	r1, [r3, #12]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db1b      	blt.n	80020ec <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	3304      	adds	r3, #4
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 fc99 	bl	80069f8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	3304      	adds	r3, #4
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	2200      	movs	r2, #0
 80020d2:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	3301      	adds	r3, #1
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80020ea:	e001      	b.n	80020f0 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_ETH_ReleaseTxPacket+0xac>
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1b9      	bne.n	8002070 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d112      	bne.n	8002148 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002130:	2b40      	cmp	r3, #64	; 0x40
 8002132:	d109      	bne.n	8002148 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213c:	461a      	mov	r2, r3
 800213e:	4b50      	ldr	r3, [pc, #320]	; (8002280 <HAL_ETH_IRQHandler+0x178>)
 8002140:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f003 ffa6 	bl	8006094 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d113      	bne.n	8002182 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d10a      	bne.n	8002182 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002174:	461a      	mov	r2, r3
 8002176:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800217a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f003 ff99 	bl	80060b4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002194:	d14c      	bne.n	8002230 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a8:	d142      	bne.n	8002230 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b0:	f043 0208 	orr.w	r2, r3, #8
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021cc:	d11a      	bne.n	8002204 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <HAL_ETH_IRQHandler+0x17c>)
 80021da:	4013      	ands	r3, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80021f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021f8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	22e0      	movs	r2, #224	; 0xe0
 80021fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002202:	e012      	b.n	800222a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	f248 6380 	movw	r3, #34432	; 0x8680
 8002212:	4013      	ands	r3, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002222:	461a      	mov	r2, r3
 8002224:	f248 6380 	movw	r3, #34432	; 0x8680
 8002228:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f003 ff52 	bl	80060d4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b08      	cmp	r3, #8
 800223c:	d10e      	bne.n	800225c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f81c 	bl	800228c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_ETH_IRQHandler+0x180>)
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <HAL_ETH_IRQHandler+0x180>)
 800226a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800226e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f815 	bl	80022a0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	00010040 	.word	0x00010040
 8002284:	007e2000 	.word	0x007e2000
 8002288:	40013c00 	.word	0x40013c00

0800228c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 031c 	and.w	r3, r3, #28
 80022d0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	02db      	lsls	r3, r3, #11
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	019b      	lsls	r3, r3, #6
 80022e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f023 0302 	bic.w	r3, r3, #2
 80022f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002304:	f7ff fa14 	bl	8001730 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800230a:	e00d      	b.n	8002328 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800230c:	f7ff fa10 	bl	8001730 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231a:	d301      	bcc.n	8002320 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e010      	b.n	8002342 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ec      	bne.n	800230c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	b29b      	uxth	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 031c 	and.w	r3, r3, #28
 8002366:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	02db      	lsls	r3, r3, #11
 800236c:	b29b      	uxth	r3, r3
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	019b      	lsls	r3, r3, #6
 8002378:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a4:	f7ff f9c4 	bl	8001730 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023aa:	e00d      	b.n	80023c8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80023ac:	f7ff f9c0 	bl	8001730 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ba:	d301      	bcc.n	80023c0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e009      	b.n	80023d4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ec      	bne.n	80023ac <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0d9      	b.n	80025a4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bf14      	ite	ne
 80023fe:	2301      	movne	r3, #1
 8002400:	2300      	moveq	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf0c      	ite	eq
 800245e:	2301      	moveq	r3, #1
 8002460:	2300      	movne	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	bf0c      	ite	eq
 80024ae:	2301      	moveq	r3, #1
 80024b0:	2300      	movne	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	0c1b      	lsrs	r3, r3, #16
 8002564:	b29a      	uxth	r2, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e00b      	b.n	80025dc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d105      	bne.n	80025da <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80025ce:	6839      	ldr	r1, [r7, #0]
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f88f 	bl	80026f4 <ETH_SetMACConfig>

    return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
  }
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 031c 	bic.w	r3, r3, #28
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025fc:	f001 fc80 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8002600:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d908      	bls.n	800261c <HAL_ETH_SetMDIOClockRange+0x38>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d804      	bhi.n	800261c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	e027      	b.n	800266c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d908      	bls.n	8002636 <HAL_ETH_SetMDIOClockRange+0x52>
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4a17      	ldr	r2, [pc, #92]	; (8002684 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d204      	bcs.n	8002636 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f043 030c 	orr.w	r3, r3, #12
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	e01a      	b.n	800266c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4a12      	ldr	r2, [pc, #72]	; (8002684 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d303      	bcc.n	8002646 <HAL_ETH_SetMDIOClockRange+0x62>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4a11      	ldr	r2, [pc, #68]	; (8002688 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d911      	bls.n	800266a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d908      	bls.n	8002660 <HAL_ETH_SetMDIOClockRange+0x7c>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4a0e      	ldr	r2, [pc, #56]	; (800268c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d804      	bhi.n	8002660 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e005      	b.n	800266c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f043 0310 	orr.w	r3, r3, #16
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e000      	b.n	800266c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800266a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	611a      	str	r2, [r3, #16]
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	01312cff 	.word	0x01312cff
 8002680:	02160ebf 	.word	0x02160ebf
 8002684:	03938700 	.word	0x03938700
 8002688:	05f5e0ff 	.word	0x05f5e0ff
 800268c:	08f0d17f 	.word	0x08f0d17f

08002690 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026cc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026da:	2001      	movs	r0, #1
 80026dc:	f7ff f834 	bl	8001748 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ea:	6193      	str	r3, [r2, #24]
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4b51      	ldr	r3, [pc, #324]	; (8002850 <ETH_SetMACConfig+0x15c>)
 800270a:	4013      	ands	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	7c1b      	ldrb	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <ETH_SetMACConfig+0x28>
 8002716:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800271a:	e000      	b.n	800271e <ETH_SetMACConfig+0x2a>
 800271c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	7c5b      	ldrb	r3, [r3, #17]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <ETH_SetMACConfig+0x38>
 8002726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800272a:	e000      	b.n	800272e <ETH_SetMACConfig+0x3a>
 800272c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800272e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002734:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	7fdb      	ldrb	r3, [r3, #31]
 800273a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800273c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002742:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	7f92      	ldrb	r2, [r2, #30]
 8002748:	2a00      	cmp	r2, #0
 800274a:	d102      	bne.n	8002752 <ETH_SetMACConfig+0x5e>
 800274c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002750:	e000      	b.n	8002754 <ETH_SetMACConfig+0x60>
 8002752:	2200      	movs	r2, #0
                        macconf->Speed |
 8002754:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	7f1b      	ldrb	r3, [r3, #28]
 800275a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800275c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002762:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	791b      	ldrb	r3, [r3, #4]
 8002768:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800276a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002772:	2a00      	cmp	r2, #0
 8002774:	d102      	bne.n	800277c <ETH_SetMACConfig+0x88>
 8002776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800277a:	e000      	b.n	800277e <ETH_SetMACConfig+0x8a>
 800277c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800277e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	7bdb      	ldrb	r3, [r3, #15]
 8002784:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002786:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800278c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002794:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002796:	4313      	orrs	r3, r2
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7fe ffca 	bl	8001748 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80027ca:	4013      	ands	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027da:	2a00      	cmp	r2, #0
 80027dc:	d101      	bne.n	80027e2 <ETH_SetMACConfig+0xee>
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	e000      	b.n	80027e4 <ETH_SetMACConfig+0xf0>
 80027e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027e4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80027f2:	2a01      	cmp	r2, #1
 80027f4:	d101      	bne.n	80027fa <ETH_SetMACConfig+0x106>
 80027f6:	2208      	movs	r2, #8
 80027f8:	e000      	b.n	80027fc <ETH_SetMACConfig+0x108>
 80027fa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80027fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002804:	2a01      	cmp	r2, #1
 8002806:	d101      	bne.n	800280c <ETH_SetMACConfig+0x118>
 8002808:	2204      	movs	r2, #4
 800280a:	e000      	b.n	800280e <ETH_SetMACConfig+0x11a>
 800280c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800280e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002816:	2a01      	cmp	r2, #1
 8002818:	d101      	bne.n	800281e <ETH_SetMACConfig+0x12a>
 800281a:	2202      	movs	r2, #2
 800281c:	e000      	b.n	8002820 <ETH_SetMACConfig+0x12c>
 800281e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002820:	4313      	orrs	r3, r2
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002838:	2001      	movs	r0, #1
 800283a:	f7fe ff85 	bl	8001748 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	ff20810f 	.word	0xff20810f

08002854 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <ETH_SetDMAConfig+0x110>)
 800286e:	4013      	ands	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	7b1b      	ldrb	r3, [r3, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <ETH_SetDMAConfig+0x2c>
 800287a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800287e:	e000      	b.n	8002882 <ETH_SetDMAConfig+0x2e>
 8002880:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	7b5b      	ldrb	r3, [r3, #13]
 8002886:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002888:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	7f52      	ldrb	r2, [r2, #29]
 800288e:	2a00      	cmp	r2, #0
 8002890:	d102      	bne.n	8002898 <ETH_SetDMAConfig+0x44>
 8002892:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002896:	e000      	b.n	800289a <ETH_SetDMAConfig+0x46>
 8002898:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800289a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	7b9b      	ldrb	r3, [r3, #14]
 80028a0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028a2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	7f1b      	ldrb	r3, [r3, #28]
 80028ae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	7f9b      	ldrb	r3, [r3, #30]
 80028b6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028b8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028c6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028c8:	4313      	orrs	r3, r2
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d8:	461a      	mov	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7fe ff2c 	bl	8001748 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f8:	461a      	mov	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	791b      	ldrb	r3, [r3, #4]
 8002902:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002908:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800290e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002914:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800291c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800291e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002926:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800292c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002936:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800293a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002948:	2001      	movs	r0, #1
 800294a:	f7fe fefd 	bl	8001748 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	f8de3f23 	.word	0xf8de3f23

08002968 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0a6      	sub	sp, #152	; 0x98
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002970:	2301      	movs	r3, #1
 8002972:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800297c:	2300      	movs	r3, #0
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029a4:	2300      	movs	r3, #0
 80029a6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029ce:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029e0:	4619      	mov	r1, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff fe86 	bl	80026f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029e8:	2301      	movs	r3, #1
 80029ea:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029ec:	2301      	movs	r3, #1
 80029ee:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a14:	2301      	movs	r3, #1
 8002a16:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a1c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a22:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a28:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a38:	f107 0308 	add.w	r3, r7, #8
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ff08 	bl	8002854 <ETH_SetDMAConfig>
}
 8002a44:	bf00      	nop
 8002a46:	3798      	adds	r7, #152	; 0x98
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3305      	adds	r3, #5
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	3204      	adds	r2, #4
 8002a64:	7812      	ldrb	r2, [r2, #0]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <ETH_MACAddressConfig+0x68>)
 8002a6e:	4413      	add	r3, r2
 8002a70:	461a      	mov	r2, r3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3303      	adds	r3, #3
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	061a      	lsls	r2, r3, #24
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3302      	adds	r3, #2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	4313      	orrs	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	7812      	ldrb	r2, [r2, #0]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <ETH_MACAddressConfig+0x6c>)
 8002a9e:	4413      	add	r3, r2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	6013      	str	r3, [r2, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40028040 	.word	0x40028040
 8002ab8:	40028044 	.word	0x40028044

08002abc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e03e      	b.n	8002b48 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68d9      	ldr	r1, [r3, #12]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	3206      	adds	r2, #6
 8002afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d80c      	bhi.n	8002b2c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68d9      	ldr	r1, [r3, #12]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	440b      	add	r3, r1
 8002b24:	461a      	mov	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	e004      	b.n	8002b36 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3301      	adds	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d9bd      	bls.n	8002aca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b60:	611a      	str	r2, [r3, #16]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e046      	b.n	8002c0a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6919      	ldr	r1, [r3, #16]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002bb8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002bc0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	3212      	adds	r2, #18
 8002bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d80c      	bhi.n	8002bfa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6919      	ldr	r1, [r3, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
 8002bf8:	e004      	b.n	8002c04 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3301      	adds	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d9b5      	bls.n	8002b7c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3a:	60da      	str	r2, [r3, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b08d      	sub	sp, #52	; 0x34
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3318      	adds	r3, #24
 8002c58:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c72:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c8a:	d007      	beq.n	8002c9c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	3304      	adds	r3, #4
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e0ff      	b.n	8002ea0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	4b7d      	ldr	r3, [pc, #500]	; (8002eac <ETH_Prepare_Tx_Descriptors+0x264>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	6852      	ldr	r2, [r2, #4]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d22:	f3bf 8f5f 	dmb	sy
}
 8002d26:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d34:	e082      	b.n	8002e3c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e005      	b.n	8002d62 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	3301      	adds	r3, #1
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d902      	bls.n	8002d74 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	3b04      	subs	r3, #4
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d7c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d96:	d007      	beq.n	8002da8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d029      	beq.n	8002dfc <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dba:	e019      	b.n	8002df0 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002dbc:	f3bf 8f5f 	dmb	sy
}
 8002dc0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d902      	bls.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x198>
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	3b04      	subs	r3, #4
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	3301      	adds	r3, #1
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d3e1      	bcc.n	8002dbc <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e051      	b.n	8002ea0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	3301      	adds	r3, #1
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <ETH_Prepare_Tx_Descriptors+0x264>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	6852      	ldr	r2, [r2, #4]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	3301      	adds	r3, #1
 8002e28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e2a:	f3bf 8f5f 	dmb	sy
}
 8002e2e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f47f af78 	bne.w	8002d36 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d006      	beq.n	8002e5a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	e005      	b.n	8002e66 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e76:	6979      	ldr	r1, [r7, #20]
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e86:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e88:	b672      	cpsid	i
}
 8002e8a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4413      	add	r3, r2
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002e9a:	b662      	cpsie	i
}
 8002e9c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3734      	adds	r7, #52	; 0x34
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	ffffe000 	.word	0xffffe000

08002eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	e175      	b.n	80031bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	f040 8164 	bne.w	80031b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d005      	beq.n	8002f06 <HAL_GPIO_Init+0x56>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d130      	bne.n	8002f68 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	2203      	movs	r2, #3
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 0201 	and.w	r2, r3, #1
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d017      	beq.n	8002fa4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	2203      	movs	r2, #3
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d123      	bne.n	8002ff8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	08da      	lsrs	r2, r3, #3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3208      	adds	r2, #8
 8002fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	220f      	movs	r2, #15
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	08da      	lsrs	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3208      	adds	r2, #8
 8002ff2:	69b9      	ldr	r1, [r7, #24]
 8002ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2203      	movs	r2, #3
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0203 	and.w	r2, r3, #3
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80be 	beq.w	80031b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303a:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_GPIO_Init+0x324>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	4a65      	ldr	r2, [pc, #404]	; (80031d4 <HAL_GPIO_Init+0x324>)
 8003040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003044:	6453      	str	r3, [r2, #68]	; 0x44
 8003046:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <HAL_GPIO_Init+0x324>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003052:	4a61      	ldr	r2, [pc, #388]	; (80031d8 <HAL_GPIO_Init+0x328>)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	089b      	lsrs	r3, r3, #2
 8003058:	3302      	adds	r3, #2
 800305a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	220f      	movs	r2, #15
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a58      	ldr	r2, [pc, #352]	; (80031dc <HAL_GPIO_Init+0x32c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d037      	beq.n	80030ee <HAL_GPIO_Init+0x23e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a57      	ldr	r2, [pc, #348]	; (80031e0 <HAL_GPIO_Init+0x330>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d031      	beq.n	80030ea <HAL_GPIO_Init+0x23a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a56      	ldr	r2, [pc, #344]	; (80031e4 <HAL_GPIO_Init+0x334>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d02b      	beq.n	80030e6 <HAL_GPIO_Init+0x236>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a55      	ldr	r2, [pc, #340]	; (80031e8 <HAL_GPIO_Init+0x338>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d025      	beq.n	80030e2 <HAL_GPIO_Init+0x232>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a54      	ldr	r2, [pc, #336]	; (80031ec <HAL_GPIO_Init+0x33c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01f      	beq.n	80030de <HAL_GPIO_Init+0x22e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a53      	ldr	r2, [pc, #332]	; (80031f0 <HAL_GPIO_Init+0x340>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d019      	beq.n	80030da <HAL_GPIO_Init+0x22a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a52      	ldr	r2, [pc, #328]	; (80031f4 <HAL_GPIO_Init+0x344>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x226>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a51      	ldr	r2, [pc, #324]	; (80031f8 <HAL_GPIO_Init+0x348>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x222>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a50      	ldr	r2, [pc, #320]	; (80031fc <HAL_GPIO_Init+0x34c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x21e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4f      	ldr	r2, [pc, #316]	; (8003200 <HAL_GPIO_Init+0x350>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x21a>
 80030c6:	2309      	movs	r3, #9
 80030c8:	e012      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030ca:	230a      	movs	r3, #10
 80030cc:	e010      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030ce:	2308      	movs	r3, #8
 80030d0:	e00e      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030d2:	2307      	movs	r3, #7
 80030d4:	e00c      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030d6:	2306      	movs	r3, #6
 80030d8:	e00a      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030da:	2305      	movs	r3, #5
 80030dc:	e008      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030de:	2304      	movs	r3, #4
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030e2:	2303      	movs	r3, #3
 80030e4:	e004      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e002      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030ee:	2300      	movs	r3, #0
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	f002 0203 	and.w	r2, r2, #3
 80030f6:	0092      	lsls	r2, r2, #2
 80030f8:	4093      	lsls	r3, r2
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003100:	4935      	ldr	r1, [pc, #212]	; (80031d8 <HAL_GPIO_Init+0x328>)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <HAL_GPIO_Init+0x354>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003132:	4a34      	ldr	r2, [pc, #208]	; (8003204 <HAL_GPIO_Init+0x354>)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003138:	4b32      	ldr	r3, [pc, #200]	; (8003204 <HAL_GPIO_Init+0x354>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800315c:	4a29      	ldr	r2, [pc, #164]	; (8003204 <HAL_GPIO_Init+0x354>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003162:	4b28      	ldr	r3, [pc, #160]	; (8003204 <HAL_GPIO_Init+0x354>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003186:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <HAL_GPIO_Init+0x354>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800318c:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_GPIO_Init+0x354>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b0:	4a14      	ldr	r2, [pc, #80]	; (8003204 <HAL_GPIO_Init+0x354>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	f67f ae86 	bls.w	8002ed0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40013800 	.word	0x40013800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	40020400 	.word	0x40020400
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020c00 	.word	0x40020c00
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40021400 	.word	0x40021400
 80031f4:	40021800 	.word	0x40021800
 80031f8:	40021c00 	.word	0x40021c00
 80031fc:	40022000 	.word	0x40022000
 8003200:	40022400 	.word	0x40022400
 8003204:	40013c00 	.word	0x40013c00

08003208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
 8003214:	4613      	mov	r3, r2
 8003216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003224:	e003      	b.n	800322e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	041a      	lsls	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	619a      	str	r2, [r3, #24]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800324c:	887a      	ldrh	r2, [r7, #2]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4013      	ands	r3, r2
 8003252:	041a      	lsls	r2, r3, #16
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43d9      	mvns	r1, r3
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	400b      	ands	r3, r1
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	619a      	str	r2, [r3, #24]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800326e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003270:	b08f      	sub	sp, #60	; 0x3c
 8003272:	af0a      	add	r7, sp, #40	; 0x28
 8003274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e116      	b.n	80034ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fe4e 	bl	8000f3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2203      	movs	r2, #3
 80032a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d102      	bne.n	80032ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f002 fad0 	bl	8005864 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	687e      	ldr	r6, [r7, #4]
 80032cc:	466d      	mov	r5, sp
 80032ce:	f106 0410 	add.w	r4, r6, #16
 80032d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032de:	e885 0003 	stmia.w	r5, {r0, r1}
 80032e2:	1d33      	adds	r3, r6, #4
 80032e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032e6:	6838      	ldr	r0, [r7, #0]
 80032e8:	f002 fa64 	bl	80057b4 <USB_CoreInit>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0d7      	b.n	80034ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f002 fabe 	bl	8005886 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
 800330e:	e04a      	b.n	80033a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	333d      	adds	r3, #61	; 0x3d
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	333c      	adds	r3, #60	; 0x3c
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	b298      	uxth	r0, r3
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3344      	adds	r3, #68	; 0x44
 800334c:	4602      	mov	r2, r0
 800334e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	3340      	adds	r3, #64	; 0x40
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	3348      	adds	r3, #72	; 0x48
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	334c      	adds	r3, #76	; 0x4c
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	3354      	adds	r3, #84	; 0x54
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	3301      	adds	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	7bfa      	ldrb	r2, [r7, #15]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d3af      	bcc.n	8003310 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e044      	b.n	8003440 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033f8:	7bfa      	ldrb	r2, [r7, #15]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	3301      	adds	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	d3b5      	bcc.n	80033b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	687e      	ldr	r6, [r7, #4]
 8003452:	466d      	mov	r5, sp
 8003454:	f106 0410 	add.w	r4, r6, #16
 8003458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800345a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800345c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800345e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003460:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003464:	e885 0003 	stmia.w	r5, {r0, r1}
 8003468:	1d33      	adds	r3, r6, #4
 800346a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800346c:	6838      	ldr	r0, [r7, #0]
 800346e:	f002 fa57 	bl	8005920 <USB_DevInit>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e014      	b.n	80034ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	2b01      	cmp	r3, #1
 800349a:	d102      	bne.n	80034a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f80b 	bl	80034b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 fc15 	bl	8005cd6 <USB_DevDisconnect>

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080034b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_PCDEx_ActivateLPM+0x44>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	10000003 	.word	0x10000003

08003500 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a04      	ldr	r2, [pc, #16]	; (800351c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800350a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350e:	6013      	str	r3, [r2, #0]
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40007000 	.word	0x40007000

08003520 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	6413      	str	r3, [r2, #64]	; 0x40
 8003536:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003542:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800354e:	f7fe f8ef 	bl	8001730 <HAL_GetTick>
 8003552:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003554:	e009      	b.n	800356a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003556:	f7fe f8eb 	bl	8001730 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003564:	d901      	bls.n	800356a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e022      	b.n	80035b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003576:	d1ee      	bne.n	8003556 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0f      	ldr	r2, [pc, #60]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800357e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003582:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003584:	f7fe f8d4 	bl	8001730 <HAL_GetTick>
 8003588:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800358a:	e009      	b.n	80035a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800358c:	f7fe f8d0 	bl	8001730 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800359a:	d901      	bls.n	80035a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e007      	b.n	80035b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ac:	d1ee      	bne.n	800358c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40007000 	.word	0x40007000

080035c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e29b      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8087 	beq.w	80036f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e4:	4b96      	ldr	r3, [pc, #600]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d00c      	beq.n	800360a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f0:	4b93      	ldr	r3, [pc, #588]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d112      	bne.n	8003622 <HAL_RCC_OscConfig+0x62>
 80035fc:	4b90      	ldr	r3, [pc, #576]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003608:	d10b      	bne.n	8003622 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360a:	4b8d      	ldr	r3, [pc, #564]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d06c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x130>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d168      	bne.n	80036f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e275      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x7a>
 800362c:	4b84      	ldr	r3, [pc, #528]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a83      	ldr	r2, [pc, #524]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e02e      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x9c>
 8003642:	4b7f      	ldr	r3, [pc, #508]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a7e      	ldr	r2, [pc, #504]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b7c      	ldr	r3, [pc, #496]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a7b      	ldr	r2, [pc, #492]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0xc0>
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a75      	ldr	r2, [pc, #468]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b73      	ldr	r3, [pc, #460]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a72      	ldr	r2, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 8003680:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6e      	ldr	r2, [pc, #440]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b6c      	ldr	r3, [pc, #432]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a6b      	ldr	r2, [pc, #428]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe f846 	bl	8001730 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fe f842 	bl	8001730 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e229      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b61      	ldr	r3, [pc, #388]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xe8>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe f832 	bl	8001730 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fe f82e 	bl	8001730 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e215      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	4b57      	ldr	r3, [pc, #348]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x110>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d069      	beq.n	80037d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fe:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370a:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b08      	cmp	r3, #8
 8003714:	d11c      	bne.n	8003750 <HAL_RCC_OscConfig+0x190>
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d116      	bne.n	8003750 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x17a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1e9      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	493d      	ldr	r1, [pc, #244]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	e040      	b.n	80037d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d023      	beq.n	80037a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003758:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a38      	ldr	r2, [pc, #224]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fd ffe4 	bl	8001730 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376c:	f7fd ffe0 	bl	8001730 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e1c7      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4929      	ldr	r1, [pc, #164]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
 800379e:	e018      	b.n	80037d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a26      	ldr	r2, [pc, #152]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd ffc0 	bl	8001730 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b4:	f7fd ffbc 	bl	8001730 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1a3      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c6:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d038      	beq.n	8003850 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d019      	beq.n	800381a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	4a15      	ldr	r2, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fd ff9d 	bl	8001730 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fd ff99 	bl	8001730 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e180      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800380e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x23a>
 8003818:	e01a      	b.n	8003850 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800381c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381e:	4a08      	ldr	r2, [pc, #32]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7fd ff83 	bl	8001730 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382e:	f7fd ff7f 	bl	8001730 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d903      	bls.n	8003844 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e166      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
 8003840:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	4b92      	ldr	r3, [pc, #584]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ee      	bne.n	800382e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a4 	beq.w	80039a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385e:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	4b89      	ldr	r3, [pc, #548]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	4a88      	ldr	r2, [pc, #544]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	6413      	str	r3, [r2, #64]	; 0x40
 8003876:	4b86      	ldr	r3, [pc, #536]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003886:	4b83      	ldr	r3, [pc, #524]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003892:	4b80      	ldr	r3, [pc, #512]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7f      	ldr	r2, [pc, #508]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fd ff47 	bl	8001730 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fd ff43 	bl	8001730 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b64      	cmp	r3, #100	; 0x64
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e12a      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b8:	4b76      	ldr	r3, [pc, #472]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x31a>
 80038cc:	4b70      	ldr	r3, [pc, #448]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a6f      	ldr	r2, [pc, #444]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6713      	str	r3, [r2, #112]	; 0x70
 80038d8:	e02d      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x33c>
 80038e2:	4b6b      	ldr	r3, [pc, #428]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	4a6a      	ldr	r2, [pc, #424]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	6713      	str	r3, [r2, #112]	; 0x70
 80038ee:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	4a67      	ldr	r2, [pc, #412]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038f4:	f023 0304 	bic.w	r3, r3, #4
 80038f8:	6713      	str	r3, [r2, #112]	; 0x70
 80038fa:	e01c      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b05      	cmp	r3, #5
 8003902:	d10c      	bne.n	800391e <HAL_RCC_OscConfig+0x35e>
 8003904:	4b62      	ldr	r3, [pc, #392]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a61      	ldr	r2, [pc, #388]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a5e      	ldr	r2, [pc, #376]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
 800391c:	e00b      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 800391e:	4b5c      	ldr	r3, [pc, #368]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a5b      	ldr	r2, [pc, #364]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
 800392a:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d015      	beq.n	800396a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fd fef7 	bl	8001730 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fd fef3 	bl	8001730 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0d8      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395c:	4b4c      	ldr	r3, [pc, #304]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ee      	beq.n	8003946 <HAL_RCC_OscConfig+0x386>
 8003968:	e014      	b.n	8003994 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396a:	f7fd fee1 	bl	8001730 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003970:	e00a      	b.n	8003988 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f7fd fedd 	bl	8001730 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003980:	4293      	cmp	r3, r2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e0c2      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ee      	bne.n	8003972 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399a:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80ae 	beq.w	8003b0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b0:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d06d      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d14b      	bne.n	8003a5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c4:	4b32      	ldr	r3, [pc, #200]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a31      	ldr	r2, [pc, #196]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd feae 	bl	8001730 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fd feaa 	bl	8001730 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e091      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69da      	ldr	r2, [r3, #28]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	019b      	lsls	r3, r3, #6
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	071b      	lsls	r3, r3, #28
 8003a22:	491b      	ldr	r1, [pc, #108]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fd fe7c 	bl	8001730 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fd fe78 	bl	8001730 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e05f      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x47c>
 8003a5a:	e057      	b.n	8003b0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fd fe62 	bl	8001730 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fd fe5e 	bl	8001730 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e045      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x4b0>
 8003a8e:	e03d      	b.n	8003b0c <HAL_RCC_OscConfig+0x54c>
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a98:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <HAL_RCC_OscConfig+0x558>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d030      	beq.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d129      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d122      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ace:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d119      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d10f      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800

08003b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0d0      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d910      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 020f 	bic.w	r2, r3, #15
 8003b4a:	4965      	ldr	r1, [pc, #404]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b63      	ldr	r3, [pc, #396]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0b8      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b7c:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a58      	ldr	r2, [pc, #352]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b94:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a52      	ldr	r2, [pc, #328]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b50      	ldr	r3, [pc, #320]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	494d      	ldr	r1, [pc, #308]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d040      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d115      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e073      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06b      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfe:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4936      	ldr	r1, [pc, #216]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fd fd8e 	bl	8001730 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7fd fd8a 	bl	8001730 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e053      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 020c 	and.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1eb      	bne.n	8003c18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c40:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d210      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 020f 	bic.w	r2, r3, #15
 8003c56:	4922      	ldr	r1, [pc, #136]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e032      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c7c:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4916      	ldr	r1, [pc, #88]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	490e      	ldr	r1, [pc, #56]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cae:	f000 f821 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	490a      	ldr	r1, [pc, #40]	; (8003ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8003cc0:	5ccb      	ldrb	r3, [r1, r3]
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	4a09      	ldr	r2, [pc, #36]	; (8003cec <HAL_RCC_ClockConfig+0x1d0>)
 8003cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x1d4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd f9ae 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023c00 	.word	0x40023c00
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	080201dc 	.word	0x080201dc
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	20000004 	.word	0x20000004

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf8:	b094      	sub	sp, #80	; 0x50
 8003cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8003d00:	2300      	movs	r3, #0
 8003d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d04:	2300      	movs	r3, #0
 8003d06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d0c:	4b79      	ldr	r3, [pc, #484]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d00d      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x40>
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	f200 80e1 	bhi.w	8003ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x34>
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d26:	e0db      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b73      	ldr	r3, [pc, #460]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d2c:	e0db      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d2e:	4b73      	ldr	r3, [pc, #460]	; (8003efc <HAL_RCC_GetSysClockFreq+0x208>)
 8003d30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d32:	e0d8      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d34:	4b6f      	ldr	r3, [pc, #444]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d3c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d063      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4a:	4b6a      	ldr	r3, [pc, #424]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	2200      	movs	r2, #0
 8003d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5e:	2300      	movs	r3, #0
 8003d60:	637b      	str	r3, [r7, #52]	; 0x34
 8003d62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	f04f 0000 	mov.w	r0, #0
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	0159      	lsls	r1, r3, #5
 8003d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d78:	0150      	lsls	r0, r2, #5
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4621      	mov	r1, r4
 8003d80:	1a51      	subs	r1, r2, r1
 8003d82:	6139      	str	r1, [r7, #16]
 8003d84:	4629      	mov	r1, r5
 8003d86:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d98:	4659      	mov	r1, fp
 8003d9a:	018b      	lsls	r3, r1, #6
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003da2:	4651      	mov	r1, sl
 8003da4:	018a      	lsls	r2, r1, #6
 8003da6:	4651      	mov	r1, sl
 8003da8:	ebb2 0801 	subs.w	r8, r2, r1
 8003dac:	4659      	mov	r1, fp
 8003dae:	eb63 0901 	sbc.w	r9, r3, r1
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dc6:	4690      	mov	r8, r2
 8003dc8:	4699      	mov	r9, r3
 8003dca:	4623      	mov	r3, r4
 8003dcc:	eb18 0303 	adds.w	r3, r8, r3
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	462b      	mov	r3, r5
 8003dd4:	eb49 0303 	adc.w	r3, r9, r3
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003de6:	4629      	mov	r1, r5
 8003de8:	024b      	lsls	r3, r1, #9
 8003dea:	4621      	mov	r1, r4
 8003dec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003df0:	4621      	mov	r1, r4
 8003df2:	024a      	lsls	r2, r1, #9
 8003df4:	4610      	mov	r0, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e04:	f7fc fc30 	bl	8000668 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e10:	e058      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e12:	4b38      	ldr	r3, [pc, #224]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e22:	623b      	str	r3, [r7, #32]
 8003e24:	2300      	movs	r3, #0
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
 8003e28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	f04f 0000 	mov.w	r0, #0
 8003e34:	f04f 0100 	mov.w	r1, #0
 8003e38:	0159      	lsls	r1, r3, #5
 8003e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e3e:	0150      	lsls	r0, r2, #5
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4641      	mov	r1, r8
 8003e46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e64:	ebb2 040a 	subs.w	r4, r2, sl
 8003e68:	eb63 050b 	sbc.w	r5, r3, fp
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	00eb      	lsls	r3, r5, #3
 8003e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e7a:	00e2      	lsls	r2, r4, #3
 8003e7c:	4614      	mov	r4, r2
 8003e7e:	461d      	mov	r5, r3
 8003e80:	4643      	mov	r3, r8
 8003e82:	18e3      	adds	r3, r4, r3
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	464b      	mov	r3, r9
 8003e88:	eb45 0303 	adc.w	r3, r5, r3
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	028b      	lsls	r3, r1, #10
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	028a      	lsls	r2, r1, #10
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	61fa      	str	r2, [r7, #28]
 8003eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb8:	f7fc fbd6 	bl	8000668 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ede:	e002      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3750      	adds	r7, #80	; 0x50
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	00f42400 	.word	0x00f42400
 8003efc:	007a1200 	.word	0x007a1200

08003f00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f06:	681b      	ldr	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000000 	.word	0x20000000

08003f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f1c:	f7ff fff0 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	0a9b      	lsrs	r3, r3, #10
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4903      	ldr	r1, [pc, #12]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	080201ec 	.word	0x080201ec

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f44:	f7ff ffdc 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0b5b      	lsrs	r3, r3, #13
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4903      	ldr	r1, [pc, #12]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40023800 	.word	0x40023800
 8003f64:	080201ec 	.word	0x080201ec

08003f68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	220f      	movs	r2, #15
 8003f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0203 	and.w	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f84:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	08db      	lsrs	r3, r3, #3
 8003fa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_RCC_GetClockConfig+0x60>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 020f 	and.w	r2, r3, #15
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	601a      	str	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40023c00 	.word	0x40023c00

08003fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d012      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ff4:	4b69      	ldr	r3, [pc, #420]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a68      	ldr	r2, [pc, #416]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ffe:	6093      	str	r3, [r2, #8]
 8004000:	4b66      	ldr	r3, [pc, #408]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004008:	4964      	ldr	r1, [pc, #400]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004016:	2301      	movs	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d017      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004026:	4b5d      	ldr	r3, [pc, #372]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800402c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004034:	4959      	ldr	r1, [pc, #356]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004044:	d101      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004046:	2301      	movs	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004052:	2301      	movs	r3, #1
 8004054:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d017      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004062:	4b4e      	ldr	r3, [pc, #312]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004068:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	494a      	ldr	r1, [pc, #296]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004080:	d101      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004082:	2301      	movs	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800408e:	2301      	movs	r3, #1
 8004090:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800409e:	2301      	movs	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 808b 	beq.w	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040b0:	4b3a      	ldr	r3, [pc, #232]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	4a39      	ldr	r2, [pc, #228]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ba:	6413      	str	r3, [r2, #64]	; 0x40
 80040bc:	4b37      	ldr	r3, [pc, #220]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040c8:	4b35      	ldr	r3, [pc, #212]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a34      	ldr	r2, [pc, #208]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d4:	f7fd fb2c 	bl	8001730 <HAL_GetTick>
 80040d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040dc:	f7fd fb28 	bl	8001730 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e38f      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040ee:	4b2c      	ldr	r3, [pc, #176]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040fa:	4b28      	ldr	r3, [pc, #160]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004102:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d035      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	429a      	cmp	r2, r3
 8004116:	d02e      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004118:	4b20      	ldr	r3, [pc, #128]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004120:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004122:	4b1e      	ldr	r3, [pc, #120]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	4a1d      	ldr	r2, [pc, #116]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800412e:	4b1b      	ldr	r3, [pc, #108]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	4a1a      	ldr	r2, [pc, #104]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004138:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800413a:	4a18      	ldr	r2, [pc, #96]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004140:	4b16      	ldr	r3, [pc, #88]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d114      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fd faf0 	bl	8001730 <HAL_GetTick>
 8004150:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004152:	e00a      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004154:	f7fd faec 	bl	8001730 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e351      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ee      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004182:	d111      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004192:	400b      	ands	r3, r1
 8004194:	4901      	ldr	r1, [pc, #4]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
 800419a:	e00b      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800419c:	40023800 	.word	0x40023800
 80041a0:	40007000 	.word	0x40007000
 80041a4:	0ffffcff 	.word	0x0ffffcff
 80041a8:	4bac      	ldr	r3, [pc, #688]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4aab      	ldr	r2, [pc, #684]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041b2:	6093      	str	r3, [r2, #8]
 80041b4:	4ba9      	ldr	r3, [pc, #676]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c0:	49a6      	ldr	r1, [pc, #664]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d010      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041d2:	4ba2      	ldr	r3, [pc, #648]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d8:	4aa0      	ldr	r2, [pc, #640]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80041e2:	4b9e      	ldr	r3, [pc, #632]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	499b      	ldr	r1, [pc, #620]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004200:	4b96      	ldr	r3, [pc, #600]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420e:	4993      	ldr	r1, [pc, #588]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004222:	4b8e      	ldr	r3, [pc, #568]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004230:	498a      	ldr	r1, [pc, #552]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004244:	4b85      	ldr	r3, [pc, #532]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004252:	4982      	ldr	r1, [pc, #520]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004266:	4b7d      	ldr	r3, [pc, #500]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4979      	ldr	r1, [pc, #484]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004288:	4b74      	ldr	r3, [pc, #464]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f023 0203 	bic.w	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	4971      	ldr	r1, [pc, #452]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042aa:	4b6c      	ldr	r3, [pc, #432]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f023 020c 	bic.w	r2, r3, #12
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b8:	4968      	ldr	r1, [pc, #416]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042cc:	4b63      	ldr	r3, [pc, #396]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042da:	4960      	ldr	r1, [pc, #384]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042ee:	4b5b      	ldr	r3, [pc, #364]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fc:	4957      	ldr	r1, [pc, #348]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004310:	4b52      	ldr	r3, [pc, #328]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	494f      	ldr	r1, [pc, #316]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004332:	4b4a      	ldr	r3, [pc, #296]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004338:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	4946      	ldr	r1, [pc, #280]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004354:	4b41      	ldr	r3, [pc, #260]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004362:	493e      	ldr	r1, [pc, #248]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004376:	4b39      	ldr	r3, [pc, #228]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004384:	4935      	ldr	r1, [pc, #212]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004398:	4b30      	ldr	r3, [pc, #192]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a6:	492d      	ldr	r1, [pc, #180]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d011      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043ba:	4b28      	ldr	r3, [pc, #160]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c8:	4924      	ldr	r1, [pc, #144]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d8:	d101      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043da:	2301      	movs	r3, #1
 80043dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043ea:	2301      	movs	r3, #1
 80043ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043fa:	4b18      	ldr	r3, [pc, #96]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004408:	4914      	ldr	r1, [pc, #80]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00b      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800442c:	490b      	ldr	r1, [pc, #44]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00f      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004450:	4902      	ldr	r1, [pc, #8]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004458:	e002      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800446c:	4b8a      	ldr	r3, [pc, #552]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800446e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004472:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447c:	4986      	ldr	r1, [pc, #536]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004490:	4b81      	ldr	r3, [pc, #516]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004496:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a0:	497d      	ldr	r1, [pc, #500]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d006      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80d6 	beq.w	8004668 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044bc:	4b76      	ldr	r3, [pc, #472]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a75      	ldr	r2, [pc, #468]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c8:	f7fd f932 	bl	8001730 <HAL_GetTick>
 80044cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044d0:	f7fd f92e 	bl	8001730 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	; 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e195      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044e2:	4b6d      	ldr	r3, [pc, #436]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d021      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d11d      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004502:	4b65      	ldr	r3, [pc, #404]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004510:	4b61      	ldr	r3, [pc, #388]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004516:	0e1b      	lsrs	r3, r3, #24
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	019a      	lsls	r2, r3, #6
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	041b      	lsls	r3, r3, #16
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	061b      	lsls	r3, r3, #24
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	071b      	lsls	r3, r3, #28
 8004536:	4958      	ldr	r1, [pc, #352]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800455c:	2b00      	cmp	r3, #0
 800455e:	d02e      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004568:	d129      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800456a:	4b4b      	ldr	r3, [pc, #300]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004578:	4b47      	ldr	r3, [pc, #284]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457e:	0f1b      	lsrs	r3, r3, #28
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	019a      	lsls	r2, r3, #6
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	071b      	lsls	r3, r3, #28
 800459e:	493e      	ldr	r1, [pc, #248]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045a6:	4b3c      	ldr	r3, [pc, #240]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ac:	f023 021f 	bic.w	r2, r3, #31
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	3b01      	subs	r3, #1
 80045b6:	4938      	ldr	r1, [pc, #224]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01d      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045ca:	4b33      	ldr	r3, [pc, #204]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d0:	0e1b      	lsrs	r3, r3, #24
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045d8:	4b2f      	ldr	r3, [pc, #188]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045de:	0f1b      	lsrs	r3, r3, #28
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	019a      	lsls	r2, r3, #6
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	041b      	lsls	r3, r3, #16
 80045f2:	431a      	orrs	r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	431a      	orrs	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	071b      	lsls	r3, r3, #28
 80045fe:	4926      	ldr	r1, [pc, #152]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d011      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	019a      	lsls	r2, r3, #6
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	071b      	lsls	r3, r3, #28
 800462e:	491a      	ldr	r1, [pc, #104]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004636:	4b18      	ldr	r3, [pc, #96]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a17      	ldr	r2, [pc, #92]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800463c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004642:	f7fd f875 	bl	8001730 <HAL_GetTick>
 8004646:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800464a:	f7fd f871 	bl	8001730 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b64      	cmp	r3, #100	; 0x64
 8004656:	d901      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e0d8      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800465c:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b01      	cmp	r3, #1
 800466c:	f040 80ce 	bne.w	800480c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a08      	ldr	r2, [pc, #32]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467c:	f7fd f858 	bl	8001730 <HAL_GetTick>
 8004680:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004682:	e00b      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004684:	f7fd f854 	bl	8001730 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	; 0x64
 8004690:	d904      	bls.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0bb      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800469c:	4b5e      	ldr	r3, [pc, #376]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a8:	d0ec      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d02e      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d12a      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046d2:	4b51      	ldr	r3, [pc, #324]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046e0:	4b4d      	ldr	r3, [pc, #308]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	0f1b      	lsrs	r3, r3, #28
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	019a      	lsls	r2, r3, #6
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	061b      	lsls	r3, r3, #24
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	071b      	lsls	r3, r3, #28
 8004706:	4944      	ldr	r1, [pc, #272]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800470e:	4b42      	ldr	r3, [pc, #264]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004714:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	3b01      	subs	r3, #1
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	493d      	ldr	r1, [pc, #244]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d022      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473c:	d11d      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800473e:	4b36      	ldr	r3, [pc, #216]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004744:	0e1b      	lsrs	r3, r3, #24
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	0f1b      	lsrs	r3, r3, #28
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	019a      	lsls	r2, r3, #6
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	431a      	orrs	r2, r3
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	061b      	lsls	r3, r3, #24
 800476c:	431a      	orrs	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	071b      	lsls	r3, r3, #28
 8004772:	4929      	ldr	r1, [pc, #164]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d028      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	0e1b      	lsrs	r3, r3, #24
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004794:	4b20      	ldr	r3, [pc, #128]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479a:	0c1b      	lsrs	r3, r3, #16
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	019a      	lsls	r2, r3, #6
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	041b      	lsls	r3, r3, #16
 80047ac:	431a      	orrs	r2, r3
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	061b      	lsls	r3, r3, #24
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	071b      	lsls	r3, r3, #28
 80047ba:	4917      	ldr	r1, [pc, #92]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4911      	ldr	r1, [pc, #68]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e4:	f7fc ffa4 	bl	8001730 <HAL_GetTick>
 80047e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047ec:	f7fc ffa0 	bl	8001730 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	; 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e007      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800480a:	d1ef      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800

0800481c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e049      	b.n	80048c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f841 	bl	80048ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f000 fa00 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d001      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e054      	b.n	80049a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d022      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004922:	d01d      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d018      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <HAL_TIM_Base_Start_IT+0xdc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1b      	ldr	r2, [pc, #108]	; (80049c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d115      	bne.n	800498c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	4b19      	ldr	r3, [pc, #100]	; (80049cc <HAL_TIM_Base_Start_IT+0xec>)
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b06      	cmp	r3, #6
 8004970:	d015      	beq.n	800499e <HAL_TIM_Base_Start_IT+0xbe>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d011      	beq.n	800499e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	e008      	b.n	800499e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e000      	b.n	80049a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40010400 	.word	0x40010400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40001800 	.word	0x40001800
 80049cc:	00010007 	.word	0x00010007

080049d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0202 	mvn.w	r2, #2
 80049fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f905 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f8f7 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f908 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0204 	mvn.w	r2, #4
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8db 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8cd 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f8de 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0208 	mvn.w	r2, #8
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8b1 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8a3 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8b4 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b10      	cmp	r3, #16
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0210 	mvn.w	r2, #16
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2208      	movs	r2, #8
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f887 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f879 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f88a 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10e      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d107      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0201 	mvn.w	r2, #1
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fc f954 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5e:	2b80      	cmp	r3, #128	; 0x80
 8004b60:	d10e      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b80      	cmp	r3, #128	; 0x80
 8004b6e:	d107      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f91a 	bl	8004db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8e:	d10e      	bne.n	8004bae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d107      	bne.n	8004bae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f90d 	bl	8004dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d10e      	bne.n	8004bda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d107      	bne.n	8004bda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f838 	bl	8004c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d10e      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0220 	mvn.w	r2, #32
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f8cd 	bl	8004da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a40      	ldr	r2, [pc, #256]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3d      	ldr	r2, [pc, #244]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3c      	ldr	r2, [pc, #240]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3b      	ldr	r2, [pc, #236]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3a      	ldr	r2, [pc, #232]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d027      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2c      	ldr	r2, [pc, #176]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d023      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a29      	ldr	r2, [pc, #164]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d017      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <TIM_Base_SetConfig+0x128>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <TIM_Base_SetConfig+0x12c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <TIM_Base_SetConfig+0x130>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <TIM_Base_SetConfig+0x134>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a24      	ldr	r2, [pc, #144]	; (8004d98 <TIM_Base_SetConfig+0x138>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <TIM_Base_SetConfig+0x13c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	615a      	str	r2, [r3, #20]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40001800 	.word	0x40001800
 8004d98:	40001c00 	.word	0x40001c00
 8004d9c:	40002000 	.word	0x40002000

08004da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e040      	b.n	8004e70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc f83c 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	; 0x24
 8004e08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8b0 	bl	8004f80 <UART_SetConfig>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e022      	b.n	8004e70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fb08 	bl	8005448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fb8f 	bl	800558c <UART_CheckIdleState>
 8004e6e:	4603      	mov	r3, r0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	4613      	mov	r3, r2
 8004e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d171      	bne.n	8004f74 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_UART_Transmit+0x24>
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e06a      	b.n	8004f76 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2221      	movs	r2, #33	; 0x21
 8004eac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eae:	f7fc fc3f 	bl	8001730 <HAL_GetTick>
 8004eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	88fa      	ldrh	r2, [r7, #6]
 8004eb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ecc:	d108      	bne.n	8004ee0 <HAL_UART_Transmit+0x68>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d104      	bne.n	8004ee0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e003      	b.n	8004ee8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ee8:	e02c      	b.n	8004f44 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2180      	movs	r1, #128	; 0x80
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fb96 	bl	8005626 <UART_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e038      	b.n	8004f76 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	3302      	adds	r3, #2
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	e007      	b.n	8004f32 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1cc      	bne.n	8004eea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2200      	movs	r2, #0
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fb63 	bl	8005626 <UART_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e005      	b.n	8004f76 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e000      	b.n	8004f76 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004f74:	2302      	movs	r3, #2
  }
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4ba6      	ldr	r3, [pc, #664]	; (8005244 <UART_SetConfig+0x2c4>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	6979      	ldr	r1, [r7, #20]
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a94      	ldr	r2, [pc, #592]	; (8005248 <UART_SetConfig+0x2c8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d120      	bne.n	800503e <UART_SetConfig+0xbe>
 8004ffc:	4b93      	ldr	r3, [pc, #588]	; (800524c <UART_SetConfig+0x2cc>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b03      	cmp	r3, #3
 8005008:	d816      	bhi.n	8005038 <UART_SetConfig+0xb8>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <UART_SetConfig+0x90>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005021 	.word	0x08005021
 8005014:	0800502d 	.word	0x0800502d
 8005018:	08005027 	.word	0x08005027
 800501c:	08005033 	.word	0x08005033
 8005020:	2301      	movs	r3, #1
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e150      	b.n	80052c8 <UART_SetConfig+0x348>
 8005026:	2302      	movs	r3, #2
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e14d      	b.n	80052c8 <UART_SetConfig+0x348>
 800502c:	2304      	movs	r3, #4
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e14a      	b.n	80052c8 <UART_SetConfig+0x348>
 8005032:	2308      	movs	r3, #8
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e147      	b.n	80052c8 <UART_SetConfig+0x348>
 8005038:	2310      	movs	r3, #16
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e144      	b.n	80052c8 <UART_SetConfig+0x348>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a83      	ldr	r2, [pc, #524]	; (8005250 <UART_SetConfig+0x2d0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d132      	bne.n	80050ae <UART_SetConfig+0x12e>
 8005048:	4b80      	ldr	r3, [pc, #512]	; (800524c <UART_SetConfig+0x2cc>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b0c      	cmp	r3, #12
 8005054:	d828      	bhi.n	80050a8 <UART_SetConfig+0x128>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <UART_SetConfig+0xdc>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	08005091 	.word	0x08005091
 8005060:	080050a9 	.word	0x080050a9
 8005064:	080050a9 	.word	0x080050a9
 8005068:	080050a9 	.word	0x080050a9
 800506c:	0800509d 	.word	0x0800509d
 8005070:	080050a9 	.word	0x080050a9
 8005074:	080050a9 	.word	0x080050a9
 8005078:	080050a9 	.word	0x080050a9
 800507c:	08005097 	.word	0x08005097
 8005080:	080050a9 	.word	0x080050a9
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050a9 	.word	0x080050a9
 800508c:	080050a3 	.word	0x080050a3
 8005090:	2300      	movs	r3, #0
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	e118      	b.n	80052c8 <UART_SetConfig+0x348>
 8005096:	2302      	movs	r3, #2
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e115      	b.n	80052c8 <UART_SetConfig+0x348>
 800509c:	2304      	movs	r3, #4
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e112      	b.n	80052c8 <UART_SetConfig+0x348>
 80050a2:	2308      	movs	r3, #8
 80050a4:	77fb      	strb	r3, [r7, #31]
 80050a6:	e10f      	b.n	80052c8 <UART_SetConfig+0x348>
 80050a8:	2310      	movs	r3, #16
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e10c      	b.n	80052c8 <UART_SetConfig+0x348>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a68      	ldr	r2, [pc, #416]	; (8005254 <UART_SetConfig+0x2d4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d120      	bne.n	80050fa <UART_SetConfig+0x17a>
 80050b8:	4b64      	ldr	r3, [pc, #400]	; (800524c <UART_SetConfig+0x2cc>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050c2:	2b30      	cmp	r3, #48	; 0x30
 80050c4:	d013      	beq.n	80050ee <UART_SetConfig+0x16e>
 80050c6:	2b30      	cmp	r3, #48	; 0x30
 80050c8:	d814      	bhi.n	80050f4 <UART_SetConfig+0x174>
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d009      	beq.n	80050e2 <UART_SetConfig+0x162>
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d810      	bhi.n	80050f4 <UART_SetConfig+0x174>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <UART_SetConfig+0x15c>
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d006      	beq.n	80050e8 <UART_SetConfig+0x168>
 80050da:	e00b      	b.n	80050f4 <UART_SetConfig+0x174>
 80050dc:	2300      	movs	r3, #0
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e0f2      	b.n	80052c8 <UART_SetConfig+0x348>
 80050e2:	2302      	movs	r3, #2
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e0ef      	b.n	80052c8 <UART_SetConfig+0x348>
 80050e8:	2304      	movs	r3, #4
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e0ec      	b.n	80052c8 <UART_SetConfig+0x348>
 80050ee:	2308      	movs	r3, #8
 80050f0:	77fb      	strb	r3, [r7, #31]
 80050f2:	e0e9      	b.n	80052c8 <UART_SetConfig+0x348>
 80050f4:	2310      	movs	r3, #16
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e0e6      	b.n	80052c8 <UART_SetConfig+0x348>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a56      	ldr	r2, [pc, #344]	; (8005258 <UART_SetConfig+0x2d8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d120      	bne.n	8005146 <UART_SetConfig+0x1c6>
 8005104:	4b51      	ldr	r3, [pc, #324]	; (800524c <UART_SetConfig+0x2cc>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800510e:	2bc0      	cmp	r3, #192	; 0xc0
 8005110:	d013      	beq.n	800513a <UART_SetConfig+0x1ba>
 8005112:	2bc0      	cmp	r3, #192	; 0xc0
 8005114:	d814      	bhi.n	8005140 <UART_SetConfig+0x1c0>
 8005116:	2b80      	cmp	r3, #128	; 0x80
 8005118:	d009      	beq.n	800512e <UART_SetConfig+0x1ae>
 800511a:	2b80      	cmp	r3, #128	; 0x80
 800511c:	d810      	bhi.n	8005140 <UART_SetConfig+0x1c0>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <UART_SetConfig+0x1a8>
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d006      	beq.n	8005134 <UART_SetConfig+0x1b4>
 8005126:	e00b      	b.n	8005140 <UART_SetConfig+0x1c0>
 8005128:	2300      	movs	r3, #0
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e0cc      	b.n	80052c8 <UART_SetConfig+0x348>
 800512e:	2302      	movs	r3, #2
 8005130:	77fb      	strb	r3, [r7, #31]
 8005132:	e0c9      	b.n	80052c8 <UART_SetConfig+0x348>
 8005134:	2304      	movs	r3, #4
 8005136:	77fb      	strb	r3, [r7, #31]
 8005138:	e0c6      	b.n	80052c8 <UART_SetConfig+0x348>
 800513a:	2308      	movs	r3, #8
 800513c:	77fb      	strb	r3, [r7, #31]
 800513e:	e0c3      	b.n	80052c8 <UART_SetConfig+0x348>
 8005140:	2310      	movs	r3, #16
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e0c0      	b.n	80052c8 <UART_SetConfig+0x348>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a44      	ldr	r2, [pc, #272]	; (800525c <UART_SetConfig+0x2dc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d125      	bne.n	800519c <UART_SetConfig+0x21c>
 8005150:	4b3e      	ldr	r3, [pc, #248]	; (800524c <UART_SetConfig+0x2cc>)
 8005152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800515e:	d017      	beq.n	8005190 <UART_SetConfig+0x210>
 8005160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005164:	d817      	bhi.n	8005196 <UART_SetConfig+0x216>
 8005166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800516a:	d00b      	beq.n	8005184 <UART_SetConfig+0x204>
 800516c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005170:	d811      	bhi.n	8005196 <UART_SetConfig+0x216>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <UART_SetConfig+0x1fe>
 8005176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517a:	d006      	beq.n	800518a <UART_SetConfig+0x20a>
 800517c:	e00b      	b.n	8005196 <UART_SetConfig+0x216>
 800517e:	2300      	movs	r3, #0
 8005180:	77fb      	strb	r3, [r7, #31]
 8005182:	e0a1      	b.n	80052c8 <UART_SetConfig+0x348>
 8005184:	2302      	movs	r3, #2
 8005186:	77fb      	strb	r3, [r7, #31]
 8005188:	e09e      	b.n	80052c8 <UART_SetConfig+0x348>
 800518a:	2304      	movs	r3, #4
 800518c:	77fb      	strb	r3, [r7, #31]
 800518e:	e09b      	b.n	80052c8 <UART_SetConfig+0x348>
 8005190:	2308      	movs	r3, #8
 8005192:	77fb      	strb	r3, [r7, #31]
 8005194:	e098      	b.n	80052c8 <UART_SetConfig+0x348>
 8005196:	2310      	movs	r3, #16
 8005198:	77fb      	strb	r3, [r7, #31]
 800519a:	e095      	b.n	80052c8 <UART_SetConfig+0x348>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a2f      	ldr	r2, [pc, #188]	; (8005260 <UART_SetConfig+0x2e0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d125      	bne.n	80051f2 <UART_SetConfig+0x272>
 80051a6:	4b29      	ldr	r3, [pc, #164]	; (800524c <UART_SetConfig+0x2cc>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051b4:	d017      	beq.n	80051e6 <UART_SetConfig+0x266>
 80051b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ba:	d817      	bhi.n	80051ec <UART_SetConfig+0x26c>
 80051bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c0:	d00b      	beq.n	80051da <UART_SetConfig+0x25a>
 80051c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c6:	d811      	bhi.n	80051ec <UART_SetConfig+0x26c>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <UART_SetConfig+0x254>
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d0:	d006      	beq.n	80051e0 <UART_SetConfig+0x260>
 80051d2:	e00b      	b.n	80051ec <UART_SetConfig+0x26c>
 80051d4:	2301      	movs	r3, #1
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e076      	b.n	80052c8 <UART_SetConfig+0x348>
 80051da:	2302      	movs	r3, #2
 80051dc:	77fb      	strb	r3, [r7, #31]
 80051de:	e073      	b.n	80052c8 <UART_SetConfig+0x348>
 80051e0:	2304      	movs	r3, #4
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e070      	b.n	80052c8 <UART_SetConfig+0x348>
 80051e6:	2308      	movs	r3, #8
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e06d      	b.n	80052c8 <UART_SetConfig+0x348>
 80051ec:	2310      	movs	r3, #16
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e06a      	b.n	80052c8 <UART_SetConfig+0x348>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <UART_SetConfig+0x2e4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d138      	bne.n	800526e <UART_SetConfig+0x2ee>
 80051fc:	4b13      	ldr	r3, [pc, #76]	; (800524c <UART_SetConfig+0x2cc>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005206:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800520a:	d017      	beq.n	800523c <UART_SetConfig+0x2bc>
 800520c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005210:	d82a      	bhi.n	8005268 <UART_SetConfig+0x2e8>
 8005212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005216:	d00b      	beq.n	8005230 <UART_SetConfig+0x2b0>
 8005218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521c:	d824      	bhi.n	8005268 <UART_SetConfig+0x2e8>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <UART_SetConfig+0x2aa>
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005226:	d006      	beq.n	8005236 <UART_SetConfig+0x2b6>
 8005228:	e01e      	b.n	8005268 <UART_SetConfig+0x2e8>
 800522a:	2300      	movs	r3, #0
 800522c:	77fb      	strb	r3, [r7, #31]
 800522e:	e04b      	b.n	80052c8 <UART_SetConfig+0x348>
 8005230:	2302      	movs	r3, #2
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e048      	b.n	80052c8 <UART_SetConfig+0x348>
 8005236:	2304      	movs	r3, #4
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	e045      	b.n	80052c8 <UART_SetConfig+0x348>
 800523c:	2308      	movs	r3, #8
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e042      	b.n	80052c8 <UART_SetConfig+0x348>
 8005242:	bf00      	nop
 8005244:	efff69f3 	.word	0xefff69f3
 8005248:	40011000 	.word	0x40011000
 800524c:	40023800 	.word	0x40023800
 8005250:	40004400 	.word	0x40004400
 8005254:	40004800 	.word	0x40004800
 8005258:	40004c00 	.word	0x40004c00
 800525c:	40005000 	.word	0x40005000
 8005260:	40011400 	.word	0x40011400
 8005264:	40007800 	.word	0x40007800
 8005268:	2310      	movs	r3, #16
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e02c      	b.n	80052c8 <UART_SetConfig+0x348>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a72      	ldr	r2, [pc, #456]	; (800543c <UART_SetConfig+0x4bc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d125      	bne.n	80052c4 <UART_SetConfig+0x344>
 8005278:	4b71      	ldr	r3, [pc, #452]	; (8005440 <UART_SetConfig+0x4c0>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005282:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005286:	d017      	beq.n	80052b8 <UART_SetConfig+0x338>
 8005288:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800528c:	d817      	bhi.n	80052be <UART_SetConfig+0x33e>
 800528e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005292:	d00b      	beq.n	80052ac <UART_SetConfig+0x32c>
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005298:	d811      	bhi.n	80052be <UART_SetConfig+0x33e>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <UART_SetConfig+0x326>
 800529e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052a2:	d006      	beq.n	80052b2 <UART_SetConfig+0x332>
 80052a4:	e00b      	b.n	80052be <UART_SetConfig+0x33e>
 80052a6:	2300      	movs	r3, #0
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e00d      	b.n	80052c8 <UART_SetConfig+0x348>
 80052ac:	2302      	movs	r3, #2
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e00a      	b.n	80052c8 <UART_SetConfig+0x348>
 80052b2:	2304      	movs	r3, #4
 80052b4:	77fb      	strb	r3, [r7, #31]
 80052b6:	e007      	b.n	80052c8 <UART_SetConfig+0x348>
 80052b8:	2308      	movs	r3, #8
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e004      	b.n	80052c8 <UART_SetConfig+0x348>
 80052be:	2310      	movs	r3, #16
 80052c0:	77fb      	strb	r3, [r7, #31]
 80052c2:	e001      	b.n	80052c8 <UART_SetConfig+0x348>
 80052c4:	2310      	movs	r3, #16
 80052c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d0:	d15b      	bne.n	800538a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80052d2:	7ffb      	ldrb	r3, [r7, #31]
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d828      	bhi.n	800532a <UART_SetConfig+0x3aa>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <UART_SetConfig+0x360>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	08005305 	.word	0x08005305
 80052e4:	0800530d 	.word	0x0800530d
 80052e8:	08005315 	.word	0x08005315
 80052ec:	0800532b 	.word	0x0800532b
 80052f0:	0800531b 	.word	0x0800531b
 80052f4:	0800532b 	.word	0x0800532b
 80052f8:	0800532b 	.word	0x0800532b
 80052fc:	0800532b 	.word	0x0800532b
 8005300:	08005323 	.word	0x08005323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005304:	f7fe fe08 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8005308:	61b8      	str	r0, [r7, #24]
        break;
 800530a:	e013      	b.n	8005334 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800530c:	f7fe fe18 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8005310:	61b8      	str	r0, [r7, #24]
        break;
 8005312:	e00f      	b.n	8005334 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005314:	4b4b      	ldr	r3, [pc, #300]	; (8005444 <UART_SetConfig+0x4c4>)
 8005316:	61bb      	str	r3, [r7, #24]
        break;
 8005318:	e00c      	b.n	8005334 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531a:	f7fe fceb 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 800531e:	61b8      	str	r0, [r7, #24]
        break;
 8005320:	e008      	b.n	8005334 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005326:	61bb      	str	r3, [r7, #24]
        break;
 8005328:	e004      	b.n	8005334 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	77bb      	strb	r3, [r7, #30]
        break;
 8005332:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d074      	beq.n	8005424 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	005a      	lsls	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	441a      	add	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b0f      	cmp	r3, #15
 8005354:	d916      	bls.n	8005384 <UART_SetConfig+0x404>
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535c:	d212      	bcs.n	8005384 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f023 030f 	bic.w	r3, r3, #15
 8005366:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	b29b      	uxth	r3, r3
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	b29a      	uxth	r2, r3
 8005374:	89fb      	ldrh	r3, [r7, #14]
 8005376:	4313      	orrs	r3, r2
 8005378:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	89fa      	ldrh	r2, [r7, #14]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	e04f      	b.n	8005424 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	77bb      	strb	r3, [r7, #30]
 8005388:	e04c      	b.n	8005424 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800538a:	7ffb      	ldrb	r3, [r7, #31]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d828      	bhi.n	80053e2 <UART_SetConfig+0x462>
 8005390:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <UART_SetConfig+0x418>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053bd 	.word	0x080053bd
 800539c:	080053c5 	.word	0x080053c5
 80053a0:	080053cd 	.word	0x080053cd
 80053a4:	080053e3 	.word	0x080053e3
 80053a8:	080053d3 	.word	0x080053d3
 80053ac:	080053e3 	.word	0x080053e3
 80053b0:	080053e3 	.word	0x080053e3
 80053b4:	080053e3 	.word	0x080053e3
 80053b8:	080053db 	.word	0x080053db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053bc:	f7fe fdac 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 80053c0:	61b8      	str	r0, [r7, #24]
        break;
 80053c2:	e013      	b.n	80053ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c4:	f7fe fdbc 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 80053c8:	61b8      	str	r0, [r7, #24]
        break;
 80053ca:	e00f      	b.n	80053ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053cc:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <UART_SetConfig+0x4c4>)
 80053ce:	61bb      	str	r3, [r7, #24]
        break;
 80053d0:	e00c      	b.n	80053ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053d2:	f7fe fc8f 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 80053d6:	61b8      	str	r0, [r7, #24]
        break;
 80053d8:	e008      	b.n	80053ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053de:	61bb      	str	r3, [r7, #24]
        break;
 80053e0:	e004      	b.n	80053ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	77bb      	strb	r3, [r7, #30]
        break;
 80053ea:	bf00      	nop
    }

    if (pclk != 0U)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d018      	beq.n	8005424 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	085a      	lsrs	r2, r3, #1
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	441a      	add	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b0f      	cmp	r3, #15
 800540a:	d909      	bls.n	8005420 <UART_SetConfig+0x4a0>
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005412:	d205      	bcs.n	8005420 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	b29a      	uxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60da      	str	r2, [r3, #12]
 800541e:	e001      	b.n	8005424 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005430:	7fbb      	ldrb	r3, [r7, #30]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40007c00 	.word	0x40007c00
 8005440:	40023800 	.word	0x40023800
 8005444:	00f42400 	.word	0x00f42400

08005448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01a      	beq.n	800555e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005546:	d10a      	bne.n	800555e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  }
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af02      	add	r7, sp, #8
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800559c:	f7fc f8c8 	bl	8001730 <HAL_GetTick>
 80055a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d10e      	bne.n	80055ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f831 	bl	8005626 <UART_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e027      	b.n	800561e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d10e      	bne.n	80055fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f81b 	bl	8005626 <UART_WaitOnFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e011      	b.n	800561e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b09c      	sub	sp, #112	; 0x70
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	4613      	mov	r3, r2
 8005634:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005636:	e0a7      	b.n	8005788 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800563a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563e:	f000 80a3 	beq.w	8005788 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fc f875 	bl	8001730 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <UART_WaitOnFlagUntilTimeout+0x32>
 8005652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005654:	2b00      	cmp	r3, #0
 8005656:	d13f      	bne.n	80056d8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005668:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800566c:	667b      	str	r3, [r7, #100]	; 0x64
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005678:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800567c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e6      	bne.n	8005658 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	f023 0301 	bic.w	r3, r3, #1
 80056a0:	663b      	str	r3, [r7, #96]	; 0x60
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80056ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e5      	bne.n	800568a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e068      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d050      	beq.n	8005788 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f4:	d148      	bne.n	8005788 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056fe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005714:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
 8005720:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e6      	bne.n	8005700 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	613b      	str	r3, [r7, #16]
   return(result);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	66bb      	str	r3, [r7, #104]	; 0x68
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005752:	623a      	str	r2, [r7, #32]
 8005754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	69f9      	ldr	r1, [r7, #28]
 8005758:	6a3a      	ldr	r2, [r7, #32]
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e5      	bne.n	8005732 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e010      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69da      	ldr	r2, [r3, #28]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4013      	ands	r3, r2
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	429a      	cmp	r2, r3
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	f43f af48 	beq.w	8005638 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3770      	adds	r7, #112	; 0x70
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b4:	b084      	sub	sp, #16
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	f107 001c 	add.w	r0, r7, #28
 80057c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d120      	bne.n	800580e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	4b20      	ldr	r3, [pc, #128]	; (8005860 <USB_CoreInit+0xac>)
 80057de:	4013      	ands	r3, r2
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d105      	bne.n	8005802 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa96 	bl	8005d34 <USB_CoreReset>
 8005808:	4603      	mov	r3, r0
 800580a:	73fb      	strb	r3, [r7, #15]
 800580c:	e010      	b.n	8005830 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa8a 	bl	8005d34 <USB_CoreReset>
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	2b01      	cmp	r3, #1
 8005834:	d10b      	bne.n	800584e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f043 0206 	orr.w	r2, r3, #6
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f043 0220 	orr.w	r2, r3, #32
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800584e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800585a:	b004      	add	sp, #16
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	ffbdffbf 	.word	0xffbdffbf

08005864 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f023 0201 	bic.w	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	460b      	mov	r3, r1
 8005890:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d115      	bne.n	80058d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058b4:	2001      	movs	r0, #1
 80058b6:	f7fb ff47 	bl	8001748 <HAL_Delay>
      ms++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3301      	adds	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fa29 	bl	8005d18 <USB_GetMode>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d01e      	beq.n	800590a <USB_SetCurrentMode+0x84>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b31      	cmp	r3, #49	; 0x31
 80058d0:	d9f0      	bls.n	80058b4 <USB_SetCurrentMode+0x2e>
 80058d2:	e01a      	b.n	800590a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d115      	bne.n	8005906 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058e6:	2001      	movs	r0, #1
 80058e8:	f7fb ff2e 	bl	8001748 <HAL_Delay>
      ms++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3301      	adds	r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa10 	bl	8005d18 <USB_GetMode>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <USB_SetCurrentMode+0x84>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b31      	cmp	r3, #49	; 0x31
 8005902:	d9f0      	bls.n	80058e6 <USB_SetCurrentMode+0x60>
 8005904:	e001      	b.n	800590a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e005      	b.n	8005916 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b32      	cmp	r3, #50	; 0x32
 800590e:	d101      	bne.n	8005914 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005920:	b084      	sub	sp, #16
 8005922:	b580      	push	{r7, lr}
 8005924:	b086      	sub	sp, #24
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800592e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	e009      	b.n	8005954 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	3340      	adds	r3, #64	; 0x40
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	2200      	movs	r2, #0
 800594c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	3301      	adds	r3, #1
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b0e      	cmp	r3, #14
 8005958:	d9f2      	bls.n	8005940 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800595a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d11c      	bne.n	800599a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800596e:	f043 0302 	orr.w	r3, r3, #2
 8005972:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	e005      	b.n	80059a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059ac:	461a      	mov	r2, r3
 80059ae:	2300      	movs	r3, #0
 80059b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b8:	4619      	mov	r1, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c0:	461a      	mov	r2, r3
 80059c2:	680b      	ldr	r3, [r1, #0]
 80059c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d10c      	bne.n	80059e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059d2:	2100      	movs	r1, #0
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f965 	bl	8005ca4 <USB_SetDevSpeed>
 80059da:	e008      	b.n	80059ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059dc:	2101      	movs	r1, #1
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f960 	bl	8005ca4 <USB_SetDevSpeed>
 80059e4:	e003      	b.n	80059ee <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059e6:	2103      	movs	r1, #3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f95b 	bl	8005ca4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059ee:	2110      	movs	r1, #16
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f8f3 	bl	8005bdc <USB_FlushTxFifo>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f91f 	bl	8005c44 <USB_FlushRxFifo>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a16:	461a      	mov	r2, r3
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	461a      	mov	r2, r3
 8005a24:	2300      	movs	r3, #0
 8005a26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	461a      	mov	r2, r3
 8005a30:	2300      	movs	r3, #0
 8005a32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a34:	2300      	movs	r3, #0
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	e043      	b.n	8005ac2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a50:	d118      	bne.n	8005a84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	461a      	mov	r2, r3
 8005a66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	e013      	b.n	8005a96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	e008      	b.n	8005a96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a90:	461a      	mov	r2, r3
 8005a92:	2300      	movs	r3, #0
 8005a94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d3b7      	bcc.n	8005a3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	e043      	b.n	8005b58 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae6:	d118      	bne.n	8005b1a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	461a      	mov	r2, r3
 8005afc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	e013      	b.n	8005b2c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	461a      	mov	r2, r3
 8005b12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	e008      	b.n	8005b2c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	461a      	mov	r2, r3
 8005b28:	2300      	movs	r3, #0
 8005b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	3301      	adds	r3, #1
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d3b7      	bcc.n	8005ad0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d105      	bne.n	8005b94 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f043 0210 	orr.w	r2, r3, #16
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699a      	ldr	r2, [r3, #24]
 8005b98:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <USB_DevInit+0x2b4>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f043 0208 	orr.w	r2, r3, #8
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d105      	bne.n	8005bc4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <USB_DevInit+0x2b8>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd0:	b004      	add	sp, #16
 8005bd2:	4770      	bx	lr
 8005bd4:	803c3800 	.word	0x803c3800
 8005bd8:	40000004 	.word	0x40000004

08005bdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3301      	adds	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4a13      	ldr	r2, [pc, #76]	; (8005c40 <USB_FlushTxFifo+0x64>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d901      	bls.n	8005bfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e01b      	b.n	8005c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	daf2      	bge.n	8005bea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	019b      	lsls	r3, r3, #6
 8005c0c:	f043 0220 	orr.w	r2, r3, #32
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a08      	ldr	r2, [pc, #32]	; (8005c40 <USB_FlushTxFifo+0x64>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e006      	b.n	8005c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d0f0      	beq.n	8005c14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	00030d40 	.word	0x00030d40

08005c44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3301      	adds	r3, #1
 8005c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a11      	ldr	r2, [pc, #68]	; (8005ca0 <USB_FlushRxFifo+0x5c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e018      	b.n	8005c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	daf2      	bge.n	8005c50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2210      	movs	r2, #16
 8005c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3301      	adds	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a08      	ldr	r2, [pc, #32]	; (8005ca0 <USB_FlushRxFifo+0x5c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d901      	bls.n	8005c86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e006      	b.n	8005c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	2b10      	cmp	r3, #16
 8005c90:	d0f0      	beq.n	8005c74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	00030d40 	.word	0x00030d40

08005ca4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cf0:	f023 0303 	bic.w	r3, r3, #3
 8005cf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d04:	f043 0302 	orr.w	r3, r3, #2
 8005d08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	f003 0301 	and.w	r3, r3, #1
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3301      	adds	r3, #1
 8005d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <USB_CoreReset+0x64>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d901      	bls.n	8005d52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e01b      	b.n	8005d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	daf2      	bge.n	8005d40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f043 0201 	orr.w	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4a09      	ldr	r2, [pc, #36]	; (8005d98 <USB_CoreReset+0x64>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e006      	b.n	8005d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d0f0      	beq.n	8005d6a <USB_CoreReset+0x36>

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	00030d40 	.word	0x00030d40

08005d9c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005d9c:	b5b0      	push	{r4, r5, r7, lr}
 8005d9e:	b08c      	sub	sp, #48	; 0x30
 8005da0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005da2:	4b96      	ldr	r3, [pc, #600]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005da4:	22c0      	movs	r2, #192	; 0xc0
 8005da6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005da8:	4b94      	ldr	r3, [pc, #592]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005daa:	22a8      	movs	r2, #168	; 0xa8
 8005dac:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8005dae:	4b93      	ldr	r3, [pc, #588]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005db0:	2202      	movs	r2, #2
 8005db2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 36;
 8005db4:	4b91      	ldr	r3, [pc, #580]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005db6:	2224      	movs	r2, #36	; 0x24
 8005db8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005dba:	4b91      	ldr	r3, [pc, #580]	; (8006000 <MX_LWIP_Init+0x264>)
 8005dbc:	22ff      	movs	r2, #255	; 0xff
 8005dbe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005dc0:	4b8f      	ldr	r3, [pc, #572]	; (8006000 <MX_LWIP_Init+0x264>)
 8005dc2:	22ff      	movs	r2, #255	; 0xff
 8005dc4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005dc6:	4b8e      	ldr	r3, [pc, #568]	; (8006000 <MX_LWIP_Init+0x264>)
 8005dc8:	22ff      	movs	r2, #255	; 0xff
 8005dca:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005dcc:	4b8c      	ldr	r3, [pc, #560]	; (8006000 <MX_LWIP_Init+0x264>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005dd2:	4b8c      	ldr	r3, [pc, #560]	; (8006004 <MX_LWIP_Init+0x268>)
 8005dd4:	22c0      	movs	r2, #192	; 0xc0
 8005dd6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005dd8:	4b8a      	ldr	r3, [pc, #552]	; (8006004 <MX_LWIP_Init+0x268>)
 8005dda:	22a8      	movs	r2, #168	; 0xa8
 8005ddc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8005dde:	4b89      	ldr	r3, [pc, #548]	; (8006004 <MX_LWIP_Init+0x268>)
 8005de0:	2202      	movs	r2, #2
 8005de2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 2;
 8005de4:	4b87      	ldr	r3, [pc, #540]	; (8006004 <MX_LWIP_Init+0x268>)
 8005de6:	2202      	movs	r2, #2
 8005de8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005dea:	2100      	movs	r1, #0
 8005dec:	2000      	movs	r0, #0
 8005dee:	f006 fb1b 	bl	800c428 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005df2:	4b82      	ldr	r3, [pc, #520]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	061a      	lsls	r2, r3, #24
 8005df8:	4b80      	ldr	r3, [pc, #512]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005dfa:	785b      	ldrb	r3, [r3, #1]
 8005dfc:	041b      	lsls	r3, r3, #16
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	4b7e      	ldr	r3, [pc, #504]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e02:	789b      	ldrb	r3, [r3, #2]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	4313      	orrs	r3, r2
 8005e08:	4a7c      	ldr	r2, [pc, #496]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e0a:	78d2      	ldrb	r2, [r2, #3]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	061a      	lsls	r2, r3, #24
 8005e10:	4b7a      	ldr	r3, [pc, #488]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	0619      	lsls	r1, r3, #24
 8005e16:	4b79      	ldr	r3, [pc, #484]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	041b      	lsls	r3, r3, #16
 8005e1c:	4319      	orrs	r1, r3
 8005e1e:	4b77      	ldr	r3, [pc, #476]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e20:	789b      	ldrb	r3, [r3, #2]
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	430b      	orrs	r3, r1
 8005e26:	4975      	ldr	r1, [pc, #468]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e28:	78c9      	ldrb	r1, [r1, #3]
 8005e2a:	430b      	orrs	r3, r1
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e32:	431a      	orrs	r2, r3
 8005e34:	4b71      	ldr	r3, [pc, #452]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	0619      	lsls	r1, r3, #24
 8005e3a:	4b70      	ldr	r3, [pc, #448]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	041b      	lsls	r3, r3, #16
 8005e40:	4319      	orrs	r1, r3
 8005e42:	4b6e      	ldr	r3, [pc, #440]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e44:	789b      	ldrb	r3, [r3, #2]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	496c      	ldr	r1, [pc, #432]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e4c:	78c9      	ldrb	r1, [r1, #3]
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e56:	431a      	orrs	r2, r3
 8005e58:	4b68      	ldr	r3, [pc, #416]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	0619      	lsls	r1, r3, #24
 8005e5e:	4b67      	ldr	r3, [pc, #412]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	041b      	lsls	r3, r3, #16
 8005e64:	4319      	orrs	r1, r3
 8005e66:	4b65      	ldr	r3, [pc, #404]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e68:	789b      	ldrb	r3, [r3, #2]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	4963      	ldr	r1, [pc, #396]	; (8005ffc <MX_LWIP_Init+0x260>)
 8005e70:	78c9      	ldrb	r1, [r1, #3]
 8005e72:	430b      	orrs	r3, r1
 8005e74:	0e1b      	lsrs	r3, r3, #24
 8005e76:	4313      	orrs	r3, r2
 8005e78:	4a63      	ldr	r2, [pc, #396]	; (8006008 <MX_LWIP_Init+0x26c>)
 8005e7a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005e7c:	4b60      	ldr	r3, [pc, #384]	; (8006000 <MX_LWIP_Init+0x264>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	061a      	lsls	r2, r3, #24
 8005e82:	4b5f      	ldr	r3, [pc, #380]	; (8006000 <MX_LWIP_Init+0x264>)
 8005e84:	785b      	ldrb	r3, [r3, #1]
 8005e86:	041b      	lsls	r3, r3, #16
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	4b5d      	ldr	r3, [pc, #372]	; (8006000 <MX_LWIP_Init+0x264>)
 8005e8c:	789b      	ldrb	r3, [r3, #2]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	4313      	orrs	r3, r2
 8005e92:	4a5b      	ldr	r2, [pc, #364]	; (8006000 <MX_LWIP_Init+0x264>)
 8005e94:	78d2      	ldrb	r2, [r2, #3]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	061a      	lsls	r2, r3, #24
 8005e9a:	4b59      	ldr	r3, [pc, #356]	; (8006000 <MX_LWIP_Init+0x264>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	0619      	lsls	r1, r3, #24
 8005ea0:	4b57      	ldr	r3, [pc, #348]	; (8006000 <MX_LWIP_Init+0x264>)
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	041b      	lsls	r3, r3, #16
 8005ea6:	4319      	orrs	r1, r3
 8005ea8:	4b55      	ldr	r3, [pc, #340]	; (8006000 <MX_LWIP_Init+0x264>)
 8005eaa:	789b      	ldrb	r3, [r3, #2]
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	4953      	ldr	r1, [pc, #332]	; (8006000 <MX_LWIP_Init+0x264>)
 8005eb2:	78c9      	ldrb	r1, [r1, #3]
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	4b50      	ldr	r3, [pc, #320]	; (8006000 <MX_LWIP_Init+0x264>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	0619      	lsls	r1, r3, #24
 8005ec4:	4b4e      	ldr	r3, [pc, #312]	; (8006000 <MX_LWIP_Init+0x264>)
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	041b      	lsls	r3, r3, #16
 8005eca:	4319      	orrs	r1, r3
 8005ecc:	4b4c      	ldr	r3, [pc, #304]	; (8006000 <MX_LWIP_Init+0x264>)
 8005ece:	789b      	ldrb	r3, [r3, #2]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	494a      	ldr	r1, [pc, #296]	; (8006000 <MX_LWIP_Init+0x264>)
 8005ed6:	78c9      	ldrb	r1, [r1, #3]
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	0a1b      	lsrs	r3, r3, #8
 8005edc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	4b47      	ldr	r3, [pc, #284]	; (8006000 <MX_LWIP_Init+0x264>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	0619      	lsls	r1, r3, #24
 8005ee8:	4b45      	ldr	r3, [pc, #276]	; (8006000 <MX_LWIP_Init+0x264>)
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	041b      	lsls	r3, r3, #16
 8005eee:	4319      	orrs	r1, r3
 8005ef0:	4b43      	ldr	r3, [pc, #268]	; (8006000 <MX_LWIP_Init+0x264>)
 8005ef2:	789b      	ldrb	r3, [r3, #2]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	4941      	ldr	r1, [pc, #260]	; (8006000 <MX_LWIP_Init+0x264>)
 8005efa:	78c9      	ldrb	r1, [r1, #3]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	0e1b      	lsrs	r3, r3, #24
 8005f00:	4313      	orrs	r3, r2
 8005f02:	4a42      	ldr	r2, [pc, #264]	; (800600c <MX_LWIP_Init+0x270>)
 8005f04:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005f06:	4b3f      	ldr	r3, [pc, #252]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	061a      	lsls	r2, r3, #24
 8005f0c:	4b3d      	ldr	r3, [pc, #244]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	431a      	orrs	r2, r3
 8005f14:	4b3b      	ldr	r3, [pc, #236]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f16:	789b      	ldrb	r3, [r3, #2]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	4a39      	ldr	r2, [pc, #228]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f1e:	78d2      	ldrb	r2, [r2, #3]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	061a      	lsls	r2, r3, #24
 8005f24:	4b37      	ldr	r3, [pc, #220]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	0619      	lsls	r1, r3, #24
 8005f2a:	4b36      	ldr	r3, [pc, #216]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f2c:	785b      	ldrb	r3, [r3, #1]
 8005f2e:	041b      	lsls	r3, r3, #16
 8005f30:	4319      	orrs	r1, r3
 8005f32:	4b34      	ldr	r3, [pc, #208]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f34:	789b      	ldrb	r3, [r3, #2]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	4932      	ldr	r1, [pc, #200]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f3c:	78c9      	ldrb	r1, [r1, #3]
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f46:	431a      	orrs	r2, r3
 8005f48:	4b2e      	ldr	r3, [pc, #184]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	0619      	lsls	r1, r3, #24
 8005f4e:	4b2d      	ldr	r3, [pc, #180]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	041b      	lsls	r3, r3, #16
 8005f54:	4319      	orrs	r1, r3
 8005f56:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f58:	789b      	ldrb	r3, [r3, #2]
 8005f5a:	021b      	lsls	r3, r3, #8
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	4929      	ldr	r1, [pc, #164]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f60:	78c9      	ldrb	r1, [r1, #3]
 8005f62:	430b      	orrs	r3, r1
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	4b25      	ldr	r3, [pc, #148]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	0619      	lsls	r1, r3, #24
 8005f72:	4b24      	ldr	r3, [pc, #144]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	041b      	lsls	r3, r3, #16
 8005f78:	4319      	orrs	r1, r3
 8005f7a:	4b22      	ldr	r3, [pc, #136]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f7c:	789b      	ldrb	r3, [r3, #2]
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	430b      	orrs	r3, r1
 8005f82:	4920      	ldr	r1, [pc, #128]	; (8006004 <MX_LWIP_Init+0x268>)
 8005f84:	78c9      	ldrb	r1, [r1, #3]
 8005f86:	430b      	orrs	r3, r1
 8005f88:	0e1b      	lsrs	r3, r3, #24
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	4a20      	ldr	r2, [pc, #128]	; (8006010 <MX_LWIP_Init+0x274>)
 8005f8e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005f90:	4b20      	ldr	r3, [pc, #128]	; (8006014 <MX_LWIP_Init+0x278>)
 8005f92:	9302      	str	r3, [sp, #8]
 8005f94:	4b20      	ldr	r3, [pc, #128]	; (8006018 <MX_LWIP_Init+0x27c>)
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	4b1c      	ldr	r3, [pc, #112]	; (8006010 <MX_LWIP_Init+0x274>)
 8005f9e:	4a1b      	ldr	r2, [pc, #108]	; (800600c <MX_LWIP_Init+0x270>)
 8005fa0:	4919      	ldr	r1, [pc, #100]	; (8006008 <MX_LWIP_Init+0x26c>)
 8005fa2:	481e      	ldr	r0, [pc, #120]	; (800601c <MX_LWIP_Init+0x280>)
 8005fa4:	f007 f80a 	bl	800cfbc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005fa8:	481c      	ldr	r0, [pc, #112]	; (800601c <MX_LWIP_Init+0x280>)
 8005faa:	f007 f9b9 	bl	800d320 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005fae:	4b1b      	ldr	r3, [pc, #108]	; (800601c <MX_LWIP_Init+0x280>)
 8005fb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fb4:	089b      	lsrs	r3, r3, #2
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005fc0:	4816      	ldr	r0, [pc, #88]	; (800601c <MX_LWIP_Init+0x280>)
 8005fc2:	f007 f9bd 	bl	800d340 <netif_set_up>
 8005fc6:	e002      	b.n	8005fce <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005fc8:	4814      	ldr	r0, [pc, #80]	; (800601c <MX_LWIP_Init+0x280>)
 8005fca:	f007 fa25 	bl	800d418 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005fce:	4914      	ldr	r1, [pc, #80]	; (8006020 <MX_LWIP_Init+0x284>)
 8005fd0:	4812      	ldr	r0, [pc, #72]	; (800601c <MX_LWIP_Init+0x280>)
 8005fd2:	f007 fab7 	bl	800d544 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8005fd6:	4b13      	ldr	r3, [pc, #76]	; (8006024 <MX_LWIP_Init+0x288>)
 8005fd8:	1d3c      	adds	r4, r7, #4
 8005fda:	461d      	mov	r5, r3
 8005fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005fe4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005fe8:	1d3b      	adds	r3, r7, #4
 8005fea:	490c      	ldr	r1, [pc, #48]	; (800601c <MX_LWIP_Init+0x280>)
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fd4f 	bl	8006a90 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005ff2:	bf00      	nop
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000c20 	.word	0x20000c20
 8006000:	20000c24 	.word	0x20000c24
 8006004:	20000c28 	.word	0x20000c28
 8006008:	20000c14 	.word	0x20000c14
 800600c:	20000c18 	.word	0x20000c18
 8006010:	20000c1c 	.word	0x20000c1c
 8006014:	0800c339 	.word	0x0800c339
 8006018:	08006521 	.word	0x08006521
 800601c:	20000be0 	.word	0x20000be0
 8006020:	08006029 	.word	0x08006029
 8006024:	0801c830 	.word	0x0801c830

08006028 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800604e:	2320      	movs	r3, #32
 8006050:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006052:	f3bf 8f4f 	dsb	sy
}
 8006056:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8006058:	e00b      	b.n	8006072 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800605a:	4a0d      	ldr	r2, [pc, #52]	; (8006090 <SCB_InvalidateDCache_by_Addr+0x54>)
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4413      	add	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	dcf0      	bgt.n	800605a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006078:	f3bf 8f4f 	dsb	sy
}
 800607c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800607e:	f3bf 8f6f 	isb	sy
}
 8006082:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	e000ed00 	.word	0xe000ed00

08006094 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <HAL_ETH_RxCpltCallback+0x1c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fe71 	bl	8006d88 <osSemaphoreRelease>
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	200055b8 	.word	0x200055b8

080060b4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80060bc:	4b04      	ldr	r3, [pc, #16]	; (80060d0 <HAL_ETH_TxCpltCallback+0x1c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fe61 	bl	8006d88 <osSemaphoreRelease>
}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200055bc 	.word	0x200055bc

080060d4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fc fad7 	bl	8002690 <HAL_ETH_GetDMAError>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e8:	2b80      	cmp	r3, #128	; 0x80
 80060ea:	d104      	bne.n	80060f6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80060ec:	4b04      	ldr	r3, [pc, #16]	; (8006100 <HAL_ETH_ErrorCallback+0x2c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fe49 	bl	8006d88 <osSemaphoreRelease>
  }
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	200055b8 	.word	0x200055b8

08006104 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006104:	b5b0      	push	{r4, r5, r7, lr}
 8006106:	b0a8      	sub	sp, #160	; 0xa0
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800611e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006122:	2264      	movs	r2, #100	; 0x64
 8006124:	2100      	movs	r1, #0
 8006126:	4618      	mov	r0, r3
 8006128:	f012 fdd1 	bl	8018cce <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800612c:	4b85      	ldr	r3, [pc, #532]	; (8006344 <low_level_init+0x240>)
 800612e:	4a86      	ldr	r2, [pc, #536]	; (8006348 <low_level_init+0x244>)
 8006130:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006132:	2300      	movs	r3, #0
 8006134:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8006138:	2380      	movs	r3, #128	; 0x80
 800613a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800613e:	23e1      	movs	r3, #225	; 0xe1
 8006140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8006144:	2300      	movs	r3, #0
 8006146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800614a:	2300      	movs	r3, #0
 800614c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8006150:	2300      	movs	r3, #0
 8006152:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8006156:	4a7b      	ldr	r2, [pc, #492]	; (8006344 <low_level_init+0x240>)
 8006158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800615c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800615e:	4b79      	ldr	r3, [pc, #484]	; (8006344 <low_level_init+0x240>)
 8006160:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006164:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006166:	4b77      	ldr	r3, [pc, #476]	; (8006344 <low_level_init+0x240>)
 8006168:	4a78      	ldr	r2, [pc, #480]	; (800634c <low_level_init+0x248>)
 800616a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800616c:	4b75      	ldr	r3, [pc, #468]	; (8006344 <low_level_init+0x240>)
 800616e:	4a78      	ldr	r2, [pc, #480]	; (8006350 <low_level_init+0x24c>)
 8006170:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006172:	4b74      	ldr	r3, [pc, #464]	; (8006344 <low_level_init+0x240>)
 8006174:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006178:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800617a:	4872      	ldr	r0, [pc, #456]	; (8006344 <low_level_init+0x240>)
 800617c:	f7fb fbea 	bl	8001954 <HAL_ETH_Init>
 8006180:	4603      	mov	r3, r0
 8006182:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006186:	2238      	movs	r2, #56	; 0x38
 8006188:	2100      	movs	r1, #0
 800618a:	4872      	ldr	r0, [pc, #456]	; (8006354 <low_level_init+0x250>)
 800618c:	f012 fd9f 	bl	8018cce <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006190:	4b70      	ldr	r3, [pc, #448]	; (8006354 <low_level_init+0x250>)
 8006192:	2221      	movs	r2, #33	; 0x21
 8006194:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006196:	4b6f      	ldr	r3, [pc, #444]	; (8006354 <low_level_init+0x250>)
 8006198:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800619c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800619e:	4b6d      	ldr	r3, [pc, #436]	; (8006354 <low_level_init+0x250>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80061a4:	486c      	ldr	r0, [pc, #432]	; (8006358 <low_level_init+0x254>)
 80061a6:	f006 fdc3 	bl	800cd30 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2206      	movs	r2, #6
 80061ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80061b2:	4b64      	ldr	r3, [pc, #400]	; (8006344 <low_level_init+0x240>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	781a      	ldrb	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80061be:	4b61      	ldr	r3, [pc, #388]	; (8006344 <low_level_init+0x240>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	785a      	ldrb	r2, [r3, #1]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80061ca:	4b5e      	ldr	r3, [pc, #376]	; (8006344 <low_level_init+0x240>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	789a      	ldrb	r2, [r3, #2]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80061d6:	4b5b      	ldr	r3, [pc, #364]	; (8006344 <low_level_init+0x240>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	78da      	ldrb	r2, [r3, #3]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80061e2:	4b58      	ldr	r3, [pc, #352]	; (8006344 <low_level_init+0x240>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	791a      	ldrb	r2, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80061ee:	4b55      	ldr	r3, [pc, #340]	; (8006344 <low_level_init+0x240>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	795a      	ldrb	r2, [r3, #5]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006200:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006208:	f043 030a 	orr.w	r3, r3, #10
 800620c:	b2da      	uxtb	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8006214:	2203      	movs	r2, #3
 8006216:	2100      	movs	r1, #0
 8006218:	2001      	movs	r0, #1
 800621a:	f001 f8a5 	bl	8007368 <xQueueGenericCreate>
 800621e:	4603      	mov	r3, r0
 8006220:	4a4e      	ldr	r2, [pc, #312]	; (800635c <low_level_init+0x258>)
 8006222:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8006224:	2203      	movs	r2, #3
 8006226:	2100      	movs	r1, #0
 8006228:	2001      	movs	r0, #1
 800622a:	f001 f89d 	bl	8007368 <xQueueGenericCreate>
 800622e:	4603      	mov	r3, r0
 8006230:	4a4b      	ldr	r2, [pc, #300]	; (8006360 <low_level_init+0x25c>)
 8006232:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006234:	4b4b      	ldr	r3, [pc, #300]	; (8006364 <low_level_init+0x260>)
 8006236:	f107 0408 	add.w	r4, r7, #8
 800623a:	461d      	mov	r5, r3
 800623c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800623e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006240:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006244:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006248:	f107 0308 	add.w	r3, r7, #8
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fc1e 	bl	8006a90 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006254:	4944      	ldr	r1, [pc, #272]	; (8006368 <low_level_init+0x264>)
 8006256:	4845      	ldr	r0, [pc, #276]	; (800636c <low_level_init+0x268>)
 8006258:	f7fb f8e7 	bl	800142a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800625c:	4843      	ldr	r0, [pc, #268]	; (800636c <low_level_init+0x268>)
 800625e:	f7fb f916 	bl	800148e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006262:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006266:	2b00      	cmp	r3, #0
 8006268:	d165      	bne.n	8006336 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800626a:	4840      	ldr	r0, [pc, #256]	; (800636c <low_level_init+0x268>)
 800626c:	f7fb f9b7 	bl	80015de <LAN8742_GetLinkState>
 8006270:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006274:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006278:	2b01      	cmp	r3, #1
 800627a:	dc06      	bgt.n	800628a <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f007 f931 	bl	800d4e4 <netif_set_link_down>
      netif_set_down(netif);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f007 f8c8 	bl	800d418 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006288:	e057      	b.n	800633a <low_level_init+0x236>
      switch (PHYLinkState)
 800628a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800628e:	3b02      	subs	r3, #2
 8006290:	2b03      	cmp	r3, #3
 8006292:	d82b      	bhi.n	80062ec <low_level_init+0x1e8>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <low_level_init+0x198>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062ad 	.word	0x080062ad
 80062a0:	080062bf 	.word	0x080062bf
 80062a4:	080062cf 	.word	0x080062cf
 80062a8:	080062df 	.word	0x080062df
        duplex = ETH_FULLDUPLEX_MODE;
 80062ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80062b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80062bc:	e01f      	b.n	80062fe <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80062be:	2300      	movs	r3, #0
 80062c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80062c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80062cc:	e017      	b.n	80062fe <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80062ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80062d6:	2300      	movs	r3, #0
 80062d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80062dc:	e00f      	b.n	80062fe <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80062de:	2300      	movs	r3, #0
 80062e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80062e4:	2300      	movs	r3, #0
 80062e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80062ea:	e008      	b.n	80062fe <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80062ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80062f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80062fc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80062fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006302:	4619      	mov	r1, r3
 8006304:	480f      	ldr	r0, [pc, #60]	; (8006344 <low_level_init+0x240>)
 8006306:	f7fc f869 	bl	80023dc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800630a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800630e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8006310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006314:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800631a:	4619      	mov	r1, r3
 800631c:	4809      	ldr	r0, [pc, #36]	; (8006344 <low_level_init+0x240>)
 800631e:	f7fc f947 	bl	80025b0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006322:	4808      	ldr	r0, [pc, #32]	; (8006344 <low_level_init+0x240>)
 8006324:	f7fb fbf2 	bl	8001b0c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f007 f809 	bl	800d340 <netif_set_up>
    netif_set_link_up(netif);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f007 f8a4 	bl	800d47c <netif_set_link_up>
}
 8006334:	e001      	b.n	800633a <low_level_init+0x236>
    Error_Handler();
 8006336:	f7fa fd73 	bl	8000e20 <Error_Handler>
}
 800633a:	bf00      	nop
 800633c:	37a0      	adds	r7, #160	; 0xa0
 800633e:	46bd      	mov	sp, r7
 8006340:	bdb0      	pop	{r4, r5, r7, pc}
 8006342:	bf00      	nop
 8006344:	200055c0 	.word	0x200055c0
 8006348:	40028000 	.word	0x40028000
 800634c:	20000298 	.word	0x20000298
 8006350:	200001f8 	.word	0x200001f8
 8006354:	20005670 	.word	0x20005670
 8006358:	080201f4 	.word	0x080201f4
 800635c:	200055b8 	.word	0x200055b8
 8006360:	200055bc 	.word	0x200055bc
 8006364:	0801c854 	.word	0x0801c854
 8006368:	2000000c 	.word	0x2000000c
 800636c:	200056a8 	.word	0x200056a8

08006370 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b092      	sub	sp, #72	; 0x48
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800637e:	2300      	movs	r3, #0
 8006380:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006388:	f107 030c 	add.w	r3, r7, #12
 800638c:	2230      	movs	r2, #48	; 0x30
 800638e:	2100      	movs	r1, #0
 8006390:	4618      	mov	r0, r3
 8006392:	f012 fc9c 	bl	8018cce <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006396:	f107 030c 	add.w	r3, r7, #12
 800639a:	2230      	movs	r2, #48	; 0x30
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f012 fc95 	bl	8018cce <memset>

  for(q = p; q != NULL; q = q->next)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	643b      	str	r3, [r7, #64]	; 0x40
 80063a8:	e045      	b.n	8006436 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80063aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d902      	bls.n	80063b6 <low_level_output+0x46>
      return ERR_IF;
 80063b0:	f06f 030b 	mvn.w	r3, #11
 80063b4:	e065      	b.n	8006482 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80063b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b8:	6859      	ldr	r1, [r3, #4]
 80063ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063bc:	4613      	mov	r3, r2
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	3348      	adds	r3, #72	; 0x48
 80063c6:	443b      	add	r3, r7
 80063c8:	3b3c      	subs	r3, #60	; 0x3c
 80063ca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80063cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ce:	895b      	ldrh	r3, [r3, #10]
 80063d0:	4619      	mov	r1, r3
 80063d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063d4:	4613      	mov	r3, r2
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	3348      	adds	r3, #72	; 0x48
 80063de:	443b      	add	r3, r7
 80063e0:	3b38      	subs	r3, #56	; 0x38
 80063e2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80063e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d011      	beq.n	800640e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80063ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ec:	1e5a      	subs	r2, r3, #1
 80063ee:	f107 000c 	add.w	r0, r7, #12
 80063f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063f4:	460b      	mov	r3, r1
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	440b      	add	r3, r1
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	18c1      	adds	r1, r0, r3
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	3348      	adds	r3, #72	; 0x48
 8006408:	443b      	add	r3, r7
 800640a:	3b34      	subs	r3, #52	; 0x34
 800640c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800640e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006418:	4613      	mov	r3, r2
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	3348      	adds	r3, #72	; 0x48
 8006422:	443b      	add	r3, r7
 8006424:	3b34      	subs	r3, #52	; 0x34
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]
    }

    i++;
 800642a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642c:	3301      	adds	r3, #1
 800642e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	643b      	str	r3, [r7, #64]	; 0x40
 8006436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1b6      	bne.n	80063aa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	891b      	ldrh	r3, [r3, #8]
 8006440:	461a      	mov	r2, r3
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <low_level_output+0x11c>)
 8006444:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006446:	4a11      	ldr	r2, [pc, #68]	; (800648c <low_level_output+0x11c>)
 8006448:	f107 030c 	add.w	r3, r7, #12
 800644c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800644e:	4a0f      	ldr	r2, [pc, #60]	; (800648c <low_level_output+0x11c>)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006454:	6838      	ldr	r0, [r7, #0]
 8006456:	f007 fcc9 	bl	800ddec <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800645a:	490c      	ldr	r1, [pc, #48]	; (800648c <low_level_output+0x11c>)
 800645c:	480c      	ldr	r0, [pc, #48]	; (8006490 <low_level_output+0x120>)
 800645e:	f7fb fc63 	bl	8001d28 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006462:	bf00      	nop
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <low_level_output+0x124>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f04f 31ff 	mov.w	r1, #4294967295
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fc3d 	bl	8006cec <osSemaphoreWait>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1f5      	bne.n	8006464 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8006478:	4805      	ldr	r0, [pc, #20]	; (8006490 <low_level_output+0x120>)
 800647a:	f7fb fde9 	bl	8002050 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800647e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006482:	4618      	mov	r0, r3
 8006484:	3748      	adds	r7, #72	; 0x48
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20005670 	.word	0x20005670
 8006490:	200055c0 	.word	0x200055c0
 8006494:	200055bc 	.word	0x200055bc

08006498 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80064a4:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <low_level_input+0x2c>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d105      	bne.n	80064b8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80064ac:	f107 030c 	add.w	r3, r7, #12
 80064b0:	4619      	mov	r1, r3
 80064b2:	4805      	ldr	r0, [pc, #20]	; (80064c8 <low_level_input+0x30>)
 80064b4:	f7fb fc94 	bl	8001de0 <HAL_ETH_ReadData>
  }

  return p;
 80064b8:	68fb      	ldr	r3, [r7, #12]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	200055b4 	.word	0x200055b4
 80064c8:	200055c0 	.word	0x200055c0

080064cc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <ethernetif_input+0x50>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f04f 31ff 	mov.w	r1, #4294967295
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fc01 	bl	8006cec <osSemaphoreWait>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1f5      	bne.n	80064dc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80064f0:	68b8      	ldr	r0, [r7, #8]
 80064f2:	f7ff ffd1 	bl	8006498 <low_level_input>
 80064f6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	4798      	blx	r3
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f007 fbc6 	bl	800dca0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1ea      	bne.n	80064f0 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800651a:	e7df      	b.n	80064dc <ethernetif_input+0x10>
 800651c:	200055b8 	.word	0x200055b8

08006520 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <ethernetif_init+0x1c>
 800652e:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <ethernetif_init+0x48>)
 8006530:	f240 12ef 	movw	r2, #495	; 0x1ef
 8006534:	490d      	ldr	r1, [pc, #52]	; (800656c <ethernetif_init+0x4c>)
 8006536:	480e      	ldr	r0, [pc, #56]	; (8006570 <ethernetif_init+0x50>)
 8006538:	f012 fb2a 	bl	8018b90 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2273      	movs	r2, #115	; 0x73
 8006540:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2274      	movs	r2, #116	; 0x74
 8006548:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a09      	ldr	r2, [pc, #36]	; (8006574 <ethernetif_init+0x54>)
 8006550:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a08      	ldr	r2, [pc, #32]	; (8006578 <ethernetif_init+0x58>)
 8006556:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fdd3 	bl	8006104 <low_level_init>

  return ERR_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	0801c870 	.word	0x0801c870
 800656c:	0801c88c 	.word	0x0801c88c
 8006570:	0801c89c 	.word	0x0801c89c
 8006574:	08015901 	.word	0x08015901
 8006578:	08006371 	.word	0x08006371

0800657c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006588:	68f9      	ldr	r1, [r7, #12]
 800658a:	4809      	ldr	r0, [pc, #36]	; (80065b0 <pbuf_free_custom+0x34>)
 800658c:	f006 fcc0 	bl	800cf10 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006590:	4b08      	ldr	r3, [pc, #32]	; (80065b4 <pbuf_free_custom+0x38>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d107      	bne.n	80065a8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006598:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <pbuf_free_custom+0x38>)
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800659e:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <pbuf_free_custom+0x3c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fbf0 	bl	8006d88 <osSemaphoreRelease>
  }
}
 80065a8:	bf00      	nop
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	080201f4 	.word	0x080201f4
 80065b4:	200055b4 	.word	0x200055b4
 80065b8:	200055b8 	.word	0x200055b8

080065bc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80065c0:	f7fb f8b6 	bl	8001730 <HAL_GetTick>
 80065c4:	4603      	mov	r3, r0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08e      	sub	sp, #56	; 0x38
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	605a      	str	r2, [r3, #4]
 80065de:	609a      	str	r2, [r3, #8]
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a56      	ldr	r2, [pc, #344]	; (8006744 <HAL_ETH_MspInit+0x178>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	f040 80a6 	bne.w	800673c <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80065f0:	4b55      	ldr	r3, [pc, #340]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	4a54      	ldr	r2, [pc, #336]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 80065f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065fa:	6313      	str	r3, [r2, #48]	; 0x30
 80065fc:	4b52      	ldr	r3, [pc, #328]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006604:	623b      	str	r3, [r7, #32]
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	4b4f      	ldr	r3, [pc, #316]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	4a4e      	ldr	r2, [pc, #312]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 800660e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006612:	6313      	str	r3, [r2, #48]	; 0x30
 8006614:	4b4c      	ldr	r3, [pc, #304]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800661c:	61fb      	str	r3, [r7, #28]
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4b49      	ldr	r3, [pc, #292]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	4a48      	ldr	r2, [pc, #288]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 8006626:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800662a:	6313      	str	r3, [r2, #48]	; 0x30
 800662c:	4b46      	ldr	r3, [pc, #280]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006638:	4b43      	ldr	r3, [pc, #268]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	4a42      	ldr	r2, [pc, #264]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 800663e:	f043 0304 	orr.w	r3, r3, #4
 8006642:	6313      	str	r3, [r2, #48]	; 0x30
 8006644:	4b40      	ldr	r3, [pc, #256]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006650:	4b3d      	ldr	r3, [pc, #244]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	4a3c      	ldr	r2, [pc, #240]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	6313      	str	r3, [r2, #48]	; 0x30
 800665c:	4b3a      	ldr	r3, [pc, #232]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006668:	4b37      	ldr	r3, [pc, #220]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	4a36      	ldr	r2, [pc, #216]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 800666e:	f043 0302 	orr.w	r3, r3, #2
 8006672:	6313      	str	r3, [r2, #48]	; 0x30
 8006674:	4b34      	ldr	r3, [pc, #208]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006680:	4b31      	ldr	r3, [pc, #196]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	4a30      	ldr	r2, [pc, #192]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 8006686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800668a:	6313      	str	r3, [r2, #48]	; 0x30
 800668c:	4b2e      	ldr	r3, [pc, #184]	; (8006748 <HAL_ETH_MspInit+0x17c>)
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	60bb      	str	r3, [r7, #8]
 8006696:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006698:	2332      	movs	r3, #50	; 0x32
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800669c:	2302      	movs	r3, #2
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066a4:	2303      	movs	r3, #3
 80066a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80066a8:	230b      	movs	r3, #11
 80066aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b0:	4619      	mov	r1, r3
 80066b2:	4826      	ldr	r0, [pc, #152]	; (800674c <HAL_ETH_MspInit+0x180>)
 80066b4:	f7fc fbfc 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80066b8:	2386      	movs	r3, #134	; 0x86
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066bc:	2302      	movs	r3, #2
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066c4:	2303      	movs	r3, #3
 80066c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80066c8:	230b      	movs	r3, #11
 80066ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d0:	4619      	mov	r1, r3
 80066d2:	481f      	ldr	r0, [pc, #124]	; (8006750 <HAL_ETH_MspInit+0x184>)
 80066d4:	f7fc fbec 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80066d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066de:	2302      	movs	r3, #2
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066e6:	2303      	movs	r3, #3
 80066e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80066ea:	230b      	movs	r3, #11
 80066ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80066ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f2:	4619      	mov	r1, r3
 80066f4:	4817      	ldr	r0, [pc, #92]	; (8006754 <HAL_ETH_MspInit+0x188>)
 80066f6:	f7fc fbdb 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80066fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006700:	2302      	movs	r3, #2
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006704:	2300      	movs	r3, #0
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006708:	2303      	movs	r3, #3
 800670a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800670c:	230b      	movs	r3, #11
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006714:	4619      	mov	r1, r3
 8006716:	4810      	ldr	r0, [pc, #64]	; (8006758 <HAL_ETH_MspInit+0x18c>)
 8006718:	f7fc fbca 	bl	8002eb0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800671c:	2200      	movs	r2, #0
 800671e:	2105      	movs	r1, #5
 8006720:	203d      	movs	r0, #61	; 0x3d
 8006722:	f7fb f8ed 	bl	8001900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006726:	203d      	movs	r0, #61	; 0x3d
 8006728:	f7fb f906 	bl	8001938 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800672c:	2200      	movs	r2, #0
 800672e:	2105      	movs	r1, #5
 8006730:	203e      	movs	r0, #62	; 0x3e
 8006732:	f7fb f8e5 	bl	8001900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8006736:	203e      	movs	r0, #62	; 0x3e
 8006738:	f7fb f8fe 	bl	8001938 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800673c:	bf00      	nop
 800673e:	3738      	adds	r7, #56	; 0x38
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40028000 	.word	0x40028000
 8006748:	40023800 	.word	0x40023800
 800674c:	40020800 	.word	0x40020800
 8006750:	40020000 	.word	0x40020000
 8006754:	40020400 	.word	0x40020400
 8006758:	40021800 	.word	0x40021800

0800675c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006760:	4802      	ldr	r0, [pc, #8]	; (800676c <ETH_PHY_IO_Init+0x10>)
 8006762:	f7fb ff3f 	bl	80025e4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	bd80      	pop	{r7, pc}
 800676c:	200055c0 	.word	0x200055c0

08006770 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  return 0;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	4807      	ldr	r0, [pc, #28]	; (80067b0 <ETH_PHY_IO_ReadReg+0x30>)
 8006794:	f7fb fd8e 	bl	80022b4 <HAL_ETH_ReadPHYRegister>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800679e:	f04f 33ff 	mov.w	r3, #4294967295
 80067a2:	e000      	b.n	80067a6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	200055c0 	.word	0x200055c0

080067b4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	68f9      	ldr	r1, [r7, #12]
 80067c6:	4807      	ldr	r0, [pc, #28]	; (80067e4 <ETH_PHY_IO_WriteReg+0x30>)
 80067c8:	f7fb fdbf 	bl	800234a <HAL_ETH_WritePHYRegister>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80067d2:	f04f 33ff 	mov.w	r3, #4294967295
 80067d6:	e000      	b.n	80067da <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	200055c0 	.word	0x200055c0

080067e8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80067ec:	f7fa ffa0 	bl	8001730 <HAL_GetTick>
 80067f0:	4603      	mov	r3, r0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b0a0      	sub	sp, #128	; 0x80
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006800:	f107 0308 	add.w	r3, r7, #8
 8006804:	2264      	movs	r2, #100	; 0x64
 8006806:	2100      	movs	r1, #0
 8006808:	4618      	mov	r0, r3
 800680a:	f012 fa60 	bl	8018cce <memset>
  int32_t PHYLinkState = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006816:	2300      	movs	r3, #0
 8006818:	67bb      	str	r3, [r7, #120]	; 0x78
 800681a:	2300      	movs	r3, #0
 800681c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006822:	483a      	ldr	r0, [pc, #232]	; (800690c <ethernet_link_thread+0x114>)
 8006824:	f7fa fedb 	bl	80015de <LAN8742_GetLinkState>
 8006828:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800682a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006830:	089b      	lsrs	r3, r3, #2
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00c      	beq.n	8006856 <ethernet_link_thread+0x5e>
 800683c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800683e:	2b01      	cmp	r3, #1
 8006840:	dc09      	bgt.n	8006856 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006842:	4833      	ldr	r0, [pc, #204]	; (8006910 <ethernet_link_thread+0x118>)
 8006844:	f7fb f9f0 	bl	8001c28 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006848:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800684a:	f006 fde5 	bl	800d418 <netif_set_down>
    netif_set_link_down(netif);
 800684e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006850:	f006 fe48 	bl	800d4e4 <netif_set_link_down>
 8006854:	e055      	b.n	8006902 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006858:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d14e      	bne.n	8006902 <ethernet_link_thread+0x10a>
 8006864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006866:	2b01      	cmp	r3, #1
 8006868:	dd4b      	ble.n	8006902 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800686a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800686c:	3b02      	subs	r3, #2
 800686e:	2b03      	cmp	r3, #3
 8006870:	d82a      	bhi.n	80068c8 <ethernet_link_thread+0xd0>
 8006872:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <ethernet_link_thread+0x80>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	08006889 	.word	0x08006889
 800687c:	0800689b 	.word	0x0800689b
 8006880:	080068ab 	.word	0x080068ab
 8006884:	080068bb 	.word	0x080068bb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800688c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800688e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006892:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006894:	2301      	movs	r3, #1
 8006896:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006898:	e017      	b.n	80068ca <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800689a:	2300      	movs	r3, #0
 800689c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800689e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068a2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80068a4:	2301      	movs	r3, #1
 80068a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80068a8:	e00f      	b.n	80068ca <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80068aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068ae:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80068b0:	2300      	movs	r3, #0
 80068b2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80068b4:	2301      	movs	r3, #1
 80068b6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80068b8:	e007      	b.n	80068ca <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80068be:	2300      	movs	r3, #0
 80068c0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80068c2:	2301      	movs	r3, #1
 80068c4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80068c6:	e000      	b.n	80068ca <ethernet_link_thread+0xd2>
    default:
      break;
 80068c8:	bf00      	nop
    }

    if(linkchanged)
 80068ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d018      	beq.n	8006902 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80068d0:	f107 0308 	add.w	r3, r7, #8
 80068d4:	4619      	mov	r1, r3
 80068d6:	480e      	ldr	r0, [pc, #56]	; (8006910 <ethernet_link_thread+0x118>)
 80068d8:	f7fb fd80 	bl	80023dc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80068dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068de:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80068e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80068e4:	f107 0308 	add.w	r3, r7, #8
 80068e8:	4619      	mov	r1, r3
 80068ea:	4809      	ldr	r0, [pc, #36]	; (8006910 <ethernet_link_thread+0x118>)
 80068ec:	f7fb fe60 	bl	80025b0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80068f0:	4807      	ldr	r0, [pc, #28]	; (8006910 <ethernet_link_thread+0x118>)
 80068f2:	f7fb f8ab 	bl	8001a4c <HAL_ETH_Start>
      netif_set_up(netif);
 80068f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80068f8:	f006 fd22 	bl	800d340 <netif_set_up>
      netif_set_link_up(netif);
 80068fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80068fe:	f006 fdbd 	bl	800d47c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006902:	2064      	movs	r0, #100	; 0x64
 8006904:	f000 f910 	bl	8006b28 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006908:	e78b      	b.n	8006822 <ethernet_link_thread+0x2a>
 800690a:	bf00      	nop
 800690c:	200056a8 	.word	0x200056a8
 8006910:	200055c0 	.word	0x200055c0

08006914 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af02      	add	r7, sp, #8
 800691a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800691c:	4812      	ldr	r0, [pc, #72]	; (8006968 <HAL_ETH_RxAllocateCallback+0x54>)
 800691e:	f006 fa83 	bl	800ce28 <memp_malloc_pool>
 8006922:	60f8      	str	r0, [r7, #12]
  if (p)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d014      	beq.n	8006954 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f103 0220 	add.w	r2, r3, #32
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4a0d      	ldr	r2, [pc, #52]	; (800696c <HAL_ETH_RxAllocateCallback+0x58>)
 8006938:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006942:	9201      	str	r2, [sp, #4]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2241      	movs	r2, #65	; 0x41
 800694a:	2100      	movs	r1, #0
 800694c:	2000      	movs	r0, #0
 800694e:	f006 ffed 	bl	800d92c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006952:	e005      	b.n	8006960 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006954:	4b06      	ldr	r3, [pc, #24]	; (8006970 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006956:	2201      	movs	r2, #1
 8006958:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	080201f4 	.word	0x080201f4
 800696c:	0800657d 	.word	0x0800657d
 8006970:	200055b4 	.word	0x200055b4

08006974 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800698a:	2300      	movs	r3, #0
 800698c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3b20      	subs	r3, #32
 8006992:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	2200      	movs	r2, #0
 800699e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	887a      	ldrh	r2, [r7, #2]
 80069a4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d103      	bne.n	80069b6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	69fa      	ldr	r2, [r7, #28]
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e003      	b.n	80069be <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	e009      	b.n	80069e0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	891a      	ldrh	r2, [r3, #8]
 80069d0:	887b      	ldrh	r3, [r7, #2]
 80069d2:	4413      	add	r3, r2
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	61fb      	str	r3, [r7, #28]
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f2      	bne.n	80069cc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80069e6:	887b      	ldrh	r3, [r7, #2]
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff fb26 	bl	800603c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80069f0:	bf00      	nop
 80069f2:	3720      	adds	r7, #32
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f007 f94d 	bl	800dca0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	4603      	mov	r3, r0
 8006a16:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a20:	2b84      	cmp	r3, #132	; 0x84
 8006a22:	d005      	beq.n	8006a30 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006a24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3303      	adds	r3, #3
 8006a2e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006a30:	68fb      	ldr	r3, [r7, #12]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a44:	f3ef 8305 	mrs	r3, IPSR
 8006a48:	607b      	str	r3, [r7, #4]
  return(result);
 8006a4a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bf14      	ite	ne
 8006a50:	2301      	movne	r3, #1
 8006a52:	2300      	moveq	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a66:	f001 fd89 	bl	800857c <vTaskStartScheduler>
  
  return osOK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006a74:	f7ff ffe3 	bl	8006a3e <inHandlerMode>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006a7e:	f001 fea7 	bl	80087d0 <xTaskGetTickCountFromISR>
 8006a82:	4603      	mov	r3, r0
 8006a84:	e002      	b.n	8006a8c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006a86:	f001 fe93 	bl	80087b0 <xTaskGetTickCount>
 8006a8a:	4603      	mov	r3, r0
  }
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a92:	b089      	sub	sp, #36	; 0x24
 8006a94:	af04      	add	r7, sp, #16
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d020      	beq.n	8006ae4 <osThreadCreate+0x54>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01c      	beq.n	8006ae4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685c      	ldr	r4, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691e      	ldr	r6, [r3, #16]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff ffa6 	bl	8006a0e <makeFreeRtosPriority>
 8006ac2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006acc:	9202      	str	r2, [sp, #8]
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	9100      	str	r1, [sp, #0]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	4632      	mov	r2, r6
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f001 fb67 	bl	80081ac <xTaskCreateStatic>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e01c      	b.n	8006b1e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685c      	ldr	r4, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006af0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff ff88 	bl	8006a0e <makeFreeRtosPriority>
 8006afe:	4602      	mov	r2, r0
 8006b00:	f107 030c 	add.w	r3, r7, #12
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	9200      	str	r2, [sp, #0]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	4632      	mov	r2, r6
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f001 fbaf 	bl	8008272 <xTaskCreate>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d001      	beq.n	8006b1e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e000      	b.n	8006b20 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b28 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <osDelay+0x16>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	e000      	b.n	8006b40 <osDelay+0x18>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4618      	mov	r0, r3
 8006b42:	f001 fce5 	bl	8008510 <vTaskDelay>
  
  return osOK;
 8006b46:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	4619      	mov	r1, r3
 8006b66:	2001      	movs	r0, #1
 8006b68:	f000 fc91 	bl	800748e <xQueueCreateMutexStatic>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	e003      	b.n	8006b78 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006b70:	2001      	movs	r0, #1
 8006b72:	f000 fc74 	bl	800745e <xQueueCreateMutex>
 8006b76:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <osMutexWait+0x18>
    return osErrorParameter;
 8006b94:	2380      	movs	r3, #128	; 0x80
 8006b96:	e03a      	b.n	8006c0e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba2:	d103      	bne.n	8006bac <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	e009      	b.n	8006bc0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d006      	beq.n	8006bc0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <osMutexWait+0x40>
      ticks = 1;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006bc0:	f7ff ff3d 	bl	8006a3e <inHandlerMode>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d017      	beq.n	8006bfa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006bca:	f107 0308 	add.w	r3, r7, #8
 8006bce:	461a      	mov	r2, r3
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 f8ac 	bl	8007d30 <xQueueReceiveFromISR>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d001      	beq.n	8006be2 <osMutexWait+0x62>
      return osErrorOS;
 8006bde:	23ff      	movs	r3, #255	; 0xff
 8006be0:	e015      	b.n	8006c0e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d011      	beq.n	8006c0c <osMutexWait+0x8c>
 8006be8:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <osMutexWait+0x98>)
 8006bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	e008      	b.n	8006c0c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 ff83 	bl	8007b08 <xQueueSemaphoreTake>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d001      	beq.n	8006c0c <osMutexWait+0x8c>
    return osErrorOS;
 8006c08:	23ff      	movs	r3, #255	; 0xff
 8006c0a:	e000      	b.n	8006c0e <osMutexWait+0x8e>
  }
  
  return osOK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006c2c:	f7ff ff07 	bl	8006a3e <inHandlerMode>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d016      	beq.n	8006c64 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006c36:	f107 0308 	add.w	r3, r7, #8
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fde7 	bl	8007810 <xQueueGiveFromISR>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d001      	beq.n	8006c4c <osMutexRelease+0x30>
      return osErrorOS;
 8006c48:	23ff      	movs	r3, #255	; 0xff
 8006c4a:	e017      	b.n	8006c7c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d013      	beq.n	8006c7a <osMutexRelease+0x5e>
 8006c52:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <osMutexRelease+0x68>)
 8006c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	e00a      	b.n	8006c7a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006c64:	2300      	movs	r3, #0
 8006c66:	2200      	movs	r2, #0
 8006c68:	2100      	movs	r1, #0
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fc2a 	bl	80074c4 <xQueueGenericSend>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d001      	beq.n	8006c7a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006c76:	23ff      	movs	r3, #255	; 0xff
 8006c78:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	e000ed04 	.word	0xe000ed04

08006c88 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00f      	beq.n	8006cba <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d10a      	bne.n	8006cb6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	9200      	str	r2, [sp, #0]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2100      	movs	r1, #0
 8006cac:	2001      	movs	r0, #1
 8006cae:	f000 fad9 	bl	8007264 <xQueueGenericCreateStatic>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	e016      	b.n	8006ce4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e014      	b.n	8006ce4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d110      	bne.n	8006ce2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006cc0:	2203      	movs	r2, #3
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	f000 fb4f 	bl	8007368 <xQueueGenericCreate>
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <osSemaphoreCreate+0x56>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fbf3 	bl	80074c4 <xQueueGenericSend>
      return sema;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	e000      	b.n	8006ce4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006ce2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006d00:	2380      	movs	r3, #128	; 0x80
 8006d02:	e03a      	b.n	8006d7a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d103      	bne.n	8006d18 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	e009      	b.n	8006d2c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d006      	beq.n	8006d2c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <osSemaphoreWait+0x40>
      ticks = 1;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006d2c:	f7ff fe87 	bl	8006a3e <inHandlerMode>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d017      	beq.n	8006d66 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006d36:	f107 0308 	add.w	r3, r7, #8
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fff6 	bl	8007d30 <xQueueReceiveFromISR>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d001      	beq.n	8006d4e <osSemaphoreWait+0x62>
      return osErrorOS;
 8006d4a:	23ff      	movs	r3, #255	; 0xff
 8006d4c:	e015      	b.n	8006d7a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d011      	beq.n	8006d78 <osSemaphoreWait+0x8c>
 8006d54:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <osSemaphoreWait+0x98>)
 8006d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	e008      	b.n	8006d78 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fecd 	bl	8007b08 <xQueueSemaphoreTake>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d001      	beq.n	8006d78 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006d74:	23ff      	movs	r3, #255	; 0xff
 8006d76:	e000      	b.n	8006d7a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	e000ed04 	.word	0xe000ed04

08006d88 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006d98:	f7ff fe51 	bl	8006a3e <inHandlerMode>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d016      	beq.n	8006dd0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006da2:	f107 0308 	add.w	r3, r7, #8
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fd31 	bl	8007810 <xQueueGiveFromISR>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d001      	beq.n	8006db8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006db4:	23ff      	movs	r3, #255	; 0xff
 8006db6:	e017      	b.n	8006de8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d013      	beq.n	8006de6 <osSemaphoreRelease+0x5e>
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <osSemaphoreRelease+0x68>)
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	e00a      	b.n	8006de6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fb74 	bl	80074c4 <xQueueGenericSend>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d001      	beq.n	8006de6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006de2:	23ff      	movs	r3, #255	; 0xff
 8006de4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006de6:	68fb      	ldr	r3, [r7, #12]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	e000ed04 	.word	0xe000ed04

08006df4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006dfc:	f7ff fe1f 	bl	8006a3e <inHandlerMode>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006e06:	2382      	movs	r3, #130	; 0x82
 8006e08:	e003      	b.n	8006e12 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 f856 	bl	8007ebc <vQueueDelete>

  return osOK; 
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006e1a:	b590      	push	{r4, r7, lr}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af02      	add	r7, sp, #8
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d011      	beq.n	8006e50 <osMessageCreate+0x36>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00d      	beq.n	8006e50 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6859      	ldr	r1, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2400      	movs	r4, #0
 8006e46:	9400      	str	r4, [sp, #0]
 8006e48:	f000 fa0c 	bl	8007264 <xQueueGenericCreateStatic>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	e008      	b.n	8006e62 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	f000 fa84 	bl	8007368 <xQueueGenericCreate>
 8006e60:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd90      	pop	{r4, r7, pc}
	...

08006e6c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <osMessagePut+0x1e>
    ticks = 1;
 8006e86:	2301      	movs	r3, #1
 8006e88:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006e8a:	f7ff fdd8 	bl	8006a3e <inHandlerMode>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d018      	beq.n	8006ec6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006e94:	f107 0210 	add.w	r2, r7, #16
 8006e98:	f107 0108 	add.w	r1, r7, #8
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fc16 	bl	80076d0 <xQueueGenericSendFromISR>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d001      	beq.n	8006eae <osMessagePut+0x42>
      return osErrorOS;
 8006eaa:	23ff      	movs	r3, #255	; 0xff
 8006eac:	e018      	b.n	8006ee0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d014      	beq.n	8006ede <osMessagePut+0x72>
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <osMessagePut+0x7c>)
 8006eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	e00b      	b.n	8006ede <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006ec6:	f107 0108 	add.w	r1, r7, #8
 8006eca:	2300      	movs	r3, #0
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 faf8 	bl	80074c4 <xQueueGenericSend>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d001      	beq.n	8006ede <osMessagePut+0x72>
      return osErrorOS;
 8006eda:	23ff      	movs	r3, #255	; 0xff
 8006edc:	e000      	b.n	8006ee0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006eec:	b590      	push	{r4, r7, lr}
 8006eee:	b08b      	sub	sp, #44	; 0x2c
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006f06:	2380      	movs	r3, #128	; 0x80
 8006f08:	617b      	str	r3, [r7, #20]
    return event;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	461c      	mov	r4, r3
 8006f0e:	f107 0314 	add.w	r3, r7, #20
 8006f12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f1a:	e054      	b.n	8006fc6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2a:	d103      	bne.n	8006f34 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
 8006f32:	e009      	b.n	8006f48 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d006      	beq.n	8006f48 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <osMessageGet+0x5c>
      ticks = 1;
 8006f44:	2301      	movs	r3, #1
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006f48:	f7ff fd79 	bl	8006a3e <inHandlerMode>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01c      	beq.n	8006f8c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006f52:	f107 0220 	add.w	r2, r7, #32
 8006f56:	f107 0314 	add.w	r3, r7, #20
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	68b8      	ldr	r0, [r7, #8]
 8006f60:	f000 fee6 	bl	8007d30 <xQueueReceiveFromISR>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d102      	bne.n	8006f70 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006f6a:	2310      	movs	r3, #16
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	e001      	b.n	8006f74 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d01d      	beq.n	8006fb6 <osMessageGet+0xca>
 8006f7a:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <osMessageGet+0xe4>)
 8006f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	e014      	b.n	8006fb6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006f8c:	f107 0314 	add.w	r3, r7, #20
 8006f90:	3304      	adds	r3, #4
 8006f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f94:	4619      	mov	r1, r3
 8006f96:	68b8      	ldr	r0, [r7, #8]
 8006f98:	f000 fcd0 	bl	800793c <xQueueReceive>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d102      	bne.n	8006fa8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e006      	b.n	8006fb6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <osMessageGet+0xc6>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e000      	b.n	8006fb4 <osMessageGet+0xc8>
 8006fb2:	2340      	movs	r3, #64	; 0x40
 8006fb4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	461c      	mov	r4, r3
 8006fba:	f107 0314 	add.w	r3, r7, #20
 8006fbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	372c      	adds	r7, #44	; 0x2c
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd90      	pop	{r4, r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	e000ed04 	.word	0xe000ed04

08006fd4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006fdc:	f7ff fd2f 	bl	8006a3e <inHandlerMode>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d004      	beq.n	8006ff0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 ff48 	bl	8007e7c <uxQueueMessagesWaitingFromISR>
 8006fec:	4603      	mov	r3, r0
 8006fee:	e003      	b.n	8006ff8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 ff23 	bl	8007e3c <uxQueueMessagesWaiting>
 8006ff6:	4603      	mov	r3, r0
  }
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007008:	f7ff fd19 	bl	8006a3e <inHandlerMode>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <osMessageDelete+0x16>
    return osErrorISR;
 8007012:	2382      	movs	r3, #130	; 0x82
 8007014:	e003      	b.n	800701e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 ff50 	bl	8007ebc <vQueueDelete>

  return osOK; 
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f103 0208 	add.w	r2, r3, #8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f04f 32ff 	mov.w	r2, #4294967295
 800703e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f103 0208 	add.w	r2, r3, #8
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f103 0208 	add.w	r2, r3, #8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	601a      	str	r2, [r3, #0]
}
 80070bc:	bf00      	nop
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070de:	d103      	bne.n	80070e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	e00c      	b.n	8007102 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3308      	adds	r3, #8
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	e002      	b.n	80070f6 <vListInsert+0x2e>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d2f6      	bcs.n	80070f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	601a      	str	r2, [r3, #0]
}
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	6892      	ldr	r2, [r2, #8]
 8007150:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6852      	ldr	r2, [r2, #4]
 800715a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	429a      	cmp	r2, r3
 8007164:	d103      	bne.n	800716e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	689a      	ldr	r2, [r3, #8]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	1e5a      	subs	r2, r3, #1
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
	...

08007190 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10c      	bne.n	80071be <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	b672      	cpsid	i
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	b662      	cpsie	i
 80071b8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80071be:	f002 f975 	bl	80094ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	68f9      	ldr	r1, [r7, #12]
 80071cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071ce:	fb01 f303 	mul.w	r3, r1, r3
 80071d2:	441a      	add	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	3b01      	subs	r3, #1
 80071f0:	68f9      	ldr	r1, [r7, #12]
 80071f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071f4:	fb01 f303 	mul.w	r3, r1, r3
 80071f8:	441a      	add	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	22ff      	movs	r2, #255	; 0xff
 8007202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	22ff      	movs	r2, #255	; 0xff
 800720a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d114      	bne.n	800723e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01a      	beq.n	8007252 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3310      	adds	r3, #16
 8007220:	4618      	mov	r0, r3
 8007222:	f001 fc2b 	bl	8008a7c <xTaskRemoveFromEventList>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d012      	beq.n	8007252 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <xQueueGenericReset+0xd0>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	e009      	b.n	8007252 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3310      	adds	r3, #16
 8007242:	4618      	mov	r0, r3
 8007244:	f7ff feef 	bl	8007026 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3324      	adds	r3, #36	; 0x24
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff feea 	bl	8007026 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007252:	f002 f95f 	bl	8009514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007256:	2301      	movs	r3, #1
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	e000ed04 	.word	0xe000ed04

08007264 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08e      	sub	sp, #56	; 0x38
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10c      	bne.n	8007292 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	b672      	cpsid	i
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	b662      	cpsie	i
 800728c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10c      	bne.n	80072b2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	b672      	cpsid	i
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	b662      	cpsie	i
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <xQueueGenericCreateStatic+0x5a>
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <xQueueGenericCreateStatic+0x5e>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <xQueueGenericCreateStatic+0x60>
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10c      	bne.n	80072e2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	b672      	cpsid	i
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	b662      	cpsie	i
 80072dc:	623b      	str	r3, [r7, #32]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d102      	bne.n	80072ee <xQueueGenericCreateStatic+0x8a>
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <xQueueGenericCreateStatic+0x8e>
 80072ee:	2301      	movs	r3, #1
 80072f0:	e000      	b.n	80072f4 <xQueueGenericCreateStatic+0x90>
 80072f2:	2300      	movs	r3, #0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10c      	bne.n	8007312 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	b672      	cpsid	i
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	b662      	cpsie	i
 800730c:	61fb      	str	r3, [r7, #28]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007312:	2348      	movs	r3, #72	; 0x48
 8007314:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b48      	cmp	r3, #72	; 0x48
 800731a:	d00c      	beq.n	8007336 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	b672      	cpsid	i
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	b662      	cpsie	i
 8007330:	61bb      	str	r3, [r7, #24]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007336:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00d      	beq.n	800735e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800734a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	4613      	mov	r3, r2
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f847 	bl	80073ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007360:	4618      	mov	r0, r3
 8007362:	3730      	adds	r7, #48	; 0x30
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af02      	add	r7, sp, #8
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	4613      	mov	r3, r2
 8007374:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10c      	bne.n	8007396 <xQueueGenericCreate+0x2e>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	b672      	cpsid	i
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	b662      	cpsie	i
 8007390:	613b      	str	r3, [r7, #16]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d102      	bne.n	80073a2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800739c:	2300      	movs	r3, #0
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	e004      	b.n	80073ac <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	3348      	adds	r3, #72	; 0x48
 80073b0:	4618      	mov	r0, r3
 80073b2:	f002 f9a7 	bl	8009704 <pvPortMalloc>
 80073b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d011      	beq.n	80073e2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	3348      	adds	r3, #72	; 0x48
 80073c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073d0:	79fa      	ldrb	r2, [r7, #7]
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	4613      	mov	r3, r2
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 f805 	bl	80073ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073e2:	69bb      	ldr	r3, [r7, #24]
	}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3720      	adds	r7, #32
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d103      	bne.n	8007408 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e002      	b.n	800740e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800741a:	2101      	movs	r1, #1
 800741c:	69b8      	ldr	r0, [r7, #24]
 800741e:	f7ff feb7 	bl	8007190 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00e      	beq.n	8007456 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800744a:	2300      	movs	r3, #0
 800744c:	2200      	movs	r2, #0
 800744e:	2100      	movs	r1, #0
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f837 	bl	80074c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800745e:	b580      	push	{r7, lr}
 8007460:	b086      	sub	sp, #24
 8007462:	af00      	add	r7, sp, #0
 8007464:	4603      	mov	r3, r0
 8007466:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007468:	2301      	movs	r3, #1
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	2300      	movs	r3, #0
 800746e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	461a      	mov	r2, r3
 8007474:	6939      	ldr	r1, [r7, #16]
 8007476:	6978      	ldr	r0, [r7, #20]
 8007478:	f7ff ff76 	bl	8007368 <xQueueGenericCreate>
 800747c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f7ff ffd3 	bl	800742a <prvInitialiseMutex>

		return xNewQueue;
 8007484:	68fb      	ldr	r3, [r7, #12]
	}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800748e:	b580      	push	{r7, lr}
 8007490:	b088      	sub	sp, #32
 8007492:	af02      	add	r7, sp, #8
 8007494:	4603      	mov	r3, r0
 8007496:	6039      	str	r1, [r7, #0]
 8007498:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800749a:	2301      	movs	r3, #1
 800749c:	617b      	str	r3, [r7, #20]
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2200      	movs	r2, #0
 80074aa:	6939      	ldr	r1, [r7, #16]
 80074ac:	6978      	ldr	r0, [r7, #20]
 80074ae:	f7ff fed9 	bl	8007264 <xQueueGenericCreateStatic>
 80074b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff ffb8 	bl	800742a <prvInitialiseMutex>

		return xNewQueue;
 80074ba:	68fb      	ldr	r3, [r7, #12]
	}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08e      	sub	sp, #56	; 0x38
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074d2:	2300      	movs	r3, #0
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10c      	bne.n	80074fa <xQueueGenericSend+0x36>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	b672      	cpsid	i
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	b662      	cpsie	i
 80074f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d103      	bne.n	8007508 <xQueueGenericSend+0x44>
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <xQueueGenericSend+0x48>
 8007508:	2301      	movs	r3, #1
 800750a:	e000      	b.n	800750e <xQueueGenericSend+0x4a>
 800750c:	2300      	movs	r3, #0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10c      	bne.n	800752c <xQueueGenericSend+0x68>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	b672      	cpsid	i
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	b662      	cpsie	i
 8007526:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d103      	bne.n	800753a <xQueueGenericSend+0x76>
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <xQueueGenericSend+0x7a>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <xQueueGenericSend+0x7c>
 800753e:	2300      	movs	r3, #0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10c      	bne.n	800755e <xQueueGenericSend+0x9a>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	b672      	cpsid	i
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	b662      	cpsie	i
 8007558:	623b      	str	r3, [r7, #32]
}
 800755a:	bf00      	nop
 800755c:	e7fe      	b.n	800755c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800755e:	f001 fc55 	bl	8008e0c <xTaskGetSchedulerState>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d102      	bne.n	800756e <xQueueGenericSend+0xaa>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <xQueueGenericSend+0xae>
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <xQueueGenericSend+0xb0>
 8007572:	2300      	movs	r3, #0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10c      	bne.n	8007592 <xQueueGenericSend+0xce>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	b672      	cpsid	i
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	b662      	cpsie	i
 800758c:	61fb      	str	r3, [r7, #28]
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007592:	f001 ff8b 	bl	80094ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759e:	429a      	cmp	r2, r3
 80075a0:	d302      	bcc.n	80075a8 <xQueueGenericSend+0xe4>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d129      	bne.n	80075fc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ae:	f000 fcc2 	bl	8007f36 <prvCopyDataToQueue>
 80075b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d010      	beq.n	80075de <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	3324      	adds	r3, #36	; 0x24
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 fa5b 	bl	8008a7c <xTaskRemoveFromEventList>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d013      	beq.n	80075f4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075cc:	4b3f      	ldr	r3, [pc, #252]	; (80076cc <xQueueGenericSend+0x208>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	e00a      	b.n	80075f4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075e4:	4b39      	ldr	r3, [pc, #228]	; (80076cc <xQueueGenericSend+0x208>)
 80075e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075f4:	f001 ff8e 	bl	8009514 <vPortExitCritical>
				return pdPASS;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e063      	b.n	80076c4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d103      	bne.n	800760a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007602:	f001 ff87 	bl	8009514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007606:	2300      	movs	r3, #0
 8007608:	e05c      	b.n	80076c4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800760a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007610:	f107 0314 	add.w	r3, r7, #20
 8007614:	4618      	mov	r0, r3
 8007616:	f001 fa95 	bl	8008b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800761a:	2301      	movs	r3, #1
 800761c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800761e:	f001 ff79 	bl	8009514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007622:	f001 f819 	bl	8008658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007626:	f001 ff41 	bl	80094ac <vPortEnterCritical>
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007630:	b25b      	sxtb	r3, r3
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007636:	d103      	bne.n	8007640 <xQueueGenericSend+0x17c>
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007646:	b25b      	sxtb	r3, r3
 8007648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764c:	d103      	bne.n	8007656 <xQueueGenericSend+0x192>
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007656:	f001 ff5d 	bl	8009514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800765a:	1d3a      	adds	r2, r7, #4
 800765c:	f107 0314 	add.w	r3, r7, #20
 8007660:	4611      	mov	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f001 fa84 	bl	8008b70 <xTaskCheckForTimeOut>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d124      	bne.n	80076b8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800766e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007670:	f000 fd59 	bl	8008126 <prvIsQueueFull>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d018      	beq.n	80076ac <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	3310      	adds	r3, #16
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	4611      	mov	r1, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f001 f9d4 	bl	8008a30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800768a:	f000 fce4 	bl	8008056 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800768e:	f000 fff1 	bl	8008674 <xTaskResumeAll>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	f47f af7c 	bne.w	8007592 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800769a:	4b0c      	ldr	r3, [pc, #48]	; (80076cc <xQueueGenericSend+0x208>)
 800769c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a0:	601a      	str	r2, [r3, #0]
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	e772      	b.n	8007592 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076ae:	f000 fcd2 	bl	8008056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076b2:	f000 ffdf 	bl	8008674 <xTaskResumeAll>
 80076b6:	e76c      	b.n	8007592 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076ba:	f000 fccc 	bl	8008056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076be:	f000 ffd9 	bl	8008674 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3738      	adds	r7, #56	; 0x38
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08e      	sub	sp, #56	; 0x38
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
 80076dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10c      	bne.n	8007702 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	b672      	cpsid	i
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	b662      	cpsie	i
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d103      	bne.n	8007710 <xQueueGenericSendFromISR+0x40>
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <xQueueGenericSendFromISR+0x44>
 8007710:	2301      	movs	r3, #1
 8007712:	e000      	b.n	8007716 <xQueueGenericSendFromISR+0x46>
 8007714:	2300      	movs	r3, #0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10c      	bne.n	8007734 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	b672      	cpsid	i
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	b662      	cpsie	i
 800772e:	623b      	str	r3, [r7, #32]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2b02      	cmp	r3, #2
 8007738:	d103      	bne.n	8007742 <xQueueGenericSendFromISR+0x72>
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773e:	2b01      	cmp	r3, #1
 8007740:	d101      	bne.n	8007746 <xQueueGenericSendFromISR+0x76>
 8007742:	2301      	movs	r3, #1
 8007744:	e000      	b.n	8007748 <xQueueGenericSendFromISR+0x78>
 8007746:	2300      	movs	r3, #0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10c      	bne.n	8007766 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	b672      	cpsid	i
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	b662      	cpsie	i
 8007760:	61fb      	str	r3, [r7, #28]
}
 8007762:	bf00      	nop
 8007764:	e7fe      	b.n	8007764 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007766:	f001 ff89 	bl	800967c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800776a:	f3ef 8211 	mrs	r2, BASEPRI
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	b672      	cpsid	i
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	b662      	cpsie	i
 8007782:	61ba      	str	r2, [r7, #24]
 8007784:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007786:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007788:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007792:	429a      	cmp	r2, r3
 8007794:	d302      	bcc.n	800779c <xQueueGenericSendFromISR+0xcc>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d12c      	bne.n	80077f6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	68b9      	ldr	r1, [r7, #8]
 80077aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077ac:	f000 fbc3 	bl	8007f36 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d112      	bne.n	80077e0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d016      	beq.n	80077f0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	3324      	adds	r3, #36	; 0x24
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 f958 	bl	8008a7c <xTaskRemoveFromEventList>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00e      	beq.n	80077f0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	e007      	b.n	80077f0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077e4:	3301      	adds	r3, #1
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	b25a      	sxtb	r2, r3
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077f0:	2301      	movs	r3, #1
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80077f4:	e001      	b.n	80077fa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007804:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007808:	4618      	mov	r0, r3
 800780a:	3738      	adds	r7, #56	; 0x38
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08e      	sub	sp, #56	; 0x38
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10c      	bne.n	800783e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	b672      	cpsid	i
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	b662      	cpsie	i
 8007838:	623b      	str	r3, [r7, #32]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00c      	beq.n	8007860 <xQueueGiveFromISR+0x50>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	b672      	cpsid	i
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	b662      	cpsie	i
 800785a:	61fb      	str	r3, [r7, #28]
}
 800785c:	bf00      	nop
 800785e:	e7fe      	b.n	800785e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <xQueueGiveFromISR+0x60>
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <xQueueGiveFromISR+0x64>
 8007870:	2301      	movs	r3, #1
 8007872:	e000      	b.n	8007876 <xQueueGiveFromISR+0x66>
 8007874:	2300      	movs	r3, #0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10c      	bne.n	8007894 <xQueueGiveFromISR+0x84>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	b672      	cpsid	i
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	b662      	cpsie	i
 800788e:	61bb      	str	r3, [r7, #24]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007894:	f001 fef2 	bl	800967c <vPortValidateInterruptPriority>
	__asm volatile
 8007898:	f3ef 8211 	mrs	r2, BASEPRI
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	b672      	cpsid	i
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	b662      	cpsie	i
 80078b0:	617a      	str	r2, [r7, #20]
 80078b2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80078b4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d22b      	bcs.n	8007920 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e2:	d112      	bne.n	800790a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d016      	beq.n	800791a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	3324      	adds	r3, #36	; 0x24
 80078f0:	4618      	mov	r0, r3
 80078f2:	f001 f8c3 	bl	8008a7c <xTaskRemoveFromEventList>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00e      	beq.n	800791a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2201      	movs	r2, #1
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	e007      	b.n	800791a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800790a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800790e:	3301      	adds	r3, #1
 8007910:	b2db      	uxtb	r3, r3
 8007912:	b25a      	sxtb	r2, r3
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800791a:	2301      	movs	r3, #1
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
 800791e:	e001      	b.n	8007924 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007920:	2300      	movs	r3, #0
 8007922:	637b      	str	r3, [r7, #52]	; 0x34
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f383 8811 	msr	BASEPRI, r3
}
 800792e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007932:	4618      	mov	r0, r3
 8007934:	3738      	adds	r7, #56	; 0x38
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08c      	sub	sp, #48	; 0x30
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007948:	2300      	movs	r3, #0
 800794a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10c      	bne.n	8007970 <xQueueReceive+0x34>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	b672      	cpsid	i
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	b662      	cpsie	i
 800796a:	623b      	str	r3, [r7, #32]
}
 800796c:	bf00      	nop
 800796e:	e7fe      	b.n	800796e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d103      	bne.n	800797e <xQueueReceive+0x42>
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <xQueueReceive+0x46>
 800797e:	2301      	movs	r3, #1
 8007980:	e000      	b.n	8007984 <xQueueReceive+0x48>
 8007982:	2300      	movs	r3, #0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10c      	bne.n	80079a2 <xQueueReceive+0x66>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	b672      	cpsid	i
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	b662      	cpsie	i
 800799c:	61fb      	str	r3, [r7, #28]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079a2:	f001 fa33 	bl	8008e0c <xTaskGetSchedulerState>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <xQueueReceive+0x76>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <xQueueReceive+0x7a>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e000      	b.n	80079b8 <xQueueReceive+0x7c>
 80079b6:	2300      	movs	r3, #0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10c      	bne.n	80079d6 <xQueueReceive+0x9a>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	b672      	cpsid	i
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	b662      	cpsie	i
 80079d0:	61bb      	str	r3, [r7, #24]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079d6:	f001 fd69 	bl	80094ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01f      	beq.n	8007a26 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079e6:	68b9      	ldr	r1, [r7, #8]
 80079e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ea:	f000 fb0e 	bl	800800a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	1e5a      	subs	r2, r3, #1
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00f      	beq.n	8007a1e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	3310      	adds	r3, #16
 8007a02:	4618      	mov	r0, r3
 8007a04:	f001 f83a 	bl	8008a7c <xTaskRemoveFromEventList>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a0e:	4b3d      	ldr	r3, [pc, #244]	; (8007b04 <xQueueReceive+0x1c8>)
 8007a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a1e:	f001 fd79 	bl	8009514 <vPortExitCritical>
				return pdPASS;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e069      	b.n	8007afa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d103      	bne.n	8007a34 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a2c:	f001 fd72 	bl	8009514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a30:	2300      	movs	r3, #0
 8007a32:	e062      	b.n	8007afa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a3a:	f107 0310 	add.w	r3, r7, #16
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f001 f880 	bl	8008b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a44:	2301      	movs	r3, #1
 8007a46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a48:	f001 fd64 	bl	8009514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a4c:	f000 fe04 	bl	8008658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a50:	f001 fd2c 	bl	80094ac <vPortEnterCritical>
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a5a:	b25b      	sxtb	r3, r3
 8007a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a60:	d103      	bne.n	8007a6a <xQueueReceive+0x12e>
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a70:	b25b      	sxtb	r3, r3
 8007a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a76:	d103      	bne.n	8007a80 <xQueueReceive+0x144>
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a80:	f001 fd48 	bl	8009514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a84:	1d3a      	adds	r2, r7, #4
 8007a86:	f107 0310 	add.w	r3, r7, #16
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f001 f86f 	bl	8008b70 <xTaskCheckForTimeOut>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d123      	bne.n	8007ae0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a9a:	f000 fb2e 	bl	80080fa <prvIsQueueEmpty>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d017      	beq.n	8007ad4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	3324      	adds	r3, #36	; 0x24
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4611      	mov	r1, r2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 ffbf 	bl	8008a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ab4:	f000 facf 	bl	8008056 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ab8:	f000 fddc 	bl	8008674 <xTaskResumeAll>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d189      	bne.n	80079d6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007ac2:	4b10      	ldr	r3, [pc, #64]	; (8007b04 <xQueueReceive+0x1c8>)
 8007ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	e780      	b.n	80079d6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ad6:	f000 fabe 	bl	8008056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ada:	f000 fdcb 	bl	8008674 <xTaskResumeAll>
 8007ade:	e77a      	b.n	80079d6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ae2:	f000 fab8 	bl	8008056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ae6:	f000 fdc5 	bl	8008674 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aec:	f000 fb05 	bl	80080fa <prvIsQueueEmpty>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f43f af6f 	beq.w	80079d6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007af8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3730      	adds	r7, #48	; 0x30
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	e000ed04 	.word	0xe000ed04

08007b08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08e      	sub	sp, #56	; 0x38
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10c      	bne.n	8007b3e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	b672      	cpsid	i
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	b662      	cpsie	i
 8007b38:	623b      	str	r3, [r7, #32]
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00c      	beq.n	8007b60 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4a:	b672      	cpsid	i
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	b662      	cpsie	i
 8007b5a:	61fb      	str	r3, [r7, #28]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b60:	f001 f954 	bl	8008e0c <xTaskGetSchedulerState>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <xQueueSemaphoreTake+0x68>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <xQueueSemaphoreTake+0x6c>
 8007b70:	2301      	movs	r3, #1
 8007b72:	e000      	b.n	8007b76 <xQueueSemaphoreTake+0x6e>
 8007b74:	2300      	movs	r3, #0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10c      	bne.n	8007b94 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	b672      	cpsid	i
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	b662      	cpsie	i
 8007b8e:	61bb      	str	r3, [r7, #24]
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b94:	f001 fc8a 	bl	80094ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d024      	beq.n	8007bee <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	1e5a      	subs	r2, r3, #1
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007bb4:	f001 faf0 	bl	8009198 <pvTaskIncrementMutexHeldCount>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00f      	beq.n	8007be6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	3310      	adds	r3, #16
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 ff56 	bl	8008a7c <xTaskRemoveFromEventList>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bd6:	4b55      	ldr	r3, [pc, #340]	; (8007d2c <xQueueSemaphoreTake+0x224>)
 8007bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007be6:	f001 fc95 	bl	8009514 <vPortExitCritical>
				return pdPASS;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e099      	b.n	8007d22 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d113      	bne.n	8007c1c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00c      	beq.n	8007c14 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	b672      	cpsid	i
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	b662      	cpsie	i
 8007c0e:	617b      	str	r3, [r7, #20]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007c14:	f001 fc7e 	bl	8009514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e082      	b.n	8007d22 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c22:	f107 030c 	add.w	r3, r7, #12
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 ff8c 	bl	8008b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c30:	f001 fc70 	bl	8009514 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c34:	f000 fd10 	bl	8008658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c38:	f001 fc38 	bl	80094ac <vPortEnterCritical>
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c42:	b25b      	sxtb	r3, r3
 8007c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c48:	d103      	bne.n	8007c52 <xQueueSemaphoreTake+0x14a>
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c58:	b25b      	sxtb	r3, r3
 8007c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5e:	d103      	bne.n	8007c68 <xQueueSemaphoreTake+0x160>
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c68:	f001 fc54 	bl	8009514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c6c:	463a      	mov	r2, r7
 8007c6e:	f107 030c 	add.w	r3, r7, #12
 8007c72:	4611      	mov	r1, r2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 ff7b 	bl	8008b70 <xTaskCheckForTimeOut>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d132      	bne.n	8007ce6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c82:	f000 fa3a 	bl	80080fa <prvIsQueueEmpty>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d026      	beq.n	8007cda <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d109      	bne.n	8007ca8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007c94:	f001 fc0a 	bl	80094ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 f8d3 	bl	8008e48 <xTaskPriorityInherit>
 8007ca2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007ca4:	f001 fc36 	bl	8009514 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	3324      	adds	r3, #36	; 0x24
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 febd 	bl	8008a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cb8:	f000 f9cd 	bl	8008056 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cbc:	f000 fcda 	bl	8008674 <xTaskResumeAll>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f47f af66 	bne.w	8007b94 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007cc8:	4b18      	ldr	r3, [pc, #96]	; (8007d2c <xQueueSemaphoreTake+0x224>)
 8007cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	e75c      	b.n	8007b94 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cdc:	f000 f9bb 	bl	8008056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ce0:	f000 fcc8 	bl	8008674 <xTaskResumeAll>
 8007ce4:	e756      	b.n	8007b94 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ce8:	f000 f9b5 	bl	8008056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cec:	f000 fcc2 	bl	8008674 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cf2:	f000 fa02 	bl	80080fa <prvIsQueueEmpty>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f43f af4b 	beq.w	8007b94 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00d      	beq.n	8007d20 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007d04:	f001 fbd2 	bl	80094ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d0a:	f000 f8fc 	bl	8007f06 <prvGetDisinheritPriorityAfterTimeout>
 8007d0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 f9a0 	bl	800905c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007d1c:	f001 fbfa 	bl	8009514 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3738      	adds	r7, #56	; 0x38
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	e000ed04 	.word	0xe000ed04

08007d30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08e      	sub	sp, #56	; 0x38
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10c      	bne.n	8007d60 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	b672      	cpsid	i
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	b662      	cpsie	i
 8007d5a:	623b      	str	r3, [r7, #32]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d103      	bne.n	8007d6e <xQueueReceiveFromISR+0x3e>
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <xQueueReceiveFromISR+0x42>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e000      	b.n	8007d74 <xQueueReceiveFromISR+0x44>
 8007d72:	2300      	movs	r3, #0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10c      	bne.n	8007d92 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	b672      	cpsid	i
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	b662      	cpsie	i
 8007d8c:	61fb      	str	r3, [r7, #28]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d92:	f001 fc73 	bl	800967c <vPortValidateInterruptPriority>
	__asm volatile
 8007d96:	f3ef 8211 	mrs	r2, BASEPRI
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	b672      	cpsid	i
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	b662      	cpsie	i
 8007dae:	61ba      	str	r2, [r7, #24]
 8007db0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007db2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d02f      	beq.n	8007e22 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dd0:	f000 f91b 	bl	800800a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	1e5a      	subs	r2, r3, #1
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007ddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d112      	bne.n	8007e0c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d016      	beq.n	8007e1c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	3310      	adds	r3, #16
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fe42 	bl	8008a7c <xTaskRemoveFromEventList>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00e      	beq.n	8007e1c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	e007      	b.n	8007e1c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e10:	3301      	adds	r3, #1
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	b25a      	sxtb	r2, r3
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e20:	e001      	b.n	8007e26 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f383 8811 	msr	BASEPRI, r3
}
 8007e30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3738      	adds	r7, #56	; 0x38
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10c      	bne.n	8007e64 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	b672      	cpsid	i
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	b662      	cpsie	i
 8007e5e:	60bb      	str	r3, [r7, #8]
}
 8007e60:	bf00      	nop
 8007e62:	e7fe      	b.n	8007e62 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007e64:	f001 fb22 	bl	80094ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007e6e:	f001 fb51 	bl	8009514 <vPortExitCritical>

	return uxReturn;
 8007e72:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10c      	bne.n	8007ea8 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	b672      	cpsid	i
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	b662      	cpsie	i
 8007ea2:	60fb      	str	r3, [r7, #12]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007eae:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10c      	bne.n	8007ee8 <vQueueDelete+0x2c>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	b672      	cpsid	i
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	b662      	cpsie	i
 8007ee2:	60bb      	str	r3, [r7, #8]
}
 8007ee4:	bf00      	nop
 8007ee6:	e7fe      	b.n	8007ee6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f935 	bl	8008158 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f001 fccd 	bl	8009898 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007efe:	bf00      	nop
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d006      	beq.n	8007f24 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f1c3 0307 	rsb	r3, r3, #7
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	e001      	b.n	8007f28 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f28:	68fb      	ldr	r3, [r7, #12]
	}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b086      	sub	sp, #24
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10d      	bne.n	8007f70 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d14d      	bne.n	8007ff8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fff1 	bl	8008f48 <xTaskPriorityDisinherit>
 8007f66:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	609a      	str	r2, [r3, #8]
 8007f6e:	e043      	b.n	8007ff8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d119      	bne.n	8007faa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6858      	ldr	r0, [r3, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	461a      	mov	r2, r3
 8007f80:	68b9      	ldr	r1, [r7, #8]
 8007f82:	f010 ff8c 	bl	8018e9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	441a      	add	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d32b      	bcc.n	8007ff8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	605a      	str	r2, [r3, #4]
 8007fa8:	e026      	b.n	8007ff8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	68d8      	ldr	r0, [r3, #12]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	f010 ff72 	bl	8018e9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc2:	425b      	negs	r3, r3
 8007fc4:	441a      	add	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	68da      	ldr	r2, [r3, #12]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d207      	bcs.n	8007fe6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	425b      	negs	r3, r3
 8007fe0:	441a      	add	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d105      	bne.n	8007ff8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008000:	697b      	ldr	r3, [r7, #20]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d018      	beq.n	800804e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	441a      	add	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	429a      	cmp	r2, r3
 8008034:	d303      	bcc.n	800803e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68d9      	ldr	r1, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	461a      	mov	r2, r3
 8008048:	6838      	ldr	r0, [r7, #0]
 800804a:	f010 ff28 	bl	8018e9e <memcpy>
	}
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800805e:	f001 fa25 	bl	80094ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008068:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800806a:	e011      	b.n	8008090 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d012      	beq.n	800809a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3324      	adds	r3, #36	; 0x24
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fcff 	bl	8008a7c <xTaskRemoveFromEventList>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008084:	f000 fdda 	bl	8008c3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	3b01      	subs	r3, #1
 800808c:	b2db      	uxtb	r3, r3
 800808e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008094:	2b00      	cmp	r3, #0
 8008096:	dce9      	bgt.n	800806c <prvUnlockQueue+0x16>
 8008098:	e000      	b.n	800809c <prvUnlockQueue+0x46>
					break;
 800809a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	22ff      	movs	r2, #255	; 0xff
 80080a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080a4:	f001 fa36 	bl	8009514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080a8:	f001 fa00 	bl	80094ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080b4:	e011      	b.n	80080da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d012      	beq.n	80080e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3310      	adds	r3, #16
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 fcda 	bl	8008a7c <xTaskRemoveFromEventList>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080ce:	f000 fdb5 	bl	8008c3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dce9      	bgt.n	80080b6 <prvUnlockQueue+0x60>
 80080e2:	e000      	b.n	80080e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	22ff      	movs	r2, #255	; 0xff
 80080ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080ee:	f001 fa11 	bl	8009514 <vPortExitCritical>
}
 80080f2:	bf00      	nop
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008102:	f001 f9d3 	bl	80094ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	2b00      	cmp	r3, #0
 800810c:	d102      	bne.n	8008114 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800810e:	2301      	movs	r3, #1
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	e001      	b.n	8008118 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008118:	f001 f9fc 	bl	8009514 <vPortExitCritical>

	return xReturn;
 800811c:	68fb      	ldr	r3, [r7, #12]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800812e:	f001 f9bd 	bl	80094ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813a:	429a      	cmp	r2, r3
 800813c:	d102      	bne.n	8008144 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800813e:	2301      	movs	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	e001      	b.n	8008148 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008148:	f001 f9e4 	bl	8009514 <vPortExitCritical>

	return xReturn;
 800814c:	68fb      	ldr	r3, [r7, #12]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008160:	2300      	movs	r3, #0
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	e016      	b.n	8008194 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008166:	4a10      	ldr	r2, [pc, #64]	; (80081a8 <vQueueUnregisterQueue+0x50>)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	4413      	add	r3, r2
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	429a      	cmp	r2, r3
 8008174:	d10b      	bne.n	800818e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008176:	4a0c      	ldr	r2, [pc, #48]	; (80081a8 <vQueueUnregisterQueue+0x50>)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2100      	movs	r1, #0
 800817c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008180:	4a09      	ldr	r2, [pc, #36]	; (80081a8 <vQueueUnregisterQueue+0x50>)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	4413      	add	r3, r2
 8008188:	2200      	movs	r2, #0
 800818a:	605a      	str	r2, [r3, #4]
				break;
 800818c:	e006      	b.n	800819c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3301      	adds	r3, #1
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b07      	cmp	r3, #7
 8008198:	d9e5      	bls.n	8008166 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800819a:	bf00      	nop
 800819c:	bf00      	nop
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	200056c8 	.word	0x200056c8

080081ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08e      	sub	sp, #56	; 0x38
 80081b0:	af04      	add	r7, sp, #16
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10c      	bne.n	80081da <xTaskCreateStatic+0x2e>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	b672      	cpsid	i
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	b662      	cpsie	i
 80081d4:	623b      	str	r3, [r7, #32]
}
 80081d6:	bf00      	nop
 80081d8:	e7fe      	b.n	80081d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10c      	bne.n	80081fa <xTaskCreateStatic+0x4e>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	b672      	cpsid	i
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	b662      	cpsie	i
 80081f4:	61fb      	str	r3, [r7, #28]
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081fa:	23a0      	movs	r3, #160	; 0xa0
 80081fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2ba0      	cmp	r3, #160	; 0xa0
 8008202:	d00c      	beq.n	800821e <xTaskCreateStatic+0x72>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	b672      	cpsid	i
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	b662      	cpsie	i
 8008218:	61bb      	str	r3, [r7, #24]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800821e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	2b00      	cmp	r3, #0
 8008224:	d01e      	beq.n	8008264 <xTaskCreateStatic+0xb8>
 8008226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01b      	beq.n	8008264 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008234:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	2202      	movs	r2, #2
 800823a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800823e:	2300      	movs	r3, #0
 8008240:	9303      	str	r3, [sp, #12]
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	9302      	str	r3, [sp, #8]
 8008246:	f107 0314 	add.w	r3, r7, #20
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	68b9      	ldr	r1, [r7, #8]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f850 	bl	80082fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800825c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800825e:	f000 f8ed 	bl	800843c <prvAddNewTaskToReadyList>
 8008262:	e001      	b.n	8008268 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008264:	2300      	movs	r3, #0
 8008266:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008268:	697b      	ldr	r3, [r7, #20]
	}
 800826a:	4618      	mov	r0, r3
 800826c:	3728      	adds	r7, #40	; 0x28
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008272:	b580      	push	{r7, lr}
 8008274:	b08c      	sub	sp, #48	; 0x30
 8008276:	af04      	add	r7, sp, #16
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	603b      	str	r3, [r7, #0]
 800827e:	4613      	mov	r3, r2
 8008280:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008282:	88fb      	ldrh	r3, [r7, #6]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4618      	mov	r0, r3
 8008288:	f001 fa3c 	bl	8009704 <pvPortMalloc>
 800828c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00e      	beq.n	80082b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008294:	20a0      	movs	r0, #160	; 0xa0
 8008296:	f001 fa35 	bl	8009704 <pvPortMalloc>
 800829a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	631a      	str	r2, [r3, #48]	; 0x30
 80082a8:	e005      	b.n	80082b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082aa:	6978      	ldr	r0, [r7, #20]
 80082ac:	f001 faf4 	bl	8009898 <vPortFree>
 80082b0:	e001      	b.n	80082b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d017      	beq.n	80082ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082c4:	88fa      	ldrh	r2, [r7, #6]
 80082c6:	2300      	movs	r3, #0
 80082c8:	9303      	str	r3, [sp, #12]
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	9302      	str	r3, [sp, #8]
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	68b9      	ldr	r1, [r7, #8]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 f80e 	bl	80082fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082e0:	69f8      	ldr	r0, [r7, #28]
 80082e2:	f000 f8ab 	bl	800843c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082e6:	2301      	movs	r3, #1
 80082e8:	61bb      	str	r3, [r7, #24]
 80082ea:	e002      	b.n	80082f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082ec:	f04f 33ff 	mov.w	r3, #4294967295
 80082f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082f2:	69bb      	ldr	r3, [r7, #24]
	}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3720      	adds	r7, #32
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008314:	440b      	add	r3, r1
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	f023 0307 	bic.w	r3, r3, #7
 8008322:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	b672      	cpsid	i
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	b662      	cpsie	i
 8008342:	617b      	str	r3, [r7, #20]
}
 8008344:	bf00      	nop
 8008346:	e7fe      	b.n	8008346 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d01f      	beq.n	800838e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	e012      	b.n	800837a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	4413      	add	r3, r2
 800835a:	7819      	ldrb	r1, [r3, #0]
 800835c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	4413      	add	r3, r2
 8008362:	3334      	adds	r3, #52	; 0x34
 8008364:	460a      	mov	r2, r1
 8008366:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d006      	beq.n	8008382 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	3301      	adds	r3, #1
 8008378:	61fb      	str	r3, [r7, #28]
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	2b0f      	cmp	r3, #15
 800837e:	d9e9      	bls.n	8008354 <prvInitialiseNewTask+0x58>
 8008380:	e000      	b.n	8008384 <prvInitialiseNewTask+0x88>
			{
				break;
 8008382:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800838c:	e003      	b.n	8008396 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	2b06      	cmp	r3, #6
 800839a:	d901      	bls.n	80083a0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800839c:	2306      	movs	r3, #6
 800839e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	2200      	movs	r2, #0
 80083b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	3304      	adds	r3, #4
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fe55 	bl	8007066 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	3318      	adds	r3, #24
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe fe50 	bl	8007066 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	f1c3 0207 	rsb	r2, r3, #7
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	334c      	adds	r3, #76	; 0x4c
 80083f0:	224c      	movs	r2, #76	; 0x4c
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f010 fc6a 	bl	8018cce <memset>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	4a0c      	ldr	r2, [pc, #48]	; (8008430 <prvInitialiseNewTask+0x134>)
 80083fe:	651a      	str	r2, [r3, #80]	; 0x50
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	4a0c      	ldr	r2, [pc, #48]	; (8008434 <prvInitialiseNewTask+0x138>)
 8008404:	655a      	str	r2, [r3, #84]	; 0x54
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	4a0b      	ldr	r2, [pc, #44]	; (8008438 <prvInitialiseNewTask+0x13c>)
 800840a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	68f9      	ldr	r1, [r7, #12]
 8008410:	69b8      	ldr	r0, [r7, #24]
 8008412:	f000 ff3b 	bl	800928c <pxPortInitialiseStack>
 8008416:	4602      	mov	r2, r0
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008426:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008428:	bf00      	nop
 800842a:	3720      	adds	r7, #32
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20077a98 	.word	0x20077a98
 8008434:	20077b00 	.word	0x20077b00
 8008438:	20077b68 	.word	0x20077b68

0800843c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008444:	f001 f832 	bl	80094ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008448:	4b2a      	ldr	r3, [pc, #168]	; (80084f4 <prvAddNewTaskToReadyList+0xb8>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3301      	adds	r3, #1
 800844e:	4a29      	ldr	r2, [pc, #164]	; (80084f4 <prvAddNewTaskToReadyList+0xb8>)
 8008450:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008452:	4b29      	ldr	r3, [pc, #164]	; (80084f8 <prvAddNewTaskToReadyList+0xbc>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800845a:	4a27      	ldr	r2, [pc, #156]	; (80084f8 <prvAddNewTaskToReadyList+0xbc>)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008460:	4b24      	ldr	r3, [pc, #144]	; (80084f4 <prvAddNewTaskToReadyList+0xb8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d110      	bne.n	800848a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008468:	f000 fc0c 	bl	8008c84 <prvInitialiseTaskLists>
 800846c:	e00d      	b.n	800848a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800846e:	4b23      	ldr	r3, [pc, #140]	; (80084fc <prvAddNewTaskToReadyList+0xc0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d109      	bne.n	800848a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008476:	4b20      	ldr	r3, [pc, #128]	; (80084f8 <prvAddNewTaskToReadyList+0xbc>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	429a      	cmp	r2, r3
 8008482:	d802      	bhi.n	800848a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008484:	4a1c      	ldr	r2, [pc, #112]	; (80084f8 <prvAddNewTaskToReadyList+0xbc>)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800848a:	4b1d      	ldr	r3, [pc, #116]	; (8008500 <prvAddNewTaskToReadyList+0xc4>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3301      	adds	r3, #1
 8008490:	4a1b      	ldr	r2, [pc, #108]	; (8008500 <prvAddNewTaskToReadyList+0xc4>)
 8008492:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	2201      	movs	r2, #1
 800849a:	409a      	lsls	r2, r3
 800849c:	4b19      	ldr	r3, [pc, #100]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	4a18      	ldr	r2, [pc, #96]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 80084a4:	6013      	str	r3, [r2, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084aa:	4613      	mov	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4a15      	ldr	r2, [pc, #84]	; (8008508 <prvAddNewTaskToReadyList+0xcc>)
 80084b4:	441a      	add	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3304      	adds	r3, #4
 80084ba:	4619      	mov	r1, r3
 80084bc:	4610      	mov	r0, r2
 80084be:	f7fe fddf 	bl	8007080 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084c2:	f001 f827 	bl	8009514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084c6:	4b0d      	ldr	r3, [pc, #52]	; (80084fc <prvAddNewTaskToReadyList+0xc0>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00e      	beq.n	80084ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084ce:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <prvAddNewTaskToReadyList+0xbc>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	429a      	cmp	r2, r3
 80084da:	d207      	bcs.n	80084ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084dc:	4b0b      	ldr	r3, [pc, #44]	; (800850c <prvAddNewTaskToReadyList+0xd0>)
 80084de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20005808 	.word	0x20005808
 80084f8:	20005708 	.word	0x20005708
 80084fc:	20005814 	.word	0x20005814
 8008500:	20005824 	.word	0x20005824
 8008504:	20005810 	.word	0x20005810
 8008508:	2000570c 	.word	0x2000570c
 800850c:	e000ed04 	.word	0xe000ed04

08008510 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d019      	beq.n	8008556 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008522:	4b14      	ldr	r3, [pc, #80]	; (8008574 <vTaskDelay+0x64>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00c      	beq.n	8008544 <vTaskDelay+0x34>
	__asm volatile
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	b672      	cpsid	i
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	b662      	cpsie	i
 800853e:	60bb      	str	r3, [r7, #8]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008544:	f000 f888 	bl	8008658 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008548:	2100      	movs	r1, #0
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fe38 	bl	80091c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008550:	f000 f890 	bl	8008674 <xTaskResumeAll>
 8008554:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d107      	bne.n	800856c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800855c:	4b06      	ldr	r3, [pc, #24]	; (8008578 <vTaskDelay+0x68>)
 800855e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20005830 	.word	0x20005830
 8008578:	e000ed04 	.word	0xe000ed04

0800857c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08a      	sub	sp, #40	; 0x28
 8008580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008586:	2300      	movs	r3, #0
 8008588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800858a:	463a      	mov	r2, r7
 800858c:	1d39      	adds	r1, r7, #4
 800858e:	f107 0308 	add.w	r3, r7, #8
 8008592:	4618      	mov	r0, r3
 8008594:	f7f8 fa1e 	bl	80009d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	9202      	str	r2, [sp, #8]
 80085a0:	9301      	str	r3, [sp, #4]
 80085a2:	2300      	movs	r3, #0
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	2300      	movs	r3, #0
 80085a8:	460a      	mov	r2, r1
 80085aa:	4923      	ldr	r1, [pc, #140]	; (8008638 <vTaskStartScheduler+0xbc>)
 80085ac:	4823      	ldr	r0, [pc, #140]	; (800863c <vTaskStartScheduler+0xc0>)
 80085ae:	f7ff fdfd 	bl	80081ac <xTaskCreateStatic>
 80085b2:	4603      	mov	r3, r0
 80085b4:	4a22      	ldr	r2, [pc, #136]	; (8008640 <vTaskStartScheduler+0xc4>)
 80085b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085b8:	4b21      	ldr	r3, [pc, #132]	; (8008640 <vTaskStartScheduler+0xc4>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085c0:	2301      	movs	r3, #1
 80085c2:	617b      	str	r3, [r7, #20]
 80085c4:	e001      	b.n	80085ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d11d      	bne.n	800860c <vTaskStartScheduler+0x90>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	b672      	cpsid	i
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	b662      	cpsie	i
 80085e4:	613b      	str	r3, [r7, #16]
}
 80085e6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085e8:	4b16      	ldr	r3, [pc, #88]	; (8008644 <vTaskStartScheduler+0xc8>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	334c      	adds	r3, #76	; 0x4c
 80085ee:	4a16      	ldr	r2, [pc, #88]	; (8008648 <vTaskStartScheduler+0xcc>)
 80085f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085f2:	4b16      	ldr	r3, [pc, #88]	; (800864c <vTaskStartScheduler+0xd0>)
 80085f4:	f04f 32ff 	mov.w	r2, #4294967295
 80085f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085fa:	4b15      	ldr	r3, [pc, #84]	; (8008650 <vTaskStartScheduler+0xd4>)
 80085fc:	2201      	movs	r2, #1
 80085fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008600:	4b14      	ldr	r3, [pc, #80]	; (8008654 <vTaskStartScheduler+0xd8>)
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008606:	f000 fed3 	bl	80093b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800860a:	e010      	b.n	800862e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008612:	d10c      	bne.n	800862e <vTaskStartScheduler+0xb2>
	__asm volatile
 8008614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008618:	b672      	cpsid	i
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	b662      	cpsie	i
 8008628:	60fb      	str	r3, [r7, #12]
}
 800862a:	bf00      	nop
 800862c:	e7fe      	b.n	800862c <vTaskStartScheduler+0xb0>
}
 800862e:	bf00      	nop
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	0801c8c4 	.word	0x0801c8c4
 800863c:	08008c55 	.word	0x08008c55
 8008640:	2000582c 	.word	0x2000582c
 8008644:	20005708 	.word	0x20005708
 8008648:	20000088 	.word	0x20000088
 800864c:	20005828 	.word	0x20005828
 8008650:	20005814 	.word	0x20005814
 8008654:	2000580c 	.word	0x2000580c

08008658 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800865c:	4b04      	ldr	r3, [pc, #16]	; (8008670 <vTaskSuspendAll+0x18>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3301      	adds	r3, #1
 8008662:	4a03      	ldr	r2, [pc, #12]	; (8008670 <vTaskSuspendAll+0x18>)
 8008664:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008666:	bf00      	nop
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	20005830 	.word	0x20005830

08008674 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800867a:	2300      	movs	r3, #0
 800867c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800867e:	2300      	movs	r3, #0
 8008680:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008682:	4b42      	ldr	r3, [pc, #264]	; (800878c <xTaskResumeAll+0x118>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10c      	bne.n	80086a4 <xTaskResumeAll+0x30>
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	b672      	cpsid	i
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	b662      	cpsie	i
 800869e:	603b      	str	r3, [r7, #0]
}
 80086a0:	bf00      	nop
 80086a2:	e7fe      	b.n	80086a2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086a4:	f000 ff02 	bl	80094ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086a8:	4b38      	ldr	r3, [pc, #224]	; (800878c <xTaskResumeAll+0x118>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	4a37      	ldr	r2, [pc, #220]	; (800878c <xTaskResumeAll+0x118>)
 80086b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086b2:	4b36      	ldr	r3, [pc, #216]	; (800878c <xTaskResumeAll+0x118>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d161      	bne.n	800877e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086ba:	4b35      	ldr	r3, [pc, #212]	; (8008790 <xTaskResumeAll+0x11c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d05d      	beq.n	800877e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086c2:	e02e      	b.n	8008722 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c4:	4b33      	ldr	r3, [pc, #204]	; (8008794 <xTaskResumeAll+0x120>)
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3318      	adds	r3, #24
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fd32 	bl	800713a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3304      	adds	r3, #4
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe fd2d 	bl	800713a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	2201      	movs	r2, #1
 80086e6:	409a      	lsls	r2, r3
 80086e8:	4b2b      	ldr	r3, [pc, #172]	; (8008798 <xTaskResumeAll+0x124>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	4a2a      	ldr	r2, [pc, #168]	; (8008798 <xTaskResumeAll+0x124>)
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4a27      	ldr	r2, [pc, #156]	; (800879c <xTaskResumeAll+0x128>)
 8008700:	441a      	add	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3304      	adds	r3, #4
 8008706:	4619      	mov	r1, r3
 8008708:	4610      	mov	r0, r2
 800870a:	f7fe fcb9 	bl	8007080 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008712:	4b23      	ldr	r3, [pc, #140]	; (80087a0 <xTaskResumeAll+0x12c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	429a      	cmp	r2, r3
 800871a:	d302      	bcc.n	8008722 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800871c:	4b21      	ldr	r3, [pc, #132]	; (80087a4 <xTaskResumeAll+0x130>)
 800871e:	2201      	movs	r2, #1
 8008720:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008722:	4b1c      	ldr	r3, [pc, #112]	; (8008794 <xTaskResumeAll+0x120>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1cc      	bne.n	80086c4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008730:	f000 fb4c 	bl	8008dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008734:	4b1c      	ldr	r3, [pc, #112]	; (80087a8 <xTaskResumeAll+0x134>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d010      	beq.n	8008762 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008740:	f000 f858 	bl	80087f4 <xTaskIncrementTick>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d002      	beq.n	8008750 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800874a:	4b16      	ldr	r3, [pc, #88]	; (80087a4 <xTaskResumeAll+0x130>)
 800874c:	2201      	movs	r2, #1
 800874e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3b01      	subs	r3, #1
 8008754:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1f1      	bne.n	8008740 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800875c:	4b12      	ldr	r3, [pc, #72]	; (80087a8 <xTaskResumeAll+0x134>)
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008762:	4b10      	ldr	r3, [pc, #64]	; (80087a4 <xTaskResumeAll+0x130>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d009      	beq.n	800877e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800876a:	2301      	movs	r3, #1
 800876c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800876e:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <xTaskResumeAll+0x138>)
 8008770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800877e:	f000 fec9 	bl	8009514 <vPortExitCritical>

	return xAlreadyYielded;
 8008782:	68bb      	ldr	r3, [r7, #8]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20005830 	.word	0x20005830
 8008790:	20005808 	.word	0x20005808
 8008794:	200057c8 	.word	0x200057c8
 8008798:	20005810 	.word	0x20005810
 800879c:	2000570c 	.word	0x2000570c
 80087a0:	20005708 	.word	0x20005708
 80087a4:	2000581c 	.word	0x2000581c
 80087a8:	20005818 	.word	0x20005818
 80087ac:	e000ed04 	.word	0xe000ed04

080087b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087b6:	4b05      	ldr	r3, [pc, #20]	; (80087cc <xTaskGetTickCount+0x1c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087bc:	687b      	ldr	r3, [r7, #4]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	2000580c 	.word	0x2000580c

080087d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087d6:	f000 ff51 	bl	800967c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80087da:	2300      	movs	r3, #0
 80087dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80087de:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <xTaskGetTickCountFromISR+0x20>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087e4:	683b      	ldr	r3, [r7, #0]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	2000580c 	.word	0x2000580c

080087f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087fe:	4b4f      	ldr	r3, [pc, #316]	; (800893c <xTaskIncrementTick+0x148>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f040 808a 	bne.w	800891c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008808:	4b4d      	ldr	r3, [pc, #308]	; (8008940 <xTaskIncrementTick+0x14c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3301      	adds	r3, #1
 800880e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008810:	4a4b      	ldr	r2, [pc, #300]	; (8008940 <xTaskIncrementTick+0x14c>)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d122      	bne.n	8008862 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800881c:	4b49      	ldr	r3, [pc, #292]	; (8008944 <xTaskIncrementTick+0x150>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00c      	beq.n	8008840 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	b672      	cpsid	i
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	b662      	cpsie	i
 800883a:	603b      	str	r3, [r7, #0]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <xTaskIncrementTick+0x4a>
 8008840:	4b40      	ldr	r3, [pc, #256]	; (8008944 <xTaskIncrementTick+0x150>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	4b40      	ldr	r3, [pc, #256]	; (8008948 <xTaskIncrementTick+0x154>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a3e      	ldr	r2, [pc, #248]	; (8008944 <xTaskIncrementTick+0x150>)
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	4a3e      	ldr	r2, [pc, #248]	; (8008948 <xTaskIncrementTick+0x154>)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6013      	str	r3, [r2, #0]
 8008854:	4b3d      	ldr	r3, [pc, #244]	; (800894c <xTaskIncrementTick+0x158>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3301      	adds	r3, #1
 800885a:	4a3c      	ldr	r2, [pc, #240]	; (800894c <xTaskIncrementTick+0x158>)
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	f000 fab5 	bl	8008dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008862:	4b3b      	ldr	r3, [pc, #236]	; (8008950 <xTaskIncrementTick+0x15c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	429a      	cmp	r2, r3
 800886a:	d348      	bcc.n	80088fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800886c:	4b35      	ldr	r3, [pc, #212]	; (8008944 <xTaskIncrementTick+0x150>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d104      	bne.n	8008880 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008876:	4b36      	ldr	r3, [pc, #216]	; (8008950 <xTaskIncrementTick+0x15c>)
 8008878:	f04f 32ff 	mov.w	r2, #4294967295
 800887c:	601a      	str	r2, [r3, #0]
					break;
 800887e:	e03e      	b.n	80088fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008880:	4b30      	ldr	r3, [pc, #192]	; (8008944 <xTaskIncrementTick+0x150>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	429a      	cmp	r2, r3
 8008896:	d203      	bcs.n	80088a0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008898:	4a2d      	ldr	r2, [pc, #180]	; (8008950 <xTaskIncrementTick+0x15c>)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800889e:	e02e      	b.n	80088fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe fc48 	bl	800713a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	3318      	adds	r3, #24
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fc3f 	bl	800713a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	2201      	movs	r2, #1
 80088c2:	409a      	lsls	r2, r3
 80088c4:	4b23      	ldr	r3, [pc, #140]	; (8008954 <xTaskIncrementTick+0x160>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	4a22      	ldr	r2, [pc, #136]	; (8008954 <xTaskIncrementTick+0x160>)
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4a1f      	ldr	r2, [pc, #124]	; (8008958 <xTaskIncrementTick+0x164>)
 80088dc:	441a      	add	r2, r3
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f7fe fbcb 	bl	8007080 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	4b1b      	ldr	r3, [pc, #108]	; (800895c <xTaskIncrementTick+0x168>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d3b9      	bcc.n	800886c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80088f8:	2301      	movs	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088fc:	e7b6      	b.n	800886c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088fe:	4b17      	ldr	r3, [pc, #92]	; (800895c <xTaskIncrementTick+0x168>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008904:	4914      	ldr	r1, [pc, #80]	; (8008958 <xTaskIncrementTick+0x164>)
 8008906:	4613      	mov	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	440b      	add	r3, r1
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d907      	bls.n	8008926 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8008916:	2301      	movs	r3, #1
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	e004      	b.n	8008926 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800891c:	4b10      	ldr	r3, [pc, #64]	; (8008960 <xTaskIncrementTick+0x16c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3301      	adds	r3, #1
 8008922:	4a0f      	ldr	r2, [pc, #60]	; (8008960 <xTaskIncrementTick+0x16c>)
 8008924:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008926:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <xTaskIncrementTick+0x170>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800892e:	2301      	movs	r3, #1
 8008930:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008932:	697b      	ldr	r3, [r7, #20]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20005830 	.word	0x20005830
 8008940:	2000580c 	.word	0x2000580c
 8008944:	200057c0 	.word	0x200057c0
 8008948:	200057c4 	.word	0x200057c4
 800894c:	20005820 	.word	0x20005820
 8008950:	20005828 	.word	0x20005828
 8008954:	20005810 	.word	0x20005810
 8008958:	2000570c 	.word	0x2000570c
 800895c:	20005708 	.word	0x20005708
 8008960:	20005818 	.word	0x20005818
 8008964:	2000581c 	.word	0x2000581c

08008968 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800896e:	4b2a      	ldr	r3, [pc, #168]	; (8008a18 <vTaskSwitchContext+0xb0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008976:	4b29      	ldr	r3, [pc, #164]	; (8008a1c <vTaskSwitchContext+0xb4>)
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800897c:	e046      	b.n	8008a0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800897e:	4b27      	ldr	r3, [pc, #156]	; (8008a1c <vTaskSwitchContext+0xb4>)
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008984:	4b26      	ldr	r3, [pc, #152]	; (8008a20 <vTaskSwitchContext+0xb8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	fab3 f383 	clz	r3, r3
 8008990:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008992:	7afb      	ldrb	r3, [r7, #11]
 8008994:	f1c3 031f 	rsb	r3, r3, #31
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	4922      	ldr	r1, [pc, #136]	; (8008a24 <vTaskSwitchContext+0xbc>)
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	440b      	add	r3, r1
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10c      	bne.n	80089c8 <vTaskSwitchContext+0x60>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	b672      	cpsid	i
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	b662      	cpsie	i
 80089c2:	607b      	str	r3, [r7, #4]
}
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <vTaskSwitchContext+0x5e>
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4a14      	ldr	r2, [pc, #80]	; (8008a24 <vTaskSwitchContext+0xbc>)
 80089d4:	4413      	add	r3, r2
 80089d6:	613b      	str	r3, [r7, #16]
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	605a      	str	r2, [r3, #4]
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	3308      	adds	r3, #8
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d104      	bne.n	80089f8 <vTaskSwitchContext+0x90>
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	605a      	str	r2, [r3, #4]
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	4a0a      	ldr	r2, [pc, #40]	; (8008a28 <vTaskSwitchContext+0xc0>)
 8008a00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a02:	4b09      	ldr	r3, [pc, #36]	; (8008a28 <vTaskSwitchContext+0xc0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	334c      	adds	r3, #76	; 0x4c
 8008a08:	4a08      	ldr	r2, [pc, #32]	; (8008a2c <vTaskSwitchContext+0xc4>)
 8008a0a:	6013      	str	r3, [r2, #0]
}
 8008a0c:	bf00      	nop
 8008a0e:	371c      	adds	r7, #28
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	20005830 	.word	0x20005830
 8008a1c:	2000581c 	.word	0x2000581c
 8008a20:	20005810 	.word	0x20005810
 8008a24:	2000570c 	.word	0x2000570c
 8008a28:	20005708 	.word	0x20005708
 8008a2c:	20000088 	.word	0x20000088

08008a30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10c      	bne.n	8008a5a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	b672      	cpsid	i
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	b662      	cpsie	i
 8008a54:	60fb      	str	r3, [r7, #12]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a5a:	4b07      	ldr	r3, [pc, #28]	; (8008a78 <vTaskPlaceOnEventList+0x48>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3318      	adds	r3, #24
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7fe fb30 	bl	80070c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a68:	2101      	movs	r1, #1
 8008a6a:	6838      	ldr	r0, [r7, #0]
 8008a6c:	f000 fba8 	bl	80091c0 <prvAddCurrentTaskToDelayedList>
}
 8008a70:	bf00      	nop
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20005708 	.word	0x20005708

08008a7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10c      	bne.n	8008aac <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	b672      	cpsid	i
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	b662      	cpsie	i
 8008aa6:	60fb      	str	r3, [r7, #12]
}
 8008aa8:	bf00      	nop
 8008aaa:	e7fe      	b.n	8008aaa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	3318      	adds	r3, #24
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe fb42 	bl	800713a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ab6:	4b1d      	ldr	r3, [pc, #116]	; (8008b2c <xTaskRemoveFromEventList+0xb0>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d11c      	bne.n	8008af8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fb39 	bl	800713a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	2201      	movs	r2, #1
 8008ace:	409a      	lsls	r2, r3
 8008ad0:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <xTaskRemoveFromEventList+0xb4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	4a16      	ldr	r2, [pc, #88]	; (8008b30 <xTaskRemoveFromEventList+0xb4>)
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4a13      	ldr	r2, [pc, #76]	; (8008b34 <xTaskRemoveFromEventList+0xb8>)
 8008ae8:	441a      	add	r2, r3
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3304      	adds	r3, #4
 8008aee:	4619      	mov	r1, r3
 8008af0:	4610      	mov	r0, r2
 8008af2:	f7fe fac5 	bl	8007080 <vListInsertEnd>
 8008af6:	e005      	b.n	8008b04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	3318      	adds	r3, #24
 8008afc:	4619      	mov	r1, r3
 8008afe:	480e      	ldr	r0, [pc, #56]	; (8008b38 <xTaskRemoveFromEventList+0xbc>)
 8008b00:	f7fe fabe 	bl	8007080 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b08:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <xTaskRemoveFromEventList+0xc0>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d905      	bls.n	8008b1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b12:	2301      	movs	r3, #1
 8008b14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b16:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <xTaskRemoveFromEventList+0xc4>)
 8008b18:	2201      	movs	r2, #1
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	e001      	b.n	8008b22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b22:	697b      	ldr	r3, [r7, #20]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20005830 	.word	0x20005830
 8008b30:	20005810 	.word	0x20005810
 8008b34:	2000570c 	.word	0x2000570c
 8008b38:	200057c8 	.word	0x200057c8
 8008b3c:	20005708 	.word	0x20005708
 8008b40:	2000581c 	.word	0x2000581c

08008b44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b4c:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <vTaskInternalSetTimeOutState+0x24>)
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b54:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <vTaskInternalSetTimeOutState+0x28>)
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	605a      	str	r2, [r3, #4]
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	20005820 	.word	0x20005820
 8008b6c:	2000580c 	.word	0x2000580c

08008b70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10c      	bne.n	8008b9a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	b672      	cpsid	i
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	b662      	cpsie	i
 8008b94:	613b      	str	r3, [r7, #16]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10c      	bne.n	8008bba <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	b672      	cpsid	i
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	b662      	cpsie	i
 8008bb4:	60fb      	str	r3, [r7, #12]
}
 8008bb6:	bf00      	nop
 8008bb8:	e7fe      	b.n	8008bb8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008bba:	f000 fc77 	bl	80094ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bbe:	4b1d      	ldr	r3, [pc, #116]	; (8008c34 <xTaskCheckForTimeOut+0xc4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd6:	d102      	bne.n	8008bde <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61fb      	str	r3, [r7, #28]
 8008bdc:	e023      	b.n	8008c26 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <xTaskCheckForTimeOut+0xc8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d007      	beq.n	8008bfa <xTaskCheckForTimeOut+0x8a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d302      	bcc.n	8008bfa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	61fb      	str	r3, [r7, #28]
 8008bf8:	e015      	b.n	8008c26 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d20b      	bcs.n	8008c1c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	1ad2      	subs	r2, r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff ff97 	bl	8008b44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c16:	2300      	movs	r3, #0
 8008c18:	61fb      	str	r3, [r7, #28]
 8008c1a:	e004      	b.n	8008c26 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c22:	2301      	movs	r3, #1
 8008c24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c26:	f000 fc75 	bl	8009514 <vPortExitCritical>

	return xReturn;
 8008c2a:	69fb      	ldr	r3, [r7, #28]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3720      	adds	r7, #32
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	2000580c 	.word	0x2000580c
 8008c38:	20005820 	.word	0x20005820

08008c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c40:	4b03      	ldr	r3, [pc, #12]	; (8008c50 <vTaskMissedYield+0x14>)
 8008c42:	2201      	movs	r2, #1
 8008c44:	601a      	str	r2, [r3, #0]
}
 8008c46:	bf00      	nop
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	2000581c 	.word	0x2000581c

08008c54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c5c:	f000 f852 	bl	8008d04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c60:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <prvIdleTask+0x28>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d9f9      	bls.n	8008c5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c68:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <prvIdleTask+0x2c>)
 8008c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c78:	e7f0      	b.n	8008c5c <prvIdleTask+0x8>
 8008c7a:	bf00      	nop
 8008c7c:	2000570c 	.word	0x2000570c
 8008c80:	e000ed04 	.word	0xe000ed04

08008c84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	607b      	str	r3, [r7, #4]
 8008c8e:	e00c      	b.n	8008caa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4a12      	ldr	r2, [pc, #72]	; (8008ce4 <prvInitialiseTaskLists+0x60>)
 8008c9c:	4413      	add	r3, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe f9c1 	bl	8007026 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	607b      	str	r3, [r7, #4]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b06      	cmp	r3, #6
 8008cae:	d9ef      	bls.n	8008c90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008cb0:	480d      	ldr	r0, [pc, #52]	; (8008ce8 <prvInitialiseTaskLists+0x64>)
 8008cb2:	f7fe f9b8 	bl	8007026 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cb6:	480d      	ldr	r0, [pc, #52]	; (8008cec <prvInitialiseTaskLists+0x68>)
 8008cb8:	f7fe f9b5 	bl	8007026 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cbc:	480c      	ldr	r0, [pc, #48]	; (8008cf0 <prvInitialiseTaskLists+0x6c>)
 8008cbe:	f7fe f9b2 	bl	8007026 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008cc2:	480c      	ldr	r0, [pc, #48]	; (8008cf4 <prvInitialiseTaskLists+0x70>)
 8008cc4:	f7fe f9af 	bl	8007026 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008cc8:	480b      	ldr	r0, [pc, #44]	; (8008cf8 <prvInitialiseTaskLists+0x74>)
 8008cca:	f7fe f9ac 	bl	8007026 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cce:	4b0b      	ldr	r3, [pc, #44]	; (8008cfc <prvInitialiseTaskLists+0x78>)
 8008cd0:	4a05      	ldr	r2, [pc, #20]	; (8008ce8 <prvInitialiseTaskLists+0x64>)
 8008cd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <prvInitialiseTaskLists+0x7c>)
 8008cd6:	4a05      	ldr	r2, [pc, #20]	; (8008cec <prvInitialiseTaskLists+0x68>)
 8008cd8:	601a      	str	r2, [r3, #0]
}
 8008cda:	bf00      	nop
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	2000570c 	.word	0x2000570c
 8008ce8:	20005798 	.word	0x20005798
 8008cec:	200057ac 	.word	0x200057ac
 8008cf0:	200057c8 	.word	0x200057c8
 8008cf4:	200057dc 	.word	0x200057dc
 8008cf8:	200057f4 	.word	0x200057f4
 8008cfc:	200057c0 	.word	0x200057c0
 8008d00:	200057c4 	.word	0x200057c4

08008d04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d0a:	e019      	b.n	8008d40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d0c:	f000 fbce 	bl	80094ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d10:	4b10      	ldr	r3, [pc, #64]	; (8008d54 <prvCheckTasksWaitingTermination+0x50>)
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fe fa0c 	bl	800713a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d22:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <prvCheckTasksWaitingTermination+0x54>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	4a0b      	ldr	r2, [pc, #44]	; (8008d58 <prvCheckTasksWaitingTermination+0x54>)
 8008d2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d2c:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <prvCheckTasksWaitingTermination+0x58>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	4a0a      	ldr	r2, [pc, #40]	; (8008d5c <prvCheckTasksWaitingTermination+0x58>)
 8008d34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d36:	f000 fbed 	bl	8009514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f810 	bl	8008d60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d40:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <prvCheckTasksWaitingTermination+0x58>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e1      	bne.n	8008d0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d48:	bf00      	nop
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	200057dc 	.word	0x200057dc
 8008d58:	20005808 	.word	0x20005808
 8008d5c:	200057f0 	.word	0x200057f0

08008d60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	334c      	adds	r3, #76	; 0x4c
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f00f ffdd 	bl	8018d2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d108      	bne.n	8008d8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fd89 	bl	8009898 <vPortFree>
				vPortFree( pxTCB );
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fd86 	bl	8009898 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d8c:	e01a      	b.n	8008dc4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d103      	bne.n	8008da0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fd7d 	bl	8009898 <vPortFree>
	}
 8008d9e:	e011      	b.n	8008dc4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d00c      	beq.n	8008dc4 <prvDeleteTCB+0x64>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	b672      	cpsid	i
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	b662      	cpsie	i
 8008dbe:	60fb      	str	r3, [r7, #12]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <prvDeleteTCB+0x62>
	}
 8008dc4:	bf00      	nop
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dd2:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <prvResetNextTaskUnblockTime+0x38>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d104      	bne.n	8008de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <prvResetNextTaskUnblockTime+0x3c>)
 8008dde:	f04f 32ff 	mov.w	r2, #4294967295
 8008de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008de4:	e008      	b.n	8008df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de6:	4b07      	ldr	r3, [pc, #28]	; (8008e04 <prvResetNextTaskUnblockTime+0x38>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	4a04      	ldr	r2, [pc, #16]	; (8008e08 <prvResetNextTaskUnblockTime+0x3c>)
 8008df6:	6013      	str	r3, [r2, #0]
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	200057c0 	.word	0x200057c0
 8008e08:	20005828 	.word	0x20005828

08008e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e12:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <xTaskGetSchedulerState+0x34>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	607b      	str	r3, [r7, #4]
 8008e1e:	e008      	b.n	8008e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e20:	4b08      	ldr	r3, [pc, #32]	; (8008e44 <xTaskGetSchedulerState+0x38>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d102      	bne.n	8008e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	607b      	str	r3, [r7, #4]
 8008e2c:	e001      	b.n	8008e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e32:	687b      	ldr	r3, [r7, #4]
	}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr
 8008e40:	20005814 	.word	0x20005814
 8008e44:	20005830 	.word	0x20005830

08008e48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d069      	beq.n	8008f32 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e62:	4b36      	ldr	r3, [pc, #216]	; (8008f3c <xTaskPriorityInherit+0xf4>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d259      	bcs.n	8008f20 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	db06      	blt.n	8008e82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e74:	4b31      	ldr	r3, [pc, #196]	; (8008f3c <xTaskPriorityInherit+0xf4>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7a:	f1c3 0207 	rsb	r2, r3, #7
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	6959      	ldr	r1, [r3, #20]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4a2b      	ldr	r2, [pc, #172]	; (8008f40 <xTaskPriorityInherit+0xf8>)
 8008e94:	4413      	add	r3, r2
 8008e96:	4299      	cmp	r1, r3
 8008e98:	d13a      	bne.n	8008f10 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe f94b 	bl	800713a <uxListRemove>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d115      	bne.n	8008ed6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eae:	4924      	ldr	r1, [pc, #144]	; (8008f40 <xTaskPriorityInherit+0xf8>)
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	440b      	add	r3, r1
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <xTaskPriorityInherit+0x8e>
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eca:	43da      	mvns	r2, r3
 8008ecc:	4b1d      	ldr	r3, [pc, #116]	; (8008f44 <xTaskPriorityInherit+0xfc>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	4a1c      	ldr	r2, [pc, #112]	; (8008f44 <xTaskPriorityInherit+0xfc>)
 8008ed4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ed6:	4b19      	ldr	r3, [pc, #100]	; (8008f3c <xTaskPriorityInherit+0xf4>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	409a      	lsls	r2, r3
 8008ee8:	4b16      	ldr	r3, [pc, #88]	; (8008f44 <xTaskPriorityInherit+0xfc>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	4a15      	ldr	r2, [pc, #84]	; (8008f44 <xTaskPriorityInherit+0xfc>)
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4a10      	ldr	r2, [pc, #64]	; (8008f40 <xTaskPriorityInherit+0xf8>)
 8008f00:	441a      	add	r2, r3
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	3304      	adds	r3, #4
 8008f06:	4619      	mov	r1, r3
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7fe f8b9 	bl	8007080 <vListInsertEnd>
 8008f0e:	e004      	b.n	8008f1a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f10:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <xTaskPriorityInherit+0xf4>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	e008      	b.n	8008f32 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <xTaskPriorityInherit+0xf4>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d201      	bcs.n	8008f32 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f32:	68fb      	ldr	r3, [r7, #12]
	}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20005708 	.word	0x20005708
 8008f40:	2000570c 	.word	0x2000570c
 8008f44:	20005810 	.word	0x20005810

08008f48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d072      	beq.n	8009044 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f5e:	4b3c      	ldr	r3, [pc, #240]	; (8009050 <xTaskPriorityDisinherit+0x108>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d00c      	beq.n	8008f82 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	b672      	cpsid	i
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	b662      	cpsie	i
 8008f7c:	60fb      	str	r3, [r7, #12]
}
 8008f7e:	bf00      	nop
 8008f80:	e7fe      	b.n	8008f80 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10c      	bne.n	8008fa4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	b672      	cpsid	i
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	b662      	cpsie	i
 8008f9e:	60bb      	str	r3, [r7, #8]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fa8:	1e5a      	subs	r2, r3, #1
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d044      	beq.n	8009044 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d140      	bne.n	8009044 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe f8b7 	bl	800713a <uxListRemove>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d115      	bne.n	8008ffe <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd6:	491f      	ldr	r1, [pc, #124]	; (8009054 <xTaskPriorityDisinherit+0x10c>)
 8008fd8:	4613      	mov	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	440b      	add	r3, r1
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <xTaskPriorityDisinherit+0xb6>
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	2201      	movs	r2, #1
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	43da      	mvns	r2, r3
 8008ff4:	4b18      	ldr	r3, [pc, #96]	; (8009058 <xTaskPriorityDisinherit+0x110>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	4a17      	ldr	r2, [pc, #92]	; (8009058 <xTaskPriorityDisinherit+0x110>)
 8008ffc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900a:	f1c3 0207 	rsb	r2, r3, #7
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	2201      	movs	r2, #1
 8009018:	409a      	lsls	r2, r3
 800901a:	4b0f      	ldr	r3, [pc, #60]	; (8009058 <xTaskPriorityDisinherit+0x110>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4313      	orrs	r3, r2
 8009020:	4a0d      	ldr	r2, [pc, #52]	; (8009058 <xTaskPriorityDisinherit+0x110>)
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4a08      	ldr	r2, [pc, #32]	; (8009054 <xTaskPriorityDisinherit+0x10c>)
 8009032:	441a      	add	r2, r3
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f7fe f820 	bl	8007080 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009040:	2301      	movs	r3, #1
 8009042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009044:	697b      	ldr	r3, [r7, #20]
	}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20005708 	.word	0x20005708
 8009054:	2000570c 	.word	0x2000570c
 8009058:	20005810 	.word	0x20005810

0800905c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800906a:	2301      	movs	r3, #1
 800906c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8087 	beq.w	8009184 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10c      	bne.n	8009098 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	b672      	cpsid	i
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	b662      	cpsie	i
 8009092:	60fb      	str	r3, [r7, #12]
}
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d902      	bls.n	80090a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	61fb      	str	r3, [r7, #28]
 80090a6:	e002      	b.n	80090ae <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b2:	69fa      	ldr	r2, [r7, #28]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d065      	beq.n	8009184 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d160      	bne.n	8009184 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80090c2:	4b32      	ldr	r3, [pc, #200]	; (800918c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d10c      	bne.n	80090e6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 80090cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d0:	b672      	cpsid	i
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	b662      	cpsie	i
 80090e0:	60bb      	str	r3, [r7, #8]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	69fa      	ldr	r2, [r7, #28]
 80090f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	db04      	blt.n	8009104 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	f1c3 0207 	rsb	r2, r3, #7
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	6959      	ldr	r1, [r3, #20]
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4a1f      	ldr	r2, [pc, #124]	; (8009190 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009114:	4413      	add	r3, r2
 8009116:	4299      	cmp	r1, r3
 8009118:	d134      	bne.n	8009184 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	3304      	adds	r3, #4
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe f80b 	bl	800713a <uxListRemove>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d115      	bne.n	8009156 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912e:	4918      	ldr	r1, [pc, #96]	; (8009190 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	2201      	movs	r2, #1
 8009146:	fa02 f303 	lsl.w	r3, r2, r3
 800914a:	43da      	mvns	r2, r3
 800914c:	4b11      	ldr	r3, [pc, #68]	; (8009194 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4013      	ands	r3, r2
 8009152:	4a10      	ldr	r2, [pc, #64]	; (8009194 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009154:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915a:	2201      	movs	r2, #1
 800915c:	409a      	lsls	r2, r3
 800915e:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4313      	orrs	r3, r2
 8009164:	4a0b      	ldr	r2, [pc, #44]	; (8009194 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916c:	4613      	mov	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4a06      	ldr	r2, [pc, #24]	; (8009190 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009176:	441a      	add	r2, r3
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	3304      	adds	r3, #4
 800917c:	4619      	mov	r1, r3
 800917e:	4610      	mov	r0, r2
 8009180:	f7fd ff7e 	bl	8007080 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009184:	bf00      	nop
 8009186:	3720      	adds	r7, #32
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	20005708 	.word	0x20005708
 8009190:	2000570c 	.word	0x2000570c
 8009194:	20005810 	.word	0x20005810

08009198 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009198:	b480      	push	{r7}
 800919a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800919c:	4b07      	ldr	r3, [pc, #28]	; (80091bc <pvTaskIncrementMutexHeldCount+0x24>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d004      	beq.n	80091ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80091a4:	4b05      	ldr	r3, [pc, #20]	; (80091bc <pvTaskIncrementMutexHeldCount+0x24>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091aa:	3201      	adds	r2, #1
 80091ac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80091ae:	4b03      	ldr	r3, [pc, #12]	; (80091bc <pvTaskIncrementMutexHeldCount+0x24>)
 80091b0:	681b      	ldr	r3, [r3, #0]
	}
 80091b2:	4618      	mov	r0, r3
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	20005708 	.word	0x20005708

080091c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091ca:	4b29      	ldr	r3, [pc, #164]	; (8009270 <prvAddCurrentTaskToDelayedList+0xb0>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091d0:	4b28      	ldr	r3, [pc, #160]	; (8009274 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3304      	adds	r3, #4
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fd ffaf 	bl	800713a <uxListRemove>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10b      	bne.n	80091fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80091e2:	4b24      	ldr	r3, [pc, #144]	; (8009274 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	2201      	movs	r2, #1
 80091ea:	fa02 f303 	lsl.w	r3, r2, r3
 80091ee:	43da      	mvns	r2, r3
 80091f0:	4b21      	ldr	r3, [pc, #132]	; (8009278 <prvAddCurrentTaskToDelayedList+0xb8>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4013      	ands	r3, r2
 80091f6:	4a20      	ldr	r2, [pc, #128]	; (8009278 <prvAddCurrentTaskToDelayedList+0xb8>)
 80091f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009200:	d10a      	bne.n	8009218 <prvAddCurrentTaskToDelayedList+0x58>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d007      	beq.n	8009218 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009208:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <prvAddCurrentTaskToDelayedList+0xb4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3304      	adds	r3, #4
 800920e:	4619      	mov	r1, r3
 8009210:	481a      	ldr	r0, [pc, #104]	; (800927c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009212:	f7fd ff35 	bl	8007080 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009216:	e026      	b.n	8009266 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4413      	add	r3, r2
 800921e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009220:	4b14      	ldr	r3, [pc, #80]	; (8009274 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	429a      	cmp	r2, r3
 800922e:	d209      	bcs.n	8009244 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009230:	4b13      	ldr	r3, [pc, #76]	; (8009280 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3304      	adds	r3, #4
 800923a:	4619      	mov	r1, r3
 800923c:	4610      	mov	r0, r2
 800923e:	f7fd ff43 	bl	80070c8 <vListInsert>
}
 8009242:	e010      	b.n	8009266 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009244:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <prvAddCurrentTaskToDelayedList+0xb4>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3304      	adds	r3, #4
 800924e:	4619      	mov	r1, r3
 8009250:	4610      	mov	r0, r2
 8009252:	f7fd ff39 	bl	80070c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	429a      	cmp	r2, r3
 800925e:	d202      	bcs.n	8009266 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009260:	4a09      	ldr	r2, [pc, #36]	; (8009288 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	6013      	str	r3, [r2, #0]
}
 8009266:	bf00      	nop
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	2000580c 	.word	0x2000580c
 8009274:	20005708 	.word	0x20005708
 8009278:	20005810 	.word	0x20005810
 800927c:	200057f4 	.word	0x200057f4
 8009280:	200057c4 	.word	0x200057c4
 8009284:	200057c0 	.word	0x200057c0
 8009288:	20005828 	.word	0x20005828

0800928c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3b04      	subs	r3, #4
 800929c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3b04      	subs	r3, #4
 80092aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f023 0201 	bic.w	r2, r3, #1
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3b04      	subs	r3, #4
 80092ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092bc:	4a0c      	ldr	r2, [pc, #48]	; (80092f0 <pxPortInitialiseStack+0x64>)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3b14      	subs	r3, #20
 80092c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3b04      	subs	r3, #4
 80092d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f06f 0202 	mvn.w	r2, #2
 80092da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3b20      	subs	r3, #32
 80092e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092e2:	68fb      	ldr	r3, [r7, #12]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	080092f5 	.word	0x080092f5

080092f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092fe:	4b14      	ldr	r3, [pc, #80]	; (8009350 <prvTaskExitError+0x5c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009306:	d00c      	beq.n	8009322 <prvTaskExitError+0x2e>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	b672      	cpsid	i
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	b662      	cpsie	i
 800931c:	60fb      	str	r3, [r7, #12]
}
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <prvTaskExitError+0x2c>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	b672      	cpsid	i
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	b662      	cpsie	i
 8009336:	60bb      	str	r3, [r7, #8]
}
 8009338:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800933a:	bf00      	nop
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0fc      	beq.n	800933c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009342:	bf00      	nop
 8009344:	bf00      	nop
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	20000020 	.word	0x20000020
	...

08009360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009360:	4b07      	ldr	r3, [pc, #28]	; (8009380 <pxCurrentTCBConst2>)
 8009362:	6819      	ldr	r1, [r3, #0]
 8009364:	6808      	ldr	r0, [r1, #0]
 8009366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936a:	f380 8809 	msr	PSP, r0
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f04f 0000 	mov.w	r0, #0
 8009376:	f380 8811 	msr	BASEPRI, r0
 800937a:	4770      	bx	lr
 800937c:	f3af 8000 	nop.w

08009380 <pxCurrentTCBConst2>:
 8009380:	20005708 	.word	0x20005708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop

08009388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009388:	4808      	ldr	r0, [pc, #32]	; (80093ac <prvPortStartFirstTask+0x24>)
 800938a:	6800      	ldr	r0, [r0, #0]
 800938c:	6800      	ldr	r0, [r0, #0]
 800938e:	f380 8808 	msr	MSP, r0
 8009392:	f04f 0000 	mov.w	r0, #0
 8009396:	f380 8814 	msr	CONTROL, r0
 800939a:	b662      	cpsie	i
 800939c:	b661      	cpsie	f
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	df00      	svc	0
 80093a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093aa:	bf00      	nop
 80093ac:	e000ed08 	.word	0xe000ed08

080093b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093b6:	4b37      	ldr	r3, [pc, #220]	; (8009494 <xPortStartScheduler+0xe4>)
 80093b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	22ff      	movs	r2, #255	; 0xff
 80093c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	4b2f      	ldr	r3, [pc, #188]	; (8009498 <xPortStartScheduler+0xe8>)
 80093dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093de:	4b2f      	ldr	r3, [pc, #188]	; (800949c <xPortStartScheduler+0xec>)
 80093e0:	2207      	movs	r2, #7
 80093e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093e4:	e009      	b.n	80093fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093e6:	4b2d      	ldr	r3, [pc, #180]	; (800949c <xPortStartScheduler+0xec>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	4a2b      	ldr	r2, [pc, #172]	; (800949c <xPortStartScheduler+0xec>)
 80093ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009402:	2b80      	cmp	r3, #128	; 0x80
 8009404:	d0ef      	beq.n	80093e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009406:	4b25      	ldr	r3, [pc, #148]	; (800949c <xPortStartScheduler+0xec>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f1c3 0307 	rsb	r3, r3, #7
 800940e:	2b04      	cmp	r3, #4
 8009410:	d00c      	beq.n	800942c <xPortStartScheduler+0x7c>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	b672      	cpsid	i
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	b662      	cpsie	i
 8009426:	60bb      	str	r3, [r7, #8]
}
 8009428:	bf00      	nop
 800942a:	e7fe      	b.n	800942a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800942c:	4b1b      	ldr	r3, [pc, #108]	; (800949c <xPortStartScheduler+0xec>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	021b      	lsls	r3, r3, #8
 8009432:	4a1a      	ldr	r2, [pc, #104]	; (800949c <xPortStartScheduler+0xec>)
 8009434:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009436:	4b19      	ldr	r3, [pc, #100]	; (800949c <xPortStartScheduler+0xec>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800943e:	4a17      	ldr	r2, [pc, #92]	; (800949c <xPortStartScheduler+0xec>)
 8009440:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	b2da      	uxtb	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800944a:	4b15      	ldr	r3, [pc, #84]	; (80094a0 <xPortStartScheduler+0xf0>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a14      	ldr	r2, [pc, #80]	; (80094a0 <xPortStartScheduler+0xf0>)
 8009450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009454:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009456:	4b12      	ldr	r3, [pc, #72]	; (80094a0 <xPortStartScheduler+0xf0>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a11      	ldr	r2, [pc, #68]	; (80094a0 <xPortStartScheduler+0xf0>)
 800945c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009460:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009462:	f000 f8dd 	bl	8009620 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009466:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <xPortStartScheduler+0xf4>)
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800946c:	f000 f8fc 	bl	8009668 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009470:	4b0d      	ldr	r3, [pc, #52]	; (80094a8 <xPortStartScheduler+0xf8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a0c      	ldr	r2, [pc, #48]	; (80094a8 <xPortStartScheduler+0xf8>)
 8009476:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800947a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800947c:	f7ff ff84 	bl	8009388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009480:	f7ff fa72 	bl	8008968 <vTaskSwitchContext>
	prvTaskExitError();
 8009484:	f7ff ff36 	bl	80092f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	e000e400 	.word	0xe000e400
 8009498:	20005834 	.word	0x20005834
 800949c:	20005838 	.word	0x20005838
 80094a0:	e000ed20 	.word	0xe000ed20
 80094a4:	20000020 	.word	0x20000020
 80094a8:	e000ef34 	.word	0xe000ef34

080094ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	b672      	cpsid	i
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	b662      	cpsie	i
 80094c6:	607b      	str	r3, [r7, #4]
}
 80094c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094ca:	4b10      	ldr	r3, [pc, #64]	; (800950c <vPortEnterCritical+0x60>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3301      	adds	r3, #1
 80094d0:	4a0e      	ldr	r2, [pc, #56]	; (800950c <vPortEnterCritical+0x60>)
 80094d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094d4:	4b0d      	ldr	r3, [pc, #52]	; (800950c <vPortEnterCritical+0x60>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d111      	bne.n	8009500 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094dc:	4b0c      	ldr	r3, [pc, #48]	; (8009510 <vPortEnterCritical+0x64>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00c      	beq.n	8009500 <vPortEnterCritical+0x54>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ea:	b672      	cpsid	i
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	b662      	cpsie	i
 80094fa:	603b      	str	r3, [r7, #0]
}
 80094fc:	bf00      	nop
 80094fe:	e7fe      	b.n	80094fe <vPortEnterCritical+0x52>
	}
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	20000020 	.word	0x20000020
 8009510:	e000ed04 	.word	0xe000ed04

08009514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800951a:	4b13      	ldr	r3, [pc, #76]	; (8009568 <vPortExitCritical+0x54>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10c      	bne.n	800953c <vPortExitCritical+0x28>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	b672      	cpsid	i
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	b662      	cpsie	i
 8009536:	607b      	str	r3, [r7, #4]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800953c:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <vPortExitCritical+0x54>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3b01      	subs	r3, #1
 8009542:	4a09      	ldr	r2, [pc, #36]	; (8009568 <vPortExitCritical+0x54>)
 8009544:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009546:	4b08      	ldr	r3, [pc, #32]	; (8009568 <vPortExitCritical+0x54>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d105      	bne.n	800955a <vPortExitCritical+0x46>
 800954e:	2300      	movs	r3, #0
 8009550:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	f383 8811 	msr	BASEPRI, r3
}
 8009558:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	20000020 	.word	0x20000020
 800956c:	00000000 	.word	0x00000000

08009570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009570:	f3ef 8009 	mrs	r0, PSP
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	4b15      	ldr	r3, [pc, #84]	; (80095d0 <pxCurrentTCBConst>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	f01e 0f10 	tst.w	lr, #16
 8009580:	bf08      	it	eq
 8009582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958a:	6010      	str	r0, [r2, #0]
 800958c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009594:	b672      	cpsid	i
 8009596:	f380 8811 	msr	BASEPRI, r0
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	b662      	cpsie	i
 80095a4:	f7ff f9e0 	bl	8008968 <vTaskSwitchContext>
 80095a8:	f04f 0000 	mov.w	r0, #0
 80095ac:	f380 8811 	msr	BASEPRI, r0
 80095b0:	bc09      	pop	{r0, r3}
 80095b2:	6819      	ldr	r1, [r3, #0]
 80095b4:	6808      	ldr	r0, [r1, #0]
 80095b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ba:	f01e 0f10 	tst.w	lr, #16
 80095be:	bf08      	it	eq
 80095c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095c4:	f380 8809 	msr	PSP, r0
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop

080095d0 <pxCurrentTCBConst>:
 80095d0:	20005708 	.word	0x20005708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop

080095d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	b672      	cpsid	i
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	b662      	cpsie	i
 80095f2:	607b      	str	r3, [r7, #4]
}
 80095f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095f6:	f7ff f8fd 	bl	80087f4 <xTaskIncrementTick>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009600:	4b06      	ldr	r3, [pc, #24]	; (800961c <SysTick_Handler+0x44>)
 8009602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	2300      	movs	r3, #0
 800960a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	f383 8811 	msr	BASEPRI, r3
}
 8009612:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	e000ed04 	.word	0xe000ed04

08009620 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009620:	b480      	push	{r7}
 8009622:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009624:	4b0b      	ldr	r3, [pc, #44]	; (8009654 <vPortSetupTimerInterrupt+0x34>)
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800962a:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <vPortSetupTimerInterrupt+0x38>)
 800962c:	2200      	movs	r2, #0
 800962e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009630:	4b0a      	ldr	r3, [pc, #40]	; (800965c <vPortSetupTimerInterrupt+0x3c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a0a      	ldr	r2, [pc, #40]	; (8009660 <vPortSetupTimerInterrupt+0x40>)
 8009636:	fba2 2303 	umull	r2, r3, r2, r3
 800963a:	099b      	lsrs	r3, r3, #6
 800963c:	4a09      	ldr	r2, [pc, #36]	; (8009664 <vPortSetupTimerInterrupt+0x44>)
 800963e:	3b01      	subs	r3, #1
 8009640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009642:	4b04      	ldr	r3, [pc, #16]	; (8009654 <vPortSetupTimerInterrupt+0x34>)
 8009644:	2207      	movs	r2, #7
 8009646:	601a      	str	r2, [r3, #0]
}
 8009648:	bf00      	nop
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	e000e010 	.word	0xe000e010
 8009658:	e000e018 	.word	0xe000e018
 800965c:	20000000 	.word	0x20000000
 8009660:	10624dd3 	.word	0x10624dd3
 8009664:	e000e014 	.word	0xe000e014

08009668 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009668:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009678 <vPortEnableVFP+0x10>
 800966c:	6801      	ldr	r1, [r0, #0]
 800966e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009672:	6001      	str	r1, [r0, #0]
 8009674:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009676:	bf00      	nop
 8009678:	e000ed88 	.word	0xe000ed88

0800967c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009682:	f3ef 8305 	mrs	r3, IPSR
 8009686:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b0f      	cmp	r3, #15
 800968c:	d916      	bls.n	80096bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800968e:	4a19      	ldr	r2, [pc, #100]	; (80096f4 <vPortValidateInterruptPriority+0x78>)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4413      	add	r3, r2
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009698:	4b17      	ldr	r3, [pc, #92]	; (80096f8 <vPortValidateInterruptPriority+0x7c>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	7afa      	ldrb	r2, [r7, #11]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d20c      	bcs.n	80096bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	b672      	cpsid	i
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	b662      	cpsie	i
 80096b6:	607b      	str	r3, [r7, #4]
}
 80096b8:	bf00      	nop
 80096ba:	e7fe      	b.n	80096ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096bc:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <vPortValidateInterruptPriority+0x80>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096c4:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <vPortValidateInterruptPriority+0x84>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d90c      	bls.n	80096e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	b672      	cpsid	i
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	b662      	cpsie	i
 80096e0:	603b      	str	r3, [r7, #0]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <vPortValidateInterruptPriority+0x68>
	}
 80096e6:	bf00      	nop
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	e000e3f0 	.word	0xe000e3f0
 80096f8:	20005834 	.word	0x20005834
 80096fc:	e000ed0c 	.word	0xe000ed0c
 8009700:	20005838 	.word	0x20005838

08009704 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b08a      	sub	sp, #40	; 0x28
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800970c:	2300      	movs	r3, #0
 800970e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009710:	f7fe ffa2 	bl	8008658 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009714:	4b5b      	ldr	r3, [pc, #364]	; (8009884 <pvPortMalloc+0x180>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800971c:	f000 f91a 	bl	8009954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009720:	4b59      	ldr	r3, [pc, #356]	; (8009888 <pvPortMalloc+0x184>)
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4013      	ands	r3, r2
 8009728:	2b00      	cmp	r3, #0
 800972a:	f040 8092 	bne.w	8009852 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d01f      	beq.n	8009774 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009734:	2208      	movs	r2, #8
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4413      	add	r3, r2
 800973a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	2b00      	cmp	r3, #0
 8009744:	d016      	beq.n	8009774 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f023 0307 	bic.w	r3, r3, #7
 800974c:	3308      	adds	r3, #8
 800974e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f003 0307 	and.w	r3, r3, #7
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00c      	beq.n	8009774 <pvPortMalloc+0x70>
	__asm volatile
 800975a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975e:	b672      	cpsid	i
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	b662      	cpsie	i
 800976e:	617b      	str	r3, [r7, #20]
}
 8009770:	bf00      	nop
 8009772:	e7fe      	b.n	8009772 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d06b      	beq.n	8009852 <pvPortMalloc+0x14e>
 800977a:	4b44      	ldr	r3, [pc, #272]	; (800988c <pvPortMalloc+0x188>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	429a      	cmp	r2, r3
 8009782:	d866      	bhi.n	8009852 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009784:	4b42      	ldr	r3, [pc, #264]	; (8009890 <pvPortMalloc+0x18c>)
 8009786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009788:	4b41      	ldr	r3, [pc, #260]	; (8009890 <pvPortMalloc+0x18c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800978e:	e004      	b.n	800979a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d903      	bls.n	80097ac <pvPortMalloc+0xa8>
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1f1      	bne.n	8009790 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097ac:	4b35      	ldr	r3, [pc, #212]	; (8009884 <pvPortMalloc+0x180>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d04d      	beq.n	8009852 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2208      	movs	r2, #8
 80097bc:	4413      	add	r3, r2
 80097be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	1ad2      	subs	r2, r2, r3
 80097d0:	2308      	movs	r3, #8
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d921      	bls.n	800981c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4413      	add	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00c      	beq.n	8009804 <pvPortMalloc+0x100>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	b672      	cpsid	i
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	b662      	cpsie	i
 80097fe:	613b      	str	r3, [r7, #16]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	1ad2      	subs	r2, r2, r3
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009816:	69b8      	ldr	r0, [r7, #24]
 8009818:	f000 f8fe 	bl	8009a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800981c:	4b1b      	ldr	r3, [pc, #108]	; (800988c <pvPortMalloc+0x188>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	4a19      	ldr	r2, [pc, #100]	; (800988c <pvPortMalloc+0x188>)
 8009828:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800982a:	4b18      	ldr	r3, [pc, #96]	; (800988c <pvPortMalloc+0x188>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	4b19      	ldr	r3, [pc, #100]	; (8009894 <pvPortMalloc+0x190>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	429a      	cmp	r2, r3
 8009834:	d203      	bcs.n	800983e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009836:	4b15      	ldr	r3, [pc, #84]	; (800988c <pvPortMalloc+0x188>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a16      	ldr	r2, [pc, #88]	; (8009894 <pvPortMalloc+0x190>)
 800983c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	4b11      	ldr	r3, [pc, #68]	; (8009888 <pvPortMalloc+0x184>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	431a      	orrs	r2, r3
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	2200      	movs	r2, #0
 8009850:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009852:	f7fe ff0f 	bl	8008674 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00c      	beq.n	800987a <pvPortMalloc+0x176>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	b672      	cpsid	i
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	b662      	cpsie	i
 8009874:	60fb      	str	r3, [r7, #12]
}
 8009876:	bf00      	nop
 8009878:	e7fe      	b.n	8009878 <pvPortMalloc+0x174>
	return pvReturn;
 800987a:	69fb      	ldr	r3, [r7, #28]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3728      	adds	r7, #40	; 0x28
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20009444 	.word	0x20009444
 8009888:	20009450 	.word	0x20009450
 800988c:	20009448 	.word	0x20009448
 8009890:	2000943c 	.word	0x2000943c
 8009894:	2000944c 	.word	0x2000944c

08009898 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d04c      	beq.n	8009944 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098aa:	2308      	movs	r3, #8
 80098ac:	425b      	negs	r3, r3
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	4413      	add	r3, r2
 80098b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	4b23      	ldr	r3, [pc, #140]	; (800994c <vPortFree+0xb4>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4013      	ands	r3, r2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10c      	bne.n	80098e0 <vPortFree+0x48>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	b672      	cpsid	i
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	b662      	cpsie	i
 80098da:	60fb      	str	r3, [r7, #12]
}
 80098dc:	bf00      	nop
 80098de:	e7fe      	b.n	80098de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00c      	beq.n	8009902 <vPortFree+0x6a>
	__asm volatile
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	b672      	cpsid	i
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	b662      	cpsie	i
 80098fc:	60bb      	str	r3, [r7, #8]
}
 80098fe:	bf00      	nop
 8009900:	e7fe      	b.n	8009900 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	4b11      	ldr	r3, [pc, #68]	; (800994c <vPortFree+0xb4>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4013      	ands	r3, r2
 800990c:	2b00      	cmp	r3, #0
 800990e:	d019      	beq.n	8009944 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d115      	bne.n	8009944 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	4b0b      	ldr	r3, [pc, #44]	; (800994c <vPortFree+0xb4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	43db      	mvns	r3, r3
 8009922:	401a      	ands	r2, r3
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009928:	f7fe fe96 	bl	8008658 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	685a      	ldr	r2, [r3, #4]
 8009930:	4b07      	ldr	r3, [pc, #28]	; (8009950 <vPortFree+0xb8>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4413      	add	r3, r2
 8009936:	4a06      	ldr	r2, [pc, #24]	; (8009950 <vPortFree+0xb8>)
 8009938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800993a:	6938      	ldr	r0, [r7, #16]
 800993c:	f000 f86c 	bl	8009a18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009940:	f7fe fe98 	bl	8008674 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009944:	bf00      	nop
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20009450 	.word	0x20009450
 8009950:	20009448 	.word	0x20009448

08009954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800995a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800995e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009960:	4b27      	ldr	r3, [pc, #156]	; (8009a00 <prvHeapInit+0xac>)
 8009962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00c      	beq.n	8009988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3307      	adds	r3, #7
 8009972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0307 	bic.w	r3, r3, #7
 800997a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	4a1f      	ldr	r2, [pc, #124]	; (8009a00 <prvHeapInit+0xac>)
 8009984:	4413      	add	r3, r2
 8009986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800998c:	4a1d      	ldr	r2, [pc, #116]	; (8009a04 <prvHeapInit+0xb0>)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009992:	4b1c      	ldr	r3, [pc, #112]	; (8009a04 <prvHeapInit+0xb0>)
 8009994:	2200      	movs	r2, #0
 8009996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	4413      	add	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099a0:	2208      	movs	r2, #8
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	1a9b      	subs	r3, r3, r2
 80099a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f023 0307 	bic.w	r3, r3, #7
 80099ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4a15      	ldr	r2, [pc, #84]	; (8009a08 <prvHeapInit+0xb4>)
 80099b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099b6:	4b14      	ldr	r3, [pc, #80]	; (8009a08 <prvHeapInit+0xb4>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2200      	movs	r2, #0
 80099bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099be:	4b12      	ldr	r3, [pc, #72]	; (8009a08 <prvHeapInit+0xb4>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	1ad2      	subs	r2, r2, r3
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <prvHeapInit+0xb4>)
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	4a0a      	ldr	r2, [pc, #40]	; (8009a0c <prvHeapInit+0xb8>)
 80099e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	4a09      	ldr	r2, [pc, #36]	; (8009a10 <prvHeapInit+0xbc>)
 80099ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099ec:	4b09      	ldr	r3, [pc, #36]	; (8009a14 <prvHeapInit+0xc0>)
 80099ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099f2:	601a      	str	r2, [r3, #0]
}
 80099f4:	bf00      	nop
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	2000583c 	.word	0x2000583c
 8009a04:	2000943c 	.word	0x2000943c
 8009a08:	20009444 	.word	0x20009444
 8009a0c:	2000944c 	.word	0x2000944c
 8009a10:	20009448 	.word	0x20009448
 8009a14:	20009450 	.word	0x20009450

08009a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a20:	4b28      	ldr	r3, [pc, #160]	; (8009ac4 <prvInsertBlockIntoFreeList+0xac>)
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	e002      	b.n	8009a2c <prvInsertBlockIntoFreeList+0x14>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d8f7      	bhi.n	8009a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	4413      	add	r3, r2
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d108      	bne.n	8009a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	441a      	add	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	441a      	add	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d118      	bne.n	8009aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	4b15      	ldr	r3, [pc, #84]	; (8009ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d00d      	beq.n	8009a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	441a      	add	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	e008      	b.n	8009aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a96:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	e003      	b.n	8009aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d002      	beq.n	8009ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ab6:	bf00      	nop
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	2000943c 	.word	0x2000943c
 8009ac8:	20009444 	.word	0x20009444

08009acc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	330c      	adds	r3, #12
 8009adc:	461a      	mov	r2, r3
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f002 fc8b 	bl	800c3fc <tcpip_send_msg_wait_sem>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d103      	bne.n	8009afa <netconn_apimsg+0x2e>
    return apimsg->err;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009af8:	e001      	b.n	8009afe <netconn_apimsg+0x32>
  }
  return err;
 8009afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	; 0x30
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	603a      	str	r2, [r7, #0]
 8009b12:	71fb      	strb	r3, [r7, #7]
 8009b14:	460b      	mov	r3, r1
 8009b16:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009b18:	79fb      	ldrb	r3, [r7, #7]
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fdd9 	bl	800a6d4 <netconn_alloc>
 8009b22:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d054      	beq.n	8009bd4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009b2a:	79bb      	ldrb	r3, [r7, #6]
 8009b2c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8009b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b30:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009b32:	f107 0308 	add.w	r3, r7, #8
 8009b36:	4619      	mov	r1, r3
 8009b38:	4829      	ldr	r0, [pc, #164]	; (8009be0 <netconn_new_with_proto_and_callback+0xd8>)
 8009b3a:	f7ff ffc7 	bl	8009acc <netconn_apimsg>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009b44:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d043      	beq.n	8009bd4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <netconn_new_with_proto_and_callback+0x58>
 8009b54:	4b23      	ldr	r3, [pc, #140]	; (8009be4 <netconn_new_with_proto_and_callback+0xdc>)
 8009b56:	22a3      	movs	r2, #163	; 0xa3
 8009b58:	4923      	ldr	r1, [pc, #140]	; (8009be8 <netconn_new_with_proto_and_callback+0xe0>)
 8009b5a:	4824      	ldr	r0, [pc, #144]	; (8009bec <netconn_new_with_proto_and_callback+0xe4>)
 8009b5c:	f00f f818 	bl	8018b90 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b62:	3310      	adds	r3, #16
 8009b64:	4618      	mov	r0, r3
 8009b66:	f00d ff18 	bl	801799a <sys_mbox_valid>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d105      	bne.n	8009b7c <netconn_new_with_proto_and_callback+0x74>
 8009b70:	4b1c      	ldr	r3, [pc, #112]	; (8009be4 <netconn_new_with_proto_and_callback+0xdc>)
 8009b72:	22a4      	movs	r2, #164	; 0xa4
 8009b74:	491e      	ldr	r1, [pc, #120]	; (8009bf0 <netconn_new_with_proto_and_callback+0xe8>)
 8009b76:	481d      	ldr	r0, [pc, #116]	; (8009bec <netconn_new_with_proto_and_callback+0xe4>)
 8009b78:	f00f f80a 	bl	8018b90 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7e:	3314      	adds	r3, #20
 8009b80:	4618      	mov	r0, r3
 8009b82:	f00d ff0a 	bl	801799a <sys_mbox_valid>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d005      	beq.n	8009b98 <netconn_new_with_proto_and_callback+0x90>
 8009b8c:	4b15      	ldr	r3, [pc, #84]	; (8009be4 <netconn_new_with_proto_and_callback+0xdc>)
 8009b8e:	22a6      	movs	r2, #166	; 0xa6
 8009b90:	4918      	ldr	r1, [pc, #96]	; (8009bf4 <netconn_new_with_proto_and_callback+0xec>)
 8009b92:	4816      	ldr	r0, [pc, #88]	; (8009bec <netconn_new_with_proto_and_callback+0xe4>)
 8009b94:	f00e fffc 	bl	8018b90 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	330c      	adds	r3, #12
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f00d ff8d 	bl	8017abc <sys_sem_valid>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d105      	bne.n	8009bb4 <netconn_new_with_proto_and_callback+0xac>
 8009ba8:	4b0e      	ldr	r3, [pc, #56]	; (8009be4 <netconn_new_with_proto_and_callback+0xdc>)
 8009baa:	22a9      	movs	r2, #169	; 0xa9
 8009bac:	4912      	ldr	r1, [pc, #72]	; (8009bf8 <netconn_new_with_proto_and_callback+0xf0>)
 8009bae:	480f      	ldr	r0, [pc, #60]	; (8009bec <netconn_new_with_proto_and_callback+0xe4>)
 8009bb0:	f00e ffee 	bl	8018b90 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	330c      	adds	r3, #12
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f00d ff72 	bl	8017aa2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	3310      	adds	r3, #16
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f00d fe62 	bl	801788c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009bc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bca:	2007      	movs	r0, #7
 8009bcc:	f003 f9c4 	bl	800cf58 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e000      	b.n	8009bd6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3730      	adds	r7, #48	; 0x30
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	0800a6a9 	.word	0x0800a6a9
 8009be4:	0801c8cc 	.word	0x0801c8cc
 8009be8:	0801c900 	.word	0x0801c900
 8009bec:	0801c924 	.word	0x0801c924
 8009bf0:	0801c94c 	.word	0x0801c94c
 8009bf4:	0801c964 	.word	0x0801c964
 8009bf8:	0801c988 	.word	0x0801c988

08009bfc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08c      	sub	sp, #48	; 0x30
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e014      	b.n	8009c38 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009c12:	2329      	movs	r3, #41	; 0x29
 8009c14:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009c16:	f107 030c 	add.w	r3, r7, #12
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4808      	ldr	r0, [pc, #32]	; (8009c40 <netconn_prepare_delete+0x44>)
 8009c1e:	f7ff ff55 	bl	8009acc <netconn_apimsg>
 8009c22:	4603      	mov	r3, r0
 8009c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009c28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <netconn_prepare_delete+0x3a>
    return err;
 8009c30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009c34:	e000      	b.n	8009c38 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3730      	adds	r7, #48	; 0x30
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	0800ac15 	.word	0x0800ac15

08009c44 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <netconn_delete+0x12>
    return ERR_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	e00d      	b.n	8009c72 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff ffd0 	bl	8009bfc <netconn_prepare_delete>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d102      	bne.n	8009c6e <netconn_delete+0x2a>
    netconn_free(conn);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fda1 	bl	800a7b0 <netconn_free>
  }
  return err;
 8009c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08e      	sub	sp, #56	; 0x38
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	4613      	mov	r3, r2
 8009c88:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d109      	bne.n	8009ca4 <netconn_connect+0x28>
 8009c90:	4b11      	ldr	r3, [pc, #68]	; (8009cd8 <netconn_connect+0x5c>)
 8009c92:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8009c96:	4911      	ldr	r1, [pc, #68]	; (8009cdc <netconn_connect+0x60>)
 8009c98:	4811      	ldr	r0, [pc, #68]	; (8009ce0 <netconn_connect+0x64>)
 8009c9a:	f00e ff79 	bl	8018b90 <iprintf>
 8009c9e:	f06f 030f 	mvn.w	r3, #15
 8009ca2:	e015      	b.n	8009cd0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8009caa:	4b0e      	ldr	r3, [pc, #56]	; (8009ce4 <netconn_connect+0x68>)
 8009cac:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009cb6:	88fb      	ldrh	r3, [r7, #6]
 8009cb8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8009cba:	f107 0314 	add.w	r3, r7, #20
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	4809      	ldr	r0, [pc, #36]	; (8009ce8 <netconn_connect+0x6c>)
 8009cc2:	f7ff ff03 	bl	8009acc <netconn_apimsg>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009ccc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3738      	adds	r7, #56	; 0x38
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	0801c8cc 	.word	0x0801c8cc
 8009cdc:	0801ca40 	.word	0x0801ca40
 8009ce0:	0801c924 	.word	0x0801c924
 8009ce4:	08020358 	.word	0x08020358
 8009ce8:	0800aefd 	.word	0x0800aefd

08009cec <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08c      	sub	sp, #48	; 0x30
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d109      	bne.n	8009d0e <netconn_disconnect+0x22>
 8009cfa:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <netconn_disconnect+0x44>)
 8009cfc:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8009d00:	490c      	ldr	r1, [pc, #48]	; (8009d34 <netconn_disconnect+0x48>)
 8009d02:	480d      	ldr	r0, [pc, #52]	; (8009d38 <netconn_disconnect+0x4c>)
 8009d04:	f00e ff44 	bl	8018b90 <iprintf>
 8009d08:	f06f 030f 	mvn.w	r3, #15
 8009d0c:	e00c      	b.n	8009d28 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8009d12:	f107 030c 	add.w	r3, r7, #12
 8009d16:	4619      	mov	r1, r3
 8009d18:	4808      	ldr	r0, [pc, #32]	; (8009d3c <netconn_disconnect+0x50>)
 8009d1a:	f7ff fed7 	bl	8009acc <netconn_apimsg>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009d24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3730      	adds	r7, #48	; 0x30
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	0801c8cc 	.word	0x0801c8cc
 8009d34:	0801ca60 	.word	0x0801ca60
 8009d38:	0801c924 	.word	0x0801c924
 8009d3c:	0800b079 	.word	0x0800b079

08009d40 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08c      	sub	sp, #48	; 0x30
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d109      	bne.n	8009d64 <netconn_send+0x24>
 8009d50:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <netconn_send+0x4c>)
 8009d52:	f240 32b2 	movw	r2, #946	; 0x3b2
 8009d56:	490e      	ldr	r1, [pc, #56]	; (8009d90 <netconn_send+0x50>)
 8009d58:	480e      	ldr	r0, [pc, #56]	; (8009d94 <netconn_send+0x54>)
 8009d5a:	f00e ff19 	bl	8018b90 <iprintf>
 8009d5e:	f06f 030f 	mvn.w	r3, #15
 8009d62:	e00e      	b.n	8009d82 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009d6c:	f107 030c 	add.w	r3, r7, #12
 8009d70:	4619      	mov	r1, r3
 8009d72:	4809      	ldr	r0, [pc, #36]	; (8009d98 <netconn_send+0x58>)
 8009d74:	f7ff feaa 	bl	8009acc <netconn_apimsg>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009d7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3730      	adds	r7, #48	; 0x30
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	0801c8cc 	.word	0x0801c8cc
 8009d90:	0801cb88 	.word	0x0801cb88
 8009d94:	0801c924 	.word	0x0801c924
 8009d98:	0800b0b5 	.word	0x0800b0b5

08009d9c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009db2:	78fa      	ldrb	r2, [r7, #3]
 8009db4:	f107 0110 	add.w	r1, r7, #16
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f805 	bl	8009dd0 <netconn_write_vectors_partly>
 8009dc6:	4603      	mov	r3, r0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b092      	sub	sp, #72	; 0x48
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	4611      	mov	r1, r2
 8009ddc:	461a      	mov	r2, r3
 8009dde:	460b      	mov	r3, r1
 8009de0:	80fb      	strh	r3, [r7, #6]
 8009de2:	4613      	mov	r3, r2
 8009de4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d109      	bne.n	8009e00 <netconn_write_vectors_partly+0x30>
 8009dec:	4b4e      	ldr	r3, [pc, #312]	; (8009f28 <netconn_write_vectors_partly+0x158>)
 8009dee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009df2:	494e      	ldr	r1, [pc, #312]	; (8009f2c <netconn_write_vectors_partly+0x15c>)
 8009df4:	484e      	ldr	r0, [pc, #312]	; (8009f30 <netconn_write_vectors_partly+0x160>)
 8009df6:	f00e fecb 	bl	8018b90 <iprintf>
 8009dfa:	f06f 030f 	mvn.w	r3, #15
 8009dfe:	e08e      	b.n	8009f1e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e08:	2b10      	cmp	r3, #16
 8009e0a:	d009      	beq.n	8009e20 <netconn_write_vectors_partly+0x50>
 8009e0c:	4b46      	ldr	r3, [pc, #280]	; (8009f28 <netconn_write_vectors_partly+0x158>)
 8009e0e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009e12:	4948      	ldr	r1, [pc, #288]	; (8009f34 <netconn_write_vectors_partly+0x164>)
 8009e14:	4846      	ldr	r0, [pc, #280]	; (8009f30 <netconn_write_vectors_partly+0x160>)
 8009e16:	f00e febb 	bl	8018b90 <iprintf>
 8009e1a:	f06f 0305 	mvn.w	r3, #5
 8009e1e:	e07e      	b.n	8009f1e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	7f1b      	ldrb	r3, [r3, #28]
 8009e24:	f003 0302 	and.w	r3, r3, #2
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d104      	bne.n	8009e36 <netconn_write_vectors_partly+0x66>
 8009e2c:	797b      	ldrb	r3, [r7, #5]
 8009e2e:	f003 0304 	and.w	r3, r3, #4
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <netconn_write_vectors_partly+0x6a>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e000      	b.n	8009e3c <netconn_write_vectors_partly+0x6c>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009e40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d005      	beq.n	8009e54 <netconn_write_vectors_partly+0x84>
 8009e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d102      	bne.n	8009e54 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009e4e:	f06f 0305 	mvn.w	r3, #5
 8009e52:	e064      	b.n	8009f1e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009e58:	2300      	movs	r3, #0
 8009e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8009e5c:	e015      	b.n	8009e8a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e60:	00db      	lsls	r3, r3, #3
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	4413      	add	r3, r2
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e6a:	4413      	add	r3, r2
 8009e6c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e70:	00db      	lsls	r3, r3, #3
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	4413      	add	r3, r2
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d202      	bcs.n	8009e84 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009e7e:	f06f 0305 	mvn.w	r3, #5
 8009e82:	e04c      	b.n	8009f1e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e86:	3301      	adds	r3, #1
 8009e88:	643b      	str	r3, [r7, #64]	; 0x40
 8009e8a:	88fb      	ldrh	r3, [r7, #6]
 8009e8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	dbe5      	blt.n	8009e5e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d101      	bne.n	8009e9c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	e040      	b.n	8009f1e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	da0a      	bge.n	8009eb8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d102      	bne.n	8009eae <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009ea8:	f06f 0305 	mvn.w	r3, #5
 8009eac:	e037      	b.n	8009f1e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009eae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009eb2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009ec0:	88fb      	ldrh	r3, [r7, #6]
 8009ec2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009ec8:	797b      	ldrb	r3, [r7, #5]
 8009eca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009ed6:	f107 0314 	add.w	r3, r7, #20
 8009eda:	4619      	mov	r1, r3
 8009edc:	4816      	ldr	r0, [pc, #88]	; (8009f38 <netconn_write_vectors_partly+0x168>)
 8009ede:	f7ff fdf5 	bl	8009acc <netconn_apimsg>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009ee8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d114      	bne.n	8009f1a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d002      	beq.n	8009efc <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009efa:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009efc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10a      	bne.n	8009f1a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d006      	beq.n	8009f1a <netconn_write_vectors_partly+0x14a>
 8009f0c:	4b06      	ldr	r3, [pc, #24]	; (8009f28 <netconn_write_vectors_partly+0x158>)
 8009f0e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009f12:	490a      	ldr	r1, [pc, #40]	; (8009f3c <netconn_write_vectors_partly+0x16c>)
 8009f14:	4806      	ldr	r0, [pc, #24]	; (8009f30 <netconn_write_vectors_partly+0x160>)
 8009f16:	f00e fe3b 	bl	8018b90 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009f1a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3748      	adds	r7, #72	; 0x48
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	0801c8cc 	.word	0x0801c8cc
 8009f2c:	0801cba4 	.word	0x0801cba4
 8009f30:	0801c924 	.word	0x0801c924
 8009f34:	0801cbc0 	.word	0x0801cbc0
 8009f38:	0800b4ed 	.word	0x0800b4ed
 8009f3c:	0801cbe4 	.word	0x0801cbe4

08009f40 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <netconn_err+0x12>
    return ERR_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e00d      	b.n	8009f6e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009f52:	f00d fe3d 	bl	8017bd0 <sys_arch_protect>
 8009f56:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7a1b      	ldrb	r3, [r3, #8]
 8009f5c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f00d fe41 	bl	8017bec <sys_arch_unprotect>
  return err;
 8009f6a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f86:	f113 0f0d 	cmn.w	r3, #13
 8009f8a:	d009      	beq.n	8009fa0 <lwip_netconn_err_to_msg+0x28>
 8009f8c:	f113 0f0d 	cmn.w	r3, #13
 8009f90:	dc0c      	bgt.n	8009fac <lwip_netconn_err_to_msg+0x34>
 8009f92:	f113 0f0f 	cmn.w	r3, #15
 8009f96:	d007      	beq.n	8009fa8 <lwip_netconn_err_to_msg+0x30>
 8009f98:	f113 0f0e 	cmn.w	r3, #14
 8009f9c:	d002      	beq.n	8009fa4 <lwip_netconn_err_to_msg+0x2c>
 8009f9e:	e005      	b.n	8009fac <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009fa0:	4b0a      	ldr	r3, [pc, #40]	; (8009fcc <lwip_netconn_err_to_msg+0x54>)
 8009fa2:	e00e      	b.n	8009fc2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009fa4:	4b0a      	ldr	r3, [pc, #40]	; (8009fd0 <lwip_netconn_err_to_msg+0x58>)
 8009fa6:	e00c      	b.n	8009fc2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009fa8:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <lwip_netconn_err_to_msg+0x5c>)
 8009faa:	e00a      	b.n	8009fc2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d005      	beq.n	8009fc0 <lwip_netconn_err_to_msg+0x48>
 8009fb4:	4b08      	ldr	r3, [pc, #32]	; (8009fd8 <lwip_netconn_err_to_msg+0x60>)
 8009fb6:	227d      	movs	r2, #125	; 0x7d
 8009fb8:	4908      	ldr	r1, [pc, #32]	; (8009fdc <lwip_netconn_err_to_msg+0x64>)
 8009fba:	4809      	ldr	r0, [pc, #36]	; (8009fe0 <lwip_netconn_err_to_msg+0x68>)
 8009fbc:	f00e fde8 	bl	8018b90 <iprintf>
      return NULL;
 8009fc0:	2300      	movs	r3, #0
  }
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	08020200 	.word	0x08020200
 8009fd0:	08020201 	.word	0x08020201
 8009fd4:	08020202 	.word	0x08020202
 8009fd8:	0801cc24 	.word	0x0801cc24
 8009fdc:	0801cc58 	.word	0x0801cc58
 8009fe0:	0801cc68 	.word	0x0801cc68

08009fe4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d105      	bne.n	800a000 <lwip_netconn_is_err_msg+0x1c>
 8009ff4:	4b12      	ldr	r3, [pc, #72]	; (800a040 <lwip_netconn_is_err_msg+0x5c>)
 8009ff6:	2285      	movs	r2, #133	; 0x85
 8009ff8:	4912      	ldr	r1, [pc, #72]	; (800a044 <lwip_netconn_is_err_msg+0x60>)
 8009ffa:	4813      	ldr	r0, [pc, #76]	; (800a048 <lwip_netconn_is_err_msg+0x64>)
 8009ffc:	f00e fdc8 	bl	8018b90 <iprintf>

  if (msg == &netconn_aborted) {
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a12      	ldr	r2, [pc, #72]	; (800a04c <lwip_netconn_is_err_msg+0x68>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d104      	bne.n	800a012 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	22f3      	movs	r2, #243	; 0xf3
 800a00c:	701a      	strb	r2, [r3, #0]
    return 1;
 800a00e:	2301      	movs	r3, #1
 800a010:	e012      	b.n	800a038 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a0e      	ldr	r2, [pc, #56]	; (800a050 <lwip_netconn_is_err_msg+0x6c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d104      	bne.n	800a024 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	22f2      	movs	r2, #242	; 0xf2
 800a01e:	701a      	strb	r2, [r3, #0]
    return 1;
 800a020:	2301      	movs	r3, #1
 800a022:	e009      	b.n	800a038 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a0b      	ldr	r2, [pc, #44]	; (800a054 <lwip_netconn_is_err_msg+0x70>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d104      	bne.n	800a036 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	22f1      	movs	r2, #241	; 0xf1
 800a030:	701a      	strb	r2, [r3, #0]
    return 1;
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	0801cc24 	.word	0x0801cc24
 800a044:	0801cc90 	.word	0x0801cc90
 800a048:	0801cc68 	.word	0x0801cc68
 800a04c:	08020200 	.word	0x08020200
 800a050:	08020201 	.word	0x08020201
 800a054:	08020202 	.word	0x08020202

0800a058 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b088      	sub	sp, #32
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d105      	bne.n	800a078 <recv_udp+0x20>
 800a06c:	4b34      	ldr	r3, [pc, #208]	; (800a140 <recv_udp+0xe8>)
 800a06e:	22e5      	movs	r2, #229	; 0xe5
 800a070:	4934      	ldr	r1, [pc, #208]	; (800a144 <recv_udp+0xec>)
 800a072:	4835      	ldr	r0, [pc, #212]	; (800a148 <recv_udp+0xf0>)
 800a074:	f00e fd8c 	bl	8018b90 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d105      	bne.n	800a08a <recv_udp+0x32>
 800a07e:	4b30      	ldr	r3, [pc, #192]	; (800a140 <recv_udp+0xe8>)
 800a080:	22e6      	movs	r2, #230	; 0xe6
 800a082:	4932      	ldr	r1, [pc, #200]	; (800a14c <recv_udp+0xf4>)
 800a084:	4830      	ldr	r0, [pc, #192]	; (800a148 <recv_udp+0xf0>)
 800a086:	f00e fd83 	bl	8018b90 <iprintf>
  conn = (struct netconn *)arg;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d103      	bne.n	800a09c <recv_udp+0x44>
    pbuf_free(p);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f003 fe03 	bl	800dca0 <pbuf_free>
    return;
 800a09a:	e04d      	b.n	800a138 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d005      	beq.n	800a0b2 <recv_udp+0x5a>
 800a0a6:	4b26      	ldr	r3, [pc, #152]	; (800a140 <recv_udp+0xe8>)
 800a0a8:	22ee      	movs	r2, #238	; 0xee
 800a0aa:	4929      	ldr	r1, [pc, #164]	; (800a150 <recv_udp+0xf8>)
 800a0ac:	4826      	ldr	r0, [pc, #152]	; (800a148 <recv_udp+0xf0>)
 800a0ae:	f00e fd6f 	bl	8018b90 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	3310      	adds	r3, #16
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f00d fc6f 	bl	801799a <sys_mbox_valid>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d103      	bne.n	800a0ca <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f003 fdec 	bl	800dca0 <pbuf_free>
    return;
 800a0c8:	e036      	b.n	800a138 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a0ca:	2006      	movs	r0, #6
 800a0cc:	f002 fece 	bl	800ce6c <memp_malloc>
 800a0d0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <recv_udp+0x88>
    pbuf_free(p);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f003 fde1 	bl	800dca0 <pbuf_free>
    return;
 800a0de:	e02b      	b.n	800a138 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d002      	beq.n	800a0f8 <recv_udp+0xa0>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	e000      	b.n	800a0fa <recv_udp+0xa2>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	69ba      	ldr	r2, [r7, #24]
 800a0fc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a102:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	891b      	ldrh	r3, [r3, #8]
 800a108:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	3310      	adds	r3, #16
 800a10e:	69b9      	ldr	r1, [r7, #24]
 800a110:	4618      	mov	r0, r3
 800a112:	f00d fbcd 	bl	80178b0 <sys_mbox_trypost>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d003      	beq.n	800a124 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a11c:	69b8      	ldr	r0, [r7, #24]
 800a11e:	f001 fa8f 	bl	800b640 <netbuf_delete>
    return;
 800a122:	e009      	b.n	800a138 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d005      	beq.n	800a138 <recv_udp+0xe0>
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	8afa      	ldrh	r2, [r7, #22]
 800a132:	2100      	movs	r1, #0
 800a134:	69f8      	ldr	r0, [r7, #28]
 800a136:	4798      	blx	r3
  }
}
 800a138:	3720      	adds	r7, #32
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	0801cc24 	.word	0x0801cc24
 800a144:	0801cc9c 	.word	0x0801cc9c
 800a148:	0801cc68 	.word	0x0801cc68
 800a14c:	0801ccc0 	.word	0x0801ccc0
 800a150:	0801cce0 	.word	0x0801cce0

0800a154 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d106      	bne.n	800a176 <recv_tcp+0x22>
 800a168:	4b36      	ldr	r3, [pc, #216]	; (800a244 <recv_tcp+0xf0>)
 800a16a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a16e:	4936      	ldr	r1, [pc, #216]	; (800a248 <recv_tcp+0xf4>)
 800a170:	4836      	ldr	r0, [pc, #216]	; (800a24c <recv_tcp+0xf8>)
 800a172:	f00e fd0d 	bl	8018b90 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d106      	bne.n	800a18a <recv_tcp+0x36>
 800a17c:	4b31      	ldr	r3, [pc, #196]	; (800a244 <recv_tcp+0xf0>)
 800a17e:	f240 122d 	movw	r2, #301	; 0x12d
 800a182:	4933      	ldr	r1, [pc, #204]	; (800a250 <recv_tcp+0xfc>)
 800a184:	4831      	ldr	r0, [pc, #196]	; (800a24c <recv_tcp+0xf8>)
 800a186:	f00e fd03 	bl	8018b90 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a18a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d006      	beq.n	800a1a0 <recv_tcp+0x4c>
 800a192:	4b2c      	ldr	r3, [pc, #176]	; (800a244 <recv_tcp+0xf0>)
 800a194:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a198:	492e      	ldr	r1, [pc, #184]	; (800a254 <recv_tcp+0x100>)
 800a19a:	482c      	ldr	r0, [pc, #176]	; (800a24c <recv_tcp+0xf8>)
 800a19c:	f00e fcf8 	bl	8018b90 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d102      	bne.n	800a1b0 <recv_tcp+0x5c>
    return ERR_VAL;
 800a1aa:	f06f 0305 	mvn.w	r3, #5
 800a1ae:	e045      	b.n	800a23c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d006      	beq.n	800a1c8 <recv_tcp+0x74>
 800a1ba:	4b22      	ldr	r3, [pc, #136]	; (800a244 <recv_tcp+0xf0>)
 800a1bc:	f240 1235 	movw	r2, #309	; 0x135
 800a1c0:	4925      	ldr	r1, [pc, #148]	; (800a258 <recv_tcp+0x104>)
 800a1c2:	4822      	ldr	r0, [pc, #136]	; (800a24c <recv_tcp+0xf8>)
 800a1c4:	f00e fce4 	bl	8018b90 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	3310      	adds	r3, #16
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f00d fbe4 	bl	801799a <sys_mbox_valid>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10d      	bne.n	800a1f4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d008      	beq.n	800a1f0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	891b      	ldrh	r3, [r3, #8]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	68b8      	ldr	r0, [r7, #8]
 800a1e6:	f004 fbc1 	bl	800e96c <tcp_recved>
      pbuf_free(p);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f003 fd58 	bl	800dca0 <pbuf_free>
    }
    return ERR_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	e023      	b.n	800a23c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d005      	beq.n	800a206 <recv_tcp+0xb2>
    msg = p;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	891b      	ldrh	r3, [r3, #8]
 800a202:	83fb      	strh	r3, [r7, #30]
 800a204:	e003      	b.n	800a20e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a206:	4b15      	ldr	r3, [pc, #84]	; (800a25c <recv_tcp+0x108>)
 800a208:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	3310      	adds	r3, #16
 800a212:	69b9      	ldr	r1, [r7, #24]
 800a214:	4618      	mov	r0, r3
 800a216:	f00d fb4b 	bl	80178b0 <sys_mbox_trypost>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a220:	f04f 33ff 	mov.w	r3, #4294967295
 800a224:	e00a      	b.n	800a23c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d005      	beq.n	800a23a <recv_tcp+0xe6>
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a232:	8bfa      	ldrh	r2, [r7, #30]
 800a234:	2100      	movs	r1, #0
 800a236:	6978      	ldr	r0, [r7, #20]
 800a238:	4798      	blx	r3
  }

  return ERR_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3720      	adds	r7, #32
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	0801cc24 	.word	0x0801cc24
 800a248:	0801cd00 	.word	0x0801cd00
 800a24c:	0801cc68 	.word	0x0801cc68
 800a250:	0801cd24 	.word	0x0801cd24
 800a254:	0801cd44 	.word	0x0801cd44
 800a258:	0801cd5c 	.word	0x0801cd5c
 800a25c:	08020202 	.word	0x08020202

0800a260 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <poll_tcp+0x22>
 800a274:	4b2a      	ldr	r3, [pc, #168]	; (800a320 <poll_tcp+0xc0>)
 800a276:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a27a:	492a      	ldr	r1, [pc, #168]	; (800a324 <poll_tcp+0xc4>)
 800a27c:	482a      	ldr	r0, [pc, #168]	; (800a328 <poll_tcp+0xc8>)
 800a27e:	f00e fc87 	bl	8018b90 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	785b      	ldrb	r3, [r3, #1]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d104      	bne.n	800a294 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a28a:	2101      	movs	r1, #1
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f000 ff5f 	bl	800b150 <lwip_netconn_do_writemore>
 800a292:	e016      	b.n	800a2c2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	785b      	ldrb	r3, [r3, #1]
 800a298:	2b04      	cmp	r3, #4
 800a29a:	d112      	bne.n	800a2c2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00a      	beq.n	800a2ba <poll_tcp+0x5a>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	7a5b      	ldrb	r3, [r3, #9]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d005      	beq.n	800a2ba <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	7a5a      	ldrb	r2, [r3, #9]
 800a2b4:	3a01      	subs	r2, #1
 800a2b6:	b2d2      	uxtb	r2, r2
 800a2b8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 fb3f 	bl	800a940 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	7f1b      	ldrb	r3, [r3, #28]
 800a2c6:	f003 0310 	and.w	r3, r3, #16
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d023      	beq.n	800a316 <poll_tcp+0xb6>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d01f      	beq.n	800a316 <poll_tcp+0xb6>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a2de:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 800a2e2:	d918      	bls.n	800a316 <poll_tcp+0xb6>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a2ec:	f241 3287 	movw	r2, #4999	; 0x1387
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d810      	bhi.n	800a316 <poll_tcp+0xb6>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	7f1b      	ldrb	r3, [r3, #28]
 800a2f8:	f023 0310 	bic.w	r3, r3, #16
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	2b00      	cmp	r3, #0
 800a308:	d005      	beq.n	800a316 <poll_tcp+0xb6>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	2200      	movs	r2, #0
 800a310:	2102      	movs	r1, #2
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	0801cc24 	.word	0x0801cc24
 800a324:	0801cd7c 	.word	0x0801cd7c
 800a328:	0801cc68 	.word	0x0801cc68

0800a32c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d106      	bne.n	800a352 <sent_tcp+0x26>
 800a344:	4b21      	ldr	r3, [pc, #132]	; (800a3cc <sent_tcp+0xa0>)
 800a346:	f240 1293 	movw	r2, #403	; 0x193
 800a34a:	4921      	ldr	r1, [pc, #132]	; (800a3d0 <sent_tcp+0xa4>)
 800a34c:	4821      	ldr	r0, [pc, #132]	; (800a3d4 <sent_tcp+0xa8>)
 800a34e:	f00e fc1f 	bl	8018b90 <iprintf>

  if (conn) {
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d034      	beq.n	800a3c2 <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	785b      	ldrb	r3, [r3, #1]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d104      	bne.n	800a36a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a360:	2101      	movs	r1, #1
 800a362:	6978      	ldr	r0, [r7, #20]
 800a364:	f000 fef4 	bl	800b150 <lwip_netconn_do_writemore>
 800a368:	e007      	b.n	800a37a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	785b      	ldrb	r3, [r3, #1]
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d103      	bne.n	800a37a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a372:	2101      	movs	r1, #1
 800a374:	6978      	ldr	r0, [r7, #20]
 800a376:	f000 fae3 	bl	800a940 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d01f      	beq.n	800a3c2 <sent_tcp+0x96>
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a38a:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 800a38e:	d918      	bls.n	800a3c2 <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a398:	f241 3287 	movw	r2, #4999	; 0x1387
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d810      	bhi.n	800a3c2 <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	7f1b      	ldrb	r3, [r3, #28]
 800a3a4:	f023 0310 	bic.w	r3, r3, #16
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d005      	beq.n	800a3c2 <sent_tcp+0x96>
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ba:	88fa      	ldrh	r2, [r7, #6]
 800a3bc:	2102      	movs	r1, #2
 800a3be:	6978      	ldr	r0, [r7, #20]
 800a3c0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3718      	adds	r7, #24
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	0801cc24 	.word	0x0801cc24
 800a3d0:	0801cd7c 	.word	0x0801cd7c
 800a3d4:	0801cc68 	.word	0x0801cc68

0800a3d8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d106      	bne.n	800a3fc <err_tcp+0x24>
 800a3ee:	4b5f      	ldr	r3, [pc, #380]	; (800a56c <err_tcp+0x194>)
 800a3f0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a3f4:	495e      	ldr	r1, [pc, #376]	; (800a570 <err_tcp+0x198>)
 800a3f6:	485f      	ldr	r0, [pc, #380]	; (800a574 <err_tcp+0x19c>)
 800a3f8:	f00e fbca 	bl	8018b90 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a3fc:	f00d fbe8 	bl	8017bd0 <sys_arch_protect>
 800a400:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	2200      	movs	r2, #0
 800a406:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	78fa      	ldrb	r2, [r7, #3]
 800a40c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	7f1b      	ldrb	r3, [r3, #28]
 800a412:	f043 0301 	orr.w	r3, r3, #1
 800a416:	b2da      	uxtb	r2, r3
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	785b      	ldrb	r3, [r3, #1]
 800a420:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	2200      	movs	r2, #0
 800a426:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a428:	69b8      	ldr	r0, [r7, #24]
 800a42a:	f00d fbdf 	bl	8017bec <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a432:	2b00      	cmp	r3, #0
 800a434:	d005      	beq.n	800a442 <err_tcp+0x6a>
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43a:	2200      	movs	r2, #0
 800a43c:	2104      	movs	r1, #4
 800a43e:	69f8      	ldr	r0, [r7, #28]
 800a440:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	2b00      	cmp	r3, #0
 800a448:	d005      	beq.n	800a456 <err_tcp+0x7e>
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44e:	2200      	movs	r2, #0
 800a450:	2100      	movs	r1, #0
 800a452:	69f8      	ldr	r0, [r7, #28]
 800a454:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d005      	beq.n	800a46a <err_tcp+0x92>
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	2200      	movs	r2, #0
 800a464:	2102      	movs	r1, #2
 800a466:	69f8      	ldr	r0, [r7, #28]
 800a468:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a46a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff fd82 	bl	8009f78 <lwip_netconn_err_to_msg>
 800a474:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	3310      	adds	r3, #16
 800a47a:	4618      	mov	r0, r3
 800a47c:	f00d fa8d 	bl	801799a <sys_mbox_valid>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	3310      	adds	r3, #16
 800a48a:	6939      	ldr	r1, [r7, #16]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f00d fa0f 	bl	80178b0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	3314      	adds	r3, #20
 800a496:	4618      	mov	r0, r3
 800a498:	f00d fa7f 	bl	801799a <sys_mbox_valid>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d005      	beq.n	800a4ae <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	3314      	adds	r3, #20
 800a4a6:	6939      	ldr	r1, [r7, #16]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f00d fa01 	bl	80178b0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d005      	beq.n	800a4c0 <err_tcp+0xe8>
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d002      	beq.n	800a4c0 <err_tcp+0xe8>
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
 800a4bc:	2b03      	cmp	r3, #3
 800a4be:	d143      	bne.n	800a548 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	7f1b      	ldrb	r3, [r3, #28]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	bf14      	ite	ne
 800a4cc:	2301      	movne	r3, #1
 800a4ce:	2300      	moveq	r3, #0
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	7f1b      	ldrb	r3, [r3, #28]
 800a4d8:	f023 0304 	bic.w	r3, r3, #4
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d13b      	bne.n	800a560 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d106      	bne.n	800a4fe <err_tcp+0x126>
 800a4f0:	4b1e      	ldr	r3, [pc, #120]	; (800a56c <err_tcp+0x194>)
 800a4f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a4f6:	4920      	ldr	r1, [pc, #128]	; (800a578 <err_tcp+0x1a0>)
 800a4f8:	481e      	ldr	r0, [pc, #120]	; (800a574 <err_tcp+0x19c>)
 800a4fa:	f00e fb49 	bl	8018b90 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
 800a500:	2b04      	cmp	r3, #4
 800a502:	d104      	bne.n	800a50e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	6a1b      	ldr	r3, [r3, #32]
 800a508:	2200      	movs	r2, #0
 800a50a:	711a      	strb	r2, [r3, #4]
 800a50c:	e003      	b.n	800a516 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	6a1b      	ldr	r3, [r3, #32]
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	330c      	adds	r3, #12
 800a51e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a520:	68b8      	ldr	r0, [r7, #8]
 800a522:	f00d facb 	bl	8017abc <sys_sem_valid>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d106      	bne.n	800a53a <err_tcp+0x162>
 800a52c:	4b0f      	ldr	r3, [pc, #60]	; (800a56c <err_tcp+0x194>)
 800a52e:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a532:	4912      	ldr	r1, [pc, #72]	; (800a57c <err_tcp+0x1a4>)
 800a534:	480f      	ldr	r0, [pc, #60]	; (800a574 <err_tcp+0x19c>)
 800a536:	f00e fb2b 	bl	8018b90 <iprintf>
      conn->current_msg = NULL;
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	2200      	movs	r2, #0
 800a53e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a540:	68b8      	ldr	r0, [r7, #8]
 800a542:	f00d faa1 	bl	8017a88 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a546:	e00b      	b.n	800a560 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	6a1b      	ldr	r3, [r3, #32]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d008      	beq.n	800a562 <err_tcp+0x18a>
 800a550:	4b06      	ldr	r3, [pc, #24]	; (800a56c <err_tcp+0x194>)
 800a552:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a556:	490a      	ldr	r1, [pc, #40]	; (800a580 <err_tcp+0x1a8>)
 800a558:	4806      	ldr	r0, [pc, #24]	; (800a574 <err_tcp+0x19c>)
 800a55a:	f00e fb19 	bl	8018b90 <iprintf>
  }
}
 800a55e:	e000      	b.n	800a562 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a560:	bf00      	nop
}
 800a562:	bf00      	nop
 800a564:	3720      	adds	r7, #32
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	0801cc24 	.word	0x0801cc24
 800a570:	0801cd7c 	.word	0x0801cd7c
 800a574:	0801cc68 	.word	0x0801cc68
 800a578:	0801cd8c 	.word	0x0801cd8c
 800a57c:	0801cda8 	.word	0x0801cda8
 800a580:	0801cdc4 	.word	0x0801cdc4

0800a584 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f005 f9c7 	bl	800f928 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a59a:	490a      	ldr	r1, [pc, #40]	; (800a5c4 <setup_tcp+0x40>)
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f005 f9d5 	bl	800f94c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a5a2:	4909      	ldr	r1, [pc, #36]	; (800a5c8 <setup_tcp+0x44>)
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f005 f9f3 	bl	800f990 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	4907      	ldr	r1, [pc, #28]	; (800a5cc <setup_tcp+0x48>)
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f005 fa4a 	bl	800fa48 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a5b4:	4906      	ldr	r1, [pc, #24]	; (800a5d0 <setup_tcp+0x4c>)
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f005 fa0c 	bl	800f9d4 <tcp_err>
}
 800a5bc:	bf00      	nop
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	0800a155 	.word	0x0800a155
 800a5c8:	0800a32d 	.word	0x0800a32d
 800a5cc:	0800a261 	.word	0x0800a261
 800a5d0:	0800a3d9 	.word	0x0800a3d9

0800a5d4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a5d4:	b590      	push	{r4, r7, lr}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d006      	beq.n	800a5f8 <pcb_new+0x24>
 800a5ea:	4b2b      	ldr	r3, [pc, #172]	; (800a698 <pcb_new+0xc4>)
 800a5ec:	f240 2265 	movw	r2, #613	; 0x265
 800a5f0:	492a      	ldr	r1, [pc, #168]	; (800a69c <pcb_new+0xc8>)
 800a5f2:	482b      	ldr	r0, [pc, #172]	; (800a6a0 <pcb_new+0xcc>)
 800a5f4:	f00e facc 	bl	8018b90 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a602:	2b10      	cmp	r3, #16
 800a604:	d022      	beq.n	800a64c <pcb_new+0x78>
 800a606:	2b20      	cmp	r3, #32
 800a608:	d133      	bne.n	800a672 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681c      	ldr	r4, [r3, #0]
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
 800a610:	4618      	mov	r0, r3
 800a612:	f00a fcec 	bl	8014fee <udp_new_ip_type>
 800a616:	4603      	mov	r3, r0
 800a618:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d02a      	beq.n	800a67a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	2b22      	cmp	r3, #34	; 0x22
 800a62c:	d104      	bne.n	800a638 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6858      	ldr	r0, [r3, #4]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	4917      	ldr	r1, [pc, #92]	; (800a6a4 <pcb_new+0xd0>)
 800a646:	f00a fc59 	bl	8014efc <udp_recv>
      }
      break;
 800a64a:	e016      	b.n	800a67a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681c      	ldr	r4, [r3, #0]
 800a650:	7bfb      	ldrb	r3, [r7, #15]
 800a652:	4618      	mov	r0, r3
 800a654:	f005 f95a 	bl	800f90c <tcp_new_ip_type>
 800a658:	4603      	mov	r3, r0
 800a65a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00b      	beq.n	800a67e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff ff8a 	bl	800a584 <setup_tcp>
      }
      break;
 800a670:	e005      	b.n	800a67e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	22fa      	movs	r2, #250	; 0xfa
 800a676:	711a      	strb	r2, [r3, #4]
      return;
 800a678:	e00a      	b.n	800a690 <pcb_new+0xbc>
      break;
 800a67a:	bf00      	nop
 800a67c:	e000      	b.n	800a680 <pcb_new+0xac>
      break;
 800a67e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d102      	bne.n	800a690 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	22ff      	movs	r2, #255	; 0xff
 800a68e:	711a      	strb	r2, [r3, #4]
  }
}
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	bd90      	pop	{r4, r7, pc}
 800a696:	bf00      	nop
 800a698:	0801cc24 	.word	0x0801cc24
 800a69c:	0801ce08 	.word	0x0801ce08
 800a6a0:	0801cc68 	.word	0x0801cc68
 800a6a4:	0800a059 	.word	0x0800a059

0800a6a8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d102      	bne.n	800a6ca <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f7ff ff85 	bl	800a5d4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
	...

0800a6d4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	4603      	mov	r3, r0
 800a6dc:	6039      	str	r1, [r7, #0]
 800a6de:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a6e4:	2007      	movs	r0, #7
 800a6e6:	f002 fbc1 	bl	800ce6c <memp_malloc>
 800a6ea:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <netconn_alloc+0x22>
    return NULL;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e052      	b.n	800a79c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	79fa      	ldrb	r2, [r7, #7]
 800a700:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a708:	79fb      	ldrb	r3, [r7, #7]
 800a70a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a70e:	2b10      	cmp	r3, #16
 800a710:	d004      	beq.n	800a71c <netconn_alloc+0x48>
 800a712:	2b20      	cmp	r3, #32
 800a714:	d105      	bne.n	800a722 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a716:	2306      	movs	r3, #6
 800a718:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a71a:	e00a      	b.n	800a732 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a71c:	2306      	movs	r3, #6
 800a71e:	617b      	str	r3, [r7, #20]
      break;
 800a720:	e007      	b.n	800a732 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a722:	4b20      	ldr	r3, [pc, #128]	; (800a7a4 <netconn_alloc+0xd0>)
 800a724:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a728:	491f      	ldr	r1, [pc, #124]	; (800a7a8 <netconn_alloc+0xd4>)
 800a72a:	4820      	ldr	r0, [pc, #128]	; (800a7ac <netconn_alloc+0xd8>)
 800a72c:	f00e fa30 	bl	8018b90 <iprintf>
      goto free_and_return;
 800a730:	e02f      	b.n	800a792 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	3310      	adds	r3, #16
 800a736:	6979      	ldr	r1, [r7, #20]
 800a738:	4618      	mov	r0, r3
 800a73a:	f00d f885 	bl	8017848 <sys_mbox_new>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d125      	bne.n	800a790 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	330c      	adds	r3, #12
 800a748:	2100      	movs	r1, #0
 800a74a:	4618      	mov	r0, r3
 800a74c:	f00d f943 	bl	80179d6 <sys_sem_new>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d005      	beq.n	800a762 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3310      	adds	r3, #16
 800a75a:	4618      	mov	r0, r3
 800a75c:	f00d f896 	bl	801788c <sys_mbox_free>
    goto free_and_return;
 800a760:	e017      	b.n	800a792 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3314      	adds	r3, #20
 800a766:	4618      	mov	r0, r3
 800a768:	f00d f928 	bl	80179bc <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f04f 32ff 	mov.w	r2, #4294967295
 800a778:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	7cfa      	ldrb	r2, [r7, #19]
 800a78a:	771a      	strb	r2, [r3, #28]
  return conn;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	e005      	b.n	800a79c <netconn_alloc+0xc8>
    goto free_and_return;
 800a790:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a792:	68f9      	ldr	r1, [r7, #12]
 800a794:	2007      	movs	r0, #7
 800a796:	f002 fbdf 	bl	800cf58 <memp_free>
  return NULL;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	0801cc24 	.word	0x0801cc24
 800a7a8:	0801ce28 	.word	0x0801ce28
 800a7ac:	0801cc68 	.word	0x0801cc68

0800a7b0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d006      	beq.n	800a7ce <netconn_free+0x1e>
 800a7c0:	4b1b      	ldr	r3, [pc, #108]	; (800a830 <netconn_free+0x80>)
 800a7c2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a7c6:	491b      	ldr	r1, [pc, #108]	; (800a834 <netconn_free+0x84>)
 800a7c8:	481b      	ldr	r0, [pc, #108]	; (800a838 <netconn_free+0x88>)
 800a7ca:	f00e f9e1 	bl	8018b90 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	3310      	adds	r3, #16
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f00d f8e1 	bl	801799a <sys_mbox_valid>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d006      	beq.n	800a7ec <netconn_free+0x3c>
 800a7de:	4b14      	ldr	r3, [pc, #80]	; (800a830 <netconn_free+0x80>)
 800a7e0:	f240 3223 	movw	r2, #803	; 0x323
 800a7e4:	4915      	ldr	r1, [pc, #84]	; (800a83c <netconn_free+0x8c>)
 800a7e6:	4814      	ldr	r0, [pc, #80]	; (800a838 <netconn_free+0x88>)
 800a7e8:	f00e f9d2 	bl	8018b90 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3314      	adds	r3, #20
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f00d f8d2 	bl	801799a <sys_mbox_valid>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d006      	beq.n	800a80a <netconn_free+0x5a>
 800a7fc:	4b0c      	ldr	r3, [pc, #48]	; (800a830 <netconn_free+0x80>)
 800a7fe:	f240 3226 	movw	r2, #806	; 0x326
 800a802:	490f      	ldr	r1, [pc, #60]	; (800a840 <netconn_free+0x90>)
 800a804:	480c      	ldr	r0, [pc, #48]	; (800a838 <netconn_free+0x88>)
 800a806:	f00e f9c3 	bl	8018b90 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	330c      	adds	r3, #12
 800a80e:	4618      	mov	r0, r3
 800a810:	f00d f947 	bl	8017aa2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	330c      	adds	r3, #12
 800a818:	4618      	mov	r0, r3
 800a81a:	f00d f960 	bl	8017ade <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	2007      	movs	r0, #7
 800a822:	f002 fb99 	bl	800cf58 <memp_free>
}
 800a826:	bf00      	nop
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	0801cc24 	.word	0x0801cc24
 800a834:	0801ce50 	.word	0x0801ce50
 800a838:	0801cc68 	.word	0x0801cc68
 800a83c:	0801ce80 	.word	0x0801ce80
 800a840:	0801cebc 	.word	0x0801cebc

0800a844 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	3310      	adds	r3, #16
 800a850:	4618      	mov	r0, r3
 800a852:	f00d f8a2 	bl	801799a <sys_mbox_valid>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d02f      	beq.n	800a8bc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a85c:	e018      	b.n	800a890 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a866:	2b10      	cmp	r3, #16
 800a868:	d10e      	bne.n	800a888 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	f107 020f 	add.w	r2, r7, #15
 800a870:	4611      	mov	r1, r2
 800a872:	4618      	mov	r0, r3
 800a874:	f7ff fbb6 	bl	8009fe4 <lwip_netconn_is_err_msg>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d108      	bne.n	800a890 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	4618      	mov	r0, r3
 800a882:	f003 fa0d 	bl	800dca0 <pbuf_free>
 800a886:	e003      	b.n	800a890 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 fed8 	bl	800b640 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3310      	adds	r3, #16
 800a894:	f107 0210 	add.w	r2, r7, #16
 800a898:	4611      	mov	r1, r2
 800a89a:	4618      	mov	r0, r3
 800a89c:	f00d f861 	bl	8017962 <sys_arch_mbox_tryfetch>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a6:	d1da      	bne.n	800a85e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3310      	adds	r3, #16
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f00c ffed 	bl	801788c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	3310      	adds	r3, #16
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f00d f880 	bl	80179bc <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3314      	adds	r3, #20
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f00d f86a 	bl	801799a <sys_mbox_valid>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d034      	beq.n	800a936 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a8cc:	e01d      	b.n	800a90a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f107 020e 	add.w	r2, r7, #14
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7ff fb84 	bl	8009fe4 <lwip_netconn_is_err_msg>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d113      	bne.n	800a90a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a8e6:	6978      	ldr	r0, [r7, #20]
 800a8e8:	f7ff ffac 	bl	800a844 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d007      	beq.n	800a904 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f003 ffd1 	bl	800e8a0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2200      	movs	r2, #0
 800a902:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a904:	6978      	ldr	r0, [r7, #20]
 800a906:	f7ff ff53 	bl	800a7b0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	3314      	adds	r3, #20
 800a90e:	f107 0210 	add.w	r2, r7, #16
 800a912:	4611      	mov	r1, r2
 800a914:	4618      	mov	r0, r3
 800a916:	f00d f824 	bl	8017962 <sys_arch_mbox_tryfetch>
 800a91a:	4603      	mov	r3, r0
 800a91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a920:	d1d5      	bne.n	800a8ce <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3314      	adds	r3, #20
 800a926:	4618      	mov	r0, r3
 800a928:	f00c ffb0 	bl	801788c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3314      	adds	r3, #20
 800a930:	4618      	mov	r0, r3
 800a932:	f00d f843 	bl	80179bc <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a936:	bf00      	nop
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	460b      	mov	r3, r1
 800a94a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a94c:	2300      	movs	r3, #0
 800a94e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d106      	bne.n	800a964 <lwip_netconn_do_close_internal+0x24>
 800a956:	4b87      	ldr	r3, [pc, #540]	; (800ab74 <lwip_netconn_do_close_internal+0x234>)
 800a958:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a95c:	4986      	ldr	r1, [pc, #536]	; (800ab78 <lwip_netconn_do_close_internal+0x238>)
 800a95e:	4887      	ldr	r0, [pc, #540]	; (800ab7c <lwip_netconn_do_close_internal+0x23c>)
 800a960:	f00e f916 	bl	8018b90 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a96c:	2b10      	cmp	r3, #16
 800a96e:	d006      	beq.n	800a97e <lwip_netconn_do_close_internal+0x3e>
 800a970:	4b80      	ldr	r3, [pc, #512]	; (800ab74 <lwip_netconn_do_close_internal+0x234>)
 800a972:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a976:	4982      	ldr	r1, [pc, #520]	; (800ab80 <lwip_netconn_do_close_internal+0x240>)
 800a978:	4880      	ldr	r0, [pc, #512]	; (800ab7c <lwip_netconn_do_close_internal+0x23c>)
 800a97a:	f00e f909 	bl	8018b90 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	785b      	ldrb	r3, [r3, #1]
 800a982:	2b04      	cmp	r3, #4
 800a984:	d006      	beq.n	800a994 <lwip_netconn_do_close_internal+0x54>
 800a986:	4b7b      	ldr	r3, [pc, #492]	; (800ab74 <lwip_netconn_do_close_internal+0x234>)
 800a988:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a98c:	497d      	ldr	r1, [pc, #500]	; (800ab84 <lwip_netconn_do_close_internal+0x244>)
 800a98e:	487b      	ldr	r0, [pc, #492]	; (800ab7c <lwip_netconn_do_close_internal+0x23c>)
 800a990:	f00e f8fe 	bl	8018b90 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d106      	bne.n	800a9aa <lwip_netconn_do_close_internal+0x6a>
 800a99c:	4b75      	ldr	r3, [pc, #468]	; (800ab74 <lwip_netconn_do_close_internal+0x234>)
 800a99e:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a9a2:	4979      	ldr	r1, [pc, #484]	; (800ab88 <lwip_netconn_do_close_internal+0x248>)
 800a9a4:	4875      	ldr	r0, [pc, #468]	; (800ab7c <lwip_netconn_do_close_internal+0x23c>)
 800a9a6:	f00e f8f3 	bl	8018b90 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d106      	bne.n	800a9c0 <lwip_netconn_do_close_internal+0x80>
 800a9b2:	4b70      	ldr	r3, [pc, #448]	; (800ab74 <lwip_netconn_do_close_internal+0x234>)
 800a9b4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a9b8:	4974      	ldr	r1, [pc, #464]	; (800ab8c <lwip_netconn_do_close_internal+0x24c>)
 800a9ba:	4870      	ldr	r0, [pc, #448]	; (800ab7c <lwip_netconn_do_close_internal+0x23c>)
 800a9bc:	f00e f8e8 	bl	8018b90 <iprintf>

  tpcb = conn->pcb.tcp;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	7a1b      	ldrb	r3, [r3, #8]
 800a9cc:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	f003 0302 	and.w	r3, r3, #2
 800a9dc:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	2b03      	cmp	r3, #3
 800a9e2:	d102      	bne.n	800a9ea <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	75bb      	strb	r3, [r7, #22]
 800a9e8:	e01f      	b.n	800aa2a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00e      	beq.n	800aa0e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a9f4:	2b05      	cmp	r3, #5
 800a9f6:	d007      	beq.n	800aa08 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a9fc:	2b06      	cmp	r3, #6
 800a9fe:	d003      	beq.n	800aa08 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800aa04:	2b08      	cmp	r3, #8
 800aa06:	d102      	bne.n	800aa0e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	75bb      	strb	r3, [r7, #22]
 800aa0c:	e00d      	b.n	800aa2a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800aa0e:	7b7b      	ldrb	r3, [r7, #13]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d008      	beq.n	800aa26 <lwip_netconn_do_close_internal+0xe6>
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	8b5b      	ldrh	r3, [r3, #26]
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800aa20:	2301      	movs	r3, #1
 800aa22:	75bb      	strb	r3, [r7, #22]
 800aa24:	e001      	b.n	800aa2a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800aa2a:	7dbb      	ldrb	r3, [r7, #22]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800aa30:	2100      	movs	r1, #0
 800aa32:	6938      	ldr	r0, [r7, #16]
 800aa34:	f004 ff78 	bl	800f928 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	7d1b      	ldrb	r3, [r3, #20]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d104      	bne.n	800aa4a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800aa40:	2100      	movs	r1, #0
 800aa42:	6938      	ldr	r0, [r7, #16]
 800aa44:	f004 ffe8 	bl	800fa18 <tcp_accept>
 800aa48:	e01d      	b.n	800aa86 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d007      	beq.n	800aa60 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800aa50:	2100      	movs	r1, #0
 800aa52:	6938      	ldr	r0, [r7, #16]
 800aa54:	f004 ff7a 	bl	800f94c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800aa58:	2100      	movs	r1, #0
 800aa5a:	6938      	ldr	r0, [r7, #16]
 800aa5c:	f004 ffdc 	bl	800fa18 <tcp_accept>
    }
    if (shut_tx) {
 800aa60:	7b7b      	ldrb	r3, [r7, #13]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d003      	beq.n	800aa6e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800aa66:	2100      	movs	r1, #0
 800aa68:	6938      	ldr	r0, [r7, #16]
 800aa6a:	f004 ff91 	bl	800f990 <tcp_sent>
    }
    if (shut_close) {
 800aa6e:	7dbb      	ldrb	r3, [r7, #22]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d008      	beq.n	800aa86 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800aa74:	2200      	movs	r2, #0
 800aa76:	2100      	movs	r1, #0
 800aa78:	6938      	ldr	r0, [r7, #16]
 800aa7a:	f004 ffe5 	bl	800fa48 <tcp_poll>
      tcp_err(tpcb, NULL);
 800aa7e:	2100      	movs	r1, #0
 800aa80:	6938      	ldr	r0, [r7, #16]
 800aa82:	f004 ffa7 	bl	800f9d4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800aa86:	7dbb      	ldrb	r3, [r7, #22]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d005      	beq.n	800aa98 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800aa8c:	6938      	ldr	r0, [r7, #16]
 800aa8e:	f003 fdc1 	bl	800e614 <tcp_close>
 800aa92:	4603      	mov	r3, r0
 800aa94:	75fb      	strb	r3, [r7, #23]
 800aa96:	e007      	b.n	800aaa8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	7b7a      	ldrb	r2, [r7, #13]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6938      	ldr	r0, [r7, #16]
 800aaa0:	f003 fde4 	bl	800e66c <tcp_shutdown>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800aaa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d102      	bne.n	800aab6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800aab0:	2301      	movs	r3, #1
 800aab2:	757b      	strb	r3, [r7, #21]
 800aab4:	e016      	b.n	800aae4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800aab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabe:	d10f      	bne.n	800aae0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	7a5b      	ldrb	r3, [r3, #9]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10c      	bne.n	800aae4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800aaca:	2301      	movs	r3, #1
 800aacc:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800aace:	7dbb      	ldrb	r3, [r7, #22]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d007      	beq.n	800aae4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800aad4:	6938      	ldr	r0, [r7, #16]
 800aad6:	f003 fee3 	bl	800e8a0 <tcp_abort>
          err = ERR_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	75fb      	strb	r3, [r7, #23]
 800aade:	e001      	b.n	800aae4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800aae0:	2301      	movs	r3, #1
 800aae2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800aae4:	7d7b      	ldrb	r3, [r7, #21]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d052      	beq.n	800ab90 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	330c      	adds	r3, #12
 800aaf2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	7dfa      	ldrb	r2, [r7, #23]
 800aafa:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800ab08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d129      	bne.n	800ab64 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800ab10:	7dbb      	ldrb	r3, [r7, #22]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00c      	beq.n	800ab30 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d005      	beq.n	800ab30 <lwip_netconn_do_close_internal+0x1f0>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2200      	movs	r2, #0
 800ab2a:	2104      	movs	r1, #4
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	4798      	blx	r3
      }
      if (shut_rx) {
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d009      	beq.n	800ab4a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d005      	beq.n	800ab4a <lwip_netconn_do_close_internal+0x20a>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab42:	2200      	movs	r2, #0
 800ab44:	2100      	movs	r1, #0
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	4798      	blx	r3
      }
      if (shut_tx) {
 800ab4a:	7b7b      	ldrb	r3, [r7, #13]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d009      	beq.n	800ab64 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d005      	beq.n	800ab64 <lwip_netconn_do_close_internal+0x224>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	2102      	movs	r1, #2
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ab64:	78fb      	ldrb	r3, [r7, #3]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d002      	beq.n	800ab70 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800ab6a:	68b8      	ldr	r0, [r7, #8]
 800ab6c:	f00c ff8c 	bl	8017a88 <sys_sem_signal>
    }
    return ERR_OK;
 800ab70:	2300      	movs	r3, #0
 800ab72:	e03c      	b.n	800abee <lwip_netconn_do_close_internal+0x2ae>
 800ab74:	0801cc24 	.word	0x0801cc24
 800ab78:	0801cef8 	.word	0x0801cef8
 800ab7c:	0801cc68 	.word	0x0801cc68
 800ab80:	0801cf08 	.word	0x0801cf08
 800ab84:	0801cf28 	.word	0x0801cf28
 800ab88:	0801cf4c 	.word	0x0801cf4c
 800ab8c:	0801cd8c 	.word	0x0801cd8c
  }
  if (!close_finished) {
 800ab90:	7d7b      	ldrb	r3, [r7, #21]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d11e      	bne.n	800abd4 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	7d1b      	ldrb	r3, [r3, #20]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d106      	bne.n	800abac <lwip_netconn_do_close_internal+0x26c>
 800ab9e:	4b16      	ldr	r3, [pc, #88]	; (800abf8 <lwip_netconn_do_close_internal+0x2b8>)
 800aba0:	f240 4241 	movw	r2, #1089	; 0x441
 800aba4:	4915      	ldr	r1, [pc, #84]	; (800abfc <lwip_netconn_do_close_internal+0x2bc>)
 800aba6:	4816      	ldr	r0, [pc, #88]	; (800ac00 <lwip_netconn_do_close_internal+0x2c0>)
 800aba8:	f00d fff2 	bl	8018b90 <iprintf>
    if (shut_tx) {
 800abac:	7b7b      	ldrb	r3, [r7, #13]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800abb2:	4914      	ldr	r1, [pc, #80]	; (800ac04 <lwip_netconn_do_close_internal+0x2c4>)
 800abb4:	6938      	ldr	r0, [r7, #16]
 800abb6:	f004 feeb 	bl	800f990 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800abba:	2201      	movs	r2, #1
 800abbc:	4912      	ldr	r1, [pc, #72]	; (800ac08 <lwip_netconn_do_close_internal+0x2c8>)
 800abbe:	6938      	ldr	r0, [r7, #16]
 800abc0:	f004 ff42 	bl	800fa48 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800abc4:	4911      	ldr	r1, [pc, #68]	; (800ac0c <lwip_netconn_do_close_internal+0x2cc>)
 800abc6:	6938      	ldr	r0, [r7, #16]
 800abc8:	f004 ff04 	bl	800f9d4 <tcp_err>
    tcp_arg(tpcb, conn);
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	6938      	ldr	r0, [r7, #16]
 800abd0:	f004 feaa 	bl	800f928 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800abd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d106      	bne.n	800abea <lwip_netconn_do_close_internal+0x2aa>
 800abdc:	4b06      	ldr	r3, [pc, #24]	; (800abf8 <lwip_netconn_do_close_internal+0x2b8>)
 800abde:	f240 424d 	movw	r2, #1101	; 0x44d
 800abe2:	490b      	ldr	r1, [pc, #44]	; (800ac10 <lwip_netconn_do_close_internal+0x2d0>)
 800abe4:	4806      	ldr	r0, [pc, #24]	; (800ac00 <lwip_netconn_do_close_internal+0x2c0>)
 800abe6:	f00d ffd3 	bl	8018b90 <iprintf>
  return err;
 800abea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3718      	adds	r7, #24
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	0801cc24 	.word	0x0801cc24
 800abfc:	0801cf60 	.word	0x0801cf60
 800ac00:	0801cc68 	.word	0x0801cc68
 800ac04:	0800a32d 	.word	0x0800a32d
 800ac08:	0800a261 	.word	0x0800a261
 800ac0c:	0800a3d9 	.word	0x0800a3d9
 800ac10:	0801cf84 	.word	0x0801cf84

0800ac14 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	785b      	ldrb	r3, [r3, #1]
 800ac26:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ac28:	7afb      	ldrb	r3, [r7, #11]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00d      	beq.n	800ac4a <lwip_netconn_do_delconn+0x36>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac38:	2b10      	cmp	r3, #16
 800ac3a:	d006      	beq.n	800ac4a <lwip_netconn_do_delconn+0x36>
 800ac3c:	4b60      	ldr	r3, [pc, #384]	; (800adc0 <lwip_netconn_do_delconn+0x1ac>)
 800ac3e:	f240 425e 	movw	r2, #1118	; 0x45e
 800ac42:	4960      	ldr	r1, [pc, #384]	; (800adc4 <lwip_netconn_do_delconn+0x1b0>)
 800ac44:	4860      	ldr	r0, [pc, #384]	; (800adc8 <lwip_netconn_do_delconn+0x1b4>)
 800ac46:	f00d ffa3 	bl	8018b90 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ac4a:	7afb      	ldrb	r3, [r7, #11]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d005      	beq.n	800ac5c <lwip_netconn_do_delconn+0x48>
 800ac50:	7afb      	ldrb	r3, [r7, #11]
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d002      	beq.n	800ac5c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800ac56:	7afb      	ldrb	r3, [r7, #11]
 800ac58:	2b03      	cmp	r3, #3
 800ac5a:	d109      	bne.n	800ac70 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800ac5c:	7afb      	ldrb	r3, [r7, #11]
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	d10a      	bne.n	800ac78 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	7f1b      	ldrb	r3, [r3, #28]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d103      	bne.n	800ac78 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	22fb      	movs	r2, #251	; 0xfb
 800ac74:	711a      	strb	r2, [r3, #4]
 800ac76:	e097      	b.n	800ada8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800ac78:	7afb      	ldrb	r3, [r7, #11]
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d10d      	bne.n	800ac9a <lwip_netconn_do_delconn+0x86>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	7f1b      	ldrb	r3, [r3, #28]
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d106      	bne.n	800ac9a <lwip_netconn_do_delconn+0x86>
 800ac8c:	4b4c      	ldr	r3, [pc, #304]	; (800adc0 <lwip_netconn_do_delconn+0x1ac>)
 800ac8e:	f240 427a 	movw	r2, #1146	; 0x47a
 800ac92:	494e      	ldr	r1, [pc, #312]	; (800adcc <lwip_netconn_do_delconn+0x1b8>)
 800ac94:	484c      	ldr	r0, [pc, #304]	; (800adc8 <lwip_netconn_do_delconn+0x1b4>)
 800ac96:	f00d ff7b 	bl	8018b90 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7ff fdcd 	bl	800a844 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d05f      	beq.n	800ad74 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acbe:	2b10      	cmp	r3, #16
 800acc0:	d00d      	beq.n	800acde <lwip_netconn_do_delconn+0xca>
 800acc2:	2b20      	cmp	r3, #32
 800acc4:	d151      	bne.n	800ad6a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f00a f930 	bl	8014f3c <udp_remove>
          break;
 800acdc:	e046      	b.n	800ad6c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6a1b      	ldr	r3, [r3, #32]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d006      	beq.n	800acf6 <lwip_netconn_do_delconn+0xe2>
 800ace8:	4b35      	ldr	r3, [pc, #212]	; (800adc0 <lwip_netconn_do_delconn+0x1ac>)
 800acea:	f240 4294 	movw	r2, #1172	; 0x494
 800acee:	4938      	ldr	r1, [pc, #224]	; (800add0 <lwip_netconn_do_delconn+0x1bc>)
 800acf0:	4835      	ldr	r0, [pc, #212]	; (800adc8 <lwip_netconn_do_delconn+0x1b4>)
 800acf2:	f00d ff4d 	bl	8018b90 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2204      	movs	r2, #4
 800acfc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2203      	movs	r2, #3
 800ad02:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2100      	movs	r1, #0
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7ff fe14 	bl	800a940 <lwip_netconn_do_close_internal>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d04b      	beq.n	800adb6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	785b      	ldrb	r3, [r3, #1]
 800ad24:	2b04      	cmp	r3, #4
 800ad26:	d006      	beq.n	800ad36 <lwip_netconn_do_delconn+0x122>
 800ad28:	4b25      	ldr	r3, [pc, #148]	; (800adc0 <lwip_netconn_do_delconn+0x1ac>)
 800ad2a:	f240 429a 	movw	r2, #1178	; 0x49a
 800ad2e:	4929      	ldr	r1, [pc, #164]	; (800add4 <lwip_netconn_do_delconn+0x1c0>)
 800ad30:	4825      	ldr	r0, [pc, #148]	; (800adc8 <lwip_netconn_do_delconn+0x1b4>)
 800ad32:	f00d ff2d 	bl	8018b90 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ad36:	4828      	ldr	r0, [pc, #160]	; (800add8 <lwip_netconn_do_delconn+0x1c4>)
 800ad38:	f00c ff17 	bl	8017b6a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	330c      	adds	r3, #12
 800ad42:	2100      	movs	r1, #0
 800ad44:	4618      	mov	r0, r3
 800ad46:	f00c fe6e 	bl	8017a26 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ad4a:	4823      	ldr	r0, [pc, #140]	; (800add8 <lwip_netconn_do_delconn+0x1c4>)
 800ad4c:	f00c fefe 	bl	8017b4c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	785b      	ldrb	r3, [r3, #1]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d02d      	beq.n	800adb6 <lwip_netconn_do_delconn+0x1a2>
 800ad5a:	4b19      	ldr	r3, [pc, #100]	; (800adc0 <lwip_netconn_do_delconn+0x1ac>)
 800ad5c:	f240 429e 	movw	r2, #1182	; 0x49e
 800ad60:	491c      	ldr	r1, [pc, #112]	; (800add4 <lwip_netconn_do_delconn+0x1c0>)
 800ad62:	4819      	ldr	r0, [pc, #100]	; (800adc8 <lwip_netconn_do_delconn+0x1b4>)
 800ad64:	f00d ff14 	bl	8018b90 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ad68:	e025      	b.n	800adb6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800ad6a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2200      	movs	r2, #0
 800ad72:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d007      	beq.n	800ad8e <lwip_netconn_do_delconn+0x17a>
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	6810      	ldr	r0, [r2, #0]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d007      	beq.n	800ada8 <lwip_netconn_do_delconn+0x194>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	6810      	ldr	r0, [r2, #0]
 800ada2:	2200      	movs	r2, #0
 800ada4:	2102      	movs	r1, #2
 800ada6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	330c      	adds	r3, #12
 800adae:	4618      	mov	r0, r3
 800adb0:	f00c fe84 	bl	8017abc <sys_sem_valid>
 800adb4:	e000      	b.n	800adb8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800adb6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	0801cc24 	.word	0x0801cc24
 800adc4:	0801cf94 	.word	0x0801cf94
 800adc8:	0801cc68 	.word	0x0801cc68
 800adcc:	0801cfa8 	.word	0x0801cfa8
 800add0:	0801cfc8 	.word	0x0801cfc8
 800add4:	0801cfe4 	.word	0x0801cfe4
 800add8:	200094a4 	.word	0x200094a4

0800addc <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b088      	sub	sp, #32
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	4613      	mov	r3, r2
 800ade8:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800adea:	2300      	movs	r3, #0
 800adec:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d102      	bne.n	800adfe <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800adf8:	f06f 0305 	mvn.w	r3, #5
 800adfc:	e070      	b.n	800aee0 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	785b      	ldrb	r3, [r3, #1]
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d006      	beq.n	800ae14 <lwip_netconn_do_connected+0x38>
 800ae06:	4b38      	ldr	r3, [pc, #224]	; (800aee8 <lwip_netconn_do_connected+0x10c>)
 800ae08:	f240 5223 	movw	r2, #1315	; 0x523
 800ae0c:	4937      	ldr	r1, [pc, #220]	; (800aeec <lwip_netconn_do_connected+0x110>)
 800ae0e:	4838      	ldr	r0, [pc, #224]	; (800aef0 <lwip_netconn_do_connected+0x114>)
 800ae10:	f00d febe 	bl	8018b90 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10c      	bne.n	800ae36 <lwip_netconn_do_connected+0x5a>
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	7f1b      	ldrb	r3, [r3, #28]
 800ae20:	f003 0304 	and.w	r3, r3, #4
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d106      	bne.n	800ae36 <lwip_netconn_do_connected+0x5a>
 800ae28:	4b2f      	ldr	r3, [pc, #188]	; (800aee8 <lwip_netconn_do_connected+0x10c>)
 800ae2a:	f240 5224 	movw	r2, #1316	; 0x524
 800ae2e:	4931      	ldr	r1, [pc, #196]	; (800aef4 <lwip_netconn_do_connected+0x118>)
 800ae30:	482f      	ldr	r0, [pc, #188]	; (800aef0 <lwip_netconn_do_connected+0x114>)
 800ae32:	f00d fead 	bl	8018b90 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d008      	beq.n	800ae50 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	79fa      	ldrb	r2, [r7, #7]
 800ae44:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	330c      	adds	r3, #12
 800ae4e:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae58:	2b10      	cmp	r3, #16
 800ae5a:	d106      	bne.n	800ae6a <lwip_netconn_do_connected+0x8e>
 800ae5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d102      	bne.n	800ae6a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800ae64:	69b8      	ldr	r0, [r7, #24]
 800ae66:	f7ff fb8d 	bl	800a584 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	7f1b      	ldrb	r3, [r3, #28]
 800ae6e:	f003 0304 	and.w	r3, r3, #4
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	bf0c      	ite	eq
 800ae76:	2301      	moveq	r3, #1
 800ae78:	2300      	movne	r3, #0
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	7f1b      	ldrb	r3, [r3, #28]
 800ae82:	f023 0304 	bic.w	r3, r3, #4
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <lwip_netconn_do_connected+0xbc>
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10c      	bne.n	800aeb2 <lwip_netconn_do_connected+0xd6>
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d102      	bne.n	800aea4 <lwip_netconn_do_connected+0xc8>
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d006      	beq.n	800aeb2 <lwip_netconn_do_connected+0xd6>
 800aea4:	4b10      	ldr	r3, [pc, #64]	; (800aee8 <lwip_netconn_do_connected+0x10c>)
 800aea6:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800aeaa:	4913      	ldr	r1, [pc, #76]	; (800aef8 <lwip_netconn_do_connected+0x11c>)
 800aeac:	4810      	ldr	r0, [pc, #64]	; (800aef0 <lwip_netconn_do_connected+0x114>)
 800aeae:	f00d fe6f 	bl	8018b90 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	2200      	movs	r2, #0
 800aebc:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d005      	beq.n	800aed2 <lwip_netconn_do_connected+0xf6>
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeca:	2200      	movs	r2, #0
 800aecc:	2102      	movs	r1, #2
 800aece:	69b8      	ldr	r0, [r7, #24]
 800aed0:	4798      	blx	r3

  if (was_blocking) {
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800aed8:	69f8      	ldr	r0, [r7, #28]
 800aeda:	f00c fdd5 	bl	8017a88 <sys_sem_signal>
  }
  return ERR_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	0801cc24 	.word	0x0801cc24
 800aeec:	0801cfec 	.word	0x0801cfec
 800aef0:	0801cc68 	.word	0x0801cc68
 800aef4:	0801d00c 	.word	0x0801d00c
 800aef8:	0801d04c 	.word	0x0801d04c

0800aefc <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d102      	bne.n	800af18 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800af12:	23f1      	movs	r3, #241	; 0xf1
 800af14:	75fb      	strb	r3, [r7, #23]
 800af16:	e09b      	b.n	800b050 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af22:	2b10      	cmp	r3, #16
 800af24:	d00f      	beq.n	800af46 <lwip_netconn_do_connect+0x4a>
 800af26:	2b20      	cmp	r3, #32
 800af28:	f040 8087 	bne.w	800b03a <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	6858      	ldr	r0, [r3, #4]
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	6899      	ldr	r1, [r3, #8]
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	899b      	ldrh	r3, [r3, #12]
 800af3a:	461a      	mov	r2, r3
 800af3c:	f009 ff48 	bl	8014dd0 <udp_connect>
 800af40:	4603      	mov	r3, r0
 800af42:	75fb      	strb	r3, [r7, #23]
        break;
 800af44:	e084      	b.n	800b050 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	785b      	ldrb	r3, [r3, #1]
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d102      	bne.n	800af56 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800af50:	23f7      	movs	r3, #247	; 0xf7
 800af52:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800af54:	e07b      	b.n	800b04e <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	785b      	ldrb	r3, [r3, #1]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800af60:	23f6      	movs	r3, #246	; 0xf6
 800af62:	75fb      	strb	r3, [r7, #23]
        break;
 800af64:	e073      	b.n	800b04e <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff fb0a 	bl	800a584 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	6858      	ldr	r0, [r3, #4]
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	6899      	ldr	r1, [r3, #8]
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	899a      	ldrh	r2, [r3, #12]
 800af7e:	4b38      	ldr	r3, [pc, #224]	; (800b060 <lwip_netconn_do_connect+0x164>)
 800af80:	f003 fd8a 	bl	800ea98 <tcp_connect>
 800af84:	4603      	mov	r3, r0
 800af86:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800af88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d15e      	bne.n	800b04e <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	7f1b      	ldrb	r3, [r3, #28]
 800af96:	f003 0302 	and.w	r3, r3, #2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	bf14      	ite	ne
 800af9e:	2301      	movne	r3, #1
 800afa0:	2300      	moveq	r3, #0
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2203      	movs	r2, #3
 800afac:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800afae:	7bfb      	ldrb	r3, [r7, #15]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d009      	beq.n	800afc8 <lwip_netconn_do_connect+0xcc>
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	7f1a      	ldrb	r2, [r3, #28]
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f042 0204 	orr.w	r2, r2, #4
 800afc2:	b2d2      	uxtb	r2, r2
 800afc4:	771a      	strb	r2, [r3, #28]
 800afc6:	e008      	b.n	800afda <lwip_netconn_do_connect+0xde>
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	7f1a      	ldrb	r2, [r3, #28]
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f022 0204 	bic.w	r2, r2, #4
 800afd6:	b2d2      	uxtb	r2, r2
 800afd8:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800afe0:	23fb      	movs	r3, #251	; 0xfb
 800afe2:	75fb      	strb	r3, [r7, #23]
        break;
 800afe4:	e033      	b.n	800b04e <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	785b      	ldrb	r3, [r3, #1]
 800aff4:	2b03      	cmp	r3, #3
 800aff6:	d006      	beq.n	800b006 <lwip_netconn_do_connect+0x10a>
 800aff8:	4b1a      	ldr	r3, [pc, #104]	; (800b064 <lwip_netconn_do_connect+0x168>)
 800affa:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800affe:	491a      	ldr	r1, [pc, #104]	; (800b068 <lwip_netconn_do_connect+0x16c>)
 800b000:	481a      	ldr	r0, [pc, #104]	; (800b06c <lwip_netconn_do_connect+0x170>)
 800b002:	f00d fdc5 	bl	8018b90 <iprintf>
              UNLOCK_TCPIP_CORE();
 800b006:	481a      	ldr	r0, [pc, #104]	; (800b070 <lwip_netconn_do_connect+0x174>)
 800b008:	f00c fdaf 	bl	8017b6a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	330c      	adds	r3, #12
 800b012:	2100      	movs	r1, #0
 800b014:	4618      	mov	r0, r3
 800b016:	f00c fd06 	bl	8017a26 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800b01a:	4815      	ldr	r0, [pc, #84]	; (800b070 <lwip_netconn_do_connect+0x174>)
 800b01c:	f00c fd96 	bl	8017b4c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	785b      	ldrb	r3, [r3, #1]
 800b026:	2b03      	cmp	r3, #3
 800b028:	d116      	bne.n	800b058 <lwip_netconn_do_connect+0x15c>
 800b02a:	4b0e      	ldr	r3, [pc, #56]	; (800b064 <lwip_netconn_do_connect+0x168>)
 800b02c:	f240 5274 	movw	r2, #1396	; 0x574
 800b030:	490d      	ldr	r1, [pc, #52]	; (800b068 <lwip_netconn_do_connect+0x16c>)
 800b032:	480e      	ldr	r0, [pc, #56]	; (800b06c <lwip_netconn_do_connect+0x170>)
 800b034:	f00d fdac 	bl	8018b90 <iprintf>
              return;
 800b038:	e00e      	b.n	800b058 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800b03a:	4b0a      	ldr	r3, [pc, #40]	; (800b064 <lwip_netconn_do_connect+0x168>)
 800b03c:	f240 527d 	movw	r2, #1405	; 0x57d
 800b040:	490c      	ldr	r1, [pc, #48]	; (800b074 <lwip_netconn_do_connect+0x178>)
 800b042:	480a      	ldr	r0, [pc, #40]	; (800b06c <lwip_netconn_do_connect+0x170>)
 800b044:	f00d fda4 	bl	8018b90 <iprintf>
 800b048:	23fa      	movs	r3, #250	; 0xfa
 800b04a:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800b04c:	e000      	b.n	800b050 <lwip_netconn_do_connect+0x154>
        break;
 800b04e:	bf00      	nop
    }
  }
  msg->err = err;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	7dfa      	ldrb	r2, [r7, #23]
 800b054:	711a      	strb	r2, [r3, #4]
 800b056:	e000      	b.n	800b05a <lwip_netconn_do_connect+0x15e>
              return;
 800b058:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800b05a:	3718      	adds	r7, #24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	0800addd 	.word	0x0800addd
 800b064:	0801cc24 	.word	0x0801cc24
 800b068:	0801cfe4 	.word	0x0801cfe4
 800b06c:	0801cc68 	.word	0x0801cc68
 800b070:	200094a4 	.word	0x200094a4
 800b074:	0801d06c 	.word	0x0801d06c

0800b078 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b08e:	2b20      	cmp	r3, #32
 800b090:	d109      	bne.n	800b0a6 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	4618      	mov	r0, r3
 800b09a:	f009 ff07 	bl	8014eac <udp_disconnect>
    msg->err = ERR_OK;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b0a4:	e002      	b.n	800b0ac <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	22fa      	movs	r2, #250	; 0xfa
 800b0aa:	711a      	strb	r2, [r3, #4]
}
 800b0ac:	bf00      	nop
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fe ff3b 	bl	8009f40 <netconn_err>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b0ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d134      	bne.n	800b140 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d02d      	beq.n	800b13c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0ea:	2b20      	cmp	r3, #32
 800b0ec:	d123      	bne.n	800b136 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10c      	bne.n	800b112 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	685a      	ldr	r2, [r3, #4]
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4619      	mov	r1, r3
 800b106:	4610      	mov	r0, r2
 800b108:	f009 fbf0 	bl	80148ec <udp_send>
 800b10c:	4603      	mov	r3, r0
 800b10e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b110:	e016      	b.n	800b140 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6858      	ldr	r0, [r3, #4]
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	6819      	ldr	r1, [r3, #0]
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	f103 0208 	add.w	r2, r3, #8
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	899b      	ldrh	r3, [r3, #12]
 800b12c:	f009 fc12 	bl	8014954 <udp_sendto>
 800b130:	4603      	mov	r3, r0
 800b132:	73fb      	strb	r3, [r7, #15]
          break;
 800b134:	e004      	b.n	800b140 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b136:	23f5      	movs	r3, #245	; 0xf5
 800b138:	73fb      	strb	r3, [r7, #15]
          break;
 800b13a:	e001      	b.n	800b140 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b13c:	23f5      	movs	r3, #245	; 0xf5
 800b13e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	7bfa      	ldrb	r2, [r7, #15]
 800b144:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b146:	bf00      	nop
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
	...

0800b150 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d106      	bne.n	800b174 <lwip_netconn_do_writemore+0x24>
 800b166:	4b96      	ldr	r3, [pc, #600]	; (800b3c0 <lwip_netconn_do_writemore+0x270>)
 800b168:	f240 6273 	movw	r2, #1651	; 0x673
 800b16c:	4995      	ldr	r1, [pc, #596]	; (800b3c4 <lwip_netconn_do_writemore+0x274>)
 800b16e:	4896      	ldr	r0, [pc, #600]	; (800b3c8 <lwip_netconn_do_writemore+0x278>)
 800b170:	f00d fd0e 	bl	8018b90 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	785b      	ldrb	r3, [r3, #1]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d006      	beq.n	800b18a <lwip_netconn_do_writemore+0x3a>
 800b17c:	4b90      	ldr	r3, [pc, #576]	; (800b3c0 <lwip_netconn_do_writemore+0x270>)
 800b17e:	f240 6274 	movw	r2, #1652	; 0x674
 800b182:	4992      	ldr	r1, [pc, #584]	; (800b3cc <lwip_netconn_do_writemore+0x27c>)
 800b184:	4890      	ldr	r0, [pc, #576]	; (800b3c8 <lwip_netconn_do_writemore+0x278>)
 800b186:	f00d fd03 	bl	8018b90 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <lwip_netconn_do_writemore+0x50>
 800b192:	4b8b      	ldr	r3, [pc, #556]	; (800b3c0 <lwip_netconn_do_writemore+0x270>)
 800b194:	f240 6275 	movw	r2, #1653	; 0x675
 800b198:	498d      	ldr	r1, [pc, #564]	; (800b3d0 <lwip_netconn_do_writemore+0x280>)
 800b19a:	488b      	ldr	r0, [pc, #556]	; (800b3c8 <lwip_netconn_do_writemore+0x278>)
 800b19c:	f00d fcf8 	bl	8018b90 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d106      	bne.n	800b1b6 <lwip_netconn_do_writemore+0x66>
 800b1a8:	4b85      	ldr	r3, [pc, #532]	; (800b3c0 <lwip_netconn_do_writemore+0x270>)
 800b1aa:	f240 6276 	movw	r2, #1654	; 0x676
 800b1ae:	4989      	ldr	r1, [pc, #548]	; (800b3d4 <lwip_netconn_do_writemore+0x284>)
 800b1b0:	4885      	ldr	r0, [pc, #532]	; (800b3c8 <lwip_netconn_do_writemore+0x278>)
 800b1b2:	f00d fced 	bl	8018b90 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	699a      	ldr	r2, [r3, #24]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a1b      	ldr	r3, [r3, #32]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d306      	bcc.n	800b1d4 <lwip_netconn_do_writemore+0x84>
 800b1c6:	4b7e      	ldr	r3, [pc, #504]	; (800b3c0 <lwip_netconn_do_writemore+0x270>)
 800b1c8:	f240 6277 	movw	r2, #1655	; 0x677
 800b1cc:	4982      	ldr	r1, [pc, #520]	; (800b3d8 <lwip_netconn_do_writemore+0x288>)
 800b1ce:	487e      	ldr	r0, [pc, #504]	; (800b3c8 <lwip_netconn_do_writemore+0x278>)
 800b1d0:	f00d fcde 	bl	8018b90 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	899b      	ldrh	r3, [r3, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d106      	bne.n	800b1ec <lwip_netconn_do_writemore+0x9c>
 800b1de:	4b78      	ldr	r3, [pc, #480]	; (800b3c0 <lwip_netconn_do_writemore+0x270>)
 800b1e0:	f240 6279 	movw	r2, #1657	; 0x679
 800b1e4:	497d      	ldr	r1, [pc, #500]	; (800b3dc <lwip_netconn_do_writemore+0x28c>)
 800b1e6:	4878      	ldr	r0, [pc, #480]	; (800b3c8 <lwip_netconn_do_writemore+0x278>)
 800b1e8:	f00d fcd2 	bl	8018b90 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a1b      	ldr	r3, [r3, #32]
 800b1f0:	7f1b      	ldrb	r3, [r3, #28]
 800b1f2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	7f1b      	ldrb	r3, [r3, #28]
 800b1f8:	f003 0302 	and.w	r3, r3, #2
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d104      	bne.n	800b20a <lwip_netconn_do_writemore+0xba>
 800b200:	7ebb      	ldrb	r3, [r7, #26]
 800b202:	f003 0304 	and.w	r3, r3, #4
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <lwip_netconn_do_writemore+0xbe>
 800b20a:	2301      	movs	r3, #1
 800b20c:	e000      	b.n	800b210 <lwip_netconn_do_writemore+0xc0>
 800b20e:	2300      	movs	r3, #0
 800b210:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	4413      	add	r3, r2
 800b222:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a1b      	ldr	r3, [r3, #32]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a1b      	ldr	r3, [r3, #32]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b23c:	d307      	bcc.n	800b24e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b23e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b242:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b244:	7ebb      	ldrb	r3, [r7, #26]
 800b246:	f043 0302 	orr.w	r3, r3, #2
 800b24a:	76bb      	strb	r3, [r7, #26]
 800b24c:	e001      	b.n	800b252 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b25a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b25c:	89fa      	ldrh	r2, [r7, #14]
 800b25e:	8bbb      	ldrh	r3, [r7, #28]
 800b260:	429a      	cmp	r2, r3
 800b262:	d216      	bcs.n	800b292 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b264:	89fb      	ldrh	r3, [r7, #14]
 800b266:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b268:	7e3b      	ldrb	r3, [r7, #24]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00d      	beq.n	800b28a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b26e:	8bbb      	ldrh	r3, [r7, #28]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10e      	bne.n	800b292 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d102      	bne.n	800b284 <lwip_netconn_do_writemore+0x134>
 800b27e:	f06f 0306 	mvn.w	r3, #6
 800b282:	e000      	b.n	800b286 <lwip_netconn_do_writemore+0x136>
 800b284:	2300      	movs	r3, #0
 800b286:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b288:	e07d      	b.n	800b386 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b28a:	7ebb      	ldrb	r3, [r7, #26]
 800b28c:	f043 0302 	orr.w	r3, r3, #2
 800b290:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	691a      	ldr	r2, [r3, #16]
 800b298:	8bbb      	ldrh	r3, [r7, #28]
 800b29a:	441a      	add	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a1b      	ldr	r3, [r3, #32]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d906      	bls.n	800b2b6 <lwip_netconn_do_writemore+0x166>
 800b2a8:	4b45      	ldr	r3, [pc, #276]	; (800b3c0 <lwip_netconn_do_writemore+0x270>)
 800b2aa:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b2ae:	494c      	ldr	r1, [pc, #304]	; (800b3e0 <lwip_netconn_do_writemore+0x290>)
 800b2b0:	4845      	ldr	r0, [pc, #276]	; (800b3c8 <lwip_netconn_do_writemore+0x278>)
 800b2b2:	f00d fc6d 	bl	8018b90 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b2b6:	8bbb      	ldrh	r3, [r7, #28]
 800b2b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d103      	bne.n	800b2c8 <lwip_netconn_do_writemore+0x178>
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c6:	d209      	bcs.n	800b2dc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b2cc:	8bba      	ldrh	r2, [r7, #28]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d10b      	bne.n	800b2ea <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	899b      	ldrh	r3, [r3, #12]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d906      	bls.n	800b2ea <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b2e0:	7ebb      	ldrb	r3, [r7, #26]
 800b2e2:	f043 0302 	orr.w	r3, r3, #2
 800b2e6:	76bb      	strb	r3, [r7, #26]
 800b2e8:	e001      	b.n	800b2ee <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6858      	ldr	r0, [r3, #4]
 800b2f2:	7ebb      	ldrb	r3, [r7, #26]
 800b2f4:	8bba      	ldrh	r2, [r7, #28]
 800b2f6:	6979      	ldr	r1, [r7, #20]
 800b2f8:	f007 fa5a 	bl	80127b0 <tcp_write>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b300:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d12c      	bne.n	800b362 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a1b      	ldr	r3, [r3, #32]
 800b30c:	6999      	ldr	r1, [r3, #24]
 800b30e:	8bba      	ldrh	r2, [r7, #28]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a1b      	ldr	r3, [r3, #32]
 800b314:	440a      	add	r2, r1
 800b316:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	6919      	ldr	r1, [r3, #16]
 800b31e:	8bba      	ldrh	r2, [r7, #28]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a1b      	ldr	r3, [r3, #32]
 800b324:	440a      	add	r2, r1
 800b326:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a1b      	ldr	r3, [r3, #32]
 800b32c:	691a      	ldr	r2, [r3, #16]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	429a      	cmp	r2, r3
 800b338:	d113      	bne.n	800b362 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a1b      	ldr	r3, [r3, #32]
 800b33e:	899a      	ldrh	r2, [r3, #12]
 800b340:	3a01      	subs	r2, #1
 800b342:	b292      	uxth	r2, r2
 800b344:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	899b      	ldrh	r3, [r3, #12]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d008      	beq.n	800b362 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	689a      	ldr	r2, [r3, #8]
 800b356:	3208      	adds	r2, #8
 800b358:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	2200      	movs	r2, #0
 800b360:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b362:	7e7b      	ldrb	r3, [r7, #25]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d004      	beq.n	800b372 <lwip_netconn_do_writemore+0x222>
 800b368:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f43f af50 	beq.w	800b212 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b372:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d004      	beq.n	800b384 <lwip_netconn_do_writemore+0x234>
 800b37a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b382:	d148      	bne.n	800b416 <lwip_netconn_do_writemore+0x2c6>
err_mem:
 800b384:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b386:	7e3b      	ldrb	r3, [r7, #24]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d02b      	beq.n	800b3e4 <lwip_netconn_do_writemore+0x294>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a1b      	ldr	r3, [r3, #32]
 800b390:	699a      	ldr	r2, [r3, #24]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d223      	bcs.n	800b3e4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d005      	beq.n	800b3b0 <lwip_netconn_do_writemore+0x260>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2103      	movs	r1, #3
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	7f1b      	ldrb	r3, [r3, #28]
 800b3b4:	f043 0310 	orr.w	r3, r3, #16
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	771a      	strb	r2, [r3, #28]
 800b3be:	e02a      	b.n	800b416 <lwip_netconn_do_writemore+0x2c6>
 800b3c0:	0801cc24 	.word	0x0801cc24
 800b3c4:	0801cd7c 	.word	0x0801cd7c
 800b3c8:	0801cc68 	.word	0x0801cc68
 800b3cc:	0801d084 	.word	0x0801d084
 800b3d0:	0801cd8c 	.word	0x0801cd8c
 800b3d4:	0801d0a4 	.word	0x0801d0a4
 800b3d8:	0801d0bc 	.word	0x0801d0bc
 800b3dc:	0801d0fc 	.word	0x0801d0fc
 800b3e0:	0801d124 	.word	0x0801d124
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b3ec:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 800b3f0:	d907      	bls.n	800b402 <lwip_netconn_do_writemore+0x2b2>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b3fa:	f241 3287 	movw	r2, #4999	; 0x1387
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d909      	bls.n	800b416 <lwip_netconn_do_writemore+0x2c6>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b406:	2b00      	cmp	r3, #0
 800b408:	d005      	beq.n	800b416 <lwip_netconn_do_writemore+0x2c6>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40e:	2200      	movs	r2, #0
 800b410:	2103      	movs	r1, #3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b416:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d11d      	bne.n	800b45a <lwip_netconn_do_writemore+0x30a>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	699a      	ldr	r2, [r3, #24]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a1b      	ldr	r3, [r3, #32]
 800b428:	695b      	ldr	r3, [r3, #20]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d002      	beq.n	800b434 <lwip_netconn_do_writemore+0x2e4>
 800b42e:	7e3b      	ldrb	r3, [r7, #24]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <lwip_netconn_do_writemore+0x2e8>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b434:	2301      	movs	r3, #1
 800b436:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f007 ffa3 	bl	8013388 <tcp_output>
 800b442:	4603      	mov	r3, r0
 800b444:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b446:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b44a:	f113 0f04 	cmn.w	r3, #4
 800b44e:	d12c      	bne.n	800b4aa <lwip_netconn_do_writemore+0x35a>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b450:	7b3b      	ldrb	r3, [r7, #12]
 800b452:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b454:	2301      	movs	r3, #1
 800b456:	76fb      	strb	r3, [r7, #27]
 800b458:	e027      	b.n	800b4aa <lwip_netconn_do_writemore+0x35a>
      }
    } else if (err == ERR_MEM) {
 800b45a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b462:	d120      	bne.n	800b4a6 <lwip_netconn_do_writemore+0x356>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	4618      	mov	r0, r3
 800b46a:	f007 ff8d 	bl	8013388 <tcp_output>
 800b46e:	4603      	mov	r3, r0
 800b470:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b472:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b476:	f113 0f04 	cmn.w	r3, #4
 800b47a:	d104      	bne.n	800b486 <lwip_netconn_do_writemore+0x336>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b47c:	7b7b      	ldrb	r3, [r7, #13]
 800b47e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b480:	2301      	movs	r3, #1
 800b482:	76fb      	strb	r3, [r7, #27]
 800b484:	e011      	b.n	800b4aa <lwip_netconn_do_writemore+0x35a>
      } else if (dontblock) {
 800b486:	7e3b      	ldrb	r3, [r7, #24]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00e      	beq.n	800b4aa <lwip_netconn_do_writemore+0x35a>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a1b      	ldr	r3, [r3, #32]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d102      	bne.n	800b49c <lwip_netconn_do_writemore+0x34c>
 800b496:	f06f 0306 	mvn.w	r3, #6
 800b49a:	e000      	b.n	800b49e <lwip_netconn_do_writemore+0x34e>
 800b49c:	2300      	movs	r3, #0
 800b49e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	76fb      	strb	r3, [r7, #27]
 800b4a4:	e001      	b.n	800b4aa <lwip_netconn_do_writemore+0x35a>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b4aa:	7efb      	ldrb	r3, [r7, #27]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d015      	beq.n	800b4dc <lwip_netconn_do_writemore+0x38c>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	330c      	adds	r3, #12
 800b4b8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a1b      	ldr	r3, [r3, #32]
 800b4be:	7ffa      	ldrb	r2, [r7, #31]
 800b4c0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b4ce:	78fb      	ldrb	r3, [r7, #3]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d006      	beq.n	800b4e2 <lwip_netconn_do_writemore+0x392>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b4d4:	68b8      	ldr	r0, [r7, #8]
 800b4d6:	f00c fad7 	bl	8017a88 <sys_sem_signal>
 800b4da:	e002      	b.n	800b4e2 <lwip_netconn_do_writemore+0x392>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e0:	e000      	b.n	800b4e4 <lwip_netconn_do_writemore+0x394>
  }
#endif
  return ERR_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3720      	adds	r7, #32
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fe fd1f 	bl	8009f40 <netconn_err>
 800b502:	4603      	mov	r3, r0
 800b504:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d166      	bne.n	800b5dc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b518:	2b10      	cmp	r3, #16
 800b51a:	d15d      	bne.n	800b5d8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	785b      	ldrb	r3, [r3, #1]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b526:	23fb      	movs	r3, #251	; 0xfb
 800b528:	73fb      	strb	r3, [r7, #15]
 800b52a:	e057      	b.n	800b5dc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d04d      	beq.n	800b5d2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2201      	movs	r2, #1
 800b53c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d006      	beq.n	800b556 <lwip_netconn_do_write+0x6a>
 800b548:	4b28      	ldr	r3, [pc, #160]	; (800b5ec <lwip_netconn_do_write+0x100>)
 800b54a:	f240 7223 	movw	r2, #1827	; 0x723
 800b54e:	4928      	ldr	r1, [pc, #160]	; (800b5f0 <lwip_netconn_do_write+0x104>)
 800b550:	4828      	ldr	r0, [pc, #160]	; (800b5f4 <lwip_netconn_do_write+0x108>)
 800b552:	f00d fb1d 	bl	8018b90 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	695b      	ldr	r3, [r3, #20]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <lwip_netconn_do_write+0x80>
 800b55e:	4b23      	ldr	r3, [pc, #140]	; (800b5ec <lwip_netconn_do_write+0x100>)
 800b560:	f240 7224 	movw	r2, #1828	; 0x724
 800b564:	4924      	ldr	r1, [pc, #144]	; (800b5f8 <lwip_netconn_do_write+0x10c>)
 800b566:	4823      	ldr	r0, [pc, #140]	; (800b5f4 <lwip_netconn_do_write+0x108>)
 800b568:	f00d fb12 	bl	8018b90 <iprintf>
        msg->conn->current_msg = msg;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2100      	movs	r1, #0
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff fde8 	bl	800b150 <lwip_netconn_do_writemore>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d02e      	beq.n	800b5e4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	785b      	ldrb	r3, [r3, #1]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d006      	beq.n	800b59e <lwip_netconn_do_write+0xb2>
 800b590:	4b16      	ldr	r3, [pc, #88]	; (800b5ec <lwip_netconn_do_write+0x100>)
 800b592:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b596:	4919      	ldr	r1, [pc, #100]	; (800b5fc <lwip_netconn_do_write+0x110>)
 800b598:	4816      	ldr	r0, [pc, #88]	; (800b5f4 <lwip_netconn_do_write+0x108>)
 800b59a:	f00d faf9 	bl	8018b90 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b59e:	4818      	ldr	r0, [pc, #96]	; (800b600 <lwip_netconn_do_write+0x114>)
 800b5a0:	f00c fae3 	bl	8017b6a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	330c      	adds	r3, #12
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f00c fa3a 	bl	8017a26 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b5b2:	4813      	ldr	r0, [pc, #76]	; (800b600 <lwip_netconn_do_write+0x114>)
 800b5b4:	f00c faca 	bl	8017b4c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	785b      	ldrb	r3, [r3, #1]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d110      	bne.n	800b5e4 <lwip_netconn_do_write+0xf8>
 800b5c2:	4b0a      	ldr	r3, [pc, #40]	; (800b5ec <lwip_netconn_do_write+0x100>)
 800b5c4:	f240 722c 	movw	r2, #1836	; 0x72c
 800b5c8:	490c      	ldr	r1, [pc, #48]	; (800b5fc <lwip_netconn_do_write+0x110>)
 800b5ca:	480a      	ldr	r0, [pc, #40]	; (800b5f4 <lwip_netconn_do_write+0x108>)
 800b5cc:	f00d fae0 	bl	8018b90 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b5d0:	e008      	b.n	800b5e4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b5d2:	23f5      	movs	r3, #245	; 0xf5
 800b5d4:	73fb      	strb	r3, [r7, #15]
 800b5d6:	e001      	b.n	800b5dc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b5d8:	23fa      	movs	r3, #250	; 0xfa
 800b5da:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	7bfa      	ldrb	r2, [r7, #15]
 800b5e0:	711a      	strb	r2, [r3, #4]
 800b5e2:	e000      	b.n	800b5e6 <lwip_netconn_do_write+0xfa>
        return;
 800b5e4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	0801cc24 	.word	0x0801cc24
 800b5f0:	0801cfc8 	.word	0x0801cfc8
 800b5f4:	0801cc68 	.word	0x0801cc68
 800b5f8:	0801d150 	.word	0x0801d150
 800b5fc:	0801cfe4 	.word	0x0801cfe4
 800b600:	200094a4 	.word	0x200094a4

0800b604 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	4603      	mov	r3, r0
 800b60c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800b60e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b612:	2b00      	cmp	r3, #0
 800b614:	dc04      	bgt.n	800b620 <err_to_errno+0x1c>
 800b616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b61a:	f113 0f10 	cmn.w	r3, #16
 800b61e:	da01      	bge.n	800b624 <err_to_errno+0x20>
    return EIO;
 800b620:	2305      	movs	r3, #5
 800b622:	e005      	b.n	800b630 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800b624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b628:	425b      	negs	r3, r3
 800b62a:	4a04      	ldr	r2, [pc, #16]	; (800b63c <err_to_errno+0x38>)
 800b62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b630:	4618      	mov	r0, r3
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	08020204 	.word	0x08020204

0800b640 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d013      	beq.n	800b676 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f002 fb20 	bl	800dca0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	605a      	str	r2, [r3, #4]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b66e:	6879      	ldr	r1, [r7, #4]
 800b670:	2006      	movs	r0, #6
 800b672:	f001 fc71 	bl	800cf58 <memp_free>
  }
}
 800b676:	bf00      	nop
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
	...

0800b680 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d106      	bne.n	800b69c <netbuf_free+0x1c>
 800b68e:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <netbuf_free+0x44>)
 800b690:	2281      	movs	r2, #129	; 0x81
 800b692:	490d      	ldr	r1, [pc, #52]	; (800b6c8 <netbuf_free+0x48>)
 800b694:	480d      	ldr	r0, [pc, #52]	; (800b6cc <netbuf_free+0x4c>)
 800b696:	f00d fa7b 	bl	8018b90 <iprintf>
 800b69a:	e00f      	b.n	800b6bc <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d004      	beq.n	800b6ae <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f002 faf9 	bl	800dca0 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	605a      	str	r2, [r3, #4]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685a      	ldr	r2, [r3, #4]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	0801d17c 	.word	0x0801d17c
 800b6c8:	0801d218 	.word	0x0801d218
 800b6cc:	0801d1cc 	.word	0x0801d1cc

0800b6d0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d108      	bne.n	800b6f6 <netbuf_ref+0x26>
 800b6e4:	4b1c      	ldr	r3, [pc, #112]	; (800b758 <netbuf_ref+0x88>)
 800b6e6:	2299      	movs	r2, #153	; 0x99
 800b6e8:	491c      	ldr	r1, [pc, #112]	; (800b75c <netbuf_ref+0x8c>)
 800b6ea:	481d      	ldr	r0, [pc, #116]	; (800b760 <netbuf_ref+0x90>)
 800b6ec:	f00d fa50 	bl	8018b90 <iprintf>
 800b6f0:	f06f 030f 	mvn.w	r3, #15
 800b6f4:	e02b      	b.n	800b74e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d004      	beq.n	800b708 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4618      	mov	r0, r3
 800b704:	f002 facc 	bl	800dca0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b708:	2241      	movs	r2, #65	; 0x41
 800b70a:	2100      	movs	r1, #0
 800b70c:	2036      	movs	r0, #54	; 0x36
 800b70e:	f001 ffe3 	bl	800d6d8 <pbuf_alloc>
 800b712:	4602      	mov	r2, r0
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d105      	bne.n	800b72c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b726:	f04f 33ff 	mov.w	r3, #4294967295
 800b72a:	e010      	b.n	800b74e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	88fa      	ldrh	r2, [r7, #6]
 800b73a:	811a      	strh	r2, [r3, #8]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	6812      	ldr	r2, [r2, #0]
 800b740:	891b      	ldrh	r3, [r3, #8]
 800b742:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	0801d17c 	.word	0x0801d17c
 800b75c:	0801d234 	.word	0x0801d234
 800b760:	0801d1cc 	.word	0x0801d1cc

0800b764 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	db02      	blt.n	800b77c <tryget_socket_unconn_nouse+0x18>
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2b03      	cmp	r3, #3
 800b77a:	dd01      	ble.n	800b780 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800b77c:	2300      	movs	r3, #0
 800b77e:	e003      	b.n	800b788 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	011b      	lsls	r3, r3, #4
 800b784:	4a03      	ldr	r2, [pc, #12]	; (800b794 <tryget_socket_unconn_nouse+0x30>)
 800b786:	4413      	add	r3, r2
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	20009454 	.word	0x20009454

0800b798 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7ff ffdf 	bl	800b764 <tryget_socket_unconn_nouse>
 800b7a6:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff ffec 	bl	800b798 <tryget_socket_unconn>
 800b7c0:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d005      	beq.n	800b7d4 <tryget_socket+0x22>
    if (sock->conn) {
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d001      	beq.n	800b7d4 <tryget_socket+0x22>
      return sock;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	e000      	b.n	800b7d6 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
	...

0800b7e0 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7ff ffe2 	bl	800b7b2 <tryget_socket>
 800b7ee:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d104      	bne.n	800b800 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800b7f6:	4b05      	ldr	r3, [pc, #20]	; (800b80c <get_socket+0x2c>)
 800b7f8:	2209      	movs	r2, #9
 800b7fa:	601a      	str	r2, [r3, #0]
    return NULL;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e000      	b.n	800b802 <get_socket+0x22>
  }
  return sock;
 800b800:	68fb      	ldr	r3, [r7, #12]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	20077bd4 	.word	0x20077bd4

0800b810 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b81a:	2300      	movs	r3, #0
 800b81c:	60fb      	str	r3, [r7, #12]
 800b81e:	e052      	b.n	800b8c6 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800b820:	f00c f9d6 	bl	8017bd0 <sys_arch_protect>
 800b824:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800b826:	4a2c      	ldr	r2, [pc, #176]	; (800b8d8 <alloc_socket+0xc8>)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	011b      	lsls	r3, r3, #4
 800b82c:	4413      	add	r3, r2
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d142      	bne.n	800b8ba <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800b834:	4a28      	ldr	r2, [pc, #160]	; (800b8d8 <alloc_socket+0xc8>)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	011b      	lsls	r3, r3, #4
 800b83a:	4413      	add	r3, r2
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800b840:	68b8      	ldr	r0, [r7, #8]
 800b842:	f00c f9d3 	bl	8017bec <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800b846:	4a24      	ldr	r2, [pc, #144]	; (800b8d8 <alloc_socket+0xc8>)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	011b      	lsls	r3, r3, #4
 800b84c:	4413      	add	r3, r2
 800b84e:	3304      	adds	r3, #4
 800b850:	2200      	movs	r2, #0
 800b852:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800b854:	4a20      	ldr	r2, [pc, #128]	; (800b8d8 <alloc_socket+0xc8>)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	011b      	lsls	r3, r3, #4
 800b85a:	4413      	add	r3, r2
 800b85c:	330e      	adds	r3, #14
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d006      	beq.n	800b872 <alloc_socket+0x62>
 800b864:	4b1d      	ldr	r3, [pc, #116]	; (800b8dc <alloc_socket+0xcc>)
 800b866:	f240 220e 	movw	r2, #526	; 0x20e
 800b86a:	491d      	ldr	r1, [pc, #116]	; (800b8e0 <alloc_socket+0xd0>)
 800b86c:	481d      	ldr	r0, [pc, #116]	; (800b8e4 <alloc_socket+0xd4>)
 800b86e:	f00d f98f 	bl	8018b90 <iprintf>
      sockets[i].rcvevent   = 0;
 800b872:	4a19      	ldr	r2, [pc, #100]	; (800b8d8 <alloc_socket+0xc8>)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	011b      	lsls	r3, r3, #4
 800b878:	4413      	add	r3, r2
 800b87a:	3308      	adds	r3, #8
 800b87c:	2200      	movs	r2, #0
 800b87e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b888:	2b10      	cmp	r3, #16
 800b88a:	d102      	bne.n	800b892 <alloc_socket+0x82>
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <alloc_socket+0x86>
 800b892:	2301      	movs	r3, #1
 800b894:	e000      	b.n	800b898 <alloc_socket+0x88>
 800b896:	2300      	movs	r3, #0
 800b898:	b299      	uxth	r1, r3
 800b89a:	4a0f      	ldr	r2, [pc, #60]	; (800b8d8 <alloc_socket+0xc8>)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	011b      	lsls	r3, r3, #4
 800b8a0:	4413      	add	r3, r2
 800b8a2:	330a      	adds	r3, #10
 800b8a4:	460a      	mov	r2, r1
 800b8a6:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800b8a8:	4a0b      	ldr	r2, [pc, #44]	; (800b8d8 <alloc_socket+0xc8>)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	011b      	lsls	r3, r3, #4
 800b8ae:	4413      	add	r3, r2
 800b8b0:	330c      	adds	r3, #12
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	e00a      	b.n	800b8d0 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800b8ba:	68b8      	ldr	r0, [r7, #8]
 800b8bc:	f00c f996 	bl	8017bec <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	60fb      	str	r3, [r7, #12]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b03      	cmp	r3, #3
 800b8ca:	dda9      	ble.n	800b820 <alloc_socket+0x10>
  }
  return -1;
 800b8cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	20009454 	.word	0x20009454
 800b8dc:	0801d314 	.word	0x0801d314
 800b8e0:	0801d348 	.word	0x0801d348
 800b8e4:	0801d368 	.word	0x0801d368

0800b8e8 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	6852      	ldr	r2, [r2, #4]
 800b8fc:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	601a      	str	r2, [r3, #0]
  return 1;
 800b912:	2301      	movs	r3, #1
}
 800b914:	4618      	mov	r0, r3
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00d      	beq.n	800b950 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d005      	beq.n	800b946 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4618      	mov	r0, r3
 800b940:	f002 f9ae 	bl	800dca0 <pbuf_free>
 800b944:	e004      	b.n	800b950 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7ff fe78 	bl	800b640 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d002      	beq.n	800b95c <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800b956:	68b8      	ldr	r0, [r7, #8]
 800b958:	f7fe f974 	bl	8009c44 <netconn_delete>
  }
}
 800b95c:	bf00      	nop
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800b96e:	f00c f92f 	bl	8017bd0 <sys_arch_protect>
 800b972:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800b974:	f107 0308 	add.w	r3, r7, #8
 800b978:	f107 020c 	add.w	r2, r7, #12
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7ff ffb2 	bl	800b8e8 <free_socket_locked>
 800b984:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800b986:	6978      	ldr	r0, [r7, #20]
 800b988:	f00c f930 	bl	8017bec <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d006      	beq.n	800b9a0 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f107 0208 	add.w	r2, r7, #8
 800b998:	4619      	mov	r1, r3
 800b99a:	6838      	ldr	r0, [r7, #0]
 800b99c:	f7ff ffc0 	bl	800b920 <free_socket_free_elements>
  }
}
 800b9a0:	bf00      	nop
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7ff ff13 	bl	800b7e0 <get_socket>
 800b9ba:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d102      	bne.n	800b9c8 <lwip_close+0x20>
    return -1;
 800b9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c6:	e039      	b.n	800ba3c <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9da:	2b10      	cmp	r3, #16
 800b9dc:	bf0c      	ite	eq
 800b9de:	2301      	moveq	r3, #1
 800b9e0:	2300      	movne	r3, #0
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	617b      	str	r3, [r7, #20]
 800b9e6:	e00a      	b.n	800b9fe <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d006      	beq.n	800b9fe <lwip_close+0x56>
 800b9f0:	4b14      	ldr	r3, [pc, #80]	; (800ba44 <lwip_close+0x9c>)
 800b9f2:	f44f 7245 	mov.w	r2, #788	; 0x314
 800b9f6:	4914      	ldr	r1, [pc, #80]	; (800ba48 <lwip_close+0xa0>)
 800b9f8:	4814      	ldr	r0, [pc, #80]	; (800ba4c <lwip_close+0xa4>)
 800b9fa:	f00d f8c9 	bl	8018b90 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fe f8fa 	bl	8009bfc <netconn_prepare_delete>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ba0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00e      	beq.n	800ba32 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800ba14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7ff fdf3 	bl	800b604 <err_to_errno>
 800ba1e:	60b8      	str	r0, [r7, #8]
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <lwip_close+0x84>
 800ba26:	4a0a      	ldr	r2, [pc, #40]	; (800ba50 <lwip_close+0xa8>)
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ba2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba30:	e004      	b.n	800ba3c <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800ba32:	6979      	ldr	r1, [r7, #20]
 800ba34:	6938      	ldr	r0, [r7, #16]
 800ba36:	f7ff ff95 	bl	800b964 <free_socket>
  set_errno(0);
  return 0;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3718      	adds	r7, #24
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	0801d314 	.word	0x0801d314
 800ba48:	0801d3d4 	.word	0x0801d3d4
 800ba4c:	0801d368 	.word	0x0801d368
 800ba50:	20077bd4 	.word	0x20077bd4

0800ba54 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b08c      	sub	sp, #48	; 0x30
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f7ff febd 	bl	800b7e0 <get_socket>
 800ba66:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 800ba68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d102      	bne.n	800ba74 <lwip_connect+0x20>
    return -1;
 800ba6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba72:	e062      	b.n	800bb3a <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	785b      	ldrb	r3, [r3, #1]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d108      	bne.n	800ba8e <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800ba7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fe f933 	bl	8009cec <netconn_disconnect>
 800ba86:	4603      	mov	r3, r0
 800ba88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ba8c:	e039      	b.n	800bb02 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b10      	cmp	r3, #16
 800ba92:	d10c      	bne.n	800baae <lwip_connect+0x5a>
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	785b      	ldrb	r3, [r3, #1]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <lwip_connect+0x50>
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	785b      	ldrb	r3, [r3, #1]
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d104      	bne.n	800baae <lwip_connect+0x5a>
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f003 0303 	and.w	r3, r3, #3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d014      	beq.n	800bad8 <lwip_connect+0x84>
 800baae:	4b25      	ldr	r3, [pc, #148]	; (800bb44 <lwip_connect+0xf0>)
 800bab0:	f240 3247 	movw	r2, #839	; 0x347
 800bab4:	4924      	ldr	r1, [pc, #144]	; (800bb48 <lwip_connect+0xf4>)
 800bab6:	4825      	ldr	r0, [pc, #148]	; (800bb4c <lwip_connect+0xf8>)
 800bab8:	f00d f86a 	bl	8018b90 <iprintf>
 800babc:	f06f 000f 	mvn.w	r0, #15
 800bac0:	f7ff fda0 	bl	800b604 <err_to_errno>
 800bac4:	6238      	str	r0, [r7, #32]
 800bac6:	6a3b      	ldr	r3, [r7, #32]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <lwip_connect+0x7e>
 800bacc:	4a20      	ldr	r2, [pc, #128]	; (800bb50 <lwip_connect+0xfc>)
 800bace:	6a3b      	ldr	r3, [r7, #32]
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	f04f 33ff 	mov.w	r3, #4294967295
 800bad6:	e030      	b.n	800bb3a <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	617b      	str	r3, [r7, #20]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	885b      	ldrh	r3, [r3, #2]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f000 fcea 	bl	800c4bc <lwip_htons>
 800bae8:	4603      	mov	r3, r0
 800baea:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800baec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800baf2:	f107 0114 	add.w	r1, r7, #20
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe f8c0 	bl	8009c7c <netconn_connect>
 800bafc:	4603      	mov	r3, r0
 800bafe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 800bb02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00e      	beq.n	800bb28 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800bb0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7ff fd78 	bl	800b604 <err_to_errno>
 800bb14:	61b8      	str	r0, [r7, #24]
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d002      	beq.n	800bb22 <lwip_connect+0xce>
 800bb1c:	4a0c      	ldr	r2, [pc, #48]	; (800bb50 <lwip_connect+0xfc>)
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bb22:	f04f 33ff 	mov.w	r3, #4294967295
 800bb26:	e008      	b.n	800bb3a <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800bb28:	2300      	movs	r3, #0
 800bb2a:	61fb      	str	r3, [r7, #28]
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d002      	beq.n	800bb38 <lwip_connect+0xe4>
 800bb32:	4a07      	ldr	r2, [pc, #28]	; (800bb50 <lwip_connect+0xfc>)
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3730      	adds	r7, #48	; 0x30
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	0801d314 	.word	0x0801d314
 800bb48:	0801d3ec 	.word	0x0801d3ec
 800bb4c:	0801d368 	.word	0x0801d368
 800bb50:	20077bd4 	.word	0x20077bd4

0800bb54 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b08a      	sub	sp, #40	; 0x28
 800bb58:	af02      	add	r7, sp, #8
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7ff fe3c 	bl	800b7e0 <get_socket>
 800bb68:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d102      	bne.n	800bb76 <lwip_send+0x22>
    return -1;
 800bb70:	f04f 33ff 	mov.w	r3, #4294967295
 800bb74:	e046      	b.n	800bc04 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb80:	2b10      	cmp	r3, #16
 800bb82:	d00b      	beq.n	800bb9c <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800bb84:	2300      	movs	r3, #0
 800bb86:	9301      	str	r3, [sp, #4]
 800bb88:	2300      	movs	r3, #0
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	68b9      	ldr	r1, [r7, #8]
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f000 f83c 	bl	800bc10 <lwip_sendto>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	e033      	b.n	800bc04 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <lwip_send+0x56>
 800bba6:	2203      	movs	r2, #3
 800bba8:	e000      	b.n	800bbac <lwip_send+0x58>
 800bbaa:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	105b      	asrs	r3, r3, #1
 800bbb0:	b25b      	sxtb	r3, r3
 800bbb2:	f003 0304 	and.w	r3, r3, #4
 800bbb6:	b25b      	sxtb	r3, r3
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800bbbc:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	6818      	ldr	r0, [r3, #0]
 800bbc6:	7efa      	ldrb	r2, [r7, #27]
 800bbc8:	f107 0310 	add.w	r3, r7, #16
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	68b9      	ldr	r1, [r7, #8]
 800bbd4:	f7fe f8e2 	bl	8009d9c <netconn_write_partly>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800bbdc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7ff fd0f 	bl	800b604 <err_to_errno>
 800bbe6:	6178      	str	r0, [r7, #20]
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d002      	beq.n	800bbf4 <lwip_send+0xa0>
 800bbee:	4a07      	ldr	r2, [pc, #28]	; (800bc0c <lwip_send+0xb8>)
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800bbf4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <lwip_send+0xac>
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	e001      	b.n	800bc04 <lwip_send+0xb0>
 800bc00:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3720      	adds	r7, #32
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	20077bd4 	.word	0x20077bd4

0800bc10 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08e      	sub	sp, #56	; 0x38
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
 800bc1c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f7ff fdde 	bl	800b7e0 <get_socket>
 800bc24:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800bc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d102      	bne.n	800bc32 <lwip_sendto+0x22>
    return -1;
 800bc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc30:	e093      	b.n	800bd5a <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc3c:	2b10      	cmp	r3, #16
 800bc3e:	d107      	bne.n	800bc50 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	68b9      	ldr	r1, [r7, #8]
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f7ff ff84 	bl	800bb54 <lwip_send>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	e084      	b.n	800bd5a <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc56:	d30a      	bcc.n	800bc6e <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800bc58:	235a      	movs	r3, #90	; 0x5a
 800bc5a:	623b      	str	r3, [r7, #32]
 800bc5c:	6a3b      	ldr	r3, [r7, #32]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d002      	beq.n	800bc68 <lwip_sendto+0x58>
 800bc62:	4a40      	ldr	r2, [pc, #256]	; (800bd64 <lwip_sendto+0x154>)
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bc68:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6c:	e075      	b.n	800bd5a <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800bc72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <lwip_sendto+0x6e>
 800bc78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d023      	beq.n	800bcc6 <lwip_sendto+0xb6>
 800bc7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc80:	2b10      	cmp	r3, #16
 800bc82:	d10b      	bne.n	800bc9c <lwip_sendto+0x8c>
 800bc84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d008      	beq.n	800bc9c <lwip_sendto+0x8c>
 800bc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc8c:	785b      	ldrb	r3, [r3, #1]
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d104      	bne.n	800bc9c <lwip_sendto+0x8c>
 800bc92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc94:	f003 0303 	and.w	r3, r3, #3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d014      	beq.n	800bcc6 <lwip_sendto+0xb6>
 800bc9c:	4b32      	ldr	r3, [pc, #200]	; (800bd68 <lwip_sendto+0x158>)
 800bc9e:	f240 6252 	movw	r2, #1618	; 0x652
 800bca2:	4932      	ldr	r1, [pc, #200]	; (800bd6c <lwip_sendto+0x15c>)
 800bca4:	4832      	ldr	r0, [pc, #200]	; (800bd70 <lwip_sendto+0x160>)
 800bca6:	f00c ff73 	bl	8018b90 <iprintf>
 800bcaa:	f06f 000f 	mvn.w	r0, #15
 800bcae:	f7ff fca9 	bl	800b604 <err_to_errno>
 800bcb2:	62b8      	str	r0, [r7, #40]	; 0x28
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d002      	beq.n	800bcc0 <lwip_sendto+0xb0>
 800bcba:	4a2a      	ldr	r2, [pc, #168]	; (800bd64 <lwip_sendto+0x154>)
 800bcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbe:	6013      	str	r3, [r2, #0]
 800bcc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc4:	e049      	b.n	800bd5a <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	617b      	str	r3, [r7, #20]
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800bcce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00a      	beq.n	800bcea <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800bcd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	61bb      	str	r3, [r7, #24]
 800bcda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcdc:	885b      	ldrh	r3, [r3, #2]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 fbec 	bl	800c4bc <lwip_htons>
 800bce4:	4603      	mov	r3, r0
 800bce6:	86bb      	strh	r3, [r7, #52]	; 0x34
 800bce8:	e003      	b.n	800bcf2 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800bcea:	2300      	movs	r3, #0
 800bcec:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800bcee:	2300      	movs	r3, #0
 800bcf0:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800bcf2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bcf4:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800bcf6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bcf8:	f107 0310 	add.w	r3, r7, #16
 800bcfc:	68b9      	ldr	r1, [r7, #8]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7ff fce6 	bl	800b6d0 <netbuf_ref>
 800bd04:	4603      	mov	r3, r0
 800bd06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800bd0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10a      	bne.n	800bd28 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f107 0210 	add.w	r2, r7, #16
 800bd1a:	4611      	mov	r1, r2
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fe f80f 	bl	8009d40 <netconn_send>
 800bd22:	4603      	mov	r3, r0
 800bd24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800bd28:	f107 0310 	add.w	r3, r7, #16
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff fca7 	bl	800b680 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800bd32:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7ff fc64 	bl	800b604 <err_to_errno>
 800bd3c:	6278      	str	r0, [r7, #36]	; 0x24
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d002      	beq.n	800bd4a <lwip_sendto+0x13a>
 800bd44:	4a07      	ldr	r2, [pc, #28]	; (800bd64 <lwip_sendto+0x154>)
 800bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd48:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800bd4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d101      	bne.n	800bd56 <lwip_sendto+0x146>
 800bd52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd54:	e001      	b.n	800bd5a <lwip_sendto+0x14a>
 800bd56:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3738      	adds	r7, #56	; 0x38
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20077bd4 	.word	0x20077bd4
 800bd68:	0801d314 	.word	0x0801d314
 800bd6c:	0801d5f4 	.word	0x0801d5f4
 800bd70:	0801d368 	.word	0x0801d368

0800bd74 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	2b03      	cmp	r3, #3
 800bd84:	d009      	beq.n	800bd9a <lwip_socket+0x26>
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	dc23      	bgt.n	800bdd4 <lwip_socket+0x60>
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d019      	beq.n	800bdc6 <lwip_socket+0x52>
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d009      	beq.n	800bdac <lwip_socket+0x38>
 800bd98:	e01c      	b.n	800bdd4 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	4a22      	ldr	r2, [pc, #136]	; (800be28 <lwip_socket+0xb4>)
 800bda0:	4619      	mov	r1, r3
 800bda2:	2040      	movs	r0, #64	; 0x40
 800bda4:	f7fd feb0 	bl	8009b08 <netconn_new_with_proto_and_callback>
 800bda8:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800bdaa:	e019      	b.n	800bde0 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b88      	cmp	r3, #136	; 0x88
 800bdb0:	d101      	bne.n	800bdb6 <lwip_socket+0x42>
 800bdb2:	2321      	movs	r3, #33	; 0x21
 800bdb4:	e000      	b.n	800bdb8 <lwip_socket+0x44>
 800bdb6:	2320      	movs	r3, #32
 800bdb8:	4a1b      	ldr	r2, [pc, #108]	; (800be28 <lwip_socket+0xb4>)
 800bdba:	2100      	movs	r1, #0
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fd fea3 	bl	8009b08 <netconn_new_with_proto_and_callback>
 800bdc2:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800bdc4:	e00c      	b.n	800bde0 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800bdc6:	4a18      	ldr	r2, [pc, #96]	; (800be28 <lwip_socket+0xb4>)
 800bdc8:	2100      	movs	r1, #0
 800bdca:	2010      	movs	r0, #16
 800bdcc:	f7fd fe9c 	bl	8009b08 <netconn_new_with_proto_and_callback>
 800bdd0:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800bdd2:	e005      	b.n	800bde0 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800bdd4:	4b15      	ldr	r3, [pc, #84]	; (800be2c <lwip_socket+0xb8>)
 800bdd6:	2216      	movs	r2, #22
 800bdd8:	601a      	str	r2, [r3, #0]
      return -1;
 800bdda:	f04f 33ff 	mov.w	r3, #4294967295
 800bdde:	e01e      	b.n	800be1e <lwip_socket+0xaa>
  }

  if (!conn) {
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d105      	bne.n	800bdf2 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800bde6:	4b11      	ldr	r3, [pc, #68]	; (800be2c <lwip_socket+0xb8>)
 800bde8:	2269      	movs	r2, #105	; 0x69
 800bdea:	601a      	str	r2, [r3, #0]
    return -1;
 800bdec:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf0:	e015      	b.n	800be1e <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	6978      	ldr	r0, [r7, #20]
 800bdf6:	f7ff fd0b 	bl	800b810 <alloc_socket>
 800bdfa:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be02:	d108      	bne.n	800be16 <lwip_socket+0xa2>
    netconn_delete(conn);
 800be04:	6978      	ldr	r0, [r7, #20]
 800be06:	f7fd ff1d 	bl	8009c44 <netconn_delete>
    set_errno(ENFILE);
 800be0a:	4b08      	ldr	r3, [pc, #32]	; (800be2c <lwip_socket+0xb8>)
 800be0c:	2217      	movs	r2, #23
 800be0e:	601a      	str	r2, [r3, #0]
    return -1;
 800be10:	f04f 33ff 	mov.w	r3, #4294967295
 800be14:	e003      	b.n	800be1e <lwip_socket+0xaa>
  }
  conn->socket = i;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800be1c:	693b      	ldr	r3, [r7, #16]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3718      	adds	r7, #24
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	0800beb9 	.word	0x0800beb9
 800be2c:	20077bd4 	.word	0x20077bd4

0800be30 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
 800be3c:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800be3e:	2300      	movs	r3, #0
 800be40:	617b      	str	r3, [r7, #20]
 800be42:	e02c      	b.n	800be9e <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	695a      	ldr	r2, [r3, #20]
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	4413      	add	r3, r2
 800be4e:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	429a      	cmp	r2, r3
 800be58:	d11e      	bne.n	800be98 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d009      	beq.n	800be74 <lwip_poll_should_wake+0x44>
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800be66:	b29b      	uxth	r3, r3
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <lwip_poll_should_wake+0x44>
        return 1;
 800be70:	2301      	movs	r3, #1
 800be72:	e01a      	b.n	800beaa <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d009      	beq.n	800be8e <lwip_poll_should_wake+0x5e>
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800be80:	b29b      	uxth	r3, r3
 800be82:	f003 0302 	and.w	r3, r3, #2
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <lwip_poll_should_wake+0x5e>
        return 1;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e00d      	b.n	800beaa <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800be8e:	6a3b      	ldr	r3, [r7, #32]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800be94:	2301      	movs	r3, #1
 800be96:	e008      	b.n	800beaa <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	3301      	adds	r3, #1
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	699b      	ldr	r3, [r3, #24]
 800bea2:	697a      	ldr	r2, [r7, #20]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d3cd      	bcc.n	800be44 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	371c      	adds	r7, #28
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
	...

0800beb8 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08a      	sub	sp, #40	; 0x28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	460b      	mov	r3, r1
 800bec2:	70fb      	strb	r3, [r7, #3]
 800bec4:	4613      	mov	r3, r2
 800bec6:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	f000 80a4 	beq.w	800c018 <event_callback+0x160>
    s = conn->socket;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	2b00      	cmp	r3, #0
 800beda:	da18      	bge.n	800bf0e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800bedc:	f00b fe78 	bl	8017bd0 <sys_arch_protect>
 800bee0:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	699b      	ldr	r3, [r3, #24]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	da0b      	bge.n	800bf02 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800beea:	78fb      	ldrb	r3, [r7, #3]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d104      	bne.n	800befa <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	699b      	ldr	r3, [r3, #24]
 800bef4:	1e5a      	subs	r2, r3, #1
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800befa:	69f8      	ldr	r0, [r7, #28]
 800befc:	f00b fe76 	bl	8017bec <sys_arch_unprotect>
        return;
 800bf00:	e08d      	b.n	800c01e <event_callback+0x166>
      }
      s = conn->socket;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	699b      	ldr	r3, [r3, #24]
 800bf06:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800bf08:	69f8      	ldr	r0, [r7, #28]
 800bf0a:	f00b fe6f 	bl	8017bec <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800bf0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf10:	f7ff fc66 	bl	800b7e0 <get_socket>
 800bf14:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d07f      	beq.n	800c01c <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800bf20:	f00b fe56 	bl	8017bd0 <sys_arch_protect>
 800bf24:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800bf26:	78fb      	ldrb	r3, [r7, #3]
 800bf28:	2b04      	cmp	r3, #4
 800bf2a:	d83e      	bhi.n	800bfaa <event_callback+0xf2>
 800bf2c:	a201      	add	r2, pc, #4	; (adr r2, 800bf34 <event_callback+0x7c>)
 800bf2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf32:	bf00      	nop
 800bf34:	0800bf49 	.word	0x0800bf49
 800bf38:	0800bf6b 	.word	0x0800bf6b
 800bf3c:	0800bf83 	.word	0x0800bf83
 800bf40:	0800bf97 	.word	0x0800bf97
 800bf44:	0800bfa3 	.word	0x0800bfa3
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	3301      	adds	r3, #1
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	b21a      	sxth	r2, r3
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	dd2a      	ble.n	800bfba <event_callback+0x102>
        check_waiters = 0;
 800bf64:	2300      	movs	r3, #0
 800bf66:	623b      	str	r3, [r7, #32]
      }
      break;
 800bf68:	e027      	b.n	800bfba <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	3b01      	subs	r3, #1
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	b21a      	sxth	r2, r3
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	623b      	str	r3, [r7, #32]
      break;
 800bf80:	e01c      	b.n	800bfbc <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	895b      	ldrh	r3, [r3, #10]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d001      	beq.n	800bf8e <event_callback+0xd6>
        check_waiters = 0;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	2201      	movs	r2, #1
 800bf92:	815a      	strh	r2, [r3, #10]
      break;
 800bf94:	e012      	b.n	800bfbc <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	623b      	str	r3, [r7, #32]
      break;
 800bfa0:	e00c      	b.n	800bfbc <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	819a      	strh	r2, [r3, #12]
      break;
 800bfa8:	e008      	b.n	800bfbc <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800bfaa:	4b1e      	ldr	r3, [pc, #120]	; (800c024 <event_callback+0x16c>)
 800bfac:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800bfb0:	491d      	ldr	r1, [pc, #116]	; (800c028 <event_callback+0x170>)
 800bfb2:	481e      	ldr	r0, [pc, #120]	; (800c02c <event_callback+0x174>)
 800bfb4:	f00c fdec 	bl	8018b90 <iprintf>
      break;
 800bfb8:	e000      	b.n	800bfbc <event_callback+0x104>
      break;
 800bfba:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	7b9b      	ldrb	r3, [r3, #14]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d025      	beq.n	800c010 <event_callback+0x158>
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d022      	beq.n	800c010 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	bfcc      	ite	gt
 800bfd4:	2301      	movgt	r3, #1
 800bfd6:	2300      	movle	r3, #0
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	895b      	ldrh	r3, [r3, #10]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	bf14      	ite	ne
 800bfe4:	2301      	movne	r3, #1
 800bfe6:	2300      	moveq	r3, #0
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	899b      	ldrh	r3, [r3, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	bf14      	ite	ne
 800bff4:	2301      	movne	r3, #1
 800bff6:	2300      	moveq	r3, #0
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800bffc:	69f8      	ldr	r0, [r7, #28]
 800bffe:	f00b fdf5 	bl	8017bec <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	6979      	ldr	r1, [r7, #20]
 800c008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c00a:	f000 f811 	bl	800c030 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800c00e:	e006      	b.n	800c01e <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800c010:	69f8      	ldr	r0, [r7, #28]
 800c012:	f00b fdeb 	bl	8017bec <sys_arch_unprotect>
 800c016:	e002      	b.n	800c01e <event_callback+0x166>
    return;
 800c018:	bf00      	nop
 800c01a:	e000      	b.n	800c01e <event_callback+0x166>
      return;
 800c01c:	bf00      	nop
  }
  done_socket(sock);
}
 800c01e:	3728      	adds	r7, #40	; 0x28
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	0801d314 	.word	0x0801d314
 800c028:	0801d690 	.word	0x0801d690
 800c02c:	0801d368 	.word	0x0801d368

0800c030 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b088      	sub	sp, #32
 800c034:	af02      	add	r7, sp, #8
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
 800c03c:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c03e:	4b42      	ldr	r3, [pc, #264]	; (800c148 <select_check_waiters+0x118>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	617b      	str	r3, [r7, #20]
 800c044:	e078      	b.n	800c138 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	69db      	ldr	r3, [r3, #28]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d171      	bne.n	800c132 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	695b      	ldr	r3, [r3, #20]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d009      	beq.n	800c06e <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	68f9      	ldr	r1, [r7, #12]
 800c064:	6978      	ldr	r0, [r7, #20]
 800c066:	f7ff fee3 	bl	800be30 <lwip_poll_should_wake>
 800c06a:	6138      	str	r0, [r7, #16]
 800c06c:	e056      	b.n	800c11c <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d017      	beq.n	800c0a4 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d013      	beq.n	800c0a4 <select_check_waiters+0x74>
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	689a      	ldr	r2, [r3, #8]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2b00      	cmp	r3, #0
 800c084:	da00      	bge.n	800c088 <select_check_waiters+0x58>
 800c086:	331f      	adds	r3, #31
 800c088:	115b      	asrs	r3, r3, #5
 800c08a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f003 031f 	and.w	r3, r3, #31
 800c094:	fa22 f303 	lsr.w	r3, r2, r3
 800c098:	f003 0301 	and.w	r3, r3, #1
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d001      	beq.n	800c0a4 <select_check_waiters+0x74>
            do_signal = 1;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d01a      	beq.n	800c0e0 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d117      	bne.n	800c0e0 <select_check_waiters+0xb0>
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d013      	beq.n	800c0e0 <select_check_waiters+0xb0>
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	68da      	ldr	r2, [r3, #12]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	da00      	bge.n	800c0c4 <select_check_waiters+0x94>
 800c0c2:	331f      	adds	r3, #31
 800c0c4:	115b      	asrs	r3, r3, #5
 800c0c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f003 031f 	and.w	r3, r3, #31
 800c0d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0d4:	f003 0301 	and.w	r3, r3, #1
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d001      	beq.n	800c0e0 <select_check_waiters+0xb0>
            do_signal = 1;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d01a      	beq.n	800c11c <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d117      	bne.n	800c11c <select_check_waiters+0xec>
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d013      	beq.n	800c11c <select_check_waiters+0xec>
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	691a      	ldr	r2, [r3, #16]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	da00      	bge.n	800c100 <select_check_waiters+0xd0>
 800c0fe:	331f      	adds	r3, #31
 800c100:	115b      	asrs	r3, r3, #5
 800c102:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f003 031f 	and.w	r3, r3, #31
 800c10c:	fa22 f303 	lsr.w	r3, r2, r3
 800c110:	f003 0301 	and.w	r3, r3, #1
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <select_check_waiters+0xec>
            do_signal = 1;
 800c118:	2301      	movs	r3, #1
 800c11a:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d007      	beq.n	800c132 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	2201      	movs	r2, #1
 800c126:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	3320      	adds	r3, #32
 800c12c:	4618      	mov	r0, r3
 800c12e:	f00b fcab 	bl	8017a88 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	617b      	str	r3, [r7, #20]
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d183      	bne.n	800c046 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800c13e:	bf00      	nop
 800c140:	bf00      	nop
 800c142:	3718      	adds	r7, #24
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	20009494 	.word	0x20009494

0800c14c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c156:	f008 f9cf 	bl	80144f8 <sys_timeouts_sleeptime>
 800c15a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c162:	d10b      	bne.n	800c17c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c164:	4813      	ldr	r0, [pc, #76]	; (800c1b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800c166:	f00b fd00 	bl	8017b6a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c16a:	2200      	movs	r2, #0
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f00b fbb8 	bl	80178e4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c174:	480f      	ldr	r0, [pc, #60]	; (800c1b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800c176:	f00b fce9 	bl	8017b4c <sys_mutex_lock>
    return;
 800c17a:	e018      	b.n	800c1ae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d102      	bne.n	800c188 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c182:	f008 f97f 	bl	8014484 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c186:	e7e6      	b.n	800c156 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c188:	480a      	ldr	r0, [pc, #40]	; (800c1b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800c18a:	f00b fcee 	bl	8017b6a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f00b fba6 	bl	80178e4 <sys_arch_mbox_fetch>
 800c198:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c19a:	4806      	ldr	r0, [pc, #24]	; (800c1b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800c19c:	f00b fcd6 	bl	8017b4c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a6:	d102      	bne.n	800c1ae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c1a8:	f008 f96c 	bl	8014484 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c1ac:	e7d3      	b.n	800c156 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	200094a4 	.word	0x200094a4

0800c1b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c1c0:	4810      	ldr	r0, [pc, #64]	; (800c204 <tcpip_thread+0x4c>)
 800c1c2:	f00b fcc3 	bl	8017b4c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c1c6:	4b10      	ldr	r3, [pc, #64]	; (800c208 <tcpip_thread+0x50>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d005      	beq.n	800c1da <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c1ce:	4b0e      	ldr	r3, [pc, #56]	; (800c208 <tcpip_thread+0x50>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a0e      	ldr	r2, [pc, #56]	; (800c20c <tcpip_thread+0x54>)
 800c1d4:	6812      	ldr	r2, [r2, #0]
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c1da:	f107 030c 	add.w	r3, r7, #12
 800c1de:	4619      	mov	r1, r3
 800c1e0:	480b      	ldr	r0, [pc, #44]	; (800c210 <tcpip_thread+0x58>)
 800c1e2:	f7ff ffb3 	bl	800c14c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d106      	bne.n	800c1fa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c1ec:	4b09      	ldr	r3, [pc, #36]	; (800c214 <tcpip_thread+0x5c>)
 800c1ee:	2291      	movs	r2, #145	; 0x91
 800c1f0:	4909      	ldr	r1, [pc, #36]	; (800c218 <tcpip_thread+0x60>)
 800c1f2:	480a      	ldr	r0, [pc, #40]	; (800c21c <tcpip_thread+0x64>)
 800c1f4:	f00c fccc 	bl	8018b90 <iprintf>
      continue;
 800c1f8:	e003      	b.n	800c202 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 f80f 	bl	800c220 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c202:	e7ea      	b.n	800c1da <tcpip_thread+0x22>
 800c204:	200094a4 	.word	0x200094a4
 800c208:	20009498 	.word	0x20009498
 800c20c:	2000949c 	.word	0x2000949c
 800c210:	200094a0 	.word	0x200094a0
 800c214:	0801d6e4 	.word	0x0801d6e4
 800c218:	0801d714 	.word	0x0801d714
 800c21c:	0801d734 	.word	0x0801d734

0800c220 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d026      	beq.n	800c27e <tcpip_thread_handle_msg+0x5e>
 800c230:	2b02      	cmp	r3, #2
 800c232:	dc2b      	bgt.n	800c28c <tcpip_thread_handle_msg+0x6c>
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <tcpip_thread_handle_msg+0x1e>
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d015      	beq.n	800c268 <tcpip_thread_handle_msg+0x48>
 800c23c:	e026      	b.n	800c28c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	6850      	ldr	r0, [r2, #4]
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	6892      	ldr	r2, [r2, #8]
 800c24a:	4611      	mov	r1, r2
 800c24c:	4798      	blx	r3
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d004      	beq.n	800c25e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	4618      	mov	r0, r3
 800c25a:	f001 fd21 	bl	800dca0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c25e:	6879      	ldr	r1, [r7, #4]
 800c260:	2009      	movs	r0, #9
 800c262:	f000 fe79 	bl	800cf58 <memp_free>
      break;
 800c266:	e018      	b.n	800c29a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	6892      	ldr	r2, [r2, #8]
 800c270:	4610      	mov	r0, r2
 800c272:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c274:	6879      	ldr	r1, [r7, #4]
 800c276:	2008      	movs	r0, #8
 800c278:	f000 fe6e 	bl	800cf58 <memp_free>
      break;
 800c27c:	e00d      	b.n	800c29a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	6892      	ldr	r2, [r2, #8]
 800c286:	4610      	mov	r0, r2
 800c288:	4798      	blx	r3
      break;
 800c28a:	e006      	b.n	800c29a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c28c:	4b05      	ldr	r3, [pc, #20]	; (800c2a4 <tcpip_thread_handle_msg+0x84>)
 800c28e:	22cf      	movs	r2, #207	; 0xcf
 800c290:	4905      	ldr	r1, [pc, #20]	; (800c2a8 <tcpip_thread_handle_msg+0x88>)
 800c292:	4806      	ldr	r0, [pc, #24]	; (800c2ac <tcpip_thread_handle_msg+0x8c>)
 800c294:	f00c fc7c 	bl	8018b90 <iprintf>
      break;
 800c298:	bf00      	nop
  }
}
 800c29a:	bf00      	nop
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	0801d6e4 	.word	0x0801d6e4
 800c2a8:	0801d714 	.word	0x0801d714
 800c2ac:	0801d734 	.word	0x0801d734

0800c2b0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c2bc:	481a      	ldr	r0, [pc, #104]	; (800c328 <tcpip_inpkt+0x78>)
 800c2be:	f00b fb6c 	bl	801799a <sys_mbox_valid>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d105      	bne.n	800c2d4 <tcpip_inpkt+0x24>
 800c2c8:	4b18      	ldr	r3, [pc, #96]	; (800c32c <tcpip_inpkt+0x7c>)
 800c2ca:	22fc      	movs	r2, #252	; 0xfc
 800c2cc:	4918      	ldr	r1, [pc, #96]	; (800c330 <tcpip_inpkt+0x80>)
 800c2ce:	4819      	ldr	r0, [pc, #100]	; (800c334 <tcpip_inpkt+0x84>)
 800c2d0:	f00c fc5e 	bl	8018b90 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c2d4:	2009      	movs	r0, #9
 800c2d6:	f000 fdc9 	bl	800ce6c <memp_malloc>
 800c2da:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d102      	bne.n	800c2e8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c2e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2e6:	e01a      	b.n	800c31e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c300:	6979      	ldr	r1, [r7, #20]
 800c302:	4809      	ldr	r0, [pc, #36]	; (800c328 <tcpip_inpkt+0x78>)
 800c304:	f00b fad4 	bl	80178b0 <sys_mbox_trypost>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d006      	beq.n	800c31c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c30e:	6979      	ldr	r1, [r7, #20]
 800c310:	2009      	movs	r0, #9
 800c312:	f000 fe21 	bl	800cf58 <memp_free>
    return ERR_MEM;
 800c316:	f04f 33ff 	mov.w	r3, #4294967295
 800c31a:	e000      	b.n	800c31e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c31c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3718      	adds	r7, #24
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	200094a0 	.word	0x200094a0
 800c32c:	0801d6e4 	.word	0x0801d6e4
 800c330:	0801d75c 	.word	0x0801d75c
 800c334:	0801d734 	.word	0x0801d734

0800c338 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c348:	f003 0318 	and.w	r3, r3, #24
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d006      	beq.n	800c35e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c350:	4a08      	ldr	r2, [pc, #32]	; (800c374 <tcpip_input+0x3c>)
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff ffab 	bl	800c2b0 <tcpip_inpkt>
 800c35a:	4603      	mov	r3, r0
 800c35c:	e005      	b.n	800c36a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c35e:	4a06      	ldr	r2, [pc, #24]	; (800c378 <tcpip_input+0x40>)
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7ff ffa4 	bl	800c2b0 <tcpip_inpkt>
 800c368:	4603      	mov	r3, r0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	0801769d 	.word	0x0801769d
 800c378:	08016351 	.word	0x08016351

0800c37c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c386:	4819      	ldr	r0, [pc, #100]	; (800c3ec <tcpip_try_callback+0x70>)
 800c388:	f00b fb07 	bl	801799a <sys_mbox_valid>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d106      	bne.n	800c3a0 <tcpip_try_callback+0x24>
 800c392:	4b17      	ldr	r3, [pc, #92]	; (800c3f0 <tcpip_try_callback+0x74>)
 800c394:	f240 125d 	movw	r2, #349	; 0x15d
 800c398:	4916      	ldr	r1, [pc, #88]	; (800c3f4 <tcpip_try_callback+0x78>)
 800c39a:	4817      	ldr	r0, [pc, #92]	; (800c3f8 <tcpip_try_callback+0x7c>)
 800c39c:	f00c fbf8 	bl	8018b90 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c3a0:	2008      	movs	r0, #8
 800c3a2:	f000 fd63 	bl	800ce6c <memp_malloc>
 800c3a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d102      	bne.n	800c3b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b2:	e017      	b.n	800c3e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c3c6:	68f9      	ldr	r1, [r7, #12]
 800c3c8:	4808      	ldr	r0, [pc, #32]	; (800c3ec <tcpip_try_callback+0x70>)
 800c3ca:	f00b fa71 	bl	80178b0 <sys_mbox_trypost>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d006      	beq.n	800c3e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c3d4:	68f9      	ldr	r1, [r7, #12]
 800c3d6:	2008      	movs	r0, #8
 800c3d8:	f000 fdbe 	bl	800cf58 <memp_free>
    return ERR_MEM;
 800c3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e0:	e000      	b.n	800c3e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	200094a0 	.word	0x200094a0
 800c3f0:	0801d6e4 	.word	0x0801d6e4
 800c3f4:	0801d75c 	.word	0x0801d75c
 800c3f8:	0801d734 	.word	0x0801d734

0800c3fc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c408:	4806      	ldr	r0, [pc, #24]	; (800c424 <tcpip_send_msg_wait_sem+0x28>)
 800c40a:	f00b fb9f 	bl	8017b4c <sys_mutex_lock>
  fn(apimsg);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	68b8      	ldr	r0, [r7, #8]
 800c412:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c414:	4803      	ldr	r0, [pc, #12]	; (800c424 <tcpip_send_msg_wait_sem+0x28>)
 800c416:	f00b fba8 	bl	8017b6a <sys_mutex_unlock>
  return ERR_OK;
 800c41a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	200094a4 	.word	0x200094a4

0800c428 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af02      	add	r7, sp, #8
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c432:	f000 f871 	bl	800c518 <lwip_init>

  tcpip_init_done = initfunc;
 800c436:	4a17      	ldr	r2, [pc, #92]	; (800c494 <tcpip_init+0x6c>)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c43c:	4a16      	ldr	r2, [pc, #88]	; (800c498 <tcpip_init+0x70>)
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c446:	4815      	ldr	r0, [pc, #84]	; (800c49c <tcpip_init+0x74>)
 800c448:	f00b f9fe 	bl	8017848 <sys_mbox_new>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d006      	beq.n	800c460 <tcpip_init+0x38>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c452:	4b13      	ldr	r3, [pc, #76]	; (800c4a0 <tcpip_init+0x78>)
 800c454:	f240 2261 	movw	r2, #609	; 0x261
 800c458:	4912      	ldr	r1, [pc, #72]	; (800c4a4 <tcpip_init+0x7c>)
 800c45a:	4813      	ldr	r0, [pc, #76]	; (800c4a8 <tcpip_init+0x80>)
 800c45c:	f00c fb98 	bl	8018b90 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c460:	4812      	ldr	r0, [pc, #72]	; (800c4ac <tcpip_init+0x84>)
 800c462:	f00b fb57 	bl	8017b14 <sys_mutex_new>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d006      	beq.n	800c47a <tcpip_init+0x52>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c46c:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <tcpip_init+0x78>)
 800c46e:	f240 2265 	movw	r2, #613	; 0x265
 800c472:	490f      	ldr	r1, [pc, #60]	; (800c4b0 <tcpip_init+0x88>)
 800c474:	480c      	ldr	r0, [pc, #48]	; (800c4a8 <tcpip_init+0x80>)
 800c476:	f00c fb8b 	bl	8018b90 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c47a:	2300      	movs	r3, #0
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c482:	2200      	movs	r2, #0
 800c484:	490b      	ldr	r1, [pc, #44]	; (800c4b4 <tcpip_init+0x8c>)
 800c486:	480c      	ldr	r0, [pc, #48]	; (800c4b8 <tcpip_init+0x90>)
 800c488:	f00b fb7c 	bl	8017b84 <sys_thread_new>
}
 800c48c:	bf00      	nop
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	20009498 	.word	0x20009498
 800c498:	2000949c 	.word	0x2000949c
 800c49c:	200094a0 	.word	0x200094a0
 800c4a0:	0801d6e4 	.word	0x0801d6e4
 800c4a4:	0801d76c 	.word	0x0801d76c
 800c4a8:	0801d734 	.word	0x0801d734
 800c4ac:	200094a4 	.word	0x200094a4
 800c4b0:	0801d790 	.word	0x0801d790
 800c4b4:	0800c1b9 	.word	0x0800c1b9
 800c4b8:	0801d7b4 	.word	0x0801d7b4

0800c4bc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c4c6:	88fb      	ldrh	r3, [r7, #6]
 800c4c8:	021b      	lsls	r3, r3, #8
 800c4ca:	b21a      	sxth	r2, r3
 800c4cc:	88fb      	ldrh	r3, [r7, #6]
 800c4ce:	0a1b      	lsrs	r3, r3, #8
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	b21b      	sxth	r3, r3
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	b21b      	sxth	r3, r3
 800c4d8:	b29b      	uxth	r3, r3
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c4e6:	b480      	push	{r7}
 800c4e8:	b083      	sub	sp, #12
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	061a      	lsls	r2, r3, #24
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	021b      	lsls	r3, r3, #8
 800c4f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4fa:	431a      	orrs	r2, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	0a1b      	lsrs	r3, r3, #8
 800c500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c504:	431a      	orrs	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	0e1b      	lsrs	r3, r3, #24
 800c50a:	4313      	orrs	r3, r2
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	370c      	adds	r7, #12
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c51e:	2300      	movs	r3, #0
 800c520:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c522:	f00b fae9 	bl	8017af8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c526:	f000 f8d5 	bl	800c6d4 <mem_init>
  memp_init();
 800c52a:	f000 fc31 	bl	800cd90 <memp_init>
  pbuf_init();
  netif_init();
 800c52e:	f000 fd3d 	bl	800cfac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c532:	f008 f819 	bl	8014568 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c536:	f001 fe5d 	bl	800e1f4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c53a:	f007 ff5b 	bl	80143f4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
	...

0800c548 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	4603      	mov	r3, r0
 800c550:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c552:	4b05      	ldr	r3, [pc, #20]	; (800c568 <ptr_to_mem+0x20>)
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	88fb      	ldrh	r3, [r7, #6]
 800c558:	4413      	add	r3, r2
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop
 800c568:	20009b14 	.word	0x20009b14

0800c56c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c574:	4b05      	ldr	r3, [pc, #20]	; (800c58c <mem_to_ptr+0x20>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	b29b      	uxth	r3, r3
}
 800c57e:	4618      	mov	r0, r3
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	20009b14 	.word	0x20009b14

0800c590 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c590:	b590      	push	{r4, r7, lr}
 800c592:	b085      	sub	sp, #20
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c598:	4b45      	ldr	r3, [pc, #276]	; (800c6b0 <plug_holes+0x120>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d206      	bcs.n	800c5b0 <plug_holes+0x20>
 800c5a2:	4b44      	ldr	r3, [pc, #272]	; (800c6b4 <plug_holes+0x124>)
 800c5a4:	f240 12df 	movw	r2, #479	; 0x1df
 800c5a8:	4943      	ldr	r1, [pc, #268]	; (800c6b8 <plug_holes+0x128>)
 800c5aa:	4844      	ldr	r0, [pc, #272]	; (800c6bc <plug_holes+0x12c>)
 800c5ac:	f00c faf0 	bl	8018b90 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c5b0:	4b43      	ldr	r3, [pc, #268]	; (800c6c0 <plug_holes+0x130>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d306      	bcc.n	800c5c8 <plug_holes+0x38>
 800c5ba:	4b3e      	ldr	r3, [pc, #248]	; (800c6b4 <plug_holes+0x124>)
 800c5bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c5c0:	4940      	ldr	r1, [pc, #256]	; (800c6c4 <plug_holes+0x134>)
 800c5c2:	483e      	ldr	r0, [pc, #248]	; (800c6bc <plug_holes+0x12c>)
 800c5c4:	f00c fae4 	bl	8018b90 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	791b      	ldrb	r3, [r3, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d006      	beq.n	800c5de <plug_holes+0x4e>
 800c5d0:	4b38      	ldr	r3, [pc, #224]	; (800c6b4 <plug_holes+0x124>)
 800c5d2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c5d6:	493c      	ldr	r1, [pc, #240]	; (800c6c8 <plug_holes+0x138>)
 800c5d8:	4838      	ldr	r0, [pc, #224]	; (800c6bc <plug_holes+0x12c>)
 800c5da:	f00c fad9 	bl	8018b90 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5e6:	d906      	bls.n	800c5f6 <plug_holes+0x66>
 800c5e8:	4b32      	ldr	r3, [pc, #200]	; (800c6b4 <plug_holes+0x124>)
 800c5ea:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c5ee:	4937      	ldr	r1, [pc, #220]	; (800c6cc <plug_holes+0x13c>)
 800c5f0:	4832      	ldr	r0, [pc, #200]	; (800c6bc <plug_holes+0x12c>)
 800c5f2:	f00c facd 	bl	8018b90 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	881b      	ldrh	r3, [r3, #0]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7ff ffa4 	bl	800c548 <ptr_to_mem>
 800c600:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	429a      	cmp	r2, r3
 800c608:	d024      	beq.n	800c654 <plug_holes+0xc4>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	791b      	ldrb	r3, [r3, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d120      	bne.n	800c654 <plug_holes+0xc4>
 800c612:	4b2b      	ldr	r3, [pc, #172]	; (800c6c0 <plug_holes+0x130>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d01b      	beq.n	800c654 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c61c:	4b2c      	ldr	r3, [pc, #176]	; (800c6d0 <plug_holes+0x140>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	429a      	cmp	r2, r3
 800c624:	d102      	bne.n	800c62c <plug_holes+0x9c>
      lfree = mem;
 800c626:	4a2a      	ldr	r2, [pc, #168]	; (800c6d0 <plug_holes+0x140>)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	881a      	ldrh	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	881b      	ldrh	r3, [r3, #0]
 800c638:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c63c:	d00a      	beq.n	800c654 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	881b      	ldrh	r3, [r3, #0]
 800c642:	4618      	mov	r0, r3
 800c644:	f7ff ff80 	bl	800c548 <ptr_to_mem>
 800c648:	4604      	mov	r4, r0
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff ff8e 	bl	800c56c <mem_to_ptr>
 800c650:	4603      	mov	r3, r0
 800c652:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	885b      	ldrh	r3, [r3, #2]
 800c658:	4618      	mov	r0, r3
 800c65a:	f7ff ff75 	bl	800c548 <ptr_to_mem>
 800c65e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c660:	68ba      	ldr	r2, [r7, #8]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	429a      	cmp	r2, r3
 800c666:	d01f      	beq.n	800c6a8 <plug_holes+0x118>
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	791b      	ldrb	r3, [r3, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d11b      	bne.n	800c6a8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c670:	4b17      	ldr	r3, [pc, #92]	; (800c6d0 <plug_holes+0x140>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	429a      	cmp	r2, r3
 800c678:	d102      	bne.n	800c680 <plug_holes+0xf0>
      lfree = pmem;
 800c67a:	4a15      	ldr	r2, [pc, #84]	; (800c6d0 <plug_holes+0x140>)
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	881a      	ldrh	r2, [r3, #0]
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c690:	d00a      	beq.n	800c6a8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	4618      	mov	r0, r3
 800c698:	f7ff ff56 	bl	800c548 <ptr_to_mem>
 800c69c:	4604      	mov	r4, r0
 800c69e:	68b8      	ldr	r0, [r7, #8]
 800c6a0:	f7ff ff64 	bl	800c56c <mem_to_ptr>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c6a8:	bf00      	nop
 800c6aa:	3714      	adds	r7, #20
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd90      	pop	{r4, r7, pc}
 800c6b0:	20009b14 	.word	0x20009b14
 800c6b4:	0801d7c4 	.word	0x0801d7c4
 800c6b8:	0801d7f4 	.word	0x0801d7f4
 800c6bc:	0801d80c 	.word	0x0801d80c
 800c6c0:	20009b18 	.word	0x20009b18
 800c6c4:	0801d834 	.word	0x0801d834
 800c6c8:	0801d850 	.word	0x0801d850
 800c6cc:	0801d86c 	.word	0x0801d86c
 800c6d0:	20009b20 	.word	0x20009b20

0800c6d4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c6da:	4b1f      	ldr	r3, [pc, #124]	; (800c758 <mem_init+0x84>)
 800c6dc:	3303      	adds	r3, #3
 800c6de:	f023 0303 	bic.w	r3, r3, #3
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4b1d      	ldr	r3, [pc, #116]	; (800c75c <mem_init+0x88>)
 800c6e6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c6e8:	4b1c      	ldr	r3, [pc, #112]	; (800c75c <mem_init+0x88>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c6f4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c702:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c706:	f7ff ff1f 	bl	800c548 <ptr_to_mem>
 800c70a:	4603      	mov	r3, r0
 800c70c:	4a14      	ldr	r2, [pc, #80]	; (800c760 <mem_init+0x8c>)
 800c70e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c710:	4b13      	ldr	r3, [pc, #76]	; (800c760 <mem_init+0x8c>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2201      	movs	r2, #1
 800c716:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c718:	4b11      	ldr	r3, [pc, #68]	; (800c760 <mem_init+0x8c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c720:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c722:	4b0f      	ldr	r3, [pc, #60]	; (800c760 <mem_init+0x8c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c72a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c72c:	4b0b      	ldr	r3, [pc, #44]	; (800c75c <mem_init+0x88>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a0c      	ldr	r2, [pc, #48]	; (800c764 <mem_init+0x90>)
 800c732:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c734:	480c      	ldr	r0, [pc, #48]	; (800c768 <mem_init+0x94>)
 800c736:	f00b f9ed 	bl	8017b14 <sys_mutex_new>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d006      	beq.n	800c74e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c740:	4b0a      	ldr	r3, [pc, #40]	; (800c76c <mem_init+0x98>)
 800c742:	f240 221f 	movw	r2, #543	; 0x21f
 800c746:	490a      	ldr	r1, [pc, #40]	; (800c770 <mem_init+0x9c>)
 800c748:	480a      	ldr	r0, [pc, #40]	; (800c774 <mem_init+0xa0>)
 800c74a:	f00c fa21 	bl	8018b90 <iprintf>
  }
}
 800c74e:	bf00      	nop
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	200094c0 	.word	0x200094c0
 800c75c:	20009b14 	.word	0x20009b14
 800c760:	20009b18 	.word	0x20009b18
 800c764:	20009b20 	.word	0x20009b20
 800c768:	20009b1c 	.word	0x20009b1c
 800c76c:	0801d7c4 	.word	0x0801d7c4
 800c770:	0801d898 	.word	0x0801d898
 800c774:	0801d80c 	.word	0x0801d80c

0800c778 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff fef3 	bl	800c56c <mem_to_ptr>
 800c786:	4603      	mov	r3, r0
 800c788:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	881b      	ldrh	r3, [r3, #0]
 800c78e:	4618      	mov	r0, r3
 800c790:	f7ff feda 	bl	800c548 <ptr_to_mem>
 800c794:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	885b      	ldrh	r3, [r3, #2]
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff fed4 	bl	800c548 <ptr_to_mem>
 800c7a0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7aa:	d818      	bhi.n	800c7de <mem_link_valid+0x66>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	885b      	ldrh	r3, [r3, #2]
 800c7b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7b4:	d813      	bhi.n	800c7de <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c7ba:	8afa      	ldrh	r2, [r7, #22]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d004      	beq.n	800c7ca <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	881b      	ldrh	r3, [r3, #0]
 800c7c4:	8afa      	ldrh	r2, [r7, #22]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d109      	bne.n	800c7de <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c7ca:	4b08      	ldr	r3, [pc, #32]	; (800c7ec <mem_link_valid+0x74>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d006      	beq.n	800c7e2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	885b      	ldrh	r3, [r3, #2]
 800c7d8:	8afa      	ldrh	r2, [r7, #22]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d001      	beq.n	800c7e2 <mem_link_valid+0x6a>
    return 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	e000      	b.n	800c7e4 <mem_link_valid+0x6c>
  }
  return 1;
 800c7e2:	2301      	movs	r3, #1
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	20009b18 	.word	0x20009b18

0800c7f0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b088      	sub	sp, #32
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d070      	beq.n	800c8e0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f003 0303 	and.w	r3, r3, #3
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00d      	beq.n	800c824 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c808:	4b37      	ldr	r3, [pc, #220]	; (800c8e8 <mem_free+0xf8>)
 800c80a:	f240 2273 	movw	r2, #627	; 0x273
 800c80e:	4937      	ldr	r1, [pc, #220]	; (800c8ec <mem_free+0xfc>)
 800c810:	4837      	ldr	r0, [pc, #220]	; (800c8f0 <mem_free+0x100>)
 800c812:	f00c f9bd 	bl	8018b90 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c816:	f00b f9db 	bl	8017bd0 <sys_arch_protect>
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f00b f9e5 	bl	8017bec <sys_arch_unprotect>
    return;
 800c822:	e05e      	b.n	800c8e2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	3b08      	subs	r3, #8
 800c828:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c82a:	4b32      	ldr	r3, [pc, #200]	; (800c8f4 <mem_free+0x104>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	429a      	cmp	r2, r3
 800c832:	d306      	bcc.n	800c842 <mem_free+0x52>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f103 020c 	add.w	r2, r3, #12
 800c83a:	4b2f      	ldr	r3, [pc, #188]	; (800c8f8 <mem_free+0x108>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d90d      	bls.n	800c85e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c842:	4b29      	ldr	r3, [pc, #164]	; (800c8e8 <mem_free+0xf8>)
 800c844:	f240 227f 	movw	r2, #639	; 0x27f
 800c848:	492c      	ldr	r1, [pc, #176]	; (800c8fc <mem_free+0x10c>)
 800c84a:	4829      	ldr	r0, [pc, #164]	; (800c8f0 <mem_free+0x100>)
 800c84c:	f00c f9a0 	bl	8018b90 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c850:	f00b f9be 	bl	8017bd0 <sys_arch_protect>
 800c854:	6138      	str	r0, [r7, #16]
 800c856:	6938      	ldr	r0, [r7, #16]
 800c858:	f00b f9c8 	bl	8017bec <sys_arch_unprotect>
    return;
 800c85c:	e041      	b.n	800c8e2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c85e:	4828      	ldr	r0, [pc, #160]	; (800c900 <mem_free+0x110>)
 800c860:	f00b f974 	bl	8017b4c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	791b      	ldrb	r3, [r3, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d110      	bne.n	800c88e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c86c:	4b1e      	ldr	r3, [pc, #120]	; (800c8e8 <mem_free+0xf8>)
 800c86e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c872:	4924      	ldr	r1, [pc, #144]	; (800c904 <mem_free+0x114>)
 800c874:	481e      	ldr	r0, [pc, #120]	; (800c8f0 <mem_free+0x100>)
 800c876:	f00c f98b 	bl	8018b90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c87a:	4821      	ldr	r0, [pc, #132]	; (800c900 <mem_free+0x110>)
 800c87c:	f00b f975 	bl	8017b6a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c880:	f00b f9a6 	bl	8017bd0 <sys_arch_protect>
 800c884:	6178      	str	r0, [r7, #20]
 800c886:	6978      	ldr	r0, [r7, #20]
 800c888:	f00b f9b0 	bl	8017bec <sys_arch_unprotect>
    return;
 800c88c:	e029      	b.n	800c8e2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c88e:	69f8      	ldr	r0, [r7, #28]
 800c890:	f7ff ff72 	bl	800c778 <mem_link_valid>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d110      	bne.n	800c8bc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c89a:	4b13      	ldr	r3, [pc, #76]	; (800c8e8 <mem_free+0xf8>)
 800c89c:	f240 2295 	movw	r2, #661	; 0x295
 800c8a0:	4919      	ldr	r1, [pc, #100]	; (800c908 <mem_free+0x118>)
 800c8a2:	4813      	ldr	r0, [pc, #76]	; (800c8f0 <mem_free+0x100>)
 800c8a4:	f00c f974 	bl	8018b90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c8a8:	4815      	ldr	r0, [pc, #84]	; (800c900 <mem_free+0x110>)
 800c8aa:	f00b f95e 	bl	8017b6a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c8ae:	f00b f98f 	bl	8017bd0 <sys_arch_protect>
 800c8b2:	61b8      	str	r0, [r7, #24]
 800c8b4:	69b8      	ldr	r0, [r7, #24]
 800c8b6:	f00b f999 	bl	8017bec <sys_arch_unprotect>
    return;
 800c8ba:	e012      	b.n	800c8e2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c8c2:	4b12      	ldr	r3, [pc, #72]	; (800c90c <mem_free+0x11c>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	69fa      	ldr	r2, [r7, #28]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d202      	bcs.n	800c8d2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c8cc:	4a0f      	ldr	r2, [pc, #60]	; (800c90c <mem_free+0x11c>)
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c8d2:	69f8      	ldr	r0, [r7, #28]
 800c8d4:	f7ff fe5c 	bl	800c590 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c8d8:	4809      	ldr	r0, [pc, #36]	; (800c900 <mem_free+0x110>)
 800c8da:	f00b f946 	bl	8017b6a <sys_mutex_unlock>
 800c8de:	e000      	b.n	800c8e2 <mem_free+0xf2>
    return;
 800c8e0:	bf00      	nop
}
 800c8e2:	3720      	adds	r7, #32
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	0801d7c4 	.word	0x0801d7c4
 800c8ec:	0801d8b4 	.word	0x0801d8b4
 800c8f0:	0801d80c 	.word	0x0801d80c
 800c8f4:	20009b14 	.word	0x20009b14
 800c8f8:	20009b18 	.word	0x20009b18
 800c8fc:	0801d8d8 	.word	0x0801d8d8
 800c900:	20009b1c 	.word	0x20009b1c
 800c904:	0801d8f4 	.word	0x0801d8f4
 800c908:	0801d91c 	.word	0x0801d91c
 800c90c:	20009b20 	.word	0x20009b20

0800c910 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	460b      	mov	r3, r1
 800c91a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c91c:	887b      	ldrh	r3, [r7, #2]
 800c91e:	3303      	adds	r3, #3
 800c920:	b29b      	uxth	r3, r3
 800c922:	f023 0303 	bic.w	r3, r3, #3
 800c926:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c928:	8bfb      	ldrh	r3, [r7, #30]
 800c92a:	2b0b      	cmp	r3, #11
 800c92c:	d801      	bhi.n	800c932 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c92e:	230c      	movs	r3, #12
 800c930:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c932:	8bfb      	ldrh	r3, [r7, #30]
 800c934:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c938:	d803      	bhi.n	800c942 <mem_trim+0x32>
 800c93a:	8bfa      	ldrh	r2, [r7, #30]
 800c93c:	887b      	ldrh	r3, [r7, #2]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d201      	bcs.n	800c946 <mem_trim+0x36>
    return NULL;
 800c942:	2300      	movs	r3, #0
 800c944:	e0d8      	b.n	800caf8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c946:	4b6e      	ldr	r3, [pc, #440]	; (800cb00 <mem_trim+0x1f0>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d304      	bcc.n	800c95a <mem_trim+0x4a>
 800c950:	4b6c      	ldr	r3, [pc, #432]	; (800cb04 <mem_trim+0x1f4>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	429a      	cmp	r2, r3
 800c958:	d306      	bcc.n	800c968 <mem_trim+0x58>
 800c95a:	4b6b      	ldr	r3, [pc, #428]	; (800cb08 <mem_trim+0x1f8>)
 800c95c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c960:	496a      	ldr	r1, [pc, #424]	; (800cb0c <mem_trim+0x1fc>)
 800c962:	486b      	ldr	r0, [pc, #428]	; (800cb10 <mem_trim+0x200>)
 800c964:	f00c f914 	bl	8018b90 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c968:	4b65      	ldr	r3, [pc, #404]	; (800cb00 <mem_trim+0x1f0>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d304      	bcc.n	800c97c <mem_trim+0x6c>
 800c972:	4b64      	ldr	r3, [pc, #400]	; (800cb04 <mem_trim+0x1f4>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d307      	bcc.n	800c98c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c97c:	f00b f928 	bl	8017bd0 <sys_arch_protect>
 800c980:	60b8      	str	r0, [r7, #8]
 800c982:	68b8      	ldr	r0, [r7, #8]
 800c984:	f00b f932 	bl	8017bec <sys_arch_unprotect>
    return rmem;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	e0b5      	b.n	800caf8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3b08      	subs	r3, #8
 800c990:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c992:	69b8      	ldr	r0, [r7, #24]
 800c994:	f7ff fdea 	bl	800c56c <mem_to_ptr>
 800c998:	4603      	mov	r3, r0
 800c99a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	881a      	ldrh	r2, [r3, #0]
 800c9a0:	8afb      	ldrh	r3, [r7, #22]
 800c9a2:	1ad3      	subs	r3, r2, r3
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	3b08      	subs	r3, #8
 800c9a8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c9aa:	8bfa      	ldrh	r2, [r7, #30]
 800c9ac:	8abb      	ldrh	r3, [r7, #20]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d906      	bls.n	800c9c0 <mem_trim+0xb0>
 800c9b2:	4b55      	ldr	r3, [pc, #340]	; (800cb08 <mem_trim+0x1f8>)
 800c9b4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c9b8:	4956      	ldr	r1, [pc, #344]	; (800cb14 <mem_trim+0x204>)
 800c9ba:	4855      	ldr	r0, [pc, #340]	; (800cb10 <mem_trim+0x200>)
 800c9bc:	f00c f8e8 	bl	8018b90 <iprintf>
  if (newsize > size) {
 800c9c0:	8bfa      	ldrh	r2, [r7, #30]
 800c9c2:	8abb      	ldrh	r3, [r7, #20]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d901      	bls.n	800c9cc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e095      	b.n	800caf8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c9cc:	8bfa      	ldrh	r2, [r7, #30]
 800c9ce:	8abb      	ldrh	r3, [r7, #20]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d101      	bne.n	800c9d8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	e08f      	b.n	800caf8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c9d8:	484f      	ldr	r0, [pc, #316]	; (800cb18 <mem_trim+0x208>)
 800c9da:	f00b f8b7 	bl	8017b4c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	881b      	ldrh	r3, [r3, #0]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff fdb0 	bl	800c548 <ptr_to_mem>
 800c9e8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	791b      	ldrb	r3, [r3, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d13f      	bne.n	800ca72 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	881b      	ldrh	r3, [r3, #0]
 800c9f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c9fa:	d106      	bne.n	800ca0a <mem_trim+0xfa>
 800c9fc:	4b42      	ldr	r3, [pc, #264]	; (800cb08 <mem_trim+0x1f8>)
 800c9fe:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ca02:	4946      	ldr	r1, [pc, #280]	; (800cb1c <mem_trim+0x20c>)
 800ca04:	4842      	ldr	r0, [pc, #264]	; (800cb10 <mem_trim+0x200>)
 800ca06:	f00c f8c3 	bl	8018b90 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	881b      	ldrh	r3, [r3, #0]
 800ca0e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ca10:	8afa      	ldrh	r2, [r7, #22]
 800ca12:	8bfb      	ldrh	r3, [r7, #30]
 800ca14:	4413      	add	r3, r2
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	3308      	adds	r3, #8
 800ca1a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ca1c:	4b40      	ldr	r3, [pc, #256]	; (800cb20 <mem_trim+0x210>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d106      	bne.n	800ca34 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ca26:	89fb      	ldrh	r3, [r7, #14]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7ff fd8d 	bl	800c548 <ptr_to_mem>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	4a3b      	ldr	r2, [pc, #236]	; (800cb20 <mem_trim+0x210>)
 800ca32:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ca34:	89fb      	ldrh	r3, [r7, #14]
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7ff fd86 	bl	800c548 <ptr_to_mem>
 800ca3c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	2200      	movs	r2, #0
 800ca42:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	89ba      	ldrh	r2, [r7, #12]
 800ca48:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	8afa      	ldrh	r2, [r7, #22]
 800ca4e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	89fa      	ldrh	r2, [r7, #14]
 800ca54:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	881b      	ldrh	r3, [r3, #0]
 800ca5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca5e:	d047      	beq.n	800caf0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7ff fd6f 	bl	800c548 <ptr_to_mem>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	89fb      	ldrh	r3, [r7, #14]
 800ca6e:	8053      	strh	r3, [r2, #2]
 800ca70:	e03e      	b.n	800caf0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ca72:	8bfb      	ldrh	r3, [r7, #30]
 800ca74:	f103 0214 	add.w	r2, r3, #20
 800ca78:	8abb      	ldrh	r3, [r7, #20]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d838      	bhi.n	800caf0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ca7e:	8afa      	ldrh	r2, [r7, #22]
 800ca80:	8bfb      	ldrh	r3, [r7, #30]
 800ca82:	4413      	add	r3, r2
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	3308      	adds	r3, #8
 800ca88:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca92:	d106      	bne.n	800caa2 <mem_trim+0x192>
 800ca94:	4b1c      	ldr	r3, [pc, #112]	; (800cb08 <mem_trim+0x1f8>)
 800ca96:	f240 3216 	movw	r2, #790	; 0x316
 800ca9a:	4920      	ldr	r1, [pc, #128]	; (800cb1c <mem_trim+0x20c>)
 800ca9c:	481c      	ldr	r0, [pc, #112]	; (800cb10 <mem_trim+0x200>)
 800ca9e:	f00c f877 	bl	8018b90 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800caa2:	89fb      	ldrh	r3, [r7, #14]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7ff fd4f 	bl	800c548 <ptr_to_mem>
 800caaa:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800caac:	4b1c      	ldr	r3, [pc, #112]	; (800cb20 <mem_trim+0x210>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	693a      	ldr	r2, [r7, #16]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d202      	bcs.n	800cabc <mem_trim+0x1ac>
      lfree = mem2;
 800cab6:	4a1a      	ldr	r2, [pc, #104]	; (800cb20 <mem_trim+0x210>)
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	2200      	movs	r2, #0
 800cac0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	881a      	ldrh	r2, [r3, #0]
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	8afa      	ldrh	r2, [r7, #22]
 800cace:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	89fa      	ldrh	r2, [r7, #14]
 800cad4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cade:	d007      	beq.n	800caf0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7ff fd2f 	bl	800c548 <ptr_to_mem>
 800caea:	4602      	mov	r2, r0
 800caec:	89fb      	ldrh	r3, [r7, #14]
 800caee:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800caf0:	4809      	ldr	r0, [pc, #36]	; (800cb18 <mem_trim+0x208>)
 800caf2:	f00b f83a 	bl	8017b6a <sys_mutex_unlock>
  return rmem;
 800caf6:	687b      	ldr	r3, [r7, #4]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3720      	adds	r7, #32
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	20009b14 	.word	0x20009b14
 800cb04:	20009b18 	.word	0x20009b18
 800cb08:	0801d7c4 	.word	0x0801d7c4
 800cb0c:	0801d950 	.word	0x0801d950
 800cb10:	0801d80c 	.word	0x0801d80c
 800cb14:	0801d968 	.word	0x0801d968
 800cb18:	20009b1c 	.word	0x20009b1c
 800cb1c:	0801d988 	.word	0x0801d988
 800cb20:	20009b20 	.word	0x20009b20

0800cb24 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b088      	sub	sp, #32
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cb2e:	88fb      	ldrh	r3, [r7, #6]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d101      	bne.n	800cb38 <mem_malloc+0x14>
    return NULL;
 800cb34:	2300      	movs	r3, #0
 800cb36:	e0e2      	b.n	800ccfe <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cb38:	88fb      	ldrh	r3, [r7, #6]
 800cb3a:	3303      	adds	r3, #3
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	f023 0303 	bic.w	r3, r3, #3
 800cb42:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cb44:	8bbb      	ldrh	r3, [r7, #28]
 800cb46:	2b0b      	cmp	r3, #11
 800cb48:	d801      	bhi.n	800cb4e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cb4a:	230c      	movs	r3, #12
 800cb4c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cb4e:	8bbb      	ldrh	r3, [r7, #28]
 800cb50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb54:	d803      	bhi.n	800cb5e <mem_malloc+0x3a>
 800cb56:	8bba      	ldrh	r2, [r7, #28]
 800cb58:	88fb      	ldrh	r3, [r7, #6]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d201      	bcs.n	800cb62 <mem_malloc+0x3e>
    return NULL;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e0cd      	b.n	800ccfe <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cb62:	4869      	ldr	r0, [pc, #420]	; (800cd08 <mem_malloc+0x1e4>)
 800cb64:	f00a fff2 	bl	8017b4c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cb68:	4b68      	ldr	r3, [pc, #416]	; (800cd0c <mem_malloc+0x1e8>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff fcfd 	bl	800c56c <mem_to_ptr>
 800cb72:	4603      	mov	r3, r0
 800cb74:	83fb      	strh	r3, [r7, #30]
 800cb76:	e0b7      	b.n	800cce8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cb78:	8bfb      	ldrh	r3, [r7, #30]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7ff fce4 	bl	800c548 <ptr_to_mem>
 800cb80:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	791b      	ldrb	r3, [r3, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f040 80a7 	bne.w	800ccda <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	881b      	ldrh	r3, [r3, #0]
 800cb90:	461a      	mov	r2, r3
 800cb92:	8bfb      	ldrh	r3, [r7, #30]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	f1a3 0208 	sub.w	r2, r3, #8
 800cb9a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	f0c0 809c 	bcc.w	800ccda <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	461a      	mov	r2, r3
 800cba8:	8bfb      	ldrh	r3, [r7, #30]
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	f1a3 0208 	sub.w	r2, r3, #8
 800cbb0:	8bbb      	ldrh	r3, [r7, #28]
 800cbb2:	3314      	adds	r3, #20
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d333      	bcc.n	800cc20 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cbb8:	8bfa      	ldrh	r2, [r7, #30]
 800cbba:	8bbb      	ldrh	r3, [r7, #28]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	3308      	adds	r3, #8
 800cbc2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cbc4:	8a7b      	ldrh	r3, [r7, #18]
 800cbc6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cbca:	d106      	bne.n	800cbda <mem_malloc+0xb6>
 800cbcc:	4b50      	ldr	r3, [pc, #320]	; (800cd10 <mem_malloc+0x1ec>)
 800cbce:	f240 3287 	movw	r2, #903	; 0x387
 800cbd2:	4950      	ldr	r1, [pc, #320]	; (800cd14 <mem_malloc+0x1f0>)
 800cbd4:	4850      	ldr	r0, [pc, #320]	; (800cd18 <mem_malloc+0x1f4>)
 800cbd6:	f00b ffdb 	bl	8018b90 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cbda:	8a7b      	ldrh	r3, [r7, #18]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7ff fcb3 	bl	800c548 <ptr_to_mem>
 800cbe2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	881a      	ldrh	r2, [r3, #0]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	8bfa      	ldrh	r2, [r7, #30]
 800cbf6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	8a7a      	ldrh	r2, [r7, #18]
 800cbfc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	2201      	movs	r2, #1
 800cc02:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc0c:	d00b      	beq.n	800cc26 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	881b      	ldrh	r3, [r3, #0]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7ff fc98 	bl	800c548 <ptr_to_mem>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	8a7b      	ldrh	r3, [r7, #18]
 800cc1c:	8053      	strh	r3, [r2, #2]
 800cc1e:	e002      	b.n	800cc26 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	2201      	movs	r2, #1
 800cc24:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cc26:	4b39      	ldr	r3, [pc, #228]	; (800cd0c <mem_malloc+0x1e8>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d127      	bne.n	800cc80 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cc30:	4b36      	ldr	r3, [pc, #216]	; (800cd0c <mem_malloc+0x1e8>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cc36:	e005      	b.n	800cc44 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	881b      	ldrh	r3, [r3, #0]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7ff fc83 	bl	800c548 <ptr_to_mem>
 800cc42:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	791b      	ldrb	r3, [r3, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d004      	beq.n	800cc56 <mem_malloc+0x132>
 800cc4c:	4b33      	ldr	r3, [pc, #204]	; (800cd1c <mem_malloc+0x1f8>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	69ba      	ldr	r2, [r7, #24]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d1f0      	bne.n	800cc38 <mem_malloc+0x114>
          }
          lfree = cur;
 800cc56:	4a2d      	ldr	r2, [pc, #180]	; (800cd0c <mem_malloc+0x1e8>)
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cc5c:	4b2b      	ldr	r3, [pc, #172]	; (800cd0c <mem_malloc+0x1e8>)
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	4b2e      	ldr	r3, [pc, #184]	; (800cd1c <mem_malloc+0x1f8>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d00b      	beq.n	800cc80 <mem_malloc+0x15c>
 800cc68:	4b28      	ldr	r3, [pc, #160]	; (800cd0c <mem_malloc+0x1e8>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	791b      	ldrb	r3, [r3, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d006      	beq.n	800cc80 <mem_malloc+0x15c>
 800cc72:	4b27      	ldr	r3, [pc, #156]	; (800cd10 <mem_malloc+0x1ec>)
 800cc74:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cc78:	4929      	ldr	r1, [pc, #164]	; (800cd20 <mem_malloc+0x1fc>)
 800cc7a:	4827      	ldr	r0, [pc, #156]	; (800cd18 <mem_malloc+0x1f4>)
 800cc7c:	f00b ff88 	bl	8018b90 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cc80:	4821      	ldr	r0, [pc, #132]	; (800cd08 <mem_malloc+0x1e4>)
 800cc82:	f00a ff72 	bl	8017b6a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cc86:	8bba      	ldrh	r2, [r7, #28]
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	4a23      	ldr	r2, [pc, #140]	; (800cd1c <mem_malloc+0x1f8>)
 800cc90:	6812      	ldr	r2, [r2, #0]
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d906      	bls.n	800cca4 <mem_malloc+0x180>
 800cc96:	4b1e      	ldr	r3, [pc, #120]	; (800cd10 <mem_malloc+0x1ec>)
 800cc98:	f240 32b9 	movw	r2, #953	; 0x3b9
 800cc9c:	4921      	ldr	r1, [pc, #132]	; (800cd24 <mem_malloc+0x200>)
 800cc9e:	481e      	ldr	r0, [pc, #120]	; (800cd18 <mem_malloc+0x1f4>)
 800cca0:	f00b ff76 	bl	8018b90 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	f003 0303 	and.w	r3, r3, #3
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d006      	beq.n	800ccbc <mem_malloc+0x198>
 800ccae:	4b18      	ldr	r3, [pc, #96]	; (800cd10 <mem_malloc+0x1ec>)
 800ccb0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ccb4:	491c      	ldr	r1, [pc, #112]	; (800cd28 <mem_malloc+0x204>)
 800ccb6:	4818      	ldr	r0, [pc, #96]	; (800cd18 <mem_malloc+0x1f4>)
 800ccb8:	f00b ff6a 	bl	8018b90 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	f003 0303 	and.w	r3, r3, #3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d006      	beq.n	800ccd4 <mem_malloc+0x1b0>
 800ccc6:	4b12      	ldr	r3, [pc, #72]	; (800cd10 <mem_malloc+0x1ec>)
 800ccc8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cccc:	4917      	ldr	r1, [pc, #92]	; (800cd2c <mem_malloc+0x208>)
 800ccce:	4812      	ldr	r0, [pc, #72]	; (800cd18 <mem_malloc+0x1f4>)
 800ccd0:	f00b ff5e 	bl	8018b90 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	3308      	adds	r3, #8
 800ccd8:	e011      	b.n	800ccfe <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ccda:	8bfb      	ldrh	r3, [r7, #30]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7ff fc33 	bl	800c548 <ptr_to_mem>
 800cce2:	4603      	mov	r3, r0
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cce8:	8bfa      	ldrh	r2, [r7, #30]
 800ccea:	8bbb      	ldrh	r3, [r7, #28]
 800ccec:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	f4ff af41 	bcc.w	800cb78 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ccf6:	4804      	ldr	r0, [pc, #16]	; (800cd08 <mem_malloc+0x1e4>)
 800ccf8:	f00a ff37 	bl	8017b6a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3720      	adds	r7, #32
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	20009b1c 	.word	0x20009b1c
 800cd0c:	20009b20 	.word	0x20009b20
 800cd10:	0801d7c4 	.word	0x0801d7c4
 800cd14:	0801d988 	.word	0x0801d988
 800cd18:	0801d80c 	.word	0x0801d80c
 800cd1c:	20009b18 	.word	0x20009b18
 800cd20:	0801d99c 	.word	0x0801d99c
 800cd24:	0801d9b8 	.word	0x0801d9b8
 800cd28:	0801d9e8 	.word	0x0801d9e8
 800cd2c:	0801da18 	.word	0x0801da18

0800cd30 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	3303      	adds	r3, #3
 800cd46:	f023 0303 	bic.w	r3, r3, #3
 800cd4a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	60fb      	str	r3, [r7, #12]
 800cd50:	e011      	b.n	800cd76 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	881b      	ldrh	r3, [r3, #0]
 800cd68:	461a      	mov	r2, r3
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	3301      	adds	r3, #1
 800cd74:	60fb      	str	r3, [r7, #12]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	885b      	ldrh	r3, [r3, #2]
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	dbe7      	blt.n	800cd52 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cd82:	bf00      	nop
 800cd84:	bf00      	nop
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cd96:	2300      	movs	r3, #0
 800cd98:	80fb      	strh	r3, [r7, #6]
 800cd9a:	e009      	b.n	800cdb0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cd9c:	88fb      	ldrh	r3, [r7, #6]
 800cd9e:	4a08      	ldr	r2, [pc, #32]	; (800cdc0 <memp_init+0x30>)
 800cda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7ff ffc3 	bl	800cd30 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cdaa:	88fb      	ldrh	r3, [r7, #6]
 800cdac:	3301      	adds	r3, #1
 800cdae:	80fb      	strh	r3, [r7, #6]
 800cdb0:	88fb      	ldrh	r3, [r7, #6]
 800cdb2:	2b0c      	cmp	r3, #12
 800cdb4:	d9f2      	bls.n	800cd9c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cdb6:	bf00      	nop
 800cdb8:	bf00      	nop
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	080202e4 	.word	0x080202e4

0800cdc4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cdcc:	f00a ff00 	bl	8017bd0 <sys_arch_protect>
 800cdd0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d015      	beq.n	800ce0c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	6812      	ldr	r2, [r2, #0]
 800cde8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	f003 0303 	and.w	r3, r3, #3
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d006      	beq.n	800ce02 <do_memp_malloc_pool+0x3e>
 800cdf4:	4b09      	ldr	r3, [pc, #36]	; (800ce1c <do_memp_malloc_pool+0x58>)
 800cdf6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cdfa:	4909      	ldr	r1, [pc, #36]	; (800ce20 <do_memp_malloc_pool+0x5c>)
 800cdfc:	4809      	ldr	r0, [pc, #36]	; (800ce24 <do_memp_malloc_pool+0x60>)
 800cdfe:	f00b fec7 	bl	8018b90 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f00a fef2 	bl	8017bec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	e003      	b.n	800ce14 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f00a feed 	bl	8017bec <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	0801da3c 	.word	0x0801da3c
 800ce20:	0801da6c 	.word	0x0801da6c
 800ce24:	0801da90 	.word	0x0801da90

0800ce28 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d106      	bne.n	800ce44 <memp_malloc_pool+0x1c>
 800ce36:	4b0a      	ldr	r3, [pc, #40]	; (800ce60 <memp_malloc_pool+0x38>)
 800ce38:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ce3c:	4909      	ldr	r1, [pc, #36]	; (800ce64 <memp_malloc_pool+0x3c>)
 800ce3e:	480a      	ldr	r0, [pc, #40]	; (800ce68 <memp_malloc_pool+0x40>)
 800ce40:	f00b fea6 	bl	8018b90 <iprintf>
  if (desc == NULL) {
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <memp_malloc_pool+0x26>
    return NULL;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	e003      	b.n	800ce56 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f7ff ffb8 	bl	800cdc4 <do_memp_malloc_pool>
 800ce54:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	0801da3c 	.word	0x0801da3c
 800ce64:	0801dab8 	.word	0x0801dab8
 800ce68:	0801da90 	.word	0x0801da90

0800ce6c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	4603      	mov	r3, r0
 800ce74:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ce76:	79fb      	ldrb	r3, [r7, #7]
 800ce78:	2b0c      	cmp	r3, #12
 800ce7a:	d908      	bls.n	800ce8e <memp_malloc+0x22>
 800ce7c:	4b0a      	ldr	r3, [pc, #40]	; (800cea8 <memp_malloc+0x3c>)
 800ce7e:	f240 1257 	movw	r2, #343	; 0x157
 800ce82:	490a      	ldr	r1, [pc, #40]	; (800ceac <memp_malloc+0x40>)
 800ce84:	480a      	ldr	r0, [pc, #40]	; (800ceb0 <memp_malloc+0x44>)
 800ce86:	f00b fe83 	bl	8018b90 <iprintf>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	e008      	b.n	800cea0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ce8e:	79fb      	ldrb	r3, [r7, #7]
 800ce90:	4a08      	ldr	r2, [pc, #32]	; (800ceb4 <memp_malloc+0x48>)
 800ce92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff ff94 	bl	800cdc4 <do_memp_malloc_pool>
 800ce9c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3710      	adds	r7, #16
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	0801da3c 	.word	0x0801da3c
 800ceac:	0801dacc 	.word	0x0801dacc
 800ceb0:	0801da90 	.word	0x0801da90
 800ceb4:	080202e4 	.word	0x080202e4

0800ceb8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	f003 0303 	and.w	r3, r3, #3
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d006      	beq.n	800ceda <do_memp_free_pool+0x22>
 800cecc:	4b0d      	ldr	r3, [pc, #52]	; (800cf04 <do_memp_free_pool+0x4c>)
 800cece:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ced2:	490d      	ldr	r1, [pc, #52]	; (800cf08 <do_memp_free_pool+0x50>)
 800ced4:	480d      	ldr	r0, [pc, #52]	; (800cf0c <do_memp_free_pool+0x54>)
 800ced6:	f00b fe5b 	bl	8018b90 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cede:	f00a fe77 	bl	8017bd0 <sys_arch_protect>
 800cee2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cef6:	68b8      	ldr	r0, [r7, #8]
 800cef8:	f00a fe78 	bl	8017bec <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cefc:	bf00      	nop
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	0801da3c 	.word	0x0801da3c
 800cf08:	0801daec 	.word	0x0801daec
 800cf0c:	0801da90 	.word	0x0801da90

0800cf10 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d106      	bne.n	800cf2e <memp_free_pool+0x1e>
 800cf20:	4b0a      	ldr	r3, [pc, #40]	; (800cf4c <memp_free_pool+0x3c>)
 800cf22:	f240 1295 	movw	r2, #405	; 0x195
 800cf26:	490a      	ldr	r1, [pc, #40]	; (800cf50 <memp_free_pool+0x40>)
 800cf28:	480a      	ldr	r0, [pc, #40]	; (800cf54 <memp_free_pool+0x44>)
 800cf2a:	f00b fe31 	bl	8018b90 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d007      	beq.n	800cf44 <memp_free_pool+0x34>
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d004      	beq.n	800cf44 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f7ff ffbb 	bl	800ceb8 <do_memp_free_pool>
 800cf42:	e000      	b.n	800cf46 <memp_free_pool+0x36>
    return;
 800cf44:	bf00      	nop
}
 800cf46:	3708      	adds	r7, #8
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	0801da3c 	.word	0x0801da3c
 800cf50:	0801dab8 	.word	0x0801dab8
 800cf54:	0801da90 	.word	0x0801da90

0800cf58 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	4603      	mov	r3, r0
 800cf60:	6039      	str	r1, [r7, #0]
 800cf62:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cf64:	79fb      	ldrb	r3, [r7, #7]
 800cf66:	2b0c      	cmp	r3, #12
 800cf68:	d907      	bls.n	800cf7a <memp_free+0x22>
 800cf6a:	4b0c      	ldr	r3, [pc, #48]	; (800cf9c <memp_free+0x44>)
 800cf6c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cf70:	490b      	ldr	r1, [pc, #44]	; (800cfa0 <memp_free+0x48>)
 800cf72:	480c      	ldr	r0, [pc, #48]	; (800cfa4 <memp_free+0x4c>)
 800cf74:	f00b fe0c 	bl	8018b90 <iprintf>
 800cf78:	e00c      	b.n	800cf94 <memp_free+0x3c>

  if (mem == NULL) {
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d008      	beq.n	800cf92 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cf80:	79fb      	ldrb	r3, [r7, #7]
 800cf82:	4a09      	ldr	r2, [pc, #36]	; (800cfa8 <memp_free+0x50>)
 800cf84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7ff ff94 	bl	800ceb8 <do_memp_free_pool>
 800cf90:	e000      	b.n	800cf94 <memp_free+0x3c>
    return;
 800cf92:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	0801da3c 	.word	0x0801da3c
 800cfa0:	0801db0c 	.word	0x0801db0c
 800cfa4:	0801da90 	.word	0x0801da90
 800cfa8:	080202e4 	.word	0x080202e4

0800cfac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cfac:	b480      	push	{r7}
 800cfae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cfb0:	bf00      	nop
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
	...

0800cfbc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b086      	sub	sp, #24
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	607a      	str	r2, [r7, #4]
 800cfc8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d108      	bne.n	800cfe2 <netif_add+0x26>
 800cfd0:	4b57      	ldr	r3, [pc, #348]	; (800d130 <netif_add+0x174>)
 800cfd2:	f240 1227 	movw	r2, #295	; 0x127
 800cfd6:	4957      	ldr	r1, [pc, #348]	; (800d134 <netif_add+0x178>)
 800cfd8:	4857      	ldr	r0, [pc, #348]	; (800d138 <netif_add+0x17c>)
 800cfda:	f00b fdd9 	bl	8018b90 <iprintf>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e0a2      	b.n	800d128 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d108      	bne.n	800cffa <netif_add+0x3e>
 800cfe8:	4b51      	ldr	r3, [pc, #324]	; (800d130 <netif_add+0x174>)
 800cfea:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cfee:	4953      	ldr	r1, [pc, #332]	; (800d13c <netif_add+0x180>)
 800cff0:	4851      	ldr	r0, [pc, #324]	; (800d138 <netif_add+0x17c>)
 800cff2:	f00b fdcd 	bl	8018b90 <iprintf>
 800cff6:	2300      	movs	r3, #0
 800cff8:	e096      	b.n	800d128 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d000:	4b4f      	ldr	r3, [pc, #316]	; (800d140 <netif_add+0x184>)
 800d002:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d101      	bne.n	800d00e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d00a:	4b4d      	ldr	r3, [pc, #308]	; (800d140 <netif_add+0x184>)
 800d00c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d101      	bne.n	800d018 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d014:	4b4a      	ldr	r3, [pc, #296]	; (800d140 <netif_add+0x184>)
 800d016:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	4a45      	ldr	r2, [pc, #276]	; (800d144 <netif_add+0x188>)
 800d02e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2200      	movs	r2, #0
 800d034:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2200      	movs	r2, #0
 800d03a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2200      	movs	r2, #0
 800d042:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6a3a      	ldr	r2, [r7, #32]
 800d048:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d04a:	4b3f      	ldr	r3, [pc, #252]	; (800d148 <netif_add+0x18c>)
 800d04c:	781a      	ldrb	r2, [r3, #0]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d058:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	68b9      	ldr	r1, [r7, #8]
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f000 f913 	bl	800d28c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d068:	68f8      	ldr	r0, [r7, #12]
 800d06a:	4798      	blx	r3
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d001      	beq.n	800d076 <netif_add+0xba>
    return NULL;
 800d072:	2300      	movs	r3, #0
 800d074:	e058      	b.n	800d128 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d07c:	2bff      	cmp	r3, #255	; 0xff
 800d07e:	d103      	bne.n	800d088 <netif_add+0xcc>
        netif->num = 0;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2200      	movs	r2, #0
 800d084:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d08c:	4b2f      	ldr	r3, [pc, #188]	; (800d14c <netif_add+0x190>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	617b      	str	r3, [r7, #20]
 800d092:	e02b      	b.n	800d0ec <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d106      	bne.n	800d0aa <netif_add+0xee>
 800d09c:	4b24      	ldr	r3, [pc, #144]	; (800d130 <netif_add+0x174>)
 800d09e:	f240 128b 	movw	r2, #395	; 0x18b
 800d0a2:	492b      	ldr	r1, [pc, #172]	; (800d150 <netif_add+0x194>)
 800d0a4:	4824      	ldr	r0, [pc, #144]	; (800d138 <netif_add+0x17c>)
 800d0a6:	f00b fd73 	bl	8018b90 <iprintf>
        num_netifs++;
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	2bff      	cmp	r3, #255	; 0xff
 800d0b4:	dd06      	ble.n	800d0c4 <netif_add+0x108>
 800d0b6:	4b1e      	ldr	r3, [pc, #120]	; (800d130 <netif_add+0x174>)
 800d0b8:	f240 128d 	movw	r2, #397	; 0x18d
 800d0bc:	4925      	ldr	r1, [pc, #148]	; (800d154 <netif_add+0x198>)
 800d0be:	481e      	ldr	r0, [pc, #120]	; (800d138 <netif_add+0x17c>)
 800d0c0:	f00b fd66 	bl	8018b90 <iprintf>
        if (netif2->num == netif->num) {
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d108      	bne.n	800d0e6 <netif_add+0x12a>
          netif->num++;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0da:	3301      	adds	r3, #1
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d0e4:	e005      	b.n	800d0f2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	617b      	str	r3, [r7, #20]
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1d0      	bne.n	800d094 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1be      	bne.n	800d076 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0fe:	2bfe      	cmp	r3, #254	; 0xfe
 800d100:	d103      	bne.n	800d10a <netif_add+0x14e>
    netif_num = 0;
 800d102:	4b11      	ldr	r3, [pc, #68]	; (800d148 <netif_add+0x18c>)
 800d104:	2200      	movs	r2, #0
 800d106:	701a      	strb	r2, [r3, #0]
 800d108:	e006      	b.n	800d118 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d110:	3301      	adds	r3, #1
 800d112:	b2da      	uxtb	r2, r3
 800d114:	4b0c      	ldr	r3, [pc, #48]	; (800d148 <netif_add+0x18c>)
 800d116:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d118:	4b0c      	ldr	r3, [pc, #48]	; (800d14c <netif_add+0x190>)
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d120:	4a0a      	ldr	r2, [pc, #40]	; (800d14c <netif_add+0x190>)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d126:	68fb      	ldr	r3, [r7, #12]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3718      	adds	r7, #24
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	0801db28 	.word	0x0801db28
 800d134:	0801dbbc 	.word	0x0801dbbc
 800d138:	0801db78 	.word	0x0801db78
 800d13c:	0801dbd8 	.word	0x0801dbd8
 800d140:	08020358 	.word	0x08020358
 800d144:	0800d567 	.word	0x0800d567
 800d148:	20077934 	.word	0x20077934
 800d14c:	2007792c 	.word	0x2007792c
 800d150:	0801dbfc 	.word	0x0801dbfc
 800d154:	0801dc10 	.word	0x0801dc10

0800d158 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f002 fe15 	bl	800fd94 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d16a:	6839      	ldr	r1, [r7, #0]
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f007 ff4b 	bl	8015008 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d172:	bf00      	nop
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
	...

0800d17c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d106      	bne.n	800d19c <netif_do_set_ipaddr+0x20>
 800d18e:	4b1d      	ldr	r3, [pc, #116]	; (800d204 <netif_do_set_ipaddr+0x88>)
 800d190:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d194:	491c      	ldr	r1, [pc, #112]	; (800d208 <netif_do_set_ipaddr+0x8c>)
 800d196:	481d      	ldr	r0, [pc, #116]	; (800d20c <netif_do_set_ipaddr+0x90>)
 800d198:	f00b fcfa 	bl	8018b90 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d106      	bne.n	800d1b0 <netif_do_set_ipaddr+0x34>
 800d1a2:	4b18      	ldr	r3, [pc, #96]	; (800d204 <netif_do_set_ipaddr+0x88>)
 800d1a4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d1a8:	4917      	ldr	r1, [pc, #92]	; (800d208 <netif_do_set_ipaddr+0x8c>)
 800d1aa:	4818      	ldr	r0, [pc, #96]	; (800d20c <netif_do_set_ipaddr+0x90>)
 800d1ac:	f00b fcf0 	bl	8018b90 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d01c      	beq.n	800d1f8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d1ce:	f107 0314 	add.w	r3, r7, #20
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7ff ffbf 	bl	800d158 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <netif_do_set_ipaddr+0x6a>
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	e000      	b.n	800d1e8 <netif_do_set_ipaddr+0x6c>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d1ec:	2101      	movs	r1, #1
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f000 f8d2 	bl	800d398 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	e000      	b.n	800d1fa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3718      	adds	r7, #24
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	0801db28 	.word	0x0801db28
 800d208:	0801dc40 	.word	0x0801dc40
 800d20c:	0801db78 	.word	0x0801db78

0800d210 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d210:	b480      	push	{r7}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	3308      	adds	r3, #8
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	429a      	cmp	r2, r3
 800d228:	d00a      	beq.n	800d240 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d002      	beq.n	800d236 <netif_do_set_netmask+0x26>
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	e000      	b.n	800d238 <netif_do_set_netmask+0x28>
 800d236:	2300      	movs	r3, #0
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d23c:	2301      	movs	r3, #1
 800d23e:	e000      	b.n	800d242 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3714      	adds	r7, #20
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr

0800d24e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d24e:	b480      	push	{r7}
 800d250:	b085      	sub	sp, #20
 800d252:	af00      	add	r7, sp, #0
 800d254:	60f8      	str	r0, [r7, #12]
 800d256:	60b9      	str	r1, [r7, #8]
 800d258:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	330c      	adds	r3, #12
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	429a      	cmp	r2, r3
 800d266:	d00a      	beq.n	800d27e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d002      	beq.n	800d274 <netif_do_set_gw+0x26>
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	e000      	b.n	800d276 <netif_do_set_gw+0x28>
 800d274:	2300      	movs	r3, #0
 800d276:	68fa      	ldr	r2, [r7, #12]
 800d278:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d27a:	2301      	movs	r3, #1
 800d27c:	e000      	b.n	800d280 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d27e:	2300      	movs	r3, #0
}
 800d280:	4618      	mov	r0, r3
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b088      	sub	sp, #32
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
 800d298:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d29a:	2300      	movs	r3, #0
 800d29c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d2a8:	4b1c      	ldr	r3, [pc, #112]	; (800d31c <netif_set_addr+0x90>)
 800d2aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d2b2:	4b1a      	ldr	r3, [pc, #104]	; (800d31c <netif_set_addr+0x90>)
 800d2b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d101      	bne.n	800d2c0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d2bc:	4b17      	ldr	r3, [pc, #92]	; (800d31c <netif_set_addr+0x90>)
 800d2be:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d003      	beq.n	800d2ce <netif_set_addr+0x42>
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d101      	bne.n	800d2d2 <netif_set_addr+0x46>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e000      	b.n	800d2d4 <netif_set_addr+0x48>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d006      	beq.n	800d2ea <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d2dc:	f107 0310 	add.w	r3, r7, #16
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	68b9      	ldr	r1, [r7, #8]
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f7ff ff49 	bl	800d17c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d2ea:	69fa      	ldr	r2, [r7, #28]
 800d2ec:	6879      	ldr	r1, [r7, #4]
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f7ff ff8e 	bl	800d210 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d2f4:	69ba      	ldr	r2, [r7, #24]
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f7ff ffa8 	bl	800d24e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d106      	bne.n	800d312 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d304:	f107 0310 	add.w	r3, r7, #16
 800d308:	461a      	mov	r2, r3
 800d30a:	68b9      	ldr	r1, [r7, #8]
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f7ff ff35 	bl	800d17c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d312:	bf00      	nop
 800d314:	3720      	adds	r7, #32
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	08020358 	.word	0x08020358

0800d320 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d328:	4a04      	ldr	r2, [pc, #16]	; (800d33c <netif_set_default+0x1c>)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d32e:	bf00      	nop
 800d330:	370c      	adds	r7, #12
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	20077930 	.word	0x20077930

0800d340 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d107      	bne.n	800d35e <netif_set_up+0x1e>
 800d34e:	4b0f      	ldr	r3, [pc, #60]	; (800d38c <netif_set_up+0x4c>)
 800d350:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d354:	490e      	ldr	r1, [pc, #56]	; (800d390 <netif_set_up+0x50>)
 800d356:	480f      	ldr	r0, [pc, #60]	; (800d394 <netif_set_up+0x54>)
 800d358:	f00b fc1a 	bl	8018b90 <iprintf>
 800d35c:	e013      	b.n	800d386 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d364:	f003 0301 	and.w	r3, r3, #1
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d10c      	bne.n	800d386 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d372:	f043 0301 	orr.w	r3, r3, #1
 800d376:	b2da      	uxtb	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d37e:	2103      	movs	r1, #3
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 f809 	bl	800d398 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	0801db28 	.word	0x0801db28
 800d390:	0801dcb0 	.word	0x0801dcb0
 800d394:	0801db78 	.word	0x0801db78

0800d398 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <netif_issue_reports+0x20>
 800d3aa:	4b18      	ldr	r3, [pc, #96]	; (800d40c <netif_issue_reports+0x74>)
 800d3ac:	f240 326d 	movw	r2, #877	; 0x36d
 800d3b0:	4917      	ldr	r1, [pc, #92]	; (800d410 <netif_issue_reports+0x78>)
 800d3b2:	4818      	ldr	r0, [pc, #96]	; (800d414 <netif_issue_reports+0x7c>)
 800d3b4:	f00b fbec 	bl	8018b90 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3be:	f003 0304 	and.w	r3, r3, #4
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d01e      	beq.n	800d404 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3cc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d017      	beq.n	800d404 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d3d4:	78fb      	ldrb	r3, [r7, #3]
 800d3d6:	f003 0301 	and.w	r3, r3, #1
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d013      	beq.n	800d406 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00e      	beq.n	800d406 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3ee:	f003 0308 	and.w	r3, r3, #8
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d007      	beq.n	800d406 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	3304      	adds	r3, #4
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f008 fd6d 	bl	8015edc <etharp_request>
 800d402:	e000      	b.n	800d406 <netif_issue_reports+0x6e>
    return;
 800d404:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	0801db28 	.word	0x0801db28
 800d410:	0801dccc 	.word	0x0801dccc
 800d414:	0801db78 	.word	0x0801db78

0800d418 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d107      	bne.n	800d436 <netif_set_down+0x1e>
 800d426:	4b12      	ldr	r3, [pc, #72]	; (800d470 <netif_set_down+0x58>)
 800d428:	f240 329b 	movw	r2, #923	; 0x39b
 800d42c:	4911      	ldr	r1, [pc, #68]	; (800d474 <netif_set_down+0x5c>)
 800d42e:	4812      	ldr	r0, [pc, #72]	; (800d478 <netif_set_down+0x60>)
 800d430:	f00b fbae 	bl	8018b90 <iprintf>
 800d434:	e019      	b.n	800d46a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	2b00      	cmp	r3, #0
 800d442:	d012      	beq.n	800d46a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d44a:	f023 0301 	bic.w	r3, r3, #1
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d45c:	f003 0308 	and.w	r3, r3, #8
 800d460:	2b00      	cmp	r3, #0
 800d462:	d002      	beq.n	800d46a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f008 f8f7 	bl	8015658 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	0801db28 	.word	0x0801db28
 800d474:	0801dcf0 	.word	0x0801dcf0
 800d478:	0801db78 	.word	0x0801db78

0800d47c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d107      	bne.n	800d49a <netif_set_link_up+0x1e>
 800d48a:	4b13      	ldr	r3, [pc, #76]	; (800d4d8 <netif_set_link_up+0x5c>)
 800d48c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d490:	4912      	ldr	r1, [pc, #72]	; (800d4dc <netif_set_link_up+0x60>)
 800d492:	4813      	ldr	r0, [pc, #76]	; (800d4e0 <netif_set_link_up+0x64>)
 800d494:	f00b fb7c 	bl	8018b90 <iprintf>
 800d498:	e01b      	b.n	800d4d2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4a0:	f003 0304 	and.w	r3, r3, #4
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d114      	bne.n	800d4d2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4ae:	f043 0304 	orr.w	r3, r3, #4
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d4ba:	2103      	movs	r1, #3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7ff ff6b 	bl	800d398 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	69db      	ldr	r3, [r3, #28]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d003      	beq.n	800d4d2 <netif_set_link_up+0x56>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	69db      	ldr	r3, [r3, #28]
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d4d2:	3708      	adds	r7, #8
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	0801db28 	.word	0x0801db28
 800d4dc:	0801dd10 	.word	0x0801dd10
 800d4e0:	0801db78 	.word	0x0801db78

0800d4e4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d107      	bne.n	800d502 <netif_set_link_down+0x1e>
 800d4f2:	4b11      	ldr	r3, [pc, #68]	; (800d538 <netif_set_link_down+0x54>)
 800d4f4:	f240 4206 	movw	r2, #1030	; 0x406
 800d4f8:	4910      	ldr	r1, [pc, #64]	; (800d53c <netif_set_link_down+0x58>)
 800d4fa:	4811      	ldr	r0, [pc, #68]	; (800d540 <netif_set_link_down+0x5c>)
 800d4fc:	f00b fb48 	bl	8018b90 <iprintf>
 800d500:	e017      	b.n	800d532 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d508:	f003 0304 	and.w	r3, r3, #4
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d010      	beq.n	800d532 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d516:	f023 0304 	bic.w	r3, r3, #4
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	69db      	ldr	r3, [r3, #28]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d003      	beq.n	800d532 <netif_set_link_down+0x4e>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	69db      	ldr	r3, [r3, #28]
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	0801db28 	.word	0x0801db28
 800d53c:	0801dd34 	.word	0x0801dd34
 800d540:	0801db78 	.word	0x0801db78

0800d544 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	61da      	str	r2, [r3, #28]
  }
}
 800d55a:	bf00      	nop
 800d55c:	370c      	adds	r7, #12
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d566:	b480      	push	{r7}
 800d568:	b085      	sub	sp, #20
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d572:	f06f 030b 	mvn.w	r3, #11
}
 800d576:	4618      	mov	r0, r3
 800d578:	3714      	adds	r7, #20
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
	...

0800d584 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d584:	b480      	push	{r7}
 800d586:	b085      	sub	sp, #20
 800d588:	af00      	add	r7, sp, #0
 800d58a:	4603      	mov	r3, r0
 800d58c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d58e:	79fb      	ldrb	r3, [r7, #7]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d013      	beq.n	800d5bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d594:	4b0d      	ldr	r3, [pc, #52]	; (800d5cc <netif_get_by_index+0x48>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	60fb      	str	r3, [r7, #12]
 800d59a:	e00c      	b.n	800d5b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	79fa      	ldrb	r2, [r7, #7]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d101      	bne.n	800d5b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	e006      	b.n	800d5be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	60fb      	str	r3, [r7, #12]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d1ef      	bne.n	800d59c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3714      	adds	r7, #20
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	2007792c 	.word	0x2007792c

0800d5d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d5d6:	f00a fafb 	bl	8017bd0 <sys_arch_protect>
 800d5da:	6038      	str	r0, [r7, #0]
 800d5dc:	4b0d      	ldr	r3, [pc, #52]	; (800d614 <pbuf_free_ooseq+0x44>)
 800d5de:	2200      	movs	r2, #0
 800d5e0:	701a      	strb	r2, [r3, #0]
 800d5e2:	6838      	ldr	r0, [r7, #0]
 800d5e4:	f00a fb02 	bl	8017bec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d5e8:	4b0b      	ldr	r3, [pc, #44]	; (800d618 <pbuf_free_ooseq+0x48>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	607b      	str	r3, [r7, #4]
 800d5ee:	e00a      	b.n	800d606 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d003      	beq.n	800d600 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f002 fc09 	bl	800fe10 <tcp_free_ooseq>
      return;
 800d5fe:	e005      	b.n	800d60c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	607b      	str	r3, [r7, #4]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1f1      	bne.n	800d5f0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	20077935 	.word	0x20077935
 800d618:	20077944 	.word	0x20077944

0800d61c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d624:	f7ff ffd4 	bl	800d5d0 <pbuf_free_ooseq>
}
 800d628:	bf00      	nop
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d636:	f00a facb 	bl	8017bd0 <sys_arch_protect>
 800d63a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d63c:	4b0f      	ldr	r3, [pc, #60]	; (800d67c <pbuf_pool_is_empty+0x4c>)
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d642:	4b0e      	ldr	r3, [pc, #56]	; (800d67c <pbuf_pool_is_empty+0x4c>)
 800d644:	2201      	movs	r2, #1
 800d646:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f00a facf 	bl	8017bec <sys_arch_unprotect>

  if (!queued) {
 800d64e:	78fb      	ldrb	r3, [r7, #3]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d10f      	bne.n	800d674 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d654:	2100      	movs	r1, #0
 800d656:	480a      	ldr	r0, [pc, #40]	; (800d680 <pbuf_pool_is_empty+0x50>)
 800d658:	f7fe fe90 	bl	800c37c <tcpip_try_callback>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d008      	beq.n	800d674 <pbuf_pool_is_empty+0x44>
 800d662:	f00a fab5 	bl	8017bd0 <sys_arch_protect>
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	4b04      	ldr	r3, [pc, #16]	; (800d67c <pbuf_pool_is_empty+0x4c>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	701a      	strb	r2, [r3, #0]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f00a fabc 	bl	8017bec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d674:	bf00      	nop
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	20077935 	.word	0x20077935
 800d680:	0800d61d 	.word	0x0800d61d

0800d684 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	4611      	mov	r1, r2
 800d690:	461a      	mov	r2, r3
 800d692:	460b      	mov	r3, r1
 800d694:	80fb      	strh	r3, [r7, #6]
 800d696:	4613      	mov	r3, r2
 800d698:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2200      	movs	r2, #0
 800d69e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	88fa      	ldrh	r2, [r7, #6]
 800d6aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	88ba      	ldrh	r2, [r7, #4]
 800d6b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d6b2:	8b3b      	ldrh	r3, [r7, #24]
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	7f3a      	ldrb	r2, [r7, #28]
 800d6be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	73da      	strb	r2, [r3, #15]
}
 800d6cc:	bf00      	nop
 800d6ce:	3714      	adds	r7, #20
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08c      	sub	sp, #48	; 0x30
 800d6dc:	af02      	add	r7, sp, #8
 800d6de:	4603      	mov	r3, r0
 800d6e0:	71fb      	strb	r3, [r7, #7]
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	80bb      	strh	r3, [r7, #4]
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d6ee:	887b      	ldrh	r3, [r7, #2]
 800d6f0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d6f4:	d07f      	beq.n	800d7f6 <pbuf_alloc+0x11e>
 800d6f6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d6fa:	f300 80c8 	bgt.w	800d88e <pbuf_alloc+0x1b6>
 800d6fe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d702:	d010      	beq.n	800d726 <pbuf_alloc+0x4e>
 800d704:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d708:	f300 80c1 	bgt.w	800d88e <pbuf_alloc+0x1b6>
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d002      	beq.n	800d716 <pbuf_alloc+0x3e>
 800d710:	2b41      	cmp	r3, #65	; 0x41
 800d712:	f040 80bc 	bne.w	800d88e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d716:	887a      	ldrh	r2, [r7, #2]
 800d718:	88bb      	ldrh	r3, [r7, #4]
 800d71a:	4619      	mov	r1, r3
 800d71c:	2000      	movs	r0, #0
 800d71e:	f000 f8d1 	bl	800d8c4 <pbuf_alloc_reference>
 800d722:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d724:	e0bd      	b.n	800d8a2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d726:	2300      	movs	r3, #0
 800d728:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d72e:	88bb      	ldrh	r3, [r7, #4]
 800d730:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d732:	200c      	movs	r0, #12
 800d734:	f7ff fb9a 	bl	800ce6c <memp_malloc>
 800d738:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d109      	bne.n	800d754 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d740:	f7ff ff76 	bl	800d630 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	2b00      	cmp	r3, #0
 800d748:	d002      	beq.n	800d750 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d74a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d74c:	f000 faa8 	bl	800dca0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d750:	2300      	movs	r3, #0
 800d752:	e0a7      	b.n	800d8a4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d754:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d756:	3303      	adds	r3, #3
 800d758:	b29b      	uxth	r3, r3
 800d75a:	f023 0303 	bic.w	r3, r3, #3
 800d75e:	b29b      	uxth	r3, r3
 800d760:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d764:	b29b      	uxth	r3, r3
 800d766:	8b7a      	ldrh	r2, [r7, #26]
 800d768:	4293      	cmp	r3, r2
 800d76a:	bf28      	it	cs
 800d76c:	4613      	movcs	r3, r2
 800d76e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d770:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d772:	3310      	adds	r3, #16
 800d774:	693a      	ldr	r2, [r7, #16]
 800d776:	4413      	add	r3, r2
 800d778:	3303      	adds	r3, #3
 800d77a:	f023 0303 	bic.w	r3, r3, #3
 800d77e:	4618      	mov	r0, r3
 800d780:	89f9      	ldrh	r1, [r7, #14]
 800d782:	8b7a      	ldrh	r2, [r7, #26]
 800d784:	2300      	movs	r3, #0
 800d786:	9301      	str	r3, [sp, #4]
 800d788:	887b      	ldrh	r3, [r7, #2]
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	460b      	mov	r3, r1
 800d78e:	4601      	mov	r1, r0
 800d790:	6938      	ldr	r0, [r7, #16]
 800d792:	f7ff ff77 	bl	800d684 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	f003 0303 	and.w	r3, r3, #3
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d006      	beq.n	800d7b0 <pbuf_alloc+0xd8>
 800d7a2:	4b42      	ldr	r3, [pc, #264]	; (800d8ac <pbuf_alloc+0x1d4>)
 800d7a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7a8:	4941      	ldr	r1, [pc, #260]	; (800d8b0 <pbuf_alloc+0x1d8>)
 800d7aa:	4842      	ldr	r0, [pc, #264]	; (800d8b4 <pbuf_alloc+0x1dc>)
 800d7ac:	f00b f9f0 	bl	8018b90 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d7b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7b2:	3303      	adds	r3, #3
 800d7b4:	f023 0303 	bic.w	r3, r3, #3
 800d7b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7bc:	d106      	bne.n	800d7cc <pbuf_alloc+0xf4>
 800d7be:	4b3b      	ldr	r3, [pc, #236]	; (800d8ac <pbuf_alloc+0x1d4>)
 800d7c0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d7c4:	493c      	ldr	r1, [pc, #240]	; (800d8b8 <pbuf_alloc+0x1e0>)
 800d7c6:	483b      	ldr	r0, [pc, #236]	; (800d8b4 <pbuf_alloc+0x1dc>)
 800d7c8:	f00b f9e2 	bl	8018b90 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d102      	bne.n	800d7d8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d7d6:	e002      	b.n	800d7de <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	693a      	ldr	r2, [r7, #16]
 800d7dc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d7e2:	8b7a      	ldrh	r2, [r7, #26]
 800d7e4:	89fb      	ldrh	r3, [r7, #14]
 800d7e6:	1ad3      	subs	r3, r2, r3
 800d7e8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d7ee:	8b7b      	ldrh	r3, [r7, #26]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d19e      	bne.n	800d732 <pbuf_alloc+0x5a>
      break;
 800d7f4:	e055      	b.n	800d8a2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d7f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7f8:	3303      	adds	r3, #3
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	f023 0303 	bic.w	r3, r3, #3
 800d800:	b29a      	uxth	r2, r3
 800d802:	88bb      	ldrh	r3, [r7, #4]
 800d804:	3303      	adds	r3, #3
 800d806:	b29b      	uxth	r3, r3
 800d808:	f023 0303 	bic.w	r3, r3, #3
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	4413      	add	r3, r2
 800d810:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d812:	8b3b      	ldrh	r3, [r7, #24]
 800d814:	3310      	adds	r3, #16
 800d816:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d818:	8b3a      	ldrh	r2, [r7, #24]
 800d81a:	88bb      	ldrh	r3, [r7, #4]
 800d81c:	3303      	adds	r3, #3
 800d81e:	f023 0303 	bic.w	r3, r3, #3
 800d822:	429a      	cmp	r2, r3
 800d824:	d306      	bcc.n	800d834 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d826:	8afa      	ldrh	r2, [r7, #22]
 800d828:	88bb      	ldrh	r3, [r7, #4]
 800d82a:	3303      	adds	r3, #3
 800d82c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d830:	429a      	cmp	r2, r3
 800d832:	d201      	bcs.n	800d838 <pbuf_alloc+0x160>
        return NULL;
 800d834:	2300      	movs	r3, #0
 800d836:	e035      	b.n	800d8a4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d838:	8afb      	ldrh	r3, [r7, #22]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7ff f972 	bl	800cb24 <mem_malloc>
 800d840:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d844:	2b00      	cmp	r3, #0
 800d846:	d101      	bne.n	800d84c <pbuf_alloc+0x174>
        return NULL;
 800d848:	2300      	movs	r3, #0
 800d84a:	e02b      	b.n	800d8a4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d84c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d84e:	3310      	adds	r3, #16
 800d850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d852:	4413      	add	r3, r2
 800d854:	3303      	adds	r3, #3
 800d856:	f023 0303 	bic.w	r3, r3, #3
 800d85a:	4618      	mov	r0, r3
 800d85c:	88b9      	ldrh	r1, [r7, #4]
 800d85e:	88ba      	ldrh	r2, [r7, #4]
 800d860:	2300      	movs	r3, #0
 800d862:	9301      	str	r3, [sp, #4]
 800d864:	887b      	ldrh	r3, [r7, #2]
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	460b      	mov	r3, r1
 800d86a:	4601      	mov	r1, r0
 800d86c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d86e:	f7ff ff09 	bl	800d684 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	f003 0303 	and.w	r3, r3, #3
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d010      	beq.n	800d8a0 <pbuf_alloc+0x1c8>
 800d87e:	4b0b      	ldr	r3, [pc, #44]	; (800d8ac <pbuf_alloc+0x1d4>)
 800d880:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d884:	490d      	ldr	r1, [pc, #52]	; (800d8bc <pbuf_alloc+0x1e4>)
 800d886:	480b      	ldr	r0, [pc, #44]	; (800d8b4 <pbuf_alloc+0x1dc>)
 800d888:	f00b f982 	bl	8018b90 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d88c:	e008      	b.n	800d8a0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d88e:	4b07      	ldr	r3, [pc, #28]	; (800d8ac <pbuf_alloc+0x1d4>)
 800d890:	f240 1227 	movw	r2, #295	; 0x127
 800d894:	490a      	ldr	r1, [pc, #40]	; (800d8c0 <pbuf_alloc+0x1e8>)
 800d896:	4807      	ldr	r0, [pc, #28]	; (800d8b4 <pbuf_alloc+0x1dc>)
 800d898:	f00b f97a 	bl	8018b90 <iprintf>
      return NULL;
 800d89c:	2300      	movs	r3, #0
 800d89e:	e001      	b.n	800d8a4 <pbuf_alloc+0x1cc>
      break;
 800d8a0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3728      	adds	r7, #40	; 0x28
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	0801dd58 	.word	0x0801dd58
 800d8b0:	0801dd88 	.word	0x0801dd88
 800d8b4:	0801ddb8 	.word	0x0801ddb8
 800d8b8:	0801dde0 	.word	0x0801dde0
 800d8bc:	0801de14 	.word	0x0801de14
 800d8c0:	0801de40 	.word	0x0801de40

0800d8c4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af02      	add	r7, sp, #8
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	807b      	strh	r3, [r7, #2]
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d8d4:	883b      	ldrh	r3, [r7, #0]
 800d8d6:	2b41      	cmp	r3, #65	; 0x41
 800d8d8:	d009      	beq.n	800d8ee <pbuf_alloc_reference+0x2a>
 800d8da:	883b      	ldrh	r3, [r7, #0]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d006      	beq.n	800d8ee <pbuf_alloc_reference+0x2a>
 800d8e0:	4b0f      	ldr	r3, [pc, #60]	; (800d920 <pbuf_alloc_reference+0x5c>)
 800d8e2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d8e6:	490f      	ldr	r1, [pc, #60]	; (800d924 <pbuf_alloc_reference+0x60>)
 800d8e8:	480f      	ldr	r0, [pc, #60]	; (800d928 <pbuf_alloc_reference+0x64>)
 800d8ea:	f00b f951 	bl	8018b90 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d8ee:	200b      	movs	r0, #11
 800d8f0:	f7ff fabc 	bl	800ce6c <memp_malloc>
 800d8f4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d101      	bne.n	800d900 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	e00b      	b.n	800d918 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d900:	8879      	ldrh	r1, [r7, #2]
 800d902:	887a      	ldrh	r2, [r7, #2]
 800d904:	2300      	movs	r3, #0
 800d906:	9301      	str	r3, [sp, #4]
 800d908:	883b      	ldrh	r3, [r7, #0]
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	460b      	mov	r3, r1
 800d90e:	6879      	ldr	r1, [r7, #4]
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f7ff feb7 	bl	800d684 <pbuf_init_alloced_pbuf>
  return p;
 800d916:	68fb      	ldr	r3, [r7, #12]
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	0801dd58 	.word	0x0801dd58
 800d924:	0801de5c 	.word	0x0801de5c
 800d928:	0801ddb8 	.word	0x0801ddb8

0800d92c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b088      	sub	sp, #32
 800d930:	af02      	add	r7, sp, #8
 800d932:	607b      	str	r3, [r7, #4]
 800d934:	4603      	mov	r3, r0
 800d936:	73fb      	strb	r3, [r7, #15]
 800d938:	460b      	mov	r3, r1
 800d93a:	81bb      	strh	r3, [r7, #12]
 800d93c:	4613      	mov	r3, r2
 800d93e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d940:	7bfb      	ldrb	r3, [r7, #15]
 800d942:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d944:	8a7b      	ldrh	r3, [r7, #18]
 800d946:	3303      	adds	r3, #3
 800d948:	f023 0203 	bic.w	r2, r3, #3
 800d94c:	89bb      	ldrh	r3, [r7, #12]
 800d94e:	441a      	add	r2, r3
 800d950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d952:	429a      	cmp	r2, r3
 800d954:	d901      	bls.n	800d95a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d956:	2300      	movs	r3, #0
 800d958:	e018      	b.n	800d98c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d95a:	6a3b      	ldr	r3, [r7, #32]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d007      	beq.n	800d970 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d960:	8a7b      	ldrh	r3, [r7, #18]
 800d962:	3303      	adds	r3, #3
 800d964:	f023 0303 	bic.w	r3, r3, #3
 800d968:	6a3a      	ldr	r2, [r7, #32]
 800d96a:	4413      	add	r3, r2
 800d96c:	617b      	str	r3, [r7, #20]
 800d96e:	e001      	b.n	800d974 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d970:	2300      	movs	r3, #0
 800d972:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	89b9      	ldrh	r1, [r7, #12]
 800d978:	89ba      	ldrh	r2, [r7, #12]
 800d97a:	2302      	movs	r3, #2
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	897b      	ldrh	r3, [r7, #10]
 800d980:	9300      	str	r3, [sp, #0]
 800d982:	460b      	mov	r3, r1
 800d984:	6979      	ldr	r1, [r7, #20]
 800d986:	f7ff fe7d 	bl	800d684 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d98a:	687b      	ldr	r3, [r7, #4]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3718      	adds	r7, #24
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d106      	bne.n	800d9b4 <pbuf_realloc+0x20>
 800d9a6:	4b3a      	ldr	r3, [pc, #232]	; (800da90 <pbuf_realloc+0xfc>)
 800d9a8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d9ac:	4939      	ldr	r1, [pc, #228]	; (800da94 <pbuf_realloc+0x100>)
 800d9ae:	483a      	ldr	r0, [pc, #232]	; (800da98 <pbuf_realloc+0x104>)
 800d9b0:	f00b f8ee 	bl	8018b90 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	891b      	ldrh	r3, [r3, #8]
 800d9b8:	887a      	ldrh	r2, [r7, #2]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d263      	bcs.n	800da86 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	891a      	ldrh	r2, [r3, #8]
 800d9c2:	887b      	ldrh	r3, [r7, #2]
 800d9c4:	1ad3      	subs	r3, r2, r3
 800d9c6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d9c8:	887b      	ldrh	r3, [r7, #2]
 800d9ca:	817b      	strh	r3, [r7, #10]
  q = p;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d9d0:	e018      	b.n	800da04 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	895b      	ldrh	r3, [r3, #10]
 800d9d6:	897a      	ldrh	r2, [r7, #10]
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	891a      	ldrh	r2, [r3, #8]
 800d9e0:	893b      	ldrh	r3, [r7, #8]
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d106      	bne.n	800da04 <pbuf_realloc+0x70>
 800d9f6:	4b26      	ldr	r3, [pc, #152]	; (800da90 <pbuf_realloc+0xfc>)
 800d9f8:	f240 12af 	movw	r2, #431	; 0x1af
 800d9fc:	4927      	ldr	r1, [pc, #156]	; (800da9c <pbuf_realloc+0x108>)
 800d9fe:	4826      	ldr	r0, [pc, #152]	; (800da98 <pbuf_realloc+0x104>)
 800da00:	f00b f8c6 	bl	8018b90 <iprintf>
  while (rem_len > q->len) {
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	895b      	ldrh	r3, [r3, #10]
 800da08:	897a      	ldrh	r2, [r7, #10]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d8e1      	bhi.n	800d9d2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	7b1b      	ldrb	r3, [r3, #12]
 800da12:	f003 030f 	and.w	r3, r3, #15
 800da16:	2b00      	cmp	r3, #0
 800da18:	d121      	bne.n	800da5e <pbuf_realloc+0xca>
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	895b      	ldrh	r3, [r3, #10]
 800da1e:	897a      	ldrh	r2, [r7, #10]
 800da20:	429a      	cmp	r2, r3
 800da22:	d01c      	beq.n	800da5e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	7b5b      	ldrb	r3, [r3, #13]
 800da28:	f003 0302 	and.w	r3, r3, #2
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d116      	bne.n	800da5e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	685a      	ldr	r2, [r3, #4]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	b29a      	uxth	r2, r3
 800da3a:	897b      	ldrh	r3, [r7, #10]
 800da3c:	4413      	add	r3, r2
 800da3e:	b29b      	uxth	r3, r3
 800da40:	4619      	mov	r1, r3
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f7fe ff64 	bl	800c910 <mem_trim>
 800da48:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d106      	bne.n	800da5e <pbuf_realloc+0xca>
 800da50:	4b0f      	ldr	r3, [pc, #60]	; (800da90 <pbuf_realloc+0xfc>)
 800da52:	f240 12bd 	movw	r2, #445	; 0x1bd
 800da56:	4912      	ldr	r1, [pc, #72]	; (800daa0 <pbuf_realloc+0x10c>)
 800da58:	480f      	ldr	r0, [pc, #60]	; (800da98 <pbuf_realloc+0x104>)
 800da5a:	f00b f899 	bl	8018b90 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	897a      	ldrh	r2, [r7, #10]
 800da62:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	895a      	ldrh	r2, [r3, #10]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d004      	beq.n	800da7e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4618      	mov	r0, r3
 800da7a:	f000 f911 	bl	800dca0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	601a      	str	r2, [r3, #0]
 800da84:	e000      	b.n	800da88 <pbuf_realloc+0xf4>
    return;
 800da86:	bf00      	nop

}
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	0801dd58 	.word	0x0801dd58
 800da94:	0801de70 	.word	0x0801de70
 800da98:	0801ddb8 	.word	0x0801ddb8
 800da9c:	0801de88 	.word	0x0801de88
 800daa0:	0801dea0 	.word	0x0801dea0

0800daa4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b086      	sub	sp, #24
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	4613      	mov	r3, r2
 800dab0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d106      	bne.n	800dac6 <pbuf_add_header_impl+0x22>
 800dab8:	4b2b      	ldr	r3, [pc, #172]	; (800db68 <pbuf_add_header_impl+0xc4>)
 800daba:	f240 12df 	movw	r2, #479	; 0x1df
 800dabe:	492b      	ldr	r1, [pc, #172]	; (800db6c <pbuf_add_header_impl+0xc8>)
 800dac0:	482b      	ldr	r0, [pc, #172]	; (800db70 <pbuf_add_header_impl+0xcc>)
 800dac2:	f00b f865 	bl	8018b90 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d003      	beq.n	800dad4 <pbuf_add_header_impl+0x30>
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dad2:	d301      	bcc.n	800dad8 <pbuf_add_header_impl+0x34>
    return 1;
 800dad4:	2301      	movs	r3, #1
 800dad6:	e043      	b.n	800db60 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <pbuf_add_header_impl+0x3e>
    return 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	e03e      	b.n	800db60 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	891a      	ldrh	r2, [r3, #8]
 800daea:	8a7b      	ldrh	r3, [r7, #18]
 800daec:	4413      	add	r3, r2
 800daee:	b29b      	uxth	r3, r3
 800daf0:	8a7a      	ldrh	r2, [r7, #18]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d901      	bls.n	800dafa <pbuf_add_header_impl+0x56>
    return 1;
 800daf6:	2301      	movs	r3, #1
 800daf8:	e032      	b.n	800db60 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	7b1b      	ldrb	r3, [r3, #12]
 800dafe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800db00:	8a3b      	ldrh	r3, [r7, #16]
 800db02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00c      	beq.n	800db24 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	685a      	ldr	r2, [r3, #4]
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	425b      	negs	r3, r3
 800db12:	4413      	add	r3, r2
 800db14:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3310      	adds	r3, #16
 800db1a:	697a      	ldr	r2, [r7, #20]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d20d      	bcs.n	800db3c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800db20:	2301      	movs	r3, #1
 800db22:	e01d      	b.n	800db60 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800db24:	79fb      	ldrb	r3, [r7, #7]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d006      	beq.n	800db38 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	685a      	ldr	r2, [r3, #4]
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	425b      	negs	r3, r3
 800db32:	4413      	add	r3, r2
 800db34:	617b      	str	r3, [r7, #20]
 800db36:	e001      	b.n	800db3c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800db38:	2301      	movs	r3, #1
 800db3a:	e011      	b.n	800db60 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	697a      	ldr	r2, [r7, #20]
 800db40:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	895a      	ldrh	r2, [r3, #10]
 800db46:	8a7b      	ldrh	r3, [r7, #18]
 800db48:	4413      	add	r3, r2
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	891a      	ldrh	r2, [r3, #8]
 800db54:	8a7b      	ldrh	r3, [r7, #18]
 800db56:	4413      	add	r3, r2
 800db58:	b29a      	uxth	r2, r3
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	811a      	strh	r2, [r3, #8]


  return 0;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	0801dd58 	.word	0x0801dd58
 800db6c:	0801debc 	.word	0x0801debc
 800db70:	0801ddb8 	.word	0x0801ddb8

0800db74 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800db7e:	2200      	movs	r2, #0
 800db80:	6839      	ldr	r1, [r7, #0]
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f7ff ff8e 	bl	800daa4 <pbuf_add_header_impl>
 800db88:	4603      	mov	r3, r0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3708      	adds	r7, #8
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
	...

0800db94 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d106      	bne.n	800dbb2 <pbuf_remove_header+0x1e>
 800dba4:	4b20      	ldr	r3, [pc, #128]	; (800dc28 <pbuf_remove_header+0x94>)
 800dba6:	f240 224b 	movw	r2, #587	; 0x24b
 800dbaa:	4920      	ldr	r1, [pc, #128]	; (800dc2c <pbuf_remove_header+0x98>)
 800dbac:	4820      	ldr	r0, [pc, #128]	; (800dc30 <pbuf_remove_header+0x9c>)
 800dbae:	f00a ffef 	bl	8018b90 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d003      	beq.n	800dbc0 <pbuf_remove_header+0x2c>
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbbe:	d301      	bcc.n	800dbc4 <pbuf_remove_header+0x30>
    return 1;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e02c      	b.n	800dc1e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d101      	bne.n	800dbce <pbuf_remove_header+0x3a>
    return 0;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	e027      	b.n	800dc1e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	895b      	ldrh	r3, [r3, #10]
 800dbd6:	89fa      	ldrh	r2, [r7, #14]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d908      	bls.n	800dbee <pbuf_remove_header+0x5a>
 800dbdc:	4b12      	ldr	r3, [pc, #72]	; (800dc28 <pbuf_remove_header+0x94>)
 800dbde:	f240 2255 	movw	r2, #597	; 0x255
 800dbe2:	4914      	ldr	r1, [pc, #80]	; (800dc34 <pbuf_remove_header+0xa0>)
 800dbe4:	4812      	ldr	r0, [pc, #72]	; (800dc30 <pbuf_remove_header+0x9c>)
 800dbe6:	f00a ffd3 	bl	8018b90 <iprintf>
 800dbea:	2301      	movs	r3, #1
 800dbec:	e017      	b.n	800dc1e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685a      	ldr	r2, [r3, #4]
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	441a      	add	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	895a      	ldrh	r2, [r3, #10]
 800dc04:	89fb      	ldrh	r3, [r7, #14]
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	891a      	ldrh	r2, [r3, #8]
 800dc12:	89fb      	ldrh	r3, [r7, #14]
 800dc14:	1ad3      	subs	r3, r2, r3
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	0801dd58 	.word	0x0801dd58
 800dc2c:	0801debc 	.word	0x0801debc
 800dc30:	0801ddb8 	.word	0x0801ddb8
 800dc34:	0801dec8 	.word	0x0801dec8

0800dc38 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	460b      	mov	r3, r1
 800dc42:	807b      	strh	r3, [r7, #2]
 800dc44:	4613      	mov	r3, r2
 800dc46:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dc48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	da08      	bge.n	800dc62 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dc50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc54:	425b      	negs	r3, r3
 800dc56:	4619      	mov	r1, r3
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7ff ff9b 	bl	800db94 <pbuf_remove_header>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	e007      	b.n	800dc72 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dc62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc66:	787a      	ldrb	r2, [r7, #1]
 800dc68:	4619      	mov	r1, r3
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f7ff ff1a 	bl	800daa4 <pbuf_add_header_impl>
 800dc70:	4603      	mov	r3, r0
  }
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b082      	sub	sp, #8
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
 800dc82:	460b      	mov	r3, r1
 800dc84:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dc86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7ff ffd2 	bl	800dc38 <pbuf_header_impl>
 800dc94:	4603      	mov	r3, r0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
	...

0800dca0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b088      	sub	sp, #32
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d10b      	bne.n	800dcc6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d106      	bne.n	800dcc2 <pbuf_free+0x22>
 800dcb4:	4b3b      	ldr	r3, [pc, #236]	; (800dda4 <pbuf_free+0x104>)
 800dcb6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800dcba:	493b      	ldr	r1, [pc, #236]	; (800dda8 <pbuf_free+0x108>)
 800dcbc:	483b      	ldr	r0, [pc, #236]	; (800ddac <pbuf_free+0x10c>)
 800dcbe:	f00a ff67 	bl	8018b90 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e069      	b.n	800dd9a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dcca:	e062      	b.n	800dd92 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800dccc:	f009 ff80 	bl	8017bd0 <sys_arch_protect>
 800dcd0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	7b9b      	ldrb	r3, [r3, #14]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d106      	bne.n	800dce8 <pbuf_free+0x48>
 800dcda:	4b32      	ldr	r3, [pc, #200]	; (800dda4 <pbuf_free+0x104>)
 800dcdc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800dce0:	4933      	ldr	r1, [pc, #204]	; (800ddb0 <pbuf_free+0x110>)
 800dce2:	4832      	ldr	r0, [pc, #200]	; (800ddac <pbuf_free+0x10c>)
 800dce4:	f00a ff54 	bl	8018b90 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	7b9b      	ldrb	r3, [r3, #14]
 800dcec:	3b01      	subs	r3, #1
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	739a      	strb	r2, [r3, #14]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	7b9b      	ldrb	r3, [r3, #14]
 800dcf8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800dcfa:	69b8      	ldr	r0, [r7, #24]
 800dcfc:	f009 ff76 	bl	8017bec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dd00:	7dfb      	ldrb	r3, [r7, #23]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d143      	bne.n	800dd8e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	7b1b      	ldrb	r3, [r3, #12]
 800dd10:	f003 030f 	and.w	r3, r3, #15
 800dd14:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	7b5b      	ldrb	r3, [r3, #13]
 800dd1a:	f003 0302 	and.w	r3, r3, #2
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d011      	beq.n	800dd46 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	691b      	ldr	r3, [r3, #16]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d106      	bne.n	800dd3c <pbuf_free+0x9c>
 800dd2e:	4b1d      	ldr	r3, [pc, #116]	; (800dda4 <pbuf_free+0x104>)
 800dd30:	f240 22ff 	movw	r2, #767	; 0x2ff
 800dd34:	491f      	ldr	r1, [pc, #124]	; (800ddb4 <pbuf_free+0x114>)
 800dd36:	481d      	ldr	r0, [pc, #116]	; (800ddac <pbuf_free+0x10c>)
 800dd38:	f00a ff2a 	bl	8018b90 <iprintf>
        pc->custom_free_function(p);
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	4798      	blx	r3
 800dd44:	e01d      	b.n	800dd82 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800dd46:	7bfb      	ldrb	r3, [r7, #15]
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d104      	bne.n	800dd56 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800dd4c:	6879      	ldr	r1, [r7, #4]
 800dd4e:	200c      	movs	r0, #12
 800dd50:	f7ff f902 	bl	800cf58 <memp_free>
 800dd54:	e015      	b.n	800dd82 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dd56:	7bfb      	ldrb	r3, [r7, #15]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d104      	bne.n	800dd66 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800dd5c:	6879      	ldr	r1, [r7, #4]
 800dd5e:	200b      	movs	r0, #11
 800dd60:	f7ff f8fa 	bl	800cf58 <memp_free>
 800dd64:	e00d      	b.n	800dd82 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d103      	bne.n	800dd74 <pbuf_free+0xd4>
          mem_free(p);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7fe fd3f 	bl	800c7f0 <mem_free>
 800dd72:	e006      	b.n	800dd82 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800dd74:	4b0b      	ldr	r3, [pc, #44]	; (800dda4 <pbuf_free+0x104>)
 800dd76:	f240 320f 	movw	r2, #783	; 0x30f
 800dd7a:	490f      	ldr	r1, [pc, #60]	; (800ddb8 <pbuf_free+0x118>)
 800dd7c:	480b      	ldr	r0, [pc, #44]	; (800ddac <pbuf_free+0x10c>)
 800dd7e:	f00a ff07 	bl	8018b90 <iprintf>
        }
      }
      count++;
 800dd82:	7ffb      	ldrb	r3, [r7, #31]
 800dd84:	3301      	adds	r3, #1
 800dd86:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	607b      	str	r3, [r7, #4]
 800dd8c:	e001      	b.n	800dd92 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d199      	bne.n	800dccc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dd98:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3720      	adds	r7, #32
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	0801dd58 	.word	0x0801dd58
 800dda8:	0801debc 	.word	0x0801debc
 800ddac:	0801ddb8 	.word	0x0801ddb8
 800ddb0:	0801dee8 	.word	0x0801dee8
 800ddb4:	0801df00 	.word	0x0801df00
 800ddb8:	0801df24 	.word	0x0801df24

0800ddbc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ddc8:	e005      	b.n	800ddd6 <pbuf_clen+0x1a>
    ++len;
 800ddca:	89fb      	ldrh	r3, [r7, #14]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1f6      	bne.n	800ddca <pbuf_clen+0xe>
  }
  return len;
 800dddc:	89fb      	ldrh	r3, [r7, #14]
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3714      	adds	r7, #20
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr
	...

0800ddec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d016      	beq.n	800de28 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ddfa:	f009 fee9 	bl	8017bd0 <sys_arch_protect>
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	7b9b      	ldrb	r3, [r3, #14]
 800de04:	3301      	adds	r3, #1
 800de06:	b2da      	uxtb	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	739a      	strb	r2, [r3, #14]
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f009 feed 	bl	8017bec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	7b9b      	ldrb	r3, [r3, #14]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d106      	bne.n	800de28 <pbuf_ref+0x3c>
 800de1a:	4b05      	ldr	r3, [pc, #20]	; (800de30 <pbuf_ref+0x44>)
 800de1c:	f240 3242 	movw	r2, #834	; 0x342
 800de20:	4904      	ldr	r1, [pc, #16]	; (800de34 <pbuf_ref+0x48>)
 800de22:	4805      	ldr	r0, [pc, #20]	; (800de38 <pbuf_ref+0x4c>)
 800de24:	f00a feb4 	bl	8018b90 <iprintf>
  }
}
 800de28:	bf00      	nop
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	0801dd58 	.word	0x0801dd58
 800de34:	0801df38 	.word	0x0801df38
 800de38:	0801ddb8 	.word	0x0801ddb8

0800de3c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d002      	beq.n	800de52 <pbuf_cat+0x16>
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d107      	bne.n	800de62 <pbuf_cat+0x26>
 800de52:	4b20      	ldr	r3, [pc, #128]	; (800ded4 <pbuf_cat+0x98>)
 800de54:	f240 3259 	movw	r2, #857	; 0x359
 800de58:	491f      	ldr	r1, [pc, #124]	; (800ded8 <pbuf_cat+0x9c>)
 800de5a:	4820      	ldr	r0, [pc, #128]	; (800dedc <pbuf_cat+0xa0>)
 800de5c:	f00a fe98 	bl	8018b90 <iprintf>
 800de60:	e034      	b.n	800decc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	60fb      	str	r3, [r7, #12]
 800de66:	e00a      	b.n	800de7e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	891a      	ldrh	r2, [r3, #8]
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	891b      	ldrh	r3, [r3, #8]
 800de70:	4413      	add	r3, r2
 800de72:	b29a      	uxth	r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	60fb      	str	r3, [r7, #12]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1f0      	bne.n	800de68 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	891a      	ldrh	r2, [r3, #8]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	895b      	ldrh	r3, [r3, #10]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d006      	beq.n	800dea0 <pbuf_cat+0x64>
 800de92:	4b10      	ldr	r3, [pc, #64]	; (800ded4 <pbuf_cat+0x98>)
 800de94:	f240 3262 	movw	r2, #866	; 0x362
 800de98:	4911      	ldr	r1, [pc, #68]	; (800dee0 <pbuf_cat+0xa4>)
 800de9a:	4810      	ldr	r0, [pc, #64]	; (800dedc <pbuf_cat+0xa0>)
 800de9c:	f00a fe78 	bl	8018b90 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d006      	beq.n	800deb6 <pbuf_cat+0x7a>
 800dea8:	4b0a      	ldr	r3, [pc, #40]	; (800ded4 <pbuf_cat+0x98>)
 800deaa:	f240 3263 	movw	r2, #867	; 0x363
 800deae:	490d      	ldr	r1, [pc, #52]	; (800dee4 <pbuf_cat+0xa8>)
 800deb0:	480a      	ldr	r0, [pc, #40]	; (800dedc <pbuf_cat+0xa0>)
 800deb2:	f00a fe6d 	bl	8018b90 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	891a      	ldrh	r2, [r3, #8]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	891b      	ldrh	r3, [r3, #8]
 800debe:	4413      	add	r3, r2
 800dec0:	b29a      	uxth	r2, r3
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	683a      	ldr	r2, [r7, #0]
 800deca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	0801dd58 	.word	0x0801dd58
 800ded8:	0801df4c 	.word	0x0801df4c
 800dedc:	0801ddb8 	.word	0x0801ddb8
 800dee0:	0801df84 	.word	0x0801df84
 800dee4:	0801dfb4 	.word	0x0801dfb4

0800dee8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7ff ffa1 	bl	800de3c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800defa:	6838      	ldr	r0, [r7, #0]
 800defc:	f7ff ff76 	bl	800ddec <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800df00:	bf00      	nop
 800df02:	3708      	adds	r7, #8
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b086      	sub	sp, #24
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800df12:	2300      	movs	r3, #0
 800df14:	617b      	str	r3, [r7, #20]
 800df16:	2300      	movs	r3, #0
 800df18:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d008      	beq.n	800df32 <pbuf_copy+0x2a>
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d005      	beq.n	800df32 <pbuf_copy+0x2a>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	891a      	ldrh	r2, [r3, #8]
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	891b      	ldrh	r3, [r3, #8]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d209      	bcs.n	800df46 <pbuf_copy+0x3e>
 800df32:	4b57      	ldr	r3, [pc, #348]	; (800e090 <pbuf_copy+0x188>)
 800df34:	f240 32c9 	movw	r2, #969	; 0x3c9
 800df38:	4956      	ldr	r1, [pc, #344]	; (800e094 <pbuf_copy+0x18c>)
 800df3a:	4857      	ldr	r0, [pc, #348]	; (800e098 <pbuf_copy+0x190>)
 800df3c:	f00a fe28 	bl	8018b90 <iprintf>
 800df40:	f06f 030f 	mvn.w	r3, #15
 800df44:	e09f      	b.n	800e086 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	895b      	ldrh	r3, [r3, #10]
 800df4a:	461a      	mov	r2, r3
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	1ad2      	subs	r2, r2, r3
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	895b      	ldrh	r3, [r3, #10]
 800df54:	4619      	mov	r1, r3
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	1acb      	subs	r3, r1, r3
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d306      	bcc.n	800df6c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	895b      	ldrh	r3, [r3, #10]
 800df62:	461a      	mov	r2, r3
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	1ad3      	subs	r3, r2, r3
 800df68:	60fb      	str	r3, [r7, #12]
 800df6a:	e005      	b.n	800df78 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	895b      	ldrh	r3, [r3, #10]
 800df70:	461a      	mov	r2, r3
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	18d0      	adds	r0, r2, r3
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	685a      	ldr	r2, [r3, #4]
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	4413      	add	r3, r2
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	4619      	mov	r1, r3
 800df8c:	f00a ff87 	bl	8018e9e <memcpy>
    offset_to += len;
 800df90:	697a      	ldr	r2, [r7, #20]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	4413      	add	r3, r2
 800df96:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	4413      	add	r3, r2
 800df9e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	895b      	ldrh	r3, [r3, #10]
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d906      	bls.n	800dfba <pbuf_copy+0xb2>
 800dfac:	4b38      	ldr	r3, [pc, #224]	; (800e090 <pbuf_copy+0x188>)
 800dfae:	f240 32d9 	movw	r2, #985	; 0x3d9
 800dfb2:	493a      	ldr	r1, [pc, #232]	; (800e09c <pbuf_copy+0x194>)
 800dfb4:	4838      	ldr	r0, [pc, #224]	; (800e098 <pbuf_copy+0x190>)
 800dfb6:	f00a fdeb 	bl	8018b90 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	895b      	ldrh	r3, [r3, #10]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d906      	bls.n	800dfd4 <pbuf_copy+0xcc>
 800dfc6:	4b32      	ldr	r3, [pc, #200]	; (800e090 <pbuf_copy+0x188>)
 800dfc8:	f240 32da 	movw	r2, #986	; 0x3da
 800dfcc:	4934      	ldr	r1, [pc, #208]	; (800e0a0 <pbuf_copy+0x198>)
 800dfce:	4832      	ldr	r0, [pc, #200]	; (800e098 <pbuf_copy+0x190>)
 800dfd0:	f00a fdde 	bl	8018b90 <iprintf>
    if (offset_from >= p_from->len) {
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	895b      	ldrh	r3, [r3, #10]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d304      	bcc.n	800dfea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	895b      	ldrh	r3, [r3, #10]
 800dfee:	461a      	mov	r2, r3
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d114      	bne.n	800e020 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d10c      	bne.n	800e020 <pbuf_copy+0x118>
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d009      	beq.n	800e020 <pbuf_copy+0x118>
 800e00c:	4b20      	ldr	r3, [pc, #128]	; (800e090 <pbuf_copy+0x188>)
 800e00e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e012:	4924      	ldr	r1, [pc, #144]	; (800e0a4 <pbuf_copy+0x19c>)
 800e014:	4820      	ldr	r0, [pc, #128]	; (800e098 <pbuf_copy+0x190>)
 800e016:	f00a fdbb 	bl	8018b90 <iprintf>
 800e01a:	f06f 030f 	mvn.w	r3, #15
 800e01e:	e032      	b.n	800e086 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d013      	beq.n	800e04e <pbuf_copy+0x146>
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	895a      	ldrh	r2, [r3, #10]
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	891b      	ldrh	r3, [r3, #8]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d10d      	bne.n	800e04e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d009      	beq.n	800e04e <pbuf_copy+0x146>
 800e03a:	4b15      	ldr	r3, [pc, #84]	; (800e090 <pbuf_copy+0x188>)
 800e03c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e040:	4919      	ldr	r1, [pc, #100]	; (800e0a8 <pbuf_copy+0x1a0>)
 800e042:	4815      	ldr	r0, [pc, #84]	; (800e098 <pbuf_copy+0x190>)
 800e044:	f00a fda4 	bl	8018b90 <iprintf>
 800e048:	f06f 0305 	mvn.w	r3, #5
 800e04c:	e01b      	b.n	800e086 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d013      	beq.n	800e07c <pbuf_copy+0x174>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	895a      	ldrh	r2, [r3, #10]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	891b      	ldrh	r3, [r3, #8]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d10d      	bne.n	800e07c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d009      	beq.n	800e07c <pbuf_copy+0x174>
 800e068:	4b09      	ldr	r3, [pc, #36]	; (800e090 <pbuf_copy+0x188>)
 800e06a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e06e:	490e      	ldr	r1, [pc, #56]	; (800e0a8 <pbuf_copy+0x1a0>)
 800e070:	4809      	ldr	r0, [pc, #36]	; (800e098 <pbuf_copy+0x190>)
 800e072:	f00a fd8d 	bl	8018b90 <iprintf>
 800e076:	f06f 0305 	mvn.w	r3, #5
 800e07a:	e004      	b.n	800e086 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	f47f af61 	bne.w	800df46 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3718      	adds	r7, #24
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	0801dd58 	.word	0x0801dd58
 800e094:	0801e000 	.word	0x0801e000
 800e098:	0801ddb8 	.word	0x0801ddb8
 800e09c:	0801e030 	.word	0x0801e030
 800e0a0:	0801e048 	.word	0x0801e048
 800e0a4:	0801e064 	.word	0x0801e064
 800e0a8:	0801e074 	.word	0x0801e074

0800e0ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b088      	sub	sp, #32
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	4611      	mov	r1, r2
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	80fb      	strh	r3, [r7, #6]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d108      	bne.n	800e0e2 <pbuf_copy_partial+0x36>
 800e0d0:	4b2b      	ldr	r3, [pc, #172]	; (800e180 <pbuf_copy_partial+0xd4>)
 800e0d2:	f240 420a 	movw	r2, #1034	; 0x40a
 800e0d6:	492b      	ldr	r1, [pc, #172]	; (800e184 <pbuf_copy_partial+0xd8>)
 800e0d8:	482b      	ldr	r0, [pc, #172]	; (800e188 <pbuf_copy_partial+0xdc>)
 800e0da:	f00a fd59 	bl	8018b90 <iprintf>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	e04a      	b.n	800e178 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d108      	bne.n	800e0fa <pbuf_copy_partial+0x4e>
 800e0e8:	4b25      	ldr	r3, [pc, #148]	; (800e180 <pbuf_copy_partial+0xd4>)
 800e0ea:	f240 420b 	movw	r2, #1035	; 0x40b
 800e0ee:	4927      	ldr	r1, [pc, #156]	; (800e18c <pbuf_copy_partial+0xe0>)
 800e0f0:	4825      	ldr	r0, [pc, #148]	; (800e188 <pbuf_copy_partial+0xdc>)
 800e0f2:	f00a fd4d 	bl	8018b90 <iprintf>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e03e      	b.n	800e178 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	61fb      	str	r3, [r7, #28]
 800e0fe:	e034      	b.n	800e16a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e100:	88bb      	ldrh	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00a      	beq.n	800e11c <pbuf_copy_partial+0x70>
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	895b      	ldrh	r3, [r3, #10]
 800e10a:	88ba      	ldrh	r2, [r7, #4]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d305      	bcc.n	800e11c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	895b      	ldrh	r3, [r3, #10]
 800e114:	88ba      	ldrh	r2, [r7, #4]
 800e116:	1ad3      	subs	r3, r2, r3
 800e118:	80bb      	strh	r3, [r7, #4]
 800e11a:	e023      	b.n	800e164 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	895a      	ldrh	r2, [r3, #10]
 800e120:	88bb      	ldrh	r3, [r7, #4]
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e126:	8b3a      	ldrh	r2, [r7, #24]
 800e128:	88fb      	ldrh	r3, [r7, #6]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d901      	bls.n	800e132 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e12e:	88fb      	ldrh	r3, [r7, #6]
 800e130:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e132:	8b7b      	ldrh	r3, [r7, #26]
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	18d0      	adds	r0, r2, r3
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	685a      	ldr	r2, [r3, #4]
 800e13c:	88bb      	ldrh	r3, [r7, #4]
 800e13e:	4413      	add	r3, r2
 800e140:	8b3a      	ldrh	r2, [r7, #24]
 800e142:	4619      	mov	r1, r3
 800e144:	f00a feab 	bl	8018e9e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e148:	8afa      	ldrh	r2, [r7, #22]
 800e14a:	8b3b      	ldrh	r3, [r7, #24]
 800e14c:	4413      	add	r3, r2
 800e14e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e150:	8b7a      	ldrh	r2, [r7, #26]
 800e152:	8b3b      	ldrh	r3, [r7, #24]
 800e154:	4413      	add	r3, r2
 800e156:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e158:	88fa      	ldrh	r2, [r7, #6]
 800e15a:	8b3b      	ldrh	r3, [r7, #24]
 800e15c:	1ad3      	subs	r3, r2, r3
 800e15e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e160:	2300      	movs	r3, #0
 800e162:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	61fb      	str	r3, [r7, #28]
 800e16a:	88fb      	ldrh	r3, [r7, #6]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d002      	beq.n	800e176 <pbuf_copy_partial+0xca>
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1c4      	bne.n	800e100 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e176:	8afb      	ldrh	r3, [r7, #22]
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3720      	adds	r7, #32
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	0801dd58 	.word	0x0801dd58
 800e184:	0801e0a0 	.word	0x0801e0a0
 800e188:	0801ddb8 	.word	0x0801ddb8
 800e18c:	0801e0c0 	.word	0x0801e0c0

0800e190 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	4603      	mov	r3, r0
 800e198:	603a      	str	r2, [r7, #0]
 800e19a:	71fb      	strb	r3, [r7, #7]
 800e19c:	460b      	mov	r3, r1
 800e19e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	8919      	ldrh	r1, [r3, #8]
 800e1a4:	88ba      	ldrh	r2, [r7, #4]
 800e1a6:	79fb      	ldrb	r3, [r7, #7]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7ff fa95 	bl	800d6d8 <pbuf_alloc>
 800e1ae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d101      	bne.n	800e1ba <pbuf_clone+0x2a>
    return NULL;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	e011      	b.n	800e1de <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e1ba:	6839      	ldr	r1, [r7, #0]
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f7ff fea3 	bl	800df08 <pbuf_copy>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e1c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d006      	beq.n	800e1dc <pbuf_clone+0x4c>
 800e1ce:	4b06      	ldr	r3, [pc, #24]	; (800e1e8 <pbuf_clone+0x58>)
 800e1d0:	f240 5224 	movw	r2, #1316	; 0x524
 800e1d4:	4905      	ldr	r1, [pc, #20]	; (800e1ec <pbuf_clone+0x5c>)
 800e1d6:	4806      	ldr	r0, [pc, #24]	; (800e1f0 <pbuf_clone+0x60>)
 800e1d8:	f00a fcda 	bl	8018b90 <iprintf>
  return q;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	0801dd58 	.word	0x0801dd58
 800e1ec:	0801e1cc 	.word	0x0801e1cc
 800e1f0:	0801ddb8 	.word	0x0801ddb8

0800e1f4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e1f8:	f009 fd08 	bl	8017c0c <rand>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e204:	b29b      	uxth	r3, r3
 800e206:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	4b01      	ldr	r3, [pc, #4]	; (800e214 <tcp_init+0x20>)
 800e20e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e210:	bf00      	nop
 800e212:	bd80      	pop	{r7, pc}
 800e214:	20000024 	.word	0x20000024

0800e218 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	7d1b      	ldrb	r3, [r3, #20]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d105      	bne.n	800e234 <tcp_free+0x1c>
 800e228:	4b06      	ldr	r3, [pc, #24]	; (800e244 <tcp_free+0x2c>)
 800e22a:	22d4      	movs	r2, #212	; 0xd4
 800e22c:	4906      	ldr	r1, [pc, #24]	; (800e248 <tcp_free+0x30>)
 800e22e:	4807      	ldr	r0, [pc, #28]	; (800e24c <tcp_free+0x34>)
 800e230:	f00a fcae 	bl	8018b90 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e234:	6879      	ldr	r1, [r7, #4]
 800e236:	2001      	movs	r0, #1
 800e238:	f7fe fe8e 	bl	800cf58 <memp_free>
}
 800e23c:	bf00      	nop
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	0801e258 	.word	0x0801e258
 800e248:	0801e288 	.word	0x0801e288
 800e24c:	0801e29c 	.word	0x0801e29c

0800e250 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	7d1b      	ldrb	r3, [r3, #20]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d105      	bne.n	800e26c <tcp_free_listen+0x1c>
 800e260:	4b06      	ldr	r3, [pc, #24]	; (800e27c <tcp_free_listen+0x2c>)
 800e262:	22df      	movs	r2, #223	; 0xdf
 800e264:	4906      	ldr	r1, [pc, #24]	; (800e280 <tcp_free_listen+0x30>)
 800e266:	4807      	ldr	r0, [pc, #28]	; (800e284 <tcp_free_listen+0x34>)
 800e268:	f00a fc92 	bl	8018b90 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e26c:	6879      	ldr	r1, [r7, #4]
 800e26e:	2002      	movs	r0, #2
 800e270:	f7fe fe72 	bl	800cf58 <memp_free>
}
 800e274:	bf00      	nop
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	0801e258 	.word	0x0801e258
 800e280:	0801e2c4 	.word	0x0801e2c4
 800e284:	0801e29c 	.word	0x0801e29c

0800e288 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e28c:	f001 f85c 	bl	800f348 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e290:	4b07      	ldr	r3, [pc, #28]	; (800e2b0 <tcp_tmr+0x28>)
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	3301      	adds	r3, #1
 800e296:	b2da      	uxtb	r2, r3
 800e298:	4b05      	ldr	r3, [pc, #20]	; (800e2b0 <tcp_tmr+0x28>)
 800e29a:	701a      	strb	r2, [r3, #0]
 800e29c:	4b04      	ldr	r3, [pc, #16]	; (800e2b0 <tcp_tmr+0x28>)
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	f003 0301 	and.w	r3, r3, #1
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d001      	beq.n	800e2ac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e2a8:	f000 fd0e 	bl	800ecc8 <tcp_slowtmr>
  }
}
 800e2ac:	bf00      	nop
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	2007794d 	.word	0x2007794d

0800e2b4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d105      	bne.n	800e2d0 <tcp_remove_listener+0x1c>
 800e2c4:	4b0d      	ldr	r3, [pc, #52]	; (800e2fc <tcp_remove_listener+0x48>)
 800e2c6:	22ff      	movs	r2, #255	; 0xff
 800e2c8:	490d      	ldr	r1, [pc, #52]	; (800e300 <tcp_remove_listener+0x4c>)
 800e2ca:	480e      	ldr	r0, [pc, #56]	; (800e304 <tcp_remove_listener+0x50>)
 800e2cc:	f00a fc60 	bl	8018b90 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	60fb      	str	r3, [r7, #12]
 800e2d4:	e00a      	b.n	800e2ec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d102      	bne.n	800e2e6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	60fb      	str	r3, [r7, #12]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1f1      	bne.n	800e2d6 <tcp_remove_listener+0x22>
    }
  }
}
 800e2f2:	bf00      	nop
 800e2f4:	bf00      	nop
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	0801e258 	.word	0x0801e258
 800e300:	0801e2e0 	.word	0x0801e2e0
 800e304:	0801e29c 	.word	0x0801e29c

0800e308 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d106      	bne.n	800e324 <tcp_listen_closed+0x1c>
 800e316:	4b14      	ldr	r3, [pc, #80]	; (800e368 <tcp_listen_closed+0x60>)
 800e318:	f240 1211 	movw	r2, #273	; 0x111
 800e31c:	4913      	ldr	r1, [pc, #76]	; (800e36c <tcp_listen_closed+0x64>)
 800e31e:	4814      	ldr	r0, [pc, #80]	; (800e370 <tcp_listen_closed+0x68>)
 800e320:	f00a fc36 	bl	8018b90 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	7d1b      	ldrb	r3, [r3, #20]
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d006      	beq.n	800e33a <tcp_listen_closed+0x32>
 800e32c:	4b0e      	ldr	r3, [pc, #56]	; (800e368 <tcp_listen_closed+0x60>)
 800e32e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e332:	4910      	ldr	r1, [pc, #64]	; (800e374 <tcp_listen_closed+0x6c>)
 800e334:	480e      	ldr	r0, [pc, #56]	; (800e370 <tcp_listen_closed+0x68>)
 800e336:	f00a fc2b 	bl	8018b90 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e33a:	2301      	movs	r3, #1
 800e33c:	60fb      	str	r3, [r7, #12]
 800e33e:	e00b      	b.n	800e358 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e340:	4a0d      	ldr	r2, [pc, #52]	; (800e378 <tcp_listen_closed+0x70>)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	6879      	ldr	r1, [r7, #4]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff ffb1 	bl	800e2b4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	3301      	adds	r3, #1
 800e356:	60fb      	str	r3, [r7, #12]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2b03      	cmp	r3, #3
 800e35c:	d9f0      	bls.n	800e340 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e35e:	bf00      	nop
 800e360:	bf00      	nop
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	0801e258 	.word	0x0801e258
 800e36c:	0801e308 	.word	0x0801e308
 800e370:	0801e29c 	.word	0x0801e29c
 800e374:	0801e314 	.word	0x0801e314
 800e378:	08020330 	.word	0x08020330

0800e37c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e37c:	b5b0      	push	{r4, r5, r7, lr}
 800e37e:	b088      	sub	sp, #32
 800e380:	af04      	add	r7, sp, #16
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	460b      	mov	r3, r1
 800e386:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d106      	bne.n	800e39c <tcp_close_shutdown+0x20>
 800e38e:	4b63      	ldr	r3, [pc, #396]	; (800e51c <tcp_close_shutdown+0x1a0>)
 800e390:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e394:	4962      	ldr	r1, [pc, #392]	; (800e520 <tcp_close_shutdown+0x1a4>)
 800e396:	4863      	ldr	r0, [pc, #396]	; (800e524 <tcp_close_shutdown+0x1a8>)
 800e398:	f00a fbfa 	bl	8018b90 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e39c:	78fb      	ldrb	r3, [r7, #3]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d066      	beq.n	800e470 <tcp_close_shutdown+0xf4>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	7d1b      	ldrb	r3, [r3, #20]
 800e3a6:	2b04      	cmp	r3, #4
 800e3a8:	d003      	beq.n	800e3b2 <tcp_close_shutdown+0x36>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	7d1b      	ldrb	r3, [r3, #20]
 800e3ae:	2b07      	cmp	r3, #7
 800e3b0:	d15e      	bne.n	800e470 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d104      	bne.n	800e3c4 <tcp_close_shutdown+0x48>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3c2:	d055      	beq.n	800e470 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	8b5b      	ldrh	r3, [r3, #26]
 800e3c8:	f003 0310 	and.w	r3, r3, #16
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d106      	bne.n	800e3de <tcp_close_shutdown+0x62>
 800e3d0:	4b52      	ldr	r3, [pc, #328]	; (800e51c <tcp_close_shutdown+0x1a0>)
 800e3d2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e3d6:	4954      	ldr	r1, [pc, #336]	; (800e528 <tcp_close_shutdown+0x1ac>)
 800e3d8:	4852      	ldr	r0, [pc, #328]	; (800e524 <tcp_close_shutdown+0x1a8>)
 800e3da:	f00a fbd9 	bl	8018b90 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e3e6:	687d      	ldr	r5, [r7, #4]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	3304      	adds	r3, #4
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	8ad2      	ldrh	r2, [r2, #22]
 800e3f0:	6879      	ldr	r1, [r7, #4]
 800e3f2:	8b09      	ldrh	r1, [r1, #24]
 800e3f4:	9102      	str	r1, [sp, #8]
 800e3f6:	9201      	str	r2, [sp, #4]
 800e3f8:	9300      	str	r3, [sp, #0]
 800e3fa:	462b      	mov	r3, r5
 800e3fc:	4622      	mov	r2, r4
 800e3fe:	4601      	mov	r1, r0
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f005 fd77 	bl	8013ef4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f001 fb4e 	bl	800faa8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e40c:	4b47      	ldr	r3, [pc, #284]	; (800e52c <tcp_close_shutdown+0x1b0>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	429a      	cmp	r2, r3
 800e414:	d105      	bne.n	800e422 <tcp_close_shutdown+0xa6>
 800e416:	4b45      	ldr	r3, [pc, #276]	; (800e52c <tcp_close_shutdown+0x1b0>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	4a43      	ldr	r2, [pc, #268]	; (800e52c <tcp_close_shutdown+0x1b0>)
 800e41e:	6013      	str	r3, [r2, #0]
 800e420:	e013      	b.n	800e44a <tcp_close_shutdown+0xce>
 800e422:	4b42      	ldr	r3, [pc, #264]	; (800e52c <tcp_close_shutdown+0x1b0>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	60fb      	str	r3, [r7, #12]
 800e428:	e00c      	b.n	800e444 <tcp_close_shutdown+0xc8>
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	429a      	cmp	r2, r3
 800e432:	d104      	bne.n	800e43e <tcp_close_shutdown+0xc2>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	68da      	ldr	r2, [r3, #12]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	60da      	str	r2, [r3, #12]
 800e43c:	e005      	b.n	800e44a <tcp_close_shutdown+0xce>
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	60fb      	str	r3, [r7, #12]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d1ef      	bne.n	800e42a <tcp_close_shutdown+0xae>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2200      	movs	r2, #0
 800e44e:	60da      	str	r2, [r3, #12]
 800e450:	4b37      	ldr	r3, [pc, #220]	; (800e530 <tcp_close_shutdown+0x1b4>)
 800e452:	2201      	movs	r2, #1
 800e454:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e456:	4b37      	ldr	r3, [pc, #220]	; (800e534 <tcp_close_shutdown+0x1b8>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d102      	bne.n	800e466 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e460:	f003 ffe6 	bl	8012430 <tcp_trigger_input_pcb_close>
 800e464:	e002      	b.n	800e46c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f7ff fed6 	bl	800e218 <tcp_free>
      }
      return ERR_OK;
 800e46c:	2300      	movs	r3, #0
 800e46e:	e050      	b.n	800e512 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	7d1b      	ldrb	r3, [r3, #20]
 800e474:	2b02      	cmp	r3, #2
 800e476:	d03b      	beq.n	800e4f0 <tcp_close_shutdown+0x174>
 800e478:	2b02      	cmp	r3, #2
 800e47a:	dc44      	bgt.n	800e506 <tcp_close_shutdown+0x18a>
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d002      	beq.n	800e486 <tcp_close_shutdown+0x10a>
 800e480:	2b01      	cmp	r3, #1
 800e482:	d02a      	beq.n	800e4da <tcp_close_shutdown+0x15e>
 800e484:	e03f      	b.n	800e506 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	8adb      	ldrh	r3, [r3, #22]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d021      	beq.n	800e4d2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e48e:	4b2a      	ldr	r3, [pc, #168]	; (800e538 <tcp_close_shutdown+0x1bc>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	429a      	cmp	r2, r3
 800e496:	d105      	bne.n	800e4a4 <tcp_close_shutdown+0x128>
 800e498:	4b27      	ldr	r3, [pc, #156]	; (800e538 <tcp_close_shutdown+0x1bc>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	4a26      	ldr	r2, [pc, #152]	; (800e538 <tcp_close_shutdown+0x1bc>)
 800e4a0:	6013      	str	r3, [r2, #0]
 800e4a2:	e013      	b.n	800e4cc <tcp_close_shutdown+0x150>
 800e4a4:	4b24      	ldr	r3, [pc, #144]	; (800e538 <tcp_close_shutdown+0x1bc>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	60bb      	str	r3, [r7, #8]
 800e4aa:	e00c      	b.n	800e4c6 <tcp_close_shutdown+0x14a>
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d104      	bne.n	800e4c0 <tcp_close_shutdown+0x144>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	68da      	ldr	r2, [r3, #12]
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	60da      	str	r2, [r3, #12]
 800e4be:	e005      	b.n	800e4cc <tcp_close_shutdown+0x150>
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	60bb      	str	r3, [r7, #8]
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1ef      	bne.n	800e4ac <tcp_close_shutdown+0x130>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f7ff fea0 	bl	800e218 <tcp_free>
      break;
 800e4d8:	e01a      	b.n	800e510 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f7ff ff14 	bl	800e308 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e4e0:	6879      	ldr	r1, [r7, #4]
 800e4e2:	4816      	ldr	r0, [pc, #88]	; (800e53c <tcp_close_shutdown+0x1c0>)
 800e4e4:	f001 fb30 	bl	800fb48 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f7ff feb1 	bl	800e250 <tcp_free_listen>
      break;
 800e4ee:	e00f      	b.n	800e510 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e4f0:	6879      	ldr	r1, [r7, #4]
 800e4f2:	480e      	ldr	r0, [pc, #56]	; (800e52c <tcp_close_shutdown+0x1b0>)
 800e4f4:	f001 fb28 	bl	800fb48 <tcp_pcb_remove>
 800e4f8:	4b0d      	ldr	r3, [pc, #52]	; (800e530 <tcp_close_shutdown+0x1b4>)
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f7ff fe8a 	bl	800e218 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e504:	e004      	b.n	800e510 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 f81a 	bl	800e540 <tcp_close_shutdown_fin>
 800e50c:	4603      	mov	r3, r0
 800e50e:	e000      	b.n	800e512 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e510:	2300      	movs	r3, #0
}
 800e512:	4618      	mov	r0, r3
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bdb0      	pop	{r4, r5, r7, pc}
 800e51a:	bf00      	nop
 800e51c:	0801e258 	.word	0x0801e258
 800e520:	0801e32c 	.word	0x0801e32c
 800e524:	0801e29c 	.word	0x0801e29c
 800e528:	0801e34c 	.word	0x0801e34c
 800e52c:	20077944 	.word	0x20077944
 800e530:	2007794c 	.word	0x2007794c
 800e534:	20077984 	.word	0x20077984
 800e538:	2007793c 	.word	0x2007793c
 800e53c:	20077940 	.word	0x20077940

0800e540 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d106      	bne.n	800e55c <tcp_close_shutdown_fin+0x1c>
 800e54e:	4b2e      	ldr	r3, [pc, #184]	; (800e608 <tcp_close_shutdown_fin+0xc8>)
 800e550:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e554:	492d      	ldr	r1, [pc, #180]	; (800e60c <tcp_close_shutdown_fin+0xcc>)
 800e556:	482e      	ldr	r0, [pc, #184]	; (800e610 <tcp_close_shutdown_fin+0xd0>)
 800e558:	f00a fb1a 	bl	8018b90 <iprintf>

  switch (pcb->state) {
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	7d1b      	ldrb	r3, [r3, #20]
 800e560:	2b07      	cmp	r3, #7
 800e562:	d020      	beq.n	800e5a6 <tcp_close_shutdown_fin+0x66>
 800e564:	2b07      	cmp	r3, #7
 800e566:	dc2b      	bgt.n	800e5c0 <tcp_close_shutdown_fin+0x80>
 800e568:	2b03      	cmp	r3, #3
 800e56a:	d002      	beq.n	800e572 <tcp_close_shutdown_fin+0x32>
 800e56c:	2b04      	cmp	r3, #4
 800e56e:	d00d      	beq.n	800e58c <tcp_close_shutdown_fin+0x4c>
 800e570:	e026      	b.n	800e5c0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f004 fdca 	bl	801310c <tcp_send_fin>
 800e578:	4603      	mov	r3, r0
 800e57a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d11f      	bne.n	800e5c4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2205      	movs	r2, #5
 800e588:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e58a:	e01b      	b.n	800e5c4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f004 fdbd 	bl	801310c <tcp_send_fin>
 800e592:	4603      	mov	r3, r0
 800e594:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d114      	bne.n	800e5c8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2205      	movs	r2, #5
 800e5a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e5a4:	e010      	b.n	800e5c8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f004 fdb0 	bl	801310c <tcp_send_fin>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e5b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d109      	bne.n	800e5cc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2209      	movs	r2, #9
 800e5bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e5be:	e005      	b.n	800e5cc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	e01c      	b.n	800e5fe <tcp_close_shutdown_fin+0xbe>
      break;
 800e5c4:	bf00      	nop
 800e5c6:	e002      	b.n	800e5ce <tcp_close_shutdown_fin+0x8e>
      break;
 800e5c8:	bf00      	nop
 800e5ca:	e000      	b.n	800e5ce <tcp_close_shutdown_fin+0x8e>
      break;
 800e5cc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d103      	bne.n	800e5de <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f004 fed6 	bl	8013388 <tcp_output>
 800e5dc:	e00d      	b.n	800e5fa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e5de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e6:	d108      	bne.n	800e5fa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	8b5b      	ldrh	r3, [r3, #26]
 800e5ec:	f043 0308 	orr.w	r3, r3, #8
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	e001      	b.n	800e5fe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	0801e258 	.word	0x0801e258
 800e60c:	0801e308 	.word	0x0801e308
 800e610:	0801e29c 	.word	0x0801e29c

0800e614 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d109      	bne.n	800e636 <tcp_close+0x22>
 800e622:	4b0f      	ldr	r3, [pc, #60]	; (800e660 <tcp_close+0x4c>)
 800e624:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e628:	490e      	ldr	r1, [pc, #56]	; (800e664 <tcp_close+0x50>)
 800e62a:	480f      	ldr	r0, [pc, #60]	; (800e668 <tcp_close+0x54>)
 800e62c:	f00a fab0 	bl	8018b90 <iprintf>
 800e630:	f06f 030f 	mvn.w	r3, #15
 800e634:	e00f      	b.n	800e656 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	7d1b      	ldrb	r3, [r3, #20]
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d006      	beq.n	800e64c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	8b5b      	ldrh	r3, [r3, #26]
 800e642:	f043 0310 	orr.w	r3, r3, #16
 800e646:	b29a      	uxth	r2, r3
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e64c:	2101      	movs	r1, #1
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f7ff fe94 	bl	800e37c <tcp_close_shutdown>
 800e654:	4603      	mov	r3, r0
}
 800e656:	4618      	mov	r0, r3
 800e658:	3708      	adds	r7, #8
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	0801e258 	.word	0x0801e258
 800e664:	0801e368 	.word	0x0801e368
 800e668:	0801e29c 	.word	0x0801e29c

0800e66c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d109      	bne.n	800e692 <tcp_shutdown+0x26>
 800e67e:	4b26      	ldr	r3, [pc, #152]	; (800e718 <tcp_shutdown+0xac>)
 800e680:	f240 2207 	movw	r2, #519	; 0x207
 800e684:	4925      	ldr	r1, [pc, #148]	; (800e71c <tcp_shutdown+0xb0>)
 800e686:	4826      	ldr	r0, [pc, #152]	; (800e720 <tcp_shutdown+0xb4>)
 800e688:	f00a fa82 	bl	8018b90 <iprintf>
 800e68c:	f06f 030f 	mvn.w	r3, #15
 800e690:	e03d      	b.n	800e70e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	7d1b      	ldrb	r3, [r3, #20]
 800e696:	2b01      	cmp	r3, #1
 800e698:	d102      	bne.n	800e6a0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800e69a:	f06f 030a 	mvn.w	r3, #10
 800e69e:	e036      	b.n	800e70e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d01b      	beq.n	800e6de <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	8b5b      	ldrh	r3, [r3, #26]
 800e6aa:	f043 0310 	orr.w	r3, r3, #16
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d005      	beq.n	800e6c6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e6ba:	2101      	movs	r1, #1
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f7ff fe5d 	bl	800e37c <tcp_close_shutdown>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	e023      	b.n	800e70e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d007      	beq.n	800e6de <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7ff fae4 	bl	800dca0 <pbuf_free>
      pcb->refused_data = NULL;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d013      	beq.n	800e70c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	7d1b      	ldrb	r3, [r3, #20]
 800e6e8:	2b04      	cmp	r3, #4
 800e6ea:	dc02      	bgt.n	800e6f2 <tcp_shutdown+0x86>
 800e6ec:	2b03      	cmp	r3, #3
 800e6ee:	da02      	bge.n	800e6f6 <tcp_shutdown+0x8a>
 800e6f0:	e009      	b.n	800e706 <tcp_shutdown+0x9a>
 800e6f2:	2b07      	cmp	r3, #7
 800e6f4:	d107      	bne.n	800e706 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f7ff fe3d 	bl	800e37c <tcp_close_shutdown>
 800e702:	4603      	mov	r3, r0
 800e704:	e003      	b.n	800e70e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e706:	f06f 030a 	mvn.w	r3, #10
 800e70a:	e000      	b.n	800e70e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	0801e258 	.word	0x0801e258
 800e71c:	0801e380 	.word	0x0801e380
 800e720:	0801e29c 	.word	0x0801e29c

0800e724 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b08e      	sub	sp, #56	; 0x38
 800e728:	af04      	add	r7, sp, #16
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d107      	bne.n	800e744 <tcp_abandon+0x20>
 800e734:	4b52      	ldr	r3, [pc, #328]	; (800e880 <tcp_abandon+0x15c>)
 800e736:	f240 223d 	movw	r2, #573	; 0x23d
 800e73a:	4952      	ldr	r1, [pc, #328]	; (800e884 <tcp_abandon+0x160>)
 800e73c:	4852      	ldr	r0, [pc, #328]	; (800e888 <tcp_abandon+0x164>)
 800e73e:	f00a fa27 	bl	8018b90 <iprintf>
 800e742:	e099      	b.n	800e878 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	7d1b      	ldrb	r3, [r3, #20]
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d106      	bne.n	800e75a <tcp_abandon+0x36>
 800e74c:	4b4c      	ldr	r3, [pc, #304]	; (800e880 <tcp_abandon+0x15c>)
 800e74e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e752:	494e      	ldr	r1, [pc, #312]	; (800e88c <tcp_abandon+0x168>)
 800e754:	484c      	ldr	r0, [pc, #304]	; (800e888 <tcp_abandon+0x164>)
 800e756:	f00a fa1b 	bl	8018b90 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	7d1b      	ldrb	r3, [r3, #20]
 800e75e:	2b0a      	cmp	r3, #10
 800e760:	d107      	bne.n	800e772 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e762:	6879      	ldr	r1, [r7, #4]
 800e764:	484a      	ldr	r0, [pc, #296]	; (800e890 <tcp_abandon+0x16c>)
 800e766:	f001 f9ef 	bl	800fb48 <tcp_pcb_remove>
    tcp_free(pcb);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f7ff fd54 	bl	800e218 <tcp_free>
 800e770:	e082      	b.n	800e878 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e776:	2300      	movs	r3, #0
 800e778:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e77e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e784:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e78c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	7d1b      	ldrb	r3, [r3, #20]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d126      	bne.n	800e7ea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	8adb      	ldrh	r3, [r3, #22]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d02e      	beq.n	800e802 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e7a4:	4b3b      	ldr	r3, [pc, #236]	; (800e894 <tcp_abandon+0x170>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d105      	bne.n	800e7ba <tcp_abandon+0x96>
 800e7ae:	4b39      	ldr	r3, [pc, #228]	; (800e894 <tcp_abandon+0x170>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	4a37      	ldr	r2, [pc, #220]	; (800e894 <tcp_abandon+0x170>)
 800e7b6:	6013      	str	r3, [r2, #0]
 800e7b8:	e013      	b.n	800e7e2 <tcp_abandon+0xbe>
 800e7ba:	4b36      	ldr	r3, [pc, #216]	; (800e894 <tcp_abandon+0x170>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	61fb      	str	r3, [r7, #28]
 800e7c0:	e00c      	b.n	800e7dc <tcp_abandon+0xb8>
 800e7c2:	69fb      	ldr	r3, [r7, #28]
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d104      	bne.n	800e7d6 <tcp_abandon+0xb2>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	68da      	ldr	r2, [r3, #12]
 800e7d0:	69fb      	ldr	r3, [r7, #28]
 800e7d2:	60da      	str	r2, [r3, #12]
 800e7d4:	e005      	b.n	800e7e2 <tcp_abandon+0xbe>
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	61fb      	str	r3, [r7, #28]
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1ef      	bne.n	800e7c2 <tcp_abandon+0x9e>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	60da      	str	r2, [r3, #12]
 800e7e8:	e00b      	b.n	800e802 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	8adb      	ldrh	r3, [r3, #22]
 800e7f2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e7f4:	6879      	ldr	r1, [r7, #4]
 800e7f6:	4828      	ldr	r0, [pc, #160]	; (800e898 <tcp_abandon+0x174>)
 800e7f8:	f001 f9a6 	bl	800fb48 <tcp_pcb_remove>
 800e7fc:	4b27      	ldr	r3, [pc, #156]	; (800e89c <tcp_abandon+0x178>)
 800e7fe:	2201      	movs	r2, #1
 800e800:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e806:	2b00      	cmp	r3, #0
 800e808:	d004      	beq.n	800e814 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e80e:	4618      	mov	r0, r3
 800e810:	f000 fe7a 	bl	800f508 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d004      	beq.n	800e826 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e820:	4618      	mov	r0, r3
 800e822:	f000 fe71 	bl	800f508 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d004      	beq.n	800e838 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e832:	4618      	mov	r0, r3
 800e834:	f000 fe68 	bl	800f508 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00e      	beq.n	800e85c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e83e:	6879      	ldr	r1, [r7, #4]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	3304      	adds	r3, #4
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	8b12      	ldrh	r2, [r2, #24]
 800e848:	9202      	str	r2, [sp, #8]
 800e84a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e84c:	9201      	str	r2, [sp, #4]
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	460b      	mov	r3, r1
 800e852:	697a      	ldr	r2, [r7, #20]
 800e854:	69b9      	ldr	r1, [r7, #24]
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f005 fb4c 	bl	8013ef4 <tcp_rst>
    }
    last_state = pcb->state;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	7d1b      	ldrb	r3, [r3, #20]
 800e860:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7ff fcd8 	bl	800e218 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d004      	beq.n	800e878 <tcp_abandon+0x154>
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	f06f 010c 	mvn.w	r1, #12
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	4798      	blx	r3
  }
}
 800e878:	3728      	adds	r7, #40	; 0x28
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	0801e258 	.word	0x0801e258
 800e884:	0801e39c 	.word	0x0801e39c
 800e888:	0801e29c 	.word	0x0801e29c
 800e88c:	0801e3b8 	.word	0x0801e3b8
 800e890:	20077948 	.word	0x20077948
 800e894:	2007793c 	.word	0x2007793c
 800e898:	20077944 	.word	0x20077944
 800e89c:	2007794c 	.word	0x2007794c

0800e8a0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e8a8:	2101      	movs	r1, #1
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7ff ff3a 	bl	800e724 <tcp_abandon>
}
 800e8b0:	bf00      	nop
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d106      	bne.n	800e8d4 <tcp_update_rcv_ann_wnd+0x1c>
 800e8c6:	4b25      	ldr	r3, [pc, #148]	; (800e95c <tcp_update_rcv_ann_wnd+0xa4>)
 800e8c8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e8cc:	4924      	ldr	r1, [pc, #144]	; (800e960 <tcp_update_rcv_ann_wnd+0xa8>)
 800e8ce:	4825      	ldr	r0, [pc, #148]	; (800e964 <tcp_update_rcv_ann_wnd+0xac>)
 800e8d0:	f00a f95e 	bl	8018b90 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e8dc:	4413      	add	r3, r2
 800e8de:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e8e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e8ec:	bf28      	it	cs
 800e8ee:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 800e8f2:	b292      	uxth	r2, r2
 800e8f4:	4413      	add	r3, r2
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	1ad3      	subs	r3, r2, r3
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	db08      	blt.n	800e910 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	e020      	b.n	800e952 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e918:	1ad3      	subs	r3, r2, r3
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	dd03      	ble.n	800e926 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e924:	e014      	b.n	800e950 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e938:	d306      	bcc.n	800e948 <tcp_update_rcv_ann_wnd+0x90>
 800e93a:	4b08      	ldr	r3, [pc, #32]	; (800e95c <tcp_update_rcv_ann_wnd+0xa4>)
 800e93c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e940:	4909      	ldr	r1, [pc, #36]	; (800e968 <tcp_update_rcv_ann_wnd+0xb0>)
 800e942:	4808      	ldr	r0, [pc, #32]	; (800e964 <tcp_update_rcv_ann_wnd+0xac>)
 800e944:	f00a f924 	bl	8018b90 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e950:	2300      	movs	r3, #0
  }
}
 800e952:	4618      	mov	r0, r3
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	0801e258 	.word	0x0801e258
 800e960:	0801e4b4 	.word	0x0801e4b4
 800e964:	0801e29c 	.word	0x0801e29c
 800e968:	0801e4d8 	.word	0x0801e4d8

0800e96c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	460b      	mov	r3, r1
 800e976:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d107      	bne.n	800e98e <tcp_recved+0x22>
 800e97e:	4b1f      	ldr	r3, [pc, #124]	; (800e9fc <tcp_recved+0x90>)
 800e980:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e984:	491e      	ldr	r1, [pc, #120]	; (800ea00 <tcp_recved+0x94>)
 800e986:	481f      	ldr	r0, [pc, #124]	; (800ea04 <tcp_recved+0x98>)
 800e988:	f00a f902 	bl	8018b90 <iprintf>
 800e98c:	e032      	b.n	800e9f4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	7d1b      	ldrb	r3, [r3, #20]
 800e992:	2b01      	cmp	r3, #1
 800e994:	d106      	bne.n	800e9a4 <tcp_recved+0x38>
 800e996:	4b19      	ldr	r3, [pc, #100]	; (800e9fc <tcp_recved+0x90>)
 800e998:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e99c:	491a      	ldr	r1, [pc, #104]	; (800ea08 <tcp_recved+0x9c>)
 800e99e:	4819      	ldr	r0, [pc, #100]	; (800ea04 <tcp_recved+0x98>)
 800e9a0:	f00a f8f6 	bl	8018b90 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e9a8:	887b      	ldrh	r3, [r7, #2]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e9ae:	89fb      	ldrh	r3, [r7, #14]
 800e9b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9b4:	d804      	bhi.n	800e9c0 <tcp_recved+0x54>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9ba:	89fa      	ldrh	r2, [r7, #14]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d204      	bcs.n	800e9ca <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9c6:	851a      	strh	r2, [r3, #40]	; 0x28
 800e9c8:	e002      	b.n	800e9d0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	89fa      	ldrh	r2, [r7, #14]
 800e9ce:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f7ff ff71 	bl	800e8b8 <tcp_update_rcv_ann_wnd>
 800e9d6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9de:	d309      	bcc.n	800e9f4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	8b5b      	ldrh	r3, [r3, #26]
 800e9e4:	f043 0302 	orr.w	r3, r3, #2
 800e9e8:	b29a      	uxth	r2, r3
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f004 fcca 	bl	8013388 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	0801e258 	.word	0x0801e258
 800ea00:	0801e4f4 	.word	0x0801e4f4
 800ea04:	0801e29c 	.word	0x0801e29c
 800ea08:	0801e50c 	.word	0x0801e50c

0800ea0c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ea16:	4b1e      	ldr	r3, [pc, #120]	; (800ea90 <tcp_new_port+0x84>)
 800ea18:	881b      	ldrh	r3, [r3, #0]
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	4b1c      	ldr	r3, [pc, #112]	; (800ea90 <tcp_new_port+0x84>)
 800ea20:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ea22:	4b1b      	ldr	r3, [pc, #108]	; (800ea90 <tcp_new_port+0x84>)
 800ea24:	881b      	ldrh	r3, [r3, #0]
 800ea26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d103      	bne.n	800ea36 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ea2e:	4b18      	ldr	r3, [pc, #96]	; (800ea90 <tcp_new_port+0x84>)
 800ea30:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ea34:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ea36:	2300      	movs	r3, #0
 800ea38:	71fb      	strb	r3, [r7, #7]
 800ea3a:	e01e      	b.n	800ea7a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ea3c:	79fb      	ldrb	r3, [r7, #7]
 800ea3e:	4a15      	ldr	r2, [pc, #84]	; (800ea94 <tcp_new_port+0x88>)
 800ea40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	603b      	str	r3, [r7, #0]
 800ea48:	e011      	b.n	800ea6e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	8ada      	ldrh	r2, [r3, #22]
 800ea4e:	4b10      	ldr	r3, [pc, #64]	; (800ea90 <tcp_new_port+0x84>)
 800ea50:	881b      	ldrh	r3, [r3, #0]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d108      	bne.n	800ea68 <tcp_new_port+0x5c>
        n++;
 800ea56:	88bb      	ldrh	r3, [r7, #4]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ea5c:	88bb      	ldrh	r3, [r7, #4]
 800ea5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ea62:	d3d8      	bcc.n	800ea16 <tcp_new_port+0xa>
          return 0;
 800ea64:	2300      	movs	r3, #0
 800ea66:	e00d      	b.n	800ea84 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	603b      	str	r3, [r7, #0]
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1ea      	bne.n	800ea4a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ea74:	79fb      	ldrb	r3, [r7, #7]
 800ea76:	3301      	adds	r3, #1
 800ea78:	71fb      	strb	r3, [r7, #7]
 800ea7a:	79fb      	ldrb	r3, [r7, #7]
 800ea7c:	2b03      	cmp	r3, #3
 800ea7e:	d9dd      	bls.n	800ea3c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ea80:	4b03      	ldr	r3, [pc, #12]	; (800ea90 <tcp_new_port+0x84>)
 800ea82:	881b      	ldrh	r3, [r3, #0]
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	370c      	adds	r7, #12
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr
 800ea90:	20000024 	.word	0x20000024
 800ea94:	08020330 	.word	0x08020330

0800ea98 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b08a      	sub	sp, #40	; 0x28
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	603b      	str	r3, [r7, #0]
 800eaa4:	4613      	mov	r3, r2
 800eaa6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d109      	bne.n	800eac6 <tcp_connect+0x2e>
 800eab2:	4b7d      	ldr	r3, [pc, #500]	; (800eca8 <tcp_connect+0x210>)
 800eab4:	f240 4235 	movw	r2, #1077	; 0x435
 800eab8:	497c      	ldr	r1, [pc, #496]	; (800ecac <tcp_connect+0x214>)
 800eaba:	487d      	ldr	r0, [pc, #500]	; (800ecb0 <tcp_connect+0x218>)
 800eabc:	f00a f868 	bl	8018b90 <iprintf>
 800eac0:	f06f 030f 	mvn.w	r3, #15
 800eac4:	e0ec      	b.n	800eca0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d109      	bne.n	800eae0 <tcp_connect+0x48>
 800eacc:	4b76      	ldr	r3, [pc, #472]	; (800eca8 <tcp_connect+0x210>)
 800eace:	f240 4236 	movw	r2, #1078	; 0x436
 800ead2:	4978      	ldr	r1, [pc, #480]	; (800ecb4 <tcp_connect+0x21c>)
 800ead4:	4876      	ldr	r0, [pc, #472]	; (800ecb0 <tcp_connect+0x218>)
 800ead6:	f00a f85b 	bl	8018b90 <iprintf>
 800eada:	f06f 030f 	mvn.w	r3, #15
 800eade:	e0df      	b.n	800eca0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	7d1b      	ldrb	r3, [r3, #20]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d009      	beq.n	800eafc <tcp_connect+0x64>
 800eae8:	4b6f      	ldr	r3, [pc, #444]	; (800eca8 <tcp_connect+0x210>)
 800eaea:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800eaee:	4972      	ldr	r1, [pc, #456]	; (800ecb8 <tcp_connect+0x220>)
 800eaf0:	486f      	ldr	r0, [pc, #444]	; (800ecb0 <tcp_connect+0x218>)
 800eaf2:	f00a f84d 	bl	8018b90 <iprintf>
 800eaf6:	f06f 0309 	mvn.w	r3, #9
 800eafa:	e0d1      	b.n	800eca0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d002      	beq.n	800eb08 <tcp_connect+0x70>
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	e000      	b.n	800eb0a <tcp_connect+0x72>
 800eb08:	2300      	movs	r3, #0
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	88fa      	ldrh	r2, [r7, #6]
 800eb12:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	7a1b      	ldrb	r3, [r3, #8]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d006      	beq.n	800eb2a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	7a1b      	ldrb	r3, [r3, #8]
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7fe fd2f 	bl	800d584 <netif_get_by_index>
 800eb26:	6278      	str	r0, [r7, #36]	; 0x24
 800eb28:	e005      	b.n	800eb36 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f007 fb74 	bl	801621c <ip4_route>
 800eb34:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800eb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d102      	bne.n	800eb42 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800eb3c:	f06f 0303 	mvn.w	r3, #3
 800eb40:	e0ae      	b.n	800eca0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d003      	beq.n	800eb50 <tcp_connect+0xb8>
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d111      	bne.n	800eb74 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <tcp_connect+0xc4>
 800eb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb58:	3304      	adds	r3, #4
 800eb5a:	e000      	b.n	800eb5e <tcp_connect+0xc6>
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d102      	bne.n	800eb6c <tcp_connect+0xd4>
      return ERR_RTE;
 800eb66:	f06f 0303 	mvn.w	r3, #3
 800eb6a:	e099      	b.n	800eca0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	8adb      	ldrh	r3, [r3, #22]
 800eb78:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	8adb      	ldrh	r3, [r3, #22]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d10c      	bne.n	800eb9c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800eb82:	f7ff ff43 	bl	800ea0c <tcp_new_port>
 800eb86:	4603      	mov	r3, r0
 800eb88:	461a      	mov	r2, r3
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	8adb      	ldrh	r3, [r3, #22]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d102      	bne.n	800eb9c <tcp_connect+0x104>
      return ERR_BUF;
 800eb96:	f06f 0301 	mvn.w	r3, #1
 800eb9a:	e081      	b.n	800eca0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f001 f867 	bl	800fc70 <tcp_next_iss>
 800eba2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2200      	movs	r2, #0
 800eba8:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	697a      	ldr	r2, [r7, #20]
 800ebae:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	1e5a      	subs	r2, r3, #1
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	1e5a      	subs	r2, r3, #1
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	1e5a      	subs	r2, r3, #1
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ebce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ebe6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebf0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	3304      	adds	r3, #4
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ebfe:	f001 f85d 	bl	800fcbc <tcp_eff_send_mss_netif>
 800ec02:	4603      	mov	r3, r0
 800ec04:	461a      	mov	r2, r3
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	683a      	ldr	r2, [r7, #0]
 800ec16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800ec1a:	2102      	movs	r1, #2
 800ec1c:	68f8      	ldr	r0, [r7, #12]
 800ec1e:	f004 fac5 	bl	80131ac <tcp_enqueue_flags>
 800ec22:	4603      	mov	r3, r0
 800ec24:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800ec26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d136      	bne.n	800ec9c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2202      	movs	r2, #2
 800ec32:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800ec34:	8b7b      	ldrh	r3, [r7, #26]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d021      	beq.n	800ec7e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ec3a:	4b20      	ldr	r3, [pc, #128]	; (800ecbc <tcp_connect+0x224>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d105      	bne.n	800ec50 <tcp_connect+0x1b8>
 800ec44:	4b1d      	ldr	r3, [pc, #116]	; (800ecbc <tcp_connect+0x224>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	4a1c      	ldr	r2, [pc, #112]	; (800ecbc <tcp_connect+0x224>)
 800ec4c:	6013      	str	r3, [r2, #0]
 800ec4e:	e013      	b.n	800ec78 <tcp_connect+0x1e0>
 800ec50:	4b1a      	ldr	r3, [pc, #104]	; (800ecbc <tcp_connect+0x224>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	623b      	str	r3, [r7, #32]
 800ec56:	e00c      	b.n	800ec72 <tcp_connect+0x1da>
 800ec58:	6a3b      	ldr	r3, [r7, #32]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d104      	bne.n	800ec6c <tcp_connect+0x1d4>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	68da      	ldr	r2, [r3, #12]
 800ec66:	6a3b      	ldr	r3, [r7, #32]
 800ec68:	60da      	str	r2, [r3, #12]
 800ec6a:	e005      	b.n	800ec78 <tcp_connect+0x1e0>
 800ec6c:	6a3b      	ldr	r3, [r7, #32]
 800ec6e:	68db      	ldr	r3, [r3, #12]
 800ec70:	623b      	str	r3, [r7, #32]
 800ec72:	6a3b      	ldr	r3, [r7, #32]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1ef      	bne.n	800ec58 <tcp_connect+0x1c0>
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800ec7e:	4b10      	ldr	r3, [pc, #64]	; (800ecc0 <tcp_connect+0x228>)
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	60da      	str	r2, [r3, #12]
 800ec86:	4a0e      	ldr	r2, [pc, #56]	; (800ecc0 <tcp_connect+0x228>)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6013      	str	r3, [r2, #0]
 800ec8c:	f005 faf2 	bl	8014274 <tcp_timer_needed>
 800ec90:	4b0c      	ldr	r3, [pc, #48]	; (800ecc4 <tcp_connect+0x22c>)
 800ec92:	2201      	movs	r2, #1
 800ec94:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800ec96:	68f8      	ldr	r0, [r7, #12]
 800ec98:	f004 fb76 	bl	8013388 <tcp_output>
  }
  return ret;
 800ec9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3728      	adds	r7, #40	; 0x28
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	0801e258 	.word	0x0801e258
 800ecac:	0801e534 	.word	0x0801e534
 800ecb0:	0801e29c 	.word	0x0801e29c
 800ecb4:	0801e550 	.word	0x0801e550
 800ecb8:	0801e56c 	.word	0x0801e56c
 800ecbc:	2007793c 	.word	0x2007793c
 800ecc0:	20077944 	.word	0x20077944
 800ecc4:	2007794c 	.word	0x2007794c

0800ecc8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ecc8:	b5b0      	push	{r4, r5, r7, lr}
 800ecca:	b090      	sub	sp, #64	; 0x40
 800eccc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ecd4:	4b94      	ldr	r3, [pc, #592]	; (800ef28 <tcp_slowtmr+0x260>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	3301      	adds	r3, #1
 800ecda:	4a93      	ldr	r2, [pc, #588]	; (800ef28 <tcp_slowtmr+0x260>)
 800ecdc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ecde:	4b93      	ldr	r3, [pc, #588]	; (800ef2c <tcp_slowtmr+0x264>)
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	3301      	adds	r3, #1
 800ece4:	b2da      	uxtb	r2, r3
 800ece6:	4b91      	ldr	r3, [pc, #580]	; (800ef2c <tcp_slowtmr+0x264>)
 800ece8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ecea:	2300      	movs	r3, #0
 800ecec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ecee:	4b90      	ldr	r3, [pc, #576]	; (800ef30 <tcp_slowtmr+0x268>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ecf4:	e29d      	b.n	800f232 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ecf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf8:	7d1b      	ldrb	r3, [r3, #20]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d106      	bne.n	800ed0c <tcp_slowtmr+0x44>
 800ecfe:	4b8d      	ldr	r3, [pc, #564]	; (800ef34 <tcp_slowtmr+0x26c>)
 800ed00:	f240 42be 	movw	r2, #1214	; 0x4be
 800ed04:	498c      	ldr	r1, [pc, #560]	; (800ef38 <tcp_slowtmr+0x270>)
 800ed06:	488d      	ldr	r0, [pc, #564]	; (800ef3c <tcp_slowtmr+0x274>)
 800ed08:	f009 ff42 	bl	8018b90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ed0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0e:	7d1b      	ldrb	r3, [r3, #20]
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d106      	bne.n	800ed22 <tcp_slowtmr+0x5a>
 800ed14:	4b87      	ldr	r3, [pc, #540]	; (800ef34 <tcp_slowtmr+0x26c>)
 800ed16:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ed1a:	4989      	ldr	r1, [pc, #548]	; (800ef40 <tcp_slowtmr+0x278>)
 800ed1c:	4887      	ldr	r0, [pc, #540]	; (800ef3c <tcp_slowtmr+0x274>)
 800ed1e:	f009 ff37 	bl	8018b90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ed22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed24:	7d1b      	ldrb	r3, [r3, #20]
 800ed26:	2b0a      	cmp	r3, #10
 800ed28:	d106      	bne.n	800ed38 <tcp_slowtmr+0x70>
 800ed2a:	4b82      	ldr	r3, [pc, #520]	; (800ef34 <tcp_slowtmr+0x26c>)
 800ed2c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ed30:	4984      	ldr	r1, [pc, #528]	; (800ef44 <tcp_slowtmr+0x27c>)
 800ed32:	4882      	ldr	r0, [pc, #520]	; (800ef3c <tcp_slowtmr+0x274>)
 800ed34:	f009 ff2c 	bl	8018b90 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ed38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3a:	7f9a      	ldrb	r2, [r3, #30]
 800ed3c:	4b7b      	ldr	r3, [pc, #492]	; (800ef2c <tcp_slowtmr+0x264>)
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d105      	bne.n	800ed50 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ed44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ed48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ed4e:	e270      	b.n	800f232 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ed50:	4b76      	ldr	r3, [pc, #472]	; (800ef2c <tcp_slowtmr+0x264>)
 800ed52:	781a      	ldrb	r2, [r3, #0]
 800ed54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed56:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ed64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed66:	7d1b      	ldrb	r3, [r3, #20]
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d10a      	bne.n	800ed82 <tcp_slowtmr+0xba>
 800ed6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed72:	2b05      	cmp	r3, #5
 800ed74:	d905      	bls.n	800ed82 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ed76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed80:	e11e      	b.n	800efc0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ed82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed88:	2b0b      	cmp	r3, #11
 800ed8a:	d905      	bls.n	800ed98 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ed8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed90:	3301      	adds	r3, #1
 800ed92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed96:	e113      	b.n	800efc0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ed98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d075      	beq.n	800ee8e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800eda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d006      	beq.n	800edb8 <tcp_slowtmr+0xf0>
 800edaa:	4b62      	ldr	r3, [pc, #392]	; (800ef34 <tcp_slowtmr+0x26c>)
 800edac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800edb0:	4965      	ldr	r1, [pc, #404]	; (800ef48 <tcp_slowtmr+0x280>)
 800edb2:	4862      	ldr	r0, [pc, #392]	; (800ef3c <tcp_slowtmr+0x274>)
 800edb4:	f009 feec 	bl	8018b90 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800edb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d106      	bne.n	800edce <tcp_slowtmr+0x106>
 800edc0:	4b5c      	ldr	r3, [pc, #368]	; (800ef34 <tcp_slowtmr+0x26c>)
 800edc2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800edc6:	4961      	ldr	r1, [pc, #388]	; (800ef4c <tcp_slowtmr+0x284>)
 800edc8:	485c      	ldr	r0, [pc, #368]	; (800ef3c <tcp_slowtmr+0x274>)
 800edca:	f009 fee1 	bl	8018b90 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800edce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800edd4:	2b0b      	cmp	r3, #11
 800edd6:	d905      	bls.n	800ede4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800edd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eddc:	3301      	adds	r3, #1
 800edde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ede2:	e0ed      	b.n	800efc0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ede4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800edea:	3b01      	subs	r3, #1
 800edec:	4a58      	ldr	r2, [pc, #352]	; (800ef50 <tcp_slowtmr+0x288>)
 800edee:	5cd3      	ldrb	r3, [r2, r3]
 800edf0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800edf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800edf8:	7c7a      	ldrb	r2, [r7, #17]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d907      	bls.n	800ee0e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800edfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ee04:	3301      	adds	r3, #1
 800ee06:	b2da      	uxtb	r2, r3
 800ee08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ee0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ee14:	7c7a      	ldrb	r2, [r7, #17]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	f200 80d2 	bhi.w	800efc0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ee20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d108      	bne.n	800ee3c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ee2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee2c:	f005 f954 	bl	80140d8 <tcp_zero_window_probe>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d014      	beq.n	800ee60 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ee36:	2300      	movs	r3, #0
 800ee38:	623b      	str	r3, [r7, #32]
 800ee3a:	e011      	b.n	800ee60 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ee3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee42:	4619      	mov	r1, r3
 800ee44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee46:	f004 f819 	bl	8012e7c <tcp_split_unsent_seg>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d107      	bne.n	800ee60 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ee50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee52:	f004 fa99 	bl	8013388 <tcp_output>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d101      	bne.n	800ee60 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ee60:	6a3b      	ldr	r3, [r7, #32]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	f000 80ac 	beq.w	800efc0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ee68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ee70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ee76:	2b06      	cmp	r3, #6
 800ee78:	f200 80a2 	bhi.w	800efc0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ee7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ee82:	3301      	adds	r3, #1
 800ee84:	b2da      	uxtb	r2, r3
 800ee86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ee8c:	e098      	b.n	800efc0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ee8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	db0f      	blt.n	800eeb8 <tcp_slowtmr+0x1f0>
 800ee98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ee9e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d008      	beq.n	800eeb8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800eea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	3301      	adds	r3, #1
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	b21a      	sxth	r2, r3
 800eeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800eeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800eebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800eec4:	429a      	cmp	r2, r3
 800eec6:	db7b      	blt.n	800efc0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800eec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eeca:	f004 fd53 	bl	8013974 <tcp_rexmit_rto_prepare>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d007      	beq.n	800eee4 <tcp_slowtmr+0x21c>
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d171      	bne.n	800efc0 <tcp_slowtmr+0x2f8>
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d06d      	beq.n	800efc0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800eee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee6:	7d1b      	ldrb	r3, [r3, #20]
 800eee8:	2b02      	cmp	r3, #2
 800eeea:	d03a      	beq.n	800ef62 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800eeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eef2:	2b0c      	cmp	r3, #12
 800eef4:	bf28      	it	cs
 800eef6:	230c      	movcs	r3, #12
 800eef8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800eefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ef00:	10db      	asrs	r3, r3, #3
 800ef02:	b21b      	sxth	r3, r3
 800ef04:	461a      	mov	r2, r3
 800ef06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef0c:	4413      	add	r3, r2
 800ef0e:	7efa      	ldrb	r2, [r7, #27]
 800ef10:	4910      	ldr	r1, [pc, #64]	; (800ef54 <tcp_slowtmr+0x28c>)
 800ef12:	5c8a      	ldrb	r2, [r1, r2]
 800ef14:	4093      	lsls	r3, r2
 800ef16:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	dc1a      	bgt.n	800ef58 <tcp_slowtmr+0x290>
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	b21a      	sxth	r2, r3
 800ef26:	e019      	b.n	800ef5c <tcp_slowtmr+0x294>
 800ef28:	20077938 	.word	0x20077938
 800ef2c:	2007794e 	.word	0x2007794e
 800ef30:	20077944 	.word	0x20077944
 800ef34:	0801e258 	.word	0x0801e258
 800ef38:	0801e59c 	.word	0x0801e59c
 800ef3c:	0801e29c 	.word	0x0801e29c
 800ef40:	0801e5c8 	.word	0x0801e5c8
 800ef44:	0801e5f4 	.word	0x0801e5f4
 800ef48:	0801e624 	.word	0x0801e624
 800ef4c:	0801e658 	.word	0x0801e658
 800ef50:	08020328 	.word	0x08020328
 800ef54:	08020318 	.word	0x08020318
 800ef58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ef5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ef62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef64:	2200      	movs	r2, #0
 800ef66:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ef68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ef6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef74:	4293      	cmp	r3, r2
 800ef76:	bf28      	it	cs
 800ef78:	4613      	movcs	r3, r2
 800ef7a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ef7c:	8a7b      	ldrh	r3, [r7, #18]
 800ef7e:	085b      	lsrs	r3, r3, #1
 800ef80:	b29a      	uxth	r2, r3
 800ef82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ef88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ef8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef92:	005b      	lsls	r3, r3, #1
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d206      	bcs.n	800efa8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ef9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef9e:	005b      	lsls	r3, r3, #1
 800efa0:	b29a      	uxth	r2, r3
 800efa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800efa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efaa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800efb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb4:	2200      	movs	r2, #0
 800efb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800efba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efbc:	f004 fd4a 	bl	8013a54 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc2:	7d1b      	ldrb	r3, [r3, #20]
 800efc4:	2b06      	cmp	r3, #6
 800efc6:	d111      	bne.n	800efec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800efc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efca:	8b5b      	ldrh	r3, [r3, #26]
 800efcc:	f003 0310 	and.w	r3, r3, #16
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d00b      	beq.n	800efec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800efd4:	4b9c      	ldr	r3, [pc, #624]	; (800f248 <tcp_slowtmr+0x580>)
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efda:	6a1b      	ldr	r3, [r3, #32]
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	2b28      	cmp	r3, #40	; 0x28
 800efe0:	d904      	bls.n	800efec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800efe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efe6:	3301      	adds	r3, #1
 800efe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800efec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efee:	7a5b      	ldrb	r3, [r3, #9]
 800eff0:	f003 0308 	and.w	r3, r3, #8
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d04a      	beq.n	800f08e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800effc:	2b04      	cmp	r3, #4
 800effe:	d003      	beq.n	800f008 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f002:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f004:	2b07      	cmp	r3, #7
 800f006:	d142      	bne.n	800f08e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f008:	4b8f      	ldr	r3, [pc, #572]	; (800f248 <tcp_slowtmr+0x580>)
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00e:	6a1b      	ldr	r3, [r3, #32]
 800f010:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f014:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f018:	4b8c      	ldr	r3, [pc, #560]	; (800f24c <tcp_slowtmr+0x584>)
 800f01a:	440b      	add	r3, r1
 800f01c:	498c      	ldr	r1, [pc, #560]	; (800f250 <tcp_slowtmr+0x588>)
 800f01e:	fba1 1303 	umull	r1, r3, r1, r3
 800f022:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f024:	429a      	cmp	r2, r3
 800f026:	d90a      	bls.n	800f03e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f02c:	3301      	adds	r3, #1
 800f02e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f036:	3301      	adds	r3, #1
 800f038:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f03c:	e027      	b.n	800f08e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f03e:	4b82      	ldr	r3, [pc, #520]	; (800f248 <tcp_slowtmr+0x580>)
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f044:	6a1b      	ldr	r3, [r3, #32]
 800f046:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f050:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f054:	4618      	mov	r0, r3
 800f056:	4b7f      	ldr	r3, [pc, #508]	; (800f254 <tcp_slowtmr+0x58c>)
 800f058:	fb00 f303 	mul.w	r3, r0, r3
 800f05c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f05e:	497c      	ldr	r1, [pc, #496]	; (800f250 <tcp_slowtmr+0x588>)
 800f060:	fba1 1303 	umull	r1, r3, r1, r3
 800f064:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f066:	429a      	cmp	r2, r3
 800f068:	d911      	bls.n	800f08e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f06a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f06c:	f004 fff4 	bl	8014058 <tcp_keepalive>
 800f070:	4603      	mov	r3, r0
 800f072:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f076:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d107      	bne.n	800f08e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f080:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f084:	3301      	adds	r3, #1
 800f086:	b2da      	uxtb	r2, r3
 800f088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f092:	2b00      	cmp	r3, #0
 800f094:	d011      	beq.n	800f0ba <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f096:	4b6c      	ldr	r3, [pc, #432]	; (800f248 <tcp_slowtmr+0x580>)
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09c:	6a1b      	ldr	r3, [r3, #32]
 800f09e:	1ad2      	subs	r2, r2, r3
 800f0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	005b      	lsls	r3, r3, #1
 800f0ac:	440b      	add	r3, r1
 800f0ae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d302      	bcc.n	800f0ba <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f0b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0b6:	f000 feab 	bl	800fe10 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0bc:	7d1b      	ldrb	r3, [r3, #20]
 800f0be:	2b03      	cmp	r3, #3
 800f0c0:	d10b      	bne.n	800f0da <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0c2:	4b61      	ldr	r3, [pc, #388]	; (800f248 <tcp_slowtmr+0x580>)
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c8:	6a1b      	ldr	r3, [r3, #32]
 800f0ca:	1ad3      	subs	r3, r2, r3
 800f0cc:	2b28      	cmp	r3, #40	; 0x28
 800f0ce:	d904      	bls.n	800f0da <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0dc:	7d1b      	ldrb	r3, [r3, #20]
 800f0de:	2b09      	cmp	r3, #9
 800f0e0:	d10b      	bne.n	800f0fa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f0e2:	4b59      	ldr	r3, [pc, #356]	; (800f248 <tcp_slowtmr+0x580>)
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e8:	6a1b      	ldr	r3, [r3, #32]
 800f0ea:	1ad3      	subs	r3, r2, r3
 800f0ec:	2bf0      	cmp	r3, #240	; 0xf0
 800f0ee:	d904      	bls.n	800f0fa <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f0fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d060      	beq.n	800f1c4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f108:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f10a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f10c:	f000 fccc 	bl	800faa8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f112:	2b00      	cmp	r3, #0
 800f114:	d010      	beq.n	800f138 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f116:	4b50      	ldr	r3, [pc, #320]	; (800f258 <tcp_slowtmr+0x590>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d106      	bne.n	800f12e <tcp_slowtmr+0x466>
 800f120:	4b4e      	ldr	r3, [pc, #312]	; (800f25c <tcp_slowtmr+0x594>)
 800f122:	f240 526d 	movw	r2, #1389	; 0x56d
 800f126:	494e      	ldr	r1, [pc, #312]	; (800f260 <tcp_slowtmr+0x598>)
 800f128:	484e      	ldr	r0, [pc, #312]	; (800f264 <tcp_slowtmr+0x59c>)
 800f12a:	f009 fd31 	bl	8018b90 <iprintf>
        prev->next = pcb->next;
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	68da      	ldr	r2, [r3, #12]
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	60da      	str	r2, [r3, #12]
 800f136:	e00f      	b.n	800f158 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f138:	4b47      	ldr	r3, [pc, #284]	; (800f258 <tcp_slowtmr+0x590>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f13e:	429a      	cmp	r2, r3
 800f140:	d006      	beq.n	800f150 <tcp_slowtmr+0x488>
 800f142:	4b46      	ldr	r3, [pc, #280]	; (800f25c <tcp_slowtmr+0x594>)
 800f144:	f240 5271 	movw	r2, #1393	; 0x571
 800f148:	4947      	ldr	r1, [pc, #284]	; (800f268 <tcp_slowtmr+0x5a0>)
 800f14a:	4846      	ldr	r0, [pc, #280]	; (800f264 <tcp_slowtmr+0x59c>)
 800f14c:	f009 fd20 	bl	8018b90 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	4a40      	ldr	r2, [pc, #256]	; (800f258 <tcp_slowtmr+0x590>)
 800f156:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f158:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d013      	beq.n	800f188 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f162:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f166:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f168:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	3304      	adds	r3, #4
 800f16e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f170:	8ad2      	ldrh	r2, [r2, #22]
 800f172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f174:	8b09      	ldrh	r1, [r1, #24]
 800f176:	9102      	str	r1, [sp, #8]
 800f178:	9201      	str	r2, [sp, #4]
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	462b      	mov	r3, r5
 800f17e:	4622      	mov	r2, r4
 800f180:	4601      	mov	r1, r0
 800f182:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f184:	f004 feb6 	bl	8013ef4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18a:	691b      	ldr	r3, [r3, #16]
 800f18c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f190:	7d1b      	ldrb	r3, [r3, #20]
 800f192:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f196:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f19e:	6838      	ldr	r0, [r7, #0]
 800f1a0:	f7ff f83a 	bl	800e218 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f1a4:	4b31      	ldr	r3, [pc, #196]	; (800f26c <tcp_slowtmr+0x5a4>)
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d004      	beq.n	800f1ba <tcp_slowtmr+0x4f2>
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f06f 010c 	mvn.w	r1, #12
 800f1b6:	68b8      	ldr	r0, [r7, #8]
 800f1b8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f1ba:	4b2c      	ldr	r3, [pc, #176]	; (800f26c <tcp_slowtmr+0x5a4>)
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d037      	beq.n	800f232 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f1c2:	e592      	b.n	800ecea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d0:	7f1b      	ldrb	r3, [r3, #28]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1dc:	7f1a      	ldrb	r2, [r3, #28]
 800f1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e0:	7f5b      	ldrb	r3, [r3, #29]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d325      	bcc.n	800f232 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f1ec:	4b1f      	ldr	r3, [pc, #124]	; (800f26c <tcp_slowtmr+0x5a4>)
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d00b      	beq.n	800f214 <tcp_slowtmr+0x54c>
 800f1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f204:	6912      	ldr	r2, [r2, #16]
 800f206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f208:	4610      	mov	r0, r2
 800f20a:	4798      	blx	r3
 800f20c:	4603      	mov	r3, r0
 800f20e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f212:	e002      	b.n	800f21a <tcp_slowtmr+0x552>
 800f214:	2300      	movs	r3, #0
 800f216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f21a:	4b14      	ldr	r3, [pc, #80]	; (800f26c <tcp_slowtmr+0x5a4>)
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d000      	beq.n	800f224 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f222:	e562      	b.n	800ecea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f224:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d102      	bne.n	800f232 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f22e:	f004 f8ab 	bl	8013388 <tcp_output>
  while (pcb != NULL) {
 800f232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f234:	2b00      	cmp	r3, #0
 800f236:	f47f ad5e 	bne.w	800ecf6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f23a:	2300      	movs	r3, #0
 800f23c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f23e:	4b0c      	ldr	r3, [pc, #48]	; (800f270 <tcp_slowtmr+0x5a8>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f244:	e069      	b.n	800f31a <tcp_slowtmr+0x652>
 800f246:	bf00      	nop
 800f248:	20077938 	.word	0x20077938
 800f24c:	000a4cb8 	.word	0x000a4cb8
 800f250:	10624dd3 	.word	0x10624dd3
 800f254:	000124f8 	.word	0x000124f8
 800f258:	20077944 	.word	0x20077944
 800f25c:	0801e258 	.word	0x0801e258
 800f260:	0801e690 	.word	0x0801e690
 800f264:	0801e29c 	.word	0x0801e29c
 800f268:	0801e6bc 	.word	0x0801e6bc
 800f26c:	2007794c 	.word	0x2007794c
 800f270:	20077948 	.word	0x20077948
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	7d1b      	ldrb	r3, [r3, #20]
 800f278:	2b0a      	cmp	r3, #10
 800f27a:	d006      	beq.n	800f28a <tcp_slowtmr+0x5c2>
 800f27c:	4b2b      	ldr	r3, [pc, #172]	; (800f32c <tcp_slowtmr+0x664>)
 800f27e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f282:	492b      	ldr	r1, [pc, #172]	; (800f330 <tcp_slowtmr+0x668>)
 800f284:	482b      	ldr	r0, [pc, #172]	; (800f334 <tcp_slowtmr+0x66c>)
 800f286:	f009 fc83 	bl	8018b90 <iprintf>
    pcb_remove = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f290:	4b29      	ldr	r3, [pc, #164]	; (800f338 <tcp_slowtmr+0x670>)
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f296:	6a1b      	ldr	r3, [r3, #32]
 800f298:	1ad3      	subs	r3, r2, r3
 800f29a:	2bf0      	cmp	r3, #240	; 0xf0
 800f29c:	d904      	bls.n	800f2a8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f29e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d02f      	beq.n	800f310 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f2b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2b2:	f000 fbf9 	bl	800faa8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d010      	beq.n	800f2de <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f2bc:	4b1f      	ldr	r3, [pc, #124]	; (800f33c <tcp_slowtmr+0x674>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d106      	bne.n	800f2d4 <tcp_slowtmr+0x60c>
 800f2c6:	4b19      	ldr	r3, [pc, #100]	; (800f32c <tcp_slowtmr+0x664>)
 800f2c8:	f240 52af 	movw	r2, #1455	; 0x5af
 800f2cc:	491c      	ldr	r1, [pc, #112]	; (800f340 <tcp_slowtmr+0x678>)
 800f2ce:	4819      	ldr	r0, [pc, #100]	; (800f334 <tcp_slowtmr+0x66c>)
 800f2d0:	f009 fc5e 	bl	8018b90 <iprintf>
        prev->next = pcb->next;
 800f2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d6:	68da      	ldr	r2, [r3, #12]
 800f2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2da:	60da      	str	r2, [r3, #12]
 800f2dc:	e00f      	b.n	800f2fe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f2de:	4b17      	ldr	r3, [pc, #92]	; (800f33c <tcp_slowtmr+0x674>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d006      	beq.n	800f2f6 <tcp_slowtmr+0x62e>
 800f2e8:	4b10      	ldr	r3, [pc, #64]	; (800f32c <tcp_slowtmr+0x664>)
 800f2ea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f2ee:	4915      	ldr	r1, [pc, #84]	; (800f344 <tcp_slowtmr+0x67c>)
 800f2f0:	4810      	ldr	r0, [pc, #64]	; (800f334 <tcp_slowtmr+0x66c>)
 800f2f2:	f009 fc4d 	bl	8018b90 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	4a10      	ldr	r2, [pc, #64]	; (800f33c <tcp_slowtmr+0x674>)
 800f2fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f300:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f308:	69f8      	ldr	r0, [r7, #28]
 800f30a:	f7fe ff85 	bl	800e218 <tcp_free>
 800f30e:	e004      	b.n	800f31a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f312:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1a9      	bne.n	800f274 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f320:	bf00      	nop
 800f322:	bf00      	nop
 800f324:	3730      	adds	r7, #48	; 0x30
 800f326:	46bd      	mov	sp, r7
 800f328:	bdb0      	pop	{r4, r5, r7, pc}
 800f32a:	bf00      	nop
 800f32c:	0801e258 	.word	0x0801e258
 800f330:	0801e6e8 	.word	0x0801e6e8
 800f334:	0801e29c 	.word	0x0801e29c
 800f338:	20077938 	.word	0x20077938
 800f33c:	20077948 	.word	0x20077948
 800f340:	0801e718 	.word	0x0801e718
 800f344:	0801e740 	.word	0x0801e740

0800f348 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f34e:	4b2d      	ldr	r3, [pc, #180]	; (800f404 <tcp_fasttmr+0xbc>)
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	3301      	adds	r3, #1
 800f354:	b2da      	uxtb	r2, r3
 800f356:	4b2b      	ldr	r3, [pc, #172]	; (800f404 <tcp_fasttmr+0xbc>)
 800f358:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f35a:	4b2b      	ldr	r3, [pc, #172]	; (800f408 <tcp_fasttmr+0xc0>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f360:	e048      	b.n	800f3f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	7f9a      	ldrb	r2, [r3, #30]
 800f366:	4b27      	ldr	r3, [pc, #156]	; (800f404 <tcp_fasttmr+0xbc>)
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d03f      	beq.n	800f3ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f36e:	4b25      	ldr	r3, [pc, #148]	; (800f404 <tcp_fasttmr+0xbc>)
 800f370:	781a      	ldrb	r2, [r3, #0]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	8b5b      	ldrh	r3, [r3, #26]
 800f37a:	f003 0301 	and.w	r3, r3, #1
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d010      	beq.n	800f3a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	8b5b      	ldrh	r3, [r3, #26]
 800f386:	f043 0302 	orr.w	r3, r3, #2
 800f38a:	b29a      	uxth	r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f003 fff9 	bl	8013388 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	8b5b      	ldrh	r3, [r3, #26]
 800f39a:	f023 0303 	bic.w	r3, r3, #3
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	8b5b      	ldrh	r3, [r3, #26]
 800f3a8:	f003 0308 	and.w	r3, r3, #8
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d009      	beq.n	800f3c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	8b5b      	ldrh	r3, [r3, #26]
 800f3b4:	f023 0308 	bic.w	r3, r3, #8
 800f3b8:	b29a      	uxth	r2, r3
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f7ff f8be 	bl	800e540 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00a      	beq.n	800f3e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f3d2:	4b0e      	ldr	r3, [pc, #56]	; (800f40c <tcp_fasttmr+0xc4>)
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 f819 	bl	800f410 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f3de:	4b0b      	ldr	r3, [pc, #44]	; (800f40c <tcp_fasttmr+0xc4>)
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d000      	beq.n	800f3e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f3e6:	e7b8      	b.n	800f35a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	607b      	str	r3, [r7, #4]
 800f3ec:	e002      	b.n	800f3f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d1b3      	bne.n	800f362 <tcp_fasttmr+0x1a>
    }
  }
}
 800f3fa:	bf00      	nop
 800f3fc:	bf00      	nop
 800f3fe:	3708      	adds	r7, #8
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	2007794e 	.word	0x2007794e
 800f408:	20077944 	.word	0x20077944
 800f40c:	2007794c 	.word	0x2007794c

0800f410 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f410:	b590      	push	{r4, r7, lr}
 800f412:	b085      	sub	sp, #20
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d109      	bne.n	800f432 <tcp_process_refused_data+0x22>
 800f41e:	4b37      	ldr	r3, [pc, #220]	; (800f4fc <tcp_process_refused_data+0xec>)
 800f420:	f240 6209 	movw	r2, #1545	; 0x609
 800f424:	4936      	ldr	r1, [pc, #216]	; (800f500 <tcp_process_refused_data+0xf0>)
 800f426:	4837      	ldr	r0, [pc, #220]	; (800f504 <tcp_process_refused_data+0xf4>)
 800f428:	f009 fbb2 	bl	8018b90 <iprintf>
 800f42c:	f06f 030f 	mvn.w	r3, #15
 800f430:	e060      	b.n	800f4f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f436:	7b5b      	ldrb	r3, [r3, #13]
 800f438:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f43e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d00b      	beq.n	800f468 <tcp_process_refused_data+0x58>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6918      	ldr	r0, [r3, #16]
 800f45a:	2300      	movs	r3, #0
 800f45c:	68ba      	ldr	r2, [r7, #8]
 800f45e:	6879      	ldr	r1, [r7, #4]
 800f460:	47a0      	blx	r4
 800f462:	4603      	mov	r3, r0
 800f464:	73fb      	strb	r3, [r7, #15]
 800f466:	e007      	b.n	800f478 <tcp_process_refused_data+0x68>
 800f468:	2300      	movs	r3, #0
 800f46a:	68ba      	ldr	r2, [r7, #8]
 800f46c:	6879      	ldr	r1, [r7, #4]
 800f46e:	2000      	movs	r0, #0
 800f470:	f000 f8a4 	bl	800f5bc <tcp_recv_null>
 800f474:	4603      	mov	r3, r0
 800f476:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d12a      	bne.n	800f4d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f480:	7bbb      	ldrb	r3, [r7, #14]
 800f482:	f003 0320 	and.w	r3, r3, #32
 800f486:	2b00      	cmp	r3, #0
 800f488:	d033      	beq.n	800f4f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f48e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f492:	d005      	beq.n	800f4a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f498:	3301      	adds	r3, #1
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00b      	beq.n	800f4c2 <tcp_process_refused_data+0xb2>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6918      	ldr	r0, [r3, #16]
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	6879      	ldr	r1, [r7, #4]
 800f4ba:	47a0      	blx	r4
 800f4bc:	4603      	mov	r3, r0
 800f4be:	73fb      	strb	r3, [r7, #15]
 800f4c0:	e001      	b.n	800f4c6 <tcp_process_refused_data+0xb6>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4ca:	f113 0f0d 	cmn.w	r3, #13
 800f4ce:	d110      	bne.n	800f4f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f4d0:	f06f 030c 	mvn.w	r3, #12
 800f4d4:	e00e      	b.n	800f4f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4da:	f113 0f0d 	cmn.w	r3, #13
 800f4de:	d102      	bne.n	800f4e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f4e0:	f06f 030c 	mvn.w	r3, #12
 800f4e4:	e006      	b.n	800f4f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f4ec:	f06f 0304 	mvn.w	r3, #4
 800f4f0:	e000      	b.n	800f4f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f4f2:	2300      	movs	r3, #0
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3714      	adds	r7, #20
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd90      	pop	{r4, r7, pc}
 800f4fc:	0801e258 	.word	0x0801e258
 800f500:	0801e768 	.word	0x0801e768
 800f504:	0801e29c 	.word	0x0801e29c

0800f508 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f510:	e007      	b.n	800f522 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f000 f80a 	bl	800f532 <tcp_seg_free>
    seg = next;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d1f4      	bne.n	800f512 <tcp_segs_free+0xa>
  }
}
 800f528:	bf00      	nop
 800f52a:	bf00      	nop
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f532:	b580      	push	{r7, lr}
 800f534:	b082      	sub	sp, #8
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00c      	beq.n	800f55a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d004      	beq.n	800f552 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7fe fba7 	bl	800dca0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f552:	6879      	ldr	r1, [r7, #4]
 800f554:	2003      	movs	r0, #3
 800f556:	f7fd fcff 	bl	800cf58 <memp_free>
  }
}
 800f55a:	bf00      	nop
 800f55c:	3708      	adds	r7, #8
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
	...

0800f564 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d106      	bne.n	800f580 <tcp_seg_copy+0x1c>
 800f572:	4b0f      	ldr	r3, [pc, #60]	; (800f5b0 <tcp_seg_copy+0x4c>)
 800f574:	f240 6282 	movw	r2, #1666	; 0x682
 800f578:	490e      	ldr	r1, [pc, #56]	; (800f5b4 <tcp_seg_copy+0x50>)
 800f57a:	480f      	ldr	r0, [pc, #60]	; (800f5b8 <tcp_seg_copy+0x54>)
 800f57c:	f009 fb08 	bl	8018b90 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f580:	2003      	movs	r0, #3
 800f582:	f7fd fc73 	bl	800ce6c <memp_malloc>
 800f586:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d101      	bne.n	800f592 <tcp_seg_copy+0x2e>
    return NULL;
 800f58e:	2300      	movs	r3, #0
 800f590:	e00a      	b.n	800f5a8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f592:	2210      	movs	r2, #16
 800f594:	6879      	ldr	r1, [r7, #4]
 800f596:	68f8      	ldr	r0, [r7, #12]
 800f598:	f009 fc81 	bl	8018e9e <memcpy>
  pbuf_ref(cseg->p);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fe fc23 	bl	800ddec <pbuf_ref>
  return cseg;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3710      	adds	r7, #16
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	0801e258 	.word	0x0801e258
 800f5b4:	0801e7ac 	.word	0x0801e7ac
 800f5b8:	0801e29c 	.word	0x0801e29c

0800f5bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	607a      	str	r2, [r7, #4]
 800f5c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d109      	bne.n	800f5e4 <tcp_recv_null+0x28>
 800f5d0:	4b12      	ldr	r3, [pc, #72]	; (800f61c <tcp_recv_null+0x60>)
 800f5d2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f5d6:	4912      	ldr	r1, [pc, #72]	; (800f620 <tcp_recv_null+0x64>)
 800f5d8:	4812      	ldr	r0, [pc, #72]	; (800f624 <tcp_recv_null+0x68>)
 800f5da:	f009 fad9 	bl	8018b90 <iprintf>
 800f5de:	f06f 030f 	mvn.w	r3, #15
 800f5e2:	e016      	b.n	800f612 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d009      	beq.n	800f5fe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	891b      	ldrh	r3, [r3, #8]
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	68b8      	ldr	r0, [r7, #8]
 800f5f2:	f7ff f9bb 	bl	800e96c <tcp_recved>
    pbuf_free(p);
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7fe fb52 	bl	800dca0 <pbuf_free>
 800f5fc:	e008      	b.n	800f610 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f5fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d104      	bne.n	800f610 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f606:	68b8      	ldr	r0, [r7, #8]
 800f608:	f7ff f804 	bl	800e614 <tcp_close>
 800f60c:	4603      	mov	r3, r0
 800f60e:	e000      	b.n	800f612 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f610:	2300      	movs	r3, #0
}
 800f612:	4618      	mov	r0, r3
 800f614:	3710      	adds	r7, #16
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	0801e258 	.word	0x0801e258
 800f620:	0801e7c8 	.word	0x0801e7c8
 800f624:	0801e29c 	.word	0x0801e29c

0800f628 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b086      	sub	sp, #24
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	4603      	mov	r3, r0
 800f630:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f636:	2b00      	cmp	r3, #0
 800f638:	db01      	blt.n	800f63e <tcp_kill_prio+0x16>
 800f63a:	79fb      	ldrb	r3, [r7, #7]
 800f63c:	e000      	b.n	800f640 <tcp_kill_prio+0x18>
 800f63e:	237f      	movs	r3, #127	; 0x7f
 800f640:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f642:	7afb      	ldrb	r3, [r7, #11]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d034      	beq.n	800f6b2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f648:	7afb      	ldrb	r3, [r7, #11]
 800f64a:	3b01      	subs	r3, #1
 800f64c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f64e:	2300      	movs	r3, #0
 800f650:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f652:	2300      	movs	r3, #0
 800f654:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f656:	4b19      	ldr	r3, [pc, #100]	; (800f6bc <tcp_kill_prio+0x94>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	617b      	str	r3, [r7, #20]
 800f65c:	e01f      	b.n	800f69e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	7d5b      	ldrb	r3, [r3, #21]
 800f662:	7afa      	ldrb	r2, [r7, #11]
 800f664:	429a      	cmp	r2, r3
 800f666:	d80c      	bhi.n	800f682 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f66c:	7afa      	ldrb	r2, [r7, #11]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d112      	bne.n	800f698 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f672:	4b13      	ldr	r3, [pc, #76]	; (800f6c0 <tcp_kill_prio+0x98>)
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	1ad3      	subs	r3, r2, r3
 800f67c:	68fa      	ldr	r2, [r7, #12]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d80a      	bhi.n	800f698 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f682:	4b0f      	ldr	r3, [pc, #60]	; (800f6c0 <tcp_kill_prio+0x98>)
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	6a1b      	ldr	r3, [r3, #32]
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	7d5b      	ldrb	r3, [r3, #21]
 800f696:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	68db      	ldr	r3, [r3, #12]
 800f69c:	617b      	str	r3, [r7, #20]
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1dc      	bne.n	800f65e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d004      	beq.n	800f6b4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f6aa:	6938      	ldr	r0, [r7, #16]
 800f6ac:	f7ff f8f8 	bl	800e8a0 <tcp_abort>
 800f6b0:	e000      	b.n	800f6b4 <tcp_kill_prio+0x8c>
    return;
 800f6b2:	bf00      	nop
  }
}
 800f6b4:	3718      	adds	r7, #24
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	20077944 	.word	0x20077944
 800f6c0:	20077938 	.word	0x20077938

0800f6c4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b086      	sub	sp, #24
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f6ce:	79fb      	ldrb	r3, [r7, #7]
 800f6d0:	2b08      	cmp	r3, #8
 800f6d2:	d009      	beq.n	800f6e8 <tcp_kill_state+0x24>
 800f6d4:	79fb      	ldrb	r3, [r7, #7]
 800f6d6:	2b09      	cmp	r3, #9
 800f6d8:	d006      	beq.n	800f6e8 <tcp_kill_state+0x24>
 800f6da:	4b1a      	ldr	r3, [pc, #104]	; (800f744 <tcp_kill_state+0x80>)
 800f6dc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f6e0:	4919      	ldr	r1, [pc, #100]	; (800f748 <tcp_kill_state+0x84>)
 800f6e2:	481a      	ldr	r0, [pc, #104]	; (800f74c <tcp_kill_state+0x88>)
 800f6e4:	f009 fa54 	bl	8018b90 <iprintf>

  inactivity = 0;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6f0:	4b17      	ldr	r3, [pc, #92]	; (800f750 <tcp_kill_state+0x8c>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	617b      	str	r3, [r7, #20]
 800f6f6:	e017      	b.n	800f728 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	7d1b      	ldrb	r3, [r3, #20]
 800f6fc:	79fa      	ldrb	r2, [r7, #7]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d10f      	bne.n	800f722 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f702:	4b14      	ldr	r3, [pc, #80]	; (800f754 <tcp_kill_state+0x90>)
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	6a1b      	ldr	r3, [r3, #32]
 800f70a:	1ad3      	subs	r3, r2, r3
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d807      	bhi.n	800f722 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f712:	4b10      	ldr	r3, [pc, #64]	; (800f754 <tcp_kill_state+0x90>)
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	6a1b      	ldr	r3, [r3, #32]
 800f71a:	1ad3      	subs	r3, r2, r3
 800f71c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	617b      	str	r3, [r7, #20]
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d1e4      	bne.n	800f6f8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d003      	beq.n	800f73c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f734:	2100      	movs	r1, #0
 800f736:	6938      	ldr	r0, [r7, #16]
 800f738:	f7fe fff4 	bl	800e724 <tcp_abandon>
  }
}
 800f73c:	bf00      	nop
 800f73e:	3718      	adds	r7, #24
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}
 800f744:	0801e258 	.word	0x0801e258
 800f748:	0801e7e4 	.word	0x0801e7e4
 800f74c:	0801e29c 	.word	0x0801e29c
 800f750:	20077944 	.word	0x20077944
 800f754:	20077938 	.word	0x20077938

0800f758 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f75e:	2300      	movs	r3, #0
 800f760:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f762:	2300      	movs	r3, #0
 800f764:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f766:	4b12      	ldr	r3, [pc, #72]	; (800f7b0 <tcp_kill_timewait+0x58>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	60fb      	str	r3, [r7, #12]
 800f76c:	e012      	b.n	800f794 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f76e:	4b11      	ldr	r3, [pc, #68]	; (800f7b4 <tcp_kill_timewait+0x5c>)
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6a1b      	ldr	r3, [r3, #32]
 800f776:	1ad3      	subs	r3, r2, r3
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d807      	bhi.n	800f78e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f77e:	4b0d      	ldr	r3, [pc, #52]	; (800f7b4 <tcp_kill_timewait+0x5c>)
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6a1b      	ldr	r3, [r3, #32]
 800f786:	1ad3      	subs	r3, r2, r3
 800f788:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	60fb      	str	r3, [r7, #12]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d1e9      	bne.n	800f76e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f7a0:	68b8      	ldr	r0, [r7, #8]
 800f7a2:	f7ff f87d 	bl	800e8a0 <tcp_abort>
  }
}
 800f7a6:	bf00      	nop
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	20077948 	.word	0x20077948
 800f7b4:	20077938 	.word	0x20077938

0800f7b8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f7be:	4b10      	ldr	r3, [pc, #64]	; (800f800 <tcp_handle_closepend+0x48>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f7c4:	e014      	b.n	800f7f0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	8b5b      	ldrh	r3, [r3, #26]
 800f7d0:	f003 0308 	and.w	r3, r3, #8
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d009      	beq.n	800f7ec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	8b5b      	ldrh	r3, [r3, #26]
 800f7dc:	f023 0308 	bic.w	r3, r3, #8
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f7fe feaa 	bl	800e540 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1e7      	bne.n	800f7c6 <tcp_handle_closepend+0xe>
  }
}
 800f7f6:	bf00      	nop
 800f7f8:	bf00      	nop
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	20077944 	.word	0x20077944

0800f804 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	4603      	mov	r3, r0
 800f80c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f80e:	2001      	movs	r0, #1
 800f810:	f7fd fb2c 	bl	800ce6c <memp_malloc>
 800f814:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d126      	bne.n	800f86a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f81c:	f7ff ffcc 	bl	800f7b8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f820:	f7ff ff9a 	bl	800f758 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f824:	2001      	movs	r0, #1
 800f826:	f7fd fb21 	bl	800ce6c <memp_malloc>
 800f82a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d11b      	bne.n	800f86a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f832:	2009      	movs	r0, #9
 800f834:	f7ff ff46 	bl	800f6c4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f838:	2001      	movs	r0, #1
 800f83a:	f7fd fb17 	bl	800ce6c <memp_malloc>
 800f83e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d111      	bne.n	800f86a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f846:	2008      	movs	r0, #8
 800f848:	f7ff ff3c 	bl	800f6c4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f84c:	2001      	movs	r0, #1
 800f84e:	f7fd fb0d 	bl	800ce6c <memp_malloc>
 800f852:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d107      	bne.n	800f86a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f85a:	79fb      	ldrb	r3, [r7, #7]
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7ff fee3 	bl	800f628 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f862:	2001      	movs	r0, #1
 800f864:	f7fd fb02 	bl	800ce6c <memp_malloc>
 800f868:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d03f      	beq.n	800f8f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f870:	229c      	movs	r2, #156	; 0x9c
 800f872:	2100      	movs	r1, #0
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f009 fa2a 	bl	8018cce <memset>
    pcb->prio = prio;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	79fa      	ldrb	r2, [r7, #7]
 800f87e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800f886:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f890:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	22ff      	movs	r2, #255	; 0xff
 800f89e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8a6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2206      	movs	r2, #6
 800f8ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2206      	movs	r2, #6
 800f8b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8bc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f8c6:	4b0d      	ldr	r3, [pc, #52]	; (800f8fc <tcp_alloc+0xf8>)
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f8ce:	4b0c      	ldr	r3, [pc, #48]	; (800f900 <tcp_alloc+0xfc>)
 800f8d0:	781a      	ldrb	r2, [r3, #0]
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800f8dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	4a08      	ldr	r2, [pc, #32]	; (800f904 <tcp_alloc+0x100>)
 800f8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	4a07      	ldr	r2, [pc, #28]	; (800f908 <tcp_alloc+0x104>)
 800f8ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3710      	adds	r7, #16
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	20077938 	.word	0x20077938
 800f900:	2007794e 	.word	0x2007794e
 800f904:	0800f5bd 	.word	0x0800f5bd
 800f908:	006ddd00 	.word	0x006ddd00

0800f90c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	4603      	mov	r3, r0
 800f914:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f916:	2040      	movs	r0, #64	; 0x40
 800f918:	f7ff ff74 	bl	800f804 <tcp_alloc>
 800f91c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f91e:	68fb      	ldr	r3, [r7, #12]
}
 800f920:	4618      	mov	r0, r3
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d002      	beq.n	800f93e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	683a      	ldr	r2, [r7, #0]
 800f93c:	611a      	str	r2, [r3, #16]
  }
}
 800f93e:	bf00      	nop
 800f940:	370c      	adds	r7, #12
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr
	...

0800f94c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00e      	beq.n	800f97a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	7d1b      	ldrb	r3, [r3, #20]
 800f960:	2b01      	cmp	r3, #1
 800f962:	d106      	bne.n	800f972 <tcp_recv+0x26>
 800f964:	4b07      	ldr	r3, [pc, #28]	; (800f984 <tcp_recv+0x38>)
 800f966:	f240 72df 	movw	r2, #2015	; 0x7df
 800f96a:	4907      	ldr	r1, [pc, #28]	; (800f988 <tcp_recv+0x3c>)
 800f96c:	4807      	ldr	r0, [pc, #28]	; (800f98c <tcp_recv+0x40>)
 800f96e:	f009 f90f 	bl	8018b90 <iprintf>
    pcb->recv = recv;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	683a      	ldr	r2, [r7, #0]
 800f976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f97a:	bf00      	nop
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	0801e258 	.word	0x0801e258
 800f988:	0801e7f4 	.word	0x0801e7f4
 800f98c:	0801e29c 	.word	0x0801e29c

0800f990 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d00e      	beq.n	800f9be <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	7d1b      	ldrb	r3, [r3, #20]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d106      	bne.n	800f9b6 <tcp_sent+0x26>
 800f9a8:	4b07      	ldr	r3, [pc, #28]	; (800f9c8 <tcp_sent+0x38>)
 800f9aa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f9ae:	4907      	ldr	r1, [pc, #28]	; (800f9cc <tcp_sent+0x3c>)
 800f9b0:	4807      	ldr	r0, [pc, #28]	; (800f9d0 <tcp_sent+0x40>)
 800f9b2:	f009 f8ed 	bl	8018b90 <iprintf>
    pcb->sent = sent;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	683a      	ldr	r2, [r7, #0]
 800f9ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f9be:	bf00      	nop
 800f9c0:	3708      	adds	r7, #8
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	0801e258 	.word	0x0801e258
 800f9cc:	0801e81c 	.word	0x0801e81c
 800f9d0:	0801e29c 	.word	0x0801e29c

0800f9d4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d00e      	beq.n	800fa02 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	7d1b      	ldrb	r3, [r3, #20]
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d106      	bne.n	800f9fa <tcp_err+0x26>
 800f9ec:	4b07      	ldr	r3, [pc, #28]	; (800fa0c <tcp_err+0x38>)
 800f9ee:	f640 020d 	movw	r2, #2061	; 0x80d
 800f9f2:	4907      	ldr	r1, [pc, #28]	; (800fa10 <tcp_err+0x3c>)
 800f9f4:	4807      	ldr	r0, [pc, #28]	; (800fa14 <tcp_err+0x40>)
 800f9f6:	f009 f8cb 	bl	8018b90 <iprintf>
    pcb->errf = err;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	683a      	ldr	r2, [r7, #0]
 800f9fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fa02:	bf00      	nop
 800fa04:	3708      	adds	r7, #8
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	0801e258 	.word	0x0801e258
 800fa10:	0801e844 	.word	0x0801e844
 800fa14:	0801e29c 	.word	0x0801e29c

0800fa18 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d008      	beq.n	800fa3a <tcp_accept+0x22>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	7d1b      	ldrb	r3, [r3, #20]
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d104      	bne.n	800fa3a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	683a      	ldr	r2, [r7, #0]
 800fa38:	619a      	str	r2, [r3, #24]
  }
}
 800fa3a:	bf00      	nop
 800fa3c:	3714      	adds	r7, #20
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr
	...

0800fa48 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	4613      	mov	r3, r2
 800fa54:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d107      	bne.n	800fa6c <tcp_poll+0x24>
 800fa5c:	4b0e      	ldr	r3, [pc, #56]	; (800fa98 <tcp_poll+0x50>)
 800fa5e:	f640 023d 	movw	r2, #2109	; 0x83d
 800fa62:	490e      	ldr	r1, [pc, #56]	; (800fa9c <tcp_poll+0x54>)
 800fa64:	480e      	ldr	r0, [pc, #56]	; (800faa0 <tcp_poll+0x58>)
 800fa66:	f009 f893 	bl	8018b90 <iprintf>
 800fa6a:	e011      	b.n	800fa90 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	7d1b      	ldrb	r3, [r3, #20]
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d106      	bne.n	800fa82 <tcp_poll+0x3a>
 800fa74:	4b08      	ldr	r3, [pc, #32]	; (800fa98 <tcp_poll+0x50>)
 800fa76:	f640 023e 	movw	r2, #2110	; 0x83e
 800fa7a:	490a      	ldr	r1, [pc, #40]	; (800faa4 <tcp_poll+0x5c>)
 800fa7c:	4808      	ldr	r0, [pc, #32]	; (800faa0 <tcp_poll+0x58>)
 800fa7e:	f009 f887 	bl	8018b90 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	68ba      	ldr	r2, [r7, #8]
 800fa86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	79fa      	ldrb	r2, [r7, #7]
 800fa8e:	775a      	strb	r2, [r3, #29]
}
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	0801e258 	.word	0x0801e258
 800fa9c:	0801e86c 	.word	0x0801e86c
 800faa0:	0801e29c 	.word	0x0801e29c
 800faa4:	0801e884 	.word	0x0801e884

0800faa8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d107      	bne.n	800fac6 <tcp_pcb_purge+0x1e>
 800fab6:	4b21      	ldr	r3, [pc, #132]	; (800fb3c <tcp_pcb_purge+0x94>)
 800fab8:	f640 0251 	movw	r2, #2129	; 0x851
 800fabc:	4920      	ldr	r1, [pc, #128]	; (800fb40 <tcp_pcb_purge+0x98>)
 800fabe:	4821      	ldr	r0, [pc, #132]	; (800fb44 <tcp_pcb_purge+0x9c>)
 800fac0:	f009 f866 	bl	8018b90 <iprintf>
 800fac4:	e037      	b.n	800fb36 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	7d1b      	ldrb	r3, [r3, #20]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d033      	beq.n	800fb36 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fad2:	2b0a      	cmp	r3, #10
 800fad4:	d02f      	beq.n	800fb36 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d02b      	beq.n	800fb36 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d007      	beq.n	800faf6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faea:	4618      	mov	r0, r3
 800faec:	f7fe f8d8 	bl	800dca0 <pbuf_free>
      pcb->refused_data = NULL;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2200      	movs	r2, #0
 800faf4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d002      	beq.n	800fb04 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 f986 	bl	800fe10 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb0a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7ff fcf9 	bl	800f508 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7ff fcf4 	bl	800f508 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2200      	movs	r2, #0
 800fb24:	66da      	str	r2, [r3, #108]	; 0x6c
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2200      	movs	r2, #0
 800fb32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	0801e258 	.word	0x0801e258
 800fb40:	0801e8a4 	.word	0x0801e8a4
 800fb44:	0801e29c 	.word	0x0801e29c

0800fb48 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d106      	bne.n	800fb66 <tcp_pcb_remove+0x1e>
 800fb58:	4b3e      	ldr	r3, [pc, #248]	; (800fc54 <tcp_pcb_remove+0x10c>)
 800fb5a:	f640 0283 	movw	r2, #2179	; 0x883
 800fb5e:	493e      	ldr	r1, [pc, #248]	; (800fc58 <tcp_pcb_remove+0x110>)
 800fb60:	483e      	ldr	r0, [pc, #248]	; (800fc5c <tcp_pcb_remove+0x114>)
 800fb62:	f009 f815 	bl	8018b90 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d106      	bne.n	800fb7a <tcp_pcb_remove+0x32>
 800fb6c:	4b39      	ldr	r3, [pc, #228]	; (800fc54 <tcp_pcb_remove+0x10c>)
 800fb6e:	f640 0284 	movw	r2, #2180	; 0x884
 800fb72:	493b      	ldr	r1, [pc, #236]	; (800fc60 <tcp_pcb_remove+0x118>)
 800fb74:	4839      	ldr	r0, [pc, #228]	; (800fc5c <tcp_pcb_remove+0x114>)
 800fb76:	f009 f80b 	bl	8018b90 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	683a      	ldr	r2, [r7, #0]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d105      	bne.n	800fb90 <tcp_pcb_remove+0x48>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	68da      	ldr	r2, [r3, #12]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	601a      	str	r2, [r3, #0]
 800fb8e:	e013      	b.n	800fbb8 <tcp_pcb_remove+0x70>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	60fb      	str	r3, [r7, #12]
 800fb96:	e00c      	b.n	800fbb2 <tcp_pcb_remove+0x6a>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	68db      	ldr	r3, [r3, #12]
 800fb9c:	683a      	ldr	r2, [r7, #0]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d104      	bne.n	800fbac <tcp_pcb_remove+0x64>
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	68da      	ldr	r2, [r3, #12]
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	60da      	str	r2, [r3, #12]
 800fbaa:	e005      	b.n	800fbb8 <tcp_pcb_remove+0x70>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	60fb      	str	r3, [r7, #12]
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d1ef      	bne.n	800fb98 <tcp_pcb_remove+0x50>
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fbbe:	6838      	ldr	r0, [r7, #0]
 800fbc0:	f7ff ff72 	bl	800faa8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	7d1b      	ldrb	r3, [r3, #20]
 800fbc8:	2b0a      	cmp	r3, #10
 800fbca:	d013      	beq.n	800fbf4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d00f      	beq.n	800fbf4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	8b5b      	ldrh	r3, [r3, #26]
 800fbd8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d009      	beq.n	800fbf4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	8b5b      	ldrh	r3, [r3, #26]
 800fbe4:	f043 0302 	orr.w	r3, r3, #2
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fbee:	6838      	ldr	r0, [r7, #0]
 800fbf0:	f003 fbca 	bl	8013388 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	7d1b      	ldrb	r3, [r3, #20]
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d020      	beq.n	800fc3e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d006      	beq.n	800fc12 <tcp_pcb_remove+0xca>
 800fc04:	4b13      	ldr	r3, [pc, #76]	; (800fc54 <tcp_pcb_remove+0x10c>)
 800fc06:	f640 0293 	movw	r2, #2195	; 0x893
 800fc0a:	4916      	ldr	r1, [pc, #88]	; (800fc64 <tcp_pcb_remove+0x11c>)
 800fc0c:	4813      	ldr	r0, [pc, #76]	; (800fc5c <tcp_pcb_remove+0x114>)
 800fc0e:	f008 ffbf 	bl	8018b90 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d006      	beq.n	800fc28 <tcp_pcb_remove+0xe0>
 800fc1a:	4b0e      	ldr	r3, [pc, #56]	; (800fc54 <tcp_pcb_remove+0x10c>)
 800fc1c:	f640 0294 	movw	r2, #2196	; 0x894
 800fc20:	4911      	ldr	r1, [pc, #68]	; (800fc68 <tcp_pcb_remove+0x120>)
 800fc22:	480e      	ldr	r0, [pc, #56]	; (800fc5c <tcp_pcb_remove+0x114>)
 800fc24:	f008 ffb4 	bl	8018b90 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d006      	beq.n	800fc3e <tcp_pcb_remove+0xf6>
 800fc30:	4b08      	ldr	r3, [pc, #32]	; (800fc54 <tcp_pcb_remove+0x10c>)
 800fc32:	f640 0296 	movw	r2, #2198	; 0x896
 800fc36:	490d      	ldr	r1, [pc, #52]	; (800fc6c <tcp_pcb_remove+0x124>)
 800fc38:	4808      	ldr	r0, [pc, #32]	; (800fc5c <tcp_pcb_remove+0x114>)
 800fc3a:	f008 ffa9 	bl	8018b90 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	2200      	movs	r2, #0
 800fc42:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	2200      	movs	r2, #0
 800fc48:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fc4a:	bf00      	nop
 800fc4c:	3710      	adds	r7, #16
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	0801e258 	.word	0x0801e258
 800fc58:	0801e8c0 	.word	0x0801e8c0
 800fc5c:	0801e29c 	.word	0x0801e29c
 800fc60:	0801e8dc 	.word	0x0801e8dc
 800fc64:	0801e8fc 	.word	0x0801e8fc
 800fc68:	0801e914 	.word	0x0801e914
 800fc6c:	0801e930 	.word	0x0801e930

0800fc70 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d106      	bne.n	800fc8c <tcp_next_iss+0x1c>
 800fc7e:	4b0a      	ldr	r3, [pc, #40]	; (800fca8 <tcp_next_iss+0x38>)
 800fc80:	f640 02af 	movw	r2, #2223	; 0x8af
 800fc84:	4909      	ldr	r1, [pc, #36]	; (800fcac <tcp_next_iss+0x3c>)
 800fc86:	480a      	ldr	r0, [pc, #40]	; (800fcb0 <tcp_next_iss+0x40>)
 800fc88:	f008 ff82 	bl	8018b90 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fc8c:	4b09      	ldr	r3, [pc, #36]	; (800fcb4 <tcp_next_iss+0x44>)
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	4b09      	ldr	r3, [pc, #36]	; (800fcb8 <tcp_next_iss+0x48>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4413      	add	r3, r2
 800fc96:	4a07      	ldr	r2, [pc, #28]	; (800fcb4 <tcp_next_iss+0x44>)
 800fc98:	6013      	str	r3, [r2, #0]
  return iss;
 800fc9a:	4b06      	ldr	r3, [pc, #24]	; (800fcb4 <tcp_next_iss+0x44>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	0801e258 	.word	0x0801e258
 800fcac:	0801e948 	.word	0x0801e948
 800fcb0:	0801e29c 	.word	0x0801e29c
 800fcb4:	20000028 	.word	0x20000028
 800fcb8:	20077938 	.word	0x20077938

0800fcbc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b086      	sub	sp, #24
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	60b9      	str	r1, [r7, #8]
 800fcc6:	607a      	str	r2, [r7, #4]
 800fcc8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d106      	bne.n	800fcde <tcp_eff_send_mss_netif+0x22>
 800fcd0:	4b14      	ldr	r3, [pc, #80]	; (800fd24 <tcp_eff_send_mss_netif+0x68>)
 800fcd2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fcd6:	4914      	ldr	r1, [pc, #80]	; (800fd28 <tcp_eff_send_mss_netif+0x6c>)
 800fcd8:	4814      	ldr	r0, [pc, #80]	; (800fd2c <tcp_eff_send_mss_netif+0x70>)
 800fcda:	f008 ff59 	bl	8018b90 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d101      	bne.n	800fce8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fce4:	89fb      	ldrh	r3, [r7, #14]
 800fce6:	e019      	b.n	800fd1c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fcec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fcee:	8afb      	ldrh	r3, [r7, #22]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d012      	beq.n	800fd1a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fcf4:	2328      	movs	r3, #40	; 0x28
 800fcf6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fcf8:	8afa      	ldrh	r2, [r7, #22]
 800fcfa:	8abb      	ldrh	r3, [r7, #20]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d904      	bls.n	800fd0a <tcp_eff_send_mss_netif+0x4e>
 800fd00:	8afa      	ldrh	r2, [r7, #22]
 800fd02:	8abb      	ldrh	r3, [r7, #20]
 800fd04:	1ad3      	subs	r3, r2, r3
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	e000      	b.n	800fd0c <tcp_eff_send_mss_netif+0x50>
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fd0e:	8a7a      	ldrh	r2, [r7, #18]
 800fd10:	89fb      	ldrh	r3, [r7, #14]
 800fd12:	4293      	cmp	r3, r2
 800fd14:	bf28      	it	cs
 800fd16:	4613      	movcs	r3, r2
 800fd18:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fd1a:	89fb      	ldrh	r3, [r7, #14]
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3718      	adds	r7, #24
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	0801e258 	.word	0x0801e258
 800fd28:	0801e964 	.word	0x0801e964
 800fd2c:	0801e29c 	.word	0x0801e29c

0800fd30 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d119      	bne.n	800fd78 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fd44:	4b10      	ldr	r3, [pc, #64]	; (800fd88 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fd46:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fd4a:	4910      	ldr	r1, [pc, #64]	; (800fd8c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fd4c:	4810      	ldr	r0, [pc, #64]	; (800fd90 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fd4e:	f008 ff1f 	bl	8018b90 <iprintf>

  while (pcb != NULL) {
 800fd52:	e011      	b.n	800fd78 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d108      	bne.n	800fd72 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f7fe fd9a 	bl	800e8a0 <tcp_abort>
      pcb = next;
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	60fb      	str	r3, [r7, #12]
 800fd70:	e002      	b.n	800fd78 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d1ea      	bne.n	800fd54 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fd7e:	bf00      	nop
 800fd80:	bf00      	nop
 800fd82:	3710      	adds	r7, #16
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	0801e258 	.word	0x0801e258
 800fd8c:	0801e98c 	.word	0x0801e98c
 800fd90:	0801e29c 	.word	0x0801e29c

0800fd94 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d02a      	beq.n	800fdfa <tcp_netif_ip_addr_changed+0x66>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d026      	beq.n	800fdfa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fdac:	4b15      	ldr	r3, [pc, #84]	; (800fe04 <tcp_netif_ip_addr_changed+0x70>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f7ff ffbc 	bl	800fd30 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fdb8:	4b13      	ldr	r3, [pc, #76]	; (800fe08 <tcp_netif_ip_addr_changed+0x74>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f7ff ffb6 	bl	800fd30 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d017      	beq.n	800fdfa <tcp_netif_ip_addr_changed+0x66>
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d013      	beq.n	800fdfa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fdd2:	4b0e      	ldr	r3, [pc, #56]	; (800fe0c <tcp_netif_ip_addr_changed+0x78>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	60fb      	str	r3, [r7, #12]
 800fdd8:	e00c      	b.n	800fdf4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d103      	bne.n	800fdee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	60fb      	str	r3, [r7, #12]
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d1ef      	bne.n	800fdda <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fdfa:	bf00      	nop
 800fdfc:	3710      	adds	r7, #16
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	20077944 	.word	0x20077944
 800fe08:	2007793c 	.word	0x2007793c
 800fe0c:	20077940 	.word	0x20077940

0800fe10 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d007      	beq.n	800fe30 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7ff fb6f 	bl	800f508 <tcp_segs_free>
    pcb->ooseq = NULL;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fe30:	bf00      	nop
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fe38:	b590      	push	{r4, r7, lr}
 800fe3a:	b08d      	sub	sp, #52	; 0x34
 800fe3c:	af04      	add	r7, sp, #16
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d105      	bne.n	800fe54 <tcp_input+0x1c>
 800fe48:	4b9b      	ldr	r3, [pc, #620]	; (80100b8 <tcp_input+0x280>)
 800fe4a:	2283      	movs	r2, #131	; 0x83
 800fe4c:	499b      	ldr	r1, [pc, #620]	; (80100bc <tcp_input+0x284>)
 800fe4e:	489c      	ldr	r0, [pc, #624]	; (80100c0 <tcp_input+0x288>)
 800fe50:	f008 fe9e 	bl	8018b90 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	4a9a      	ldr	r2, [pc, #616]	; (80100c4 <tcp_input+0x28c>)
 800fe5a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	895b      	ldrh	r3, [r3, #10]
 800fe60:	2b13      	cmp	r3, #19
 800fe62:	f240 83d1 	bls.w	8010608 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fe66:	4b98      	ldr	r3, [pc, #608]	; (80100c8 <tcp_input+0x290>)
 800fe68:	695b      	ldr	r3, [r3, #20]
 800fe6a:	4a97      	ldr	r2, [pc, #604]	; (80100c8 <tcp_input+0x290>)
 800fe6c:	6812      	ldr	r2, [r2, #0]
 800fe6e:	4611      	mov	r1, r2
 800fe70:	4618      	mov	r0, r3
 800fe72:	f006 fc69 	bl	8016748 <ip4_addr_isbroadcast_u32>
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f040 83c7 	bne.w	801060c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fe7e:	4b92      	ldr	r3, [pc, #584]	; (80100c8 <tcp_input+0x290>)
 800fe80:	695b      	ldr	r3, [r3, #20]
 800fe82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fe86:	2be0      	cmp	r3, #224	; 0xe0
 800fe88:	f000 83c0 	beq.w	801060c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fe8c:	4b8d      	ldr	r3, [pc, #564]	; (80100c4 <tcp_input+0x28c>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	899b      	ldrh	r3, [r3, #12]
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7fc fb11 	bl	800c4bc <lwip_htons>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	0b1b      	lsrs	r3, r3, #12
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fea6:	7cbb      	ldrb	r3, [r7, #18]
 800fea8:	2b13      	cmp	r3, #19
 800feaa:	f240 83b1 	bls.w	8010610 <tcp_input+0x7d8>
 800feae:	7cbb      	ldrb	r3, [r7, #18]
 800feb0:	b29a      	uxth	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	891b      	ldrh	r3, [r3, #8]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	f200 83aa 	bhi.w	8010610 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800febc:	7cbb      	ldrb	r3, [r7, #18]
 800febe:	b29b      	uxth	r3, r3
 800fec0:	3b14      	subs	r3, #20
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	4b81      	ldr	r3, [pc, #516]	; (80100cc <tcp_input+0x294>)
 800fec6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fec8:	4b81      	ldr	r3, [pc, #516]	; (80100d0 <tcp_input+0x298>)
 800feca:	2200      	movs	r2, #0
 800fecc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	895a      	ldrh	r2, [r3, #10]
 800fed2:	7cbb      	ldrb	r3, [r7, #18]
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d309      	bcc.n	800feee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800feda:	4b7c      	ldr	r3, [pc, #496]	; (80100cc <tcp_input+0x294>)
 800fedc:	881a      	ldrh	r2, [r3, #0]
 800fede:	4b7d      	ldr	r3, [pc, #500]	; (80100d4 <tcp_input+0x29c>)
 800fee0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fee2:	7cbb      	ldrb	r3, [r7, #18]
 800fee4:	4619      	mov	r1, r3
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f7fd fe54 	bl	800db94 <pbuf_remove_header>
 800feec:	e04e      	b.n	800ff8c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d105      	bne.n	800ff02 <tcp_input+0xca>
 800fef6:	4b70      	ldr	r3, [pc, #448]	; (80100b8 <tcp_input+0x280>)
 800fef8:	22c2      	movs	r2, #194	; 0xc2
 800fefa:	4977      	ldr	r1, [pc, #476]	; (80100d8 <tcp_input+0x2a0>)
 800fefc:	4870      	ldr	r0, [pc, #448]	; (80100c0 <tcp_input+0x288>)
 800fefe:	f008 fe47 	bl	8018b90 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ff02:	2114      	movs	r1, #20
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f7fd fe45 	bl	800db94 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	895a      	ldrh	r2, [r3, #10]
 800ff0e:	4b71      	ldr	r3, [pc, #452]	; (80100d4 <tcp_input+0x29c>)
 800ff10:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ff12:	4b6e      	ldr	r3, [pc, #440]	; (80100cc <tcp_input+0x294>)
 800ff14:	881a      	ldrh	r2, [r3, #0]
 800ff16:	4b6f      	ldr	r3, [pc, #444]	; (80100d4 <tcp_input+0x29c>)
 800ff18:	881b      	ldrh	r3, [r3, #0]
 800ff1a:	1ad3      	subs	r3, r2, r3
 800ff1c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ff1e:	4b6d      	ldr	r3, [pc, #436]	; (80100d4 <tcp_input+0x29c>)
 800ff20:	881b      	ldrh	r3, [r3, #0]
 800ff22:	4619      	mov	r1, r3
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f7fd fe35 	bl	800db94 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	895b      	ldrh	r3, [r3, #10]
 800ff30:	8a3a      	ldrh	r2, [r7, #16]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	f200 836e 	bhi.w	8010614 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	4a64      	ldr	r2, [pc, #400]	; (80100d0 <tcp_input+0x298>)
 800ff40:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	8a3a      	ldrh	r2, [r7, #16]
 800ff48:	4611      	mov	r1, r2
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fd fe22 	bl	800db94 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	891a      	ldrh	r2, [r3, #8]
 800ff54:	8a3b      	ldrh	r3, [r7, #16]
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	895b      	ldrh	r3, [r3, #10]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d005      	beq.n	800ff72 <tcp_input+0x13a>
 800ff66:	4b54      	ldr	r3, [pc, #336]	; (80100b8 <tcp_input+0x280>)
 800ff68:	22df      	movs	r2, #223	; 0xdf
 800ff6a:	495c      	ldr	r1, [pc, #368]	; (80100dc <tcp_input+0x2a4>)
 800ff6c:	4854      	ldr	r0, [pc, #336]	; (80100c0 <tcp_input+0x288>)
 800ff6e:	f008 fe0f 	bl	8018b90 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	891a      	ldrh	r2, [r3, #8]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	891b      	ldrh	r3, [r3, #8]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d005      	beq.n	800ff8c <tcp_input+0x154>
 800ff80:	4b4d      	ldr	r3, [pc, #308]	; (80100b8 <tcp_input+0x280>)
 800ff82:	22e0      	movs	r2, #224	; 0xe0
 800ff84:	4956      	ldr	r1, [pc, #344]	; (80100e0 <tcp_input+0x2a8>)
 800ff86:	484e      	ldr	r0, [pc, #312]	; (80100c0 <tcp_input+0x288>)
 800ff88:	f008 fe02 	bl	8018b90 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ff8c:	4b4d      	ldr	r3, [pc, #308]	; (80100c4 <tcp_input+0x28c>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	881b      	ldrh	r3, [r3, #0]
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	4a4b      	ldr	r2, [pc, #300]	; (80100c4 <tcp_input+0x28c>)
 800ff96:	6814      	ldr	r4, [r2, #0]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7fc fa8f 	bl	800c4bc <lwip_htons>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ffa2:	4b48      	ldr	r3, [pc, #288]	; (80100c4 <tcp_input+0x28c>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	885b      	ldrh	r3, [r3, #2]
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	4a46      	ldr	r2, [pc, #280]	; (80100c4 <tcp_input+0x28c>)
 800ffac:	6814      	ldr	r4, [r2, #0]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fc fa84 	bl	800c4bc <lwip_htons>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ffb8:	4b42      	ldr	r3, [pc, #264]	; (80100c4 <tcp_input+0x28c>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	4a41      	ldr	r2, [pc, #260]	; (80100c4 <tcp_input+0x28c>)
 800ffc0:	6814      	ldr	r4, [r2, #0]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fc fa8f 	bl	800c4e6 <lwip_htonl>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	6063      	str	r3, [r4, #4]
 800ffcc:	6863      	ldr	r3, [r4, #4]
 800ffce:	4a45      	ldr	r2, [pc, #276]	; (80100e4 <tcp_input+0x2ac>)
 800ffd0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ffd2:	4b3c      	ldr	r3, [pc, #240]	; (80100c4 <tcp_input+0x28c>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	689b      	ldr	r3, [r3, #8]
 800ffd8:	4a3a      	ldr	r2, [pc, #232]	; (80100c4 <tcp_input+0x28c>)
 800ffda:	6814      	ldr	r4, [r2, #0]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7fc fa82 	bl	800c4e6 <lwip_htonl>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	60a3      	str	r3, [r4, #8]
 800ffe6:	68a3      	ldr	r3, [r4, #8]
 800ffe8:	4a3f      	ldr	r2, [pc, #252]	; (80100e8 <tcp_input+0x2b0>)
 800ffea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ffec:	4b35      	ldr	r3, [pc, #212]	; (80100c4 <tcp_input+0x28c>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	89db      	ldrh	r3, [r3, #14]
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	4a33      	ldr	r2, [pc, #204]	; (80100c4 <tcp_input+0x28c>)
 800fff6:	6814      	ldr	r4, [r2, #0]
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7fc fa5f 	bl	800c4bc <lwip_htons>
 800fffe:	4603      	mov	r3, r0
 8010000:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010002:	4b30      	ldr	r3, [pc, #192]	; (80100c4 <tcp_input+0x28c>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	899b      	ldrh	r3, [r3, #12]
 8010008:	b29b      	uxth	r3, r3
 801000a:	4618      	mov	r0, r3
 801000c:	f7fc fa56 	bl	800c4bc <lwip_htons>
 8010010:	4603      	mov	r3, r0
 8010012:	b2db      	uxtb	r3, r3
 8010014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010018:	b2da      	uxtb	r2, r3
 801001a:	4b34      	ldr	r3, [pc, #208]	; (80100ec <tcp_input+0x2b4>)
 801001c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	891a      	ldrh	r2, [r3, #8]
 8010022:	4b33      	ldr	r3, [pc, #204]	; (80100f0 <tcp_input+0x2b8>)
 8010024:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010026:	4b31      	ldr	r3, [pc, #196]	; (80100ec <tcp_input+0x2b4>)
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	f003 0303 	and.w	r3, r3, #3
 801002e:	2b00      	cmp	r3, #0
 8010030:	d00c      	beq.n	801004c <tcp_input+0x214>
    tcplen++;
 8010032:	4b2f      	ldr	r3, [pc, #188]	; (80100f0 <tcp_input+0x2b8>)
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	3301      	adds	r3, #1
 8010038:	b29a      	uxth	r2, r3
 801003a:	4b2d      	ldr	r3, [pc, #180]	; (80100f0 <tcp_input+0x2b8>)
 801003c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	891a      	ldrh	r2, [r3, #8]
 8010042:	4b2b      	ldr	r3, [pc, #172]	; (80100f0 <tcp_input+0x2b8>)
 8010044:	881b      	ldrh	r3, [r3, #0]
 8010046:	429a      	cmp	r2, r3
 8010048:	f200 82e6 	bhi.w	8010618 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801004c:	2300      	movs	r3, #0
 801004e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010050:	4b28      	ldr	r3, [pc, #160]	; (80100f4 <tcp_input+0x2bc>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	61fb      	str	r3, [r7, #28]
 8010056:	e09d      	b.n	8010194 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	7d1b      	ldrb	r3, [r3, #20]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d105      	bne.n	801006c <tcp_input+0x234>
 8010060:	4b15      	ldr	r3, [pc, #84]	; (80100b8 <tcp_input+0x280>)
 8010062:	22fb      	movs	r2, #251	; 0xfb
 8010064:	4924      	ldr	r1, [pc, #144]	; (80100f8 <tcp_input+0x2c0>)
 8010066:	4816      	ldr	r0, [pc, #88]	; (80100c0 <tcp_input+0x288>)
 8010068:	f008 fd92 	bl	8018b90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	7d1b      	ldrb	r3, [r3, #20]
 8010070:	2b0a      	cmp	r3, #10
 8010072:	d105      	bne.n	8010080 <tcp_input+0x248>
 8010074:	4b10      	ldr	r3, [pc, #64]	; (80100b8 <tcp_input+0x280>)
 8010076:	22fc      	movs	r2, #252	; 0xfc
 8010078:	4920      	ldr	r1, [pc, #128]	; (80100fc <tcp_input+0x2c4>)
 801007a:	4811      	ldr	r0, [pc, #68]	; (80100c0 <tcp_input+0x288>)
 801007c:	f008 fd88 	bl	8018b90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	7d1b      	ldrb	r3, [r3, #20]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d105      	bne.n	8010094 <tcp_input+0x25c>
 8010088:	4b0b      	ldr	r3, [pc, #44]	; (80100b8 <tcp_input+0x280>)
 801008a:	22fd      	movs	r2, #253	; 0xfd
 801008c:	491c      	ldr	r1, [pc, #112]	; (8010100 <tcp_input+0x2c8>)
 801008e:	480c      	ldr	r0, [pc, #48]	; (80100c0 <tcp_input+0x288>)
 8010090:	f008 fd7e 	bl	8018b90 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	7a1b      	ldrb	r3, [r3, #8]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d033      	beq.n	8010104 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	7a1a      	ldrb	r2, [r3, #8]
 80100a0:	4b09      	ldr	r3, [pc, #36]	; (80100c8 <tcp_input+0x290>)
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100a8:	3301      	adds	r3, #1
 80100aa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d029      	beq.n	8010104 <tcp_input+0x2cc>
      prev = pcb;
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	61bb      	str	r3, [r7, #24]
      continue;
 80100b4:	e06b      	b.n	801018e <tcp_input+0x356>
 80100b6:	bf00      	nop
 80100b8:	0801e9c0 	.word	0x0801e9c0
 80100bc:	0801e9f4 	.word	0x0801e9f4
 80100c0:	0801ea0c 	.word	0x0801ea0c
 80100c4:	20077960 	.word	0x20077960
 80100c8:	200094a8 	.word	0x200094a8
 80100cc:	20077964 	.word	0x20077964
 80100d0:	20077968 	.word	0x20077968
 80100d4:	20077966 	.word	0x20077966
 80100d8:	0801ea34 	.word	0x0801ea34
 80100dc:	0801ea44 	.word	0x0801ea44
 80100e0:	0801ea50 	.word	0x0801ea50
 80100e4:	20077970 	.word	0x20077970
 80100e8:	20077974 	.word	0x20077974
 80100ec:	2007797c 	.word	0x2007797c
 80100f0:	2007797a 	.word	0x2007797a
 80100f4:	20077944 	.word	0x20077944
 80100f8:	0801ea70 	.word	0x0801ea70
 80100fc:	0801ea98 	.word	0x0801ea98
 8010100:	0801eac4 	.word	0x0801eac4
    }

    if (pcb->remote_port == tcphdr->src &&
 8010104:	69fb      	ldr	r3, [r7, #28]
 8010106:	8b1a      	ldrh	r2, [r3, #24]
 8010108:	4b72      	ldr	r3, [pc, #456]	; (80102d4 <tcp_input+0x49c>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	881b      	ldrh	r3, [r3, #0]
 801010e:	b29b      	uxth	r3, r3
 8010110:	429a      	cmp	r2, r3
 8010112:	d13a      	bne.n	801018a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	8ada      	ldrh	r2, [r3, #22]
 8010118:	4b6e      	ldr	r3, [pc, #440]	; (80102d4 <tcp_input+0x49c>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	885b      	ldrh	r3, [r3, #2]
 801011e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010120:	429a      	cmp	r2, r3
 8010122:	d132      	bne.n	801018a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	685a      	ldr	r2, [r3, #4]
 8010128:	4b6b      	ldr	r3, [pc, #428]	; (80102d8 <tcp_input+0x4a0>)
 801012a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801012c:	429a      	cmp	r2, r3
 801012e:	d12c      	bne.n	801018a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	4b68      	ldr	r3, [pc, #416]	; (80102d8 <tcp_input+0x4a0>)
 8010136:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010138:	429a      	cmp	r2, r3
 801013a:	d126      	bne.n	801018a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	69fa      	ldr	r2, [r7, #28]
 8010142:	429a      	cmp	r2, r3
 8010144:	d106      	bne.n	8010154 <tcp_input+0x31c>
 8010146:	4b65      	ldr	r3, [pc, #404]	; (80102dc <tcp_input+0x4a4>)
 8010148:	f240 120d 	movw	r2, #269	; 0x10d
 801014c:	4964      	ldr	r1, [pc, #400]	; (80102e0 <tcp_input+0x4a8>)
 801014e:	4865      	ldr	r0, [pc, #404]	; (80102e4 <tcp_input+0x4ac>)
 8010150:	f008 fd1e 	bl	8018b90 <iprintf>
      if (prev != NULL) {
 8010154:	69bb      	ldr	r3, [r7, #24]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d00a      	beq.n	8010170 <tcp_input+0x338>
        prev->next = pcb->next;
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	68da      	ldr	r2, [r3, #12]
 801015e:	69bb      	ldr	r3, [r7, #24]
 8010160:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010162:	4b61      	ldr	r3, [pc, #388]	; (80102e8 <tcp_input+0x4b0>)
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801016a:	4a5f      	ldr	r2, [pc, #380]	; (80102e8 <tcp_input+0x4b0>)
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	69fa      	ldr	r2, [r7, #28]
 8010176:	429a      	cmp	r2, r3
 8010178:	d111      	bne.n	801019e <tcp_input+0x366>
 801017a:	4b58      	ldr	r3, [pc, #352]	; (80102dc <tcp_input+0x4a4>)
 801017c:	f240 1215 	movw	r2, #277	; 0x115
 8010180:	495a      	ldr	r1, [pc, #360]	; (80102ec <tcp_input+0x4b4>)
 8010182:	4858      	ldr	r0, [pc, #352]	; (80102e4 <tcp_input+0x4ac>)
 8010184:	f008 fd04 	bl	8018b90 <iprintf>
      break;
 8010188:	e009      	b.n	801019e <tcp_input+0x366>
    }
    prev = pcb;
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801018e:	69fb      	ldr	r3, [r7, #28]
 8010190:	68db      	ldr	r3, [r3, #12]
 8010192:	61fb      	str	r3, [r7, #28]
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	2b00      	cmp	r3, #0
 8010198:	f47f af5e 	bne.w	8010058 <tcp_input+0x220>
 801019c:	e000      	b.n	80101a0 <tcp_input+0x368>
      break;
 801019e:	bf00      	nop
  }

  if (pcb == NULL) {
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f040 80aa 	bne.w	80102fc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80101a8:	4b51      	ldr	r3, [pc, #324]	; (80102f0 <tcp_input+0x4b8>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	61fb      	str	r3, [r7, #28]
 80101ae:	e03f      	b.n	8010230 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	7d1b      	ldrb	r3, [r3, #20]
 80101b4:	2b0a      	cmp	r3, #10
 80101b6:	d006      	beq.n	80101c6 <tcp_input+0x38e>
 80101b8:	4b48      	ldr	r3, [pc, #288]	; (80102dc <tcp_input+0x4a4>)
 80101ba:	f240 121f 	movw	r2, #287	; 0x11f
 80101be:	494d      	ldr	r1, [pc, #308]	; (80102f4 <tcp_input+0x4bc>)
 80101c0:	4848      	ldr	r0, [pc, #288]	; (80102e4 <tcp_input+0x4ac>)
 80101c2:	f008 fce5 	bl	8018b90 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	7a1b      	ldrb	r3, [r3, #8]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d009      	beq.n	80101e2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80101ce:	69fb      	ldr	r3, [r7, #28]
 80101d0:	7a1a      	ldrb	r2, [r3, #8]
 80101d2:	4b41      	ldr	r3, [pc, #260]	; (80102d8 <tcp_input+0x4a0>)
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101da:	3301      	adds	r3, #1
 80101dc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101de:	429a      	cmp	r2, r3
 80101e0:	d122      	bne.n	8010228 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80101e2:	69fb      	ldr	r3, [r7, #28]
 80101e4:	8b1a      	ldrh	r2, [r3, #24]
 80101e6:	4b3b      	ldr	r3, [pc, #236]	; (80102d4 <tcp_input+0x49c>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	881b      	ldrh	r3, [r3, #0]
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d11b      	bne.n	801022a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80101f2:	69fb      	ldr	r3, [r7, #28]
 80101f4:	8ada      	ldrh	r2, [r3, #22]
 80101f6:	4b37      	ldr	r3, [pc, #220]	; (80102d4 <tcp_input+0x49c>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	885b      	ldrh	r3, [r3, #2]
 80101fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80101fe:	429a      	cmp	r2, r3
 8010200:	d113      	bne.n	801022a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010202:	69fb      	ldr	r3, [r7, #28]
 8010204:	685a      	ldr	r2, [r3, #4]
 8010206:	4b34      	ldr	r3, [pc, #208]	; (80102d8 <tcp_input+0x4a0>)
 8010208:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801020a:	429a      	cmp	r2, r3
 801020c:	d10d      	bne.n	801022a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	681a      	ldr	r2, [r3, #0]
 8010212:	4b31      	ldr	r3, [pc, #196]	; (80102d8 <tcp_input+0x4a0>)
 8010214:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010216:	429a      	cmp	r2, r3
 8010218:	d107      	bne.n	801022a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801021a:	69f8      	ldr	r0, [r7, #28]
 801021c:	f000 fb56 	bl	80108cc <tcp_timewait_input>
        }
        pbuf_free(p);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f7fd fd3d 	bl	800dca0 <pbuf_free>
        return;
 8010226:	e1fd      	b.n	8010624 <tcp_input+0x7ec>
        continue;
 8010228:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	61fb      	str	r3, [r7, #28]
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d1bc      	bne.n	80101b0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010236:	2300      	movs	r3, #0
 8010238:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801023a:	4b2f      	ldr	r3, [pc, #188]	; (80102f8 <tcp_input+0x4c0>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	617b      	str	r3, [r7, #20]
 8010240:	e02a      	b.n	8010298 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	7a1b      	ldrb	r3, [r3, #8]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00c      	beq.n	8010264 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	7a1a      	ldrb	r2, [r3, #8]
 801024e:	4b22      	ldr	r3, [pc, #136]	; (80102d8 <tcp_input+0x4a0>)
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010256:	3301      	adds	r3, #1
 8010258:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801025a:	429a      	cmp	r2, r3
 801025c:	d002      	beq.n	8010264 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	61bb      	str	r3, [r7, #24]
        continue;
 8010262:	e016      	b.n	8010292 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	8ada      	ldrh	r2, [r3, #22]
 8010268:	4b1a      	ldr	r3, [pc, #104]	; (80102d4 <tcp_input+0x49c>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	885b      	ldrh	r3, [r3, #2]
 801026e:	b29b      	uxth	r3, r3
 8010270:	429a      	cmp	r2, r3
 8010272:	d10c      	bne.n	801028e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	4b17      	ldr	r3, [pc, #92]	; (80102d8 <tcp_input+0x4a0>)
 801027a:	695b      	ldr	r3, [r3, #20]
 801027c:	429a      	cmp	r2, r3
 801027e:	d00f      	beq.n	80102a0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00d      	beq.n	80102a2 <tcp_input+0x46a>
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d009      	beq.n	80102a2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	617b      	str	r3, [r7, #20]
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d1d1      	bne.n	8010242 <tcp_input+0x40a>
 801029e:	e000      	b.n	80102a2 <tcp_input+0x46a>
            break;
 80102a0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d029      	beq.n	80102fc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80102a8:	69bb      	ldr	r3, [r7, #24]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00a      	beq.n	80102c4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	68da      	ldr	r2, [r3, #12]
 80102b2:	69bb      	ldr	r3, [r7, #24]
 80102b4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80102b6:	4b10      	ldr	r3, [pc, #64]	; (80102f8 <tcp_input+0x4c0>)
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80102be:	4a0e      	ldr	r2, [pc, #56]	; (80102f8 <tcp_input+0x4c0>)
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80102c4:	6978      	ldr	r0, [r7, #20]
 80102c6:	f000 fa03 	bl	80106d0 <tcp_listen_input>
      }
      pbuf_free(p);
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f7fd fce8 	bl	800dca0 <pbuf_free>
      return;
 80102d0:	e1a8      	b.n	8010624 <tcp_input+0x7ec>
 80102d2:	bf00      	nop
 80102d4:	20077960 	.word	0x20077960
 80102d8:	200094a8 	.word	0x200094a8
 80102dc:	0801e9c0 	.word	0x0801e9c0
 80102e0:	0801eaec 	.word	0x0801eaec
 80102e4:	0801ea0c 	.word	0x0801ea0c
 80102e8:	20077944 	.word	0x20077944
 80102ec:	0801eb18 	.word	0x0801eb18
 80102f0:	20077948 	.word	0x20077948
 80102f4:	0801eb44 	.word	0x0801eb44
 80102f8:	20077940 	.word	0x20077940
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f000 8158 	beq.w	80105b4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010304:	4b95      	ldr	r3, [pc, #596]	; (801055c <tcp_input+0x724>)
 8010306:	2200      	movs	r2, #0
 8010308:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	891a      	ldrh	r2, [r3, #8]
 801030e:	4b93      	ldr	r3, [pc, #588]	; (801055c <tcp_input+0x724>)
 8010310:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010312:	4a92      	ldr	r2, [pc, #584]	; (801055c <tcp_input+0x724>)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010318:	4b91      	ldr	r3, [pc, #580]	; (8010560 <tcp_input+0x728>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	4a8f      	ldr	r2, [pc, #572]	; (801055c <tcp_input+0x724>)
 801031e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010320:	4b90      	ldr	r3, [pc, #576]	; (8010564 <tcp_input+0x72c>)
 8010322:	2200      	movs	r2, #0
 8010324:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010326:	4b90      	ldr	r3, [pc, #576]	; (8010568 <tcp_input+0x730>)
 8010328:	2200      	movs	r2, #0
 801032a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801032c:	4b8f      	ldr	r3, [pc, #572]	; (801056c <tcp_input+0x734>)
 801032e:	2200      	movs	r2, #0
 8010330:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010332:	4b8f      	ldr	r3, [pc, #572]	; (8010570 <tcp_input+0x738>)
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	f003 0308 	and.w	r3, r3, #8
 801033a:	2b00      	cmp	r3, #0
 801033c:	d006      	beq.n	801034c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	7b5b      	ldrb	r3, [r3, #13]
 8010342:	f043 0301 	orr.w	r3, r3, #1
 8010346:	b2da      	uxtb	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010350:	2b00      	cmp	r3, #0
 8010352:	d017      	beq.n	8010384 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010354:	69f8      	ldr	r0, [r7, #28]
 8010356:	f7ff f85b 	bl	800f410 <tcp_process_refused_data>
 801035a:	4603      	mov	r3, r0
 801035c:	f113 0f0d 	cmn.w	r3, #13
 8010360:	d007      	beq.n	8010372 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010362:	69fb      	ldr	r3, [r7, #28]
 8010364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00c      	beq.n	8010384 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801036a:	4b82      	ldr	r3, [pc, #520]	; (8010574 <tcp_input+0x73c>)
 801036c:	881b      	ldrh	r3, [r3, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d008      	beq.n	8010384 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010376:	2b00      	cmp	r3, #0
 8010378:	f040 80e3 	bne.w	8010542 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801037c:	69f8      	ldr	r0, [r7, #28]
 801037e:	f003 fe09 	bl	8013f94 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010382:	e0de      	b.n	8010542 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010384:	4a7c      	ldr	r2, [pc, #496]	; (8010578 <tcp_input+0x740>)
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801038a:	69f8      	ldr	r0, [r7, #28]
 801038c:	f000 fb18 	bl	80109c0 <tcp_process>
 8010390:	4603      	mov	r3, r0
 8010392:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010394:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010398:	f113 0f0d 	cmn.w	r3, #13
 801039c:	f000 80d3 	beq.w	8010546 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80103a0:	4b71      	ldr	r3, [pc, #452]	; (8010568 <tcp_input+0x730>)
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	f003 0308 	and.w	r3, r3, #8
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d015      	beq.n	80103d8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d008      	beq.n	80103c8 <tcp_input+0x590>
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103bc:	69fa      	ldr	r2, [r7, #28]
 80103be:	6912      	ldr	r2, [r2, #16]
 80103c0:	f06f 010d 	mvn.w	r1, #13
 80103c4:	4610      	mov	r0, r2
 80103c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80103c8:	69f9      	ldr	r1, [r7, #28]
 80103ca:	486c      	ldr	r0, [pc, #432]	; (801057c <tcp_input+0x744>)
 80103cc:	f7ff fbbc 	bl	800fb48 <tcp_pcb_remove>
        tcp_free(pcb);
 80103d0:	69f8      	ldr	r0, [r7, #28]
 80103d2:	f7fd ff21 	bl	800e218 <tcp_free>
 80103d6:	e0da      	b.n	801058e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80103d8:	2300      	movs	r3, #0
 80103da:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80103dc:	4b63      	ldr	r3, [pc, #396]	; (801056c <tcp_input+0x734>)
 80103de:	881b      	ldrh	r3, [r3, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d01d      	beq.n	8010420 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80103e4:	4b61      	ldr	r3, [pc, #388]	; (801056c <tcp_input+0x734>)
 80103e6:	881b      	ldrh	r3, [r3, #0]
 80103e8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d00a      	beq.n	801040a <tcp_input+0x5d2>
 80103f4:	69fb      	ldr	r3, [r7, #28]
 80103f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103fa:	69fa      	ldr	r2, [r7, #28]
 80103fc:	6910      	ldr	r0, [r2, #16]
 80103fe:	89fa      	ldrh	r2, [r7, #14]
 8010400:	69f9      	ldr	r1, [r7, #28]
 8010402:	4798      	blx	r3
 8010404:	4603      	mov	r3, r0
 8010406:	74fb      	strb	r3, [r7, #19]
 8010408:	e001      	b.n	801040e <tcp_input+0x5d6>
 801040a:	2300      	movs	r3, #0
 801040c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801040e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010412:	f113 0f0d 	cmn.w	r3, #13
 8010416:	f000 8098 	beq.w	801054a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801041a:	4b54      	ldr	r3, [pc, #336]	; (801056c <tcp_input+0x734>)
 801041c:	2200      	movs	r2, #0
 801041e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010420:	69f8      	ldr	r0, [r7, #28]
 8010422:	f000 f915 	bl	8010650 <tcp_input_delayed_close>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	f040 8090 	bne.w	801054e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801042e:	4b4d      	ldr	r3, [pc, #308]	; (8010564 <tcp_input+0x72c>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d041      	beq.n	80104ba <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010436:	69fb      	ldr	r3, [r7, #28]
 8010438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801043a:	2b00      	cmp	r3, #0
 801043c:	d006      	beq.n	801044c <tcp_input+0x614>
 801043e:	4b50      	ldr	r3, [pc, #320]	; (8010580 <tcp_input+0x748>)
 8010440:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010444:	494f      	ldr	r1, [pc, #316]	; (8010584 <tcp_input+0x74c>)
 8010446:	4850      	ldr	r0, [pc, #320]	; (8010588 <tcp_input+0x750>)
 8010448:	f008 fba2 	bl	8018b90 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801044c:	69fb      	ldr	r3, [r7, #28]
 801044e:	8b5b      	ldrh	r3, [r3, #26]
 8010450:	f003 0310 	and.w	r3, r3, #16
 8010454:	2b00      	cmp	r3, #0
 8010456:	d008      	beq.n	801046a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010458:	4b42      	ldr	r3, [pc, #264]	; (8010564 <tcp_input+0x72c>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4618      	mov	r0, r3
 801045e:	f7fd fc1f 	bl	800dca0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010462:	69f8      	ldr	r0, [r7, #28]
 8010464:	f7fe fa1c 	bl	800e8a0 <tcp_abort>
            goto aborted;
 8010468:	e091      	b.n	801058e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801046a:	69fb      	ldr	r3, [r7, #28]
 801046c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010470:	2b00      	cmp	r3, #0
 8010472:	d00c      	beq.n	801048e <tcp_input+0x656>
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	6918      	ldr	r0, [r3, #16]
 801047e:	4b39      	ldr	r3, [pc, #228]	; (8010564 <tcp_input+0x72c>)
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	2300      	movs	r3, #0
 8010484:	69f9      	ldr	r1, [r7, #28]
 8010486:	47a0      	blx	r4
 8010488:	4603      	mov	r3, r0
 801048a:	74fb      	strb	r3, [r7, #19]
 801048c:	e008      	b.n	80104a0 <tcp_input+0x668>
 801048e:	4b35      	ldr	r3, [pc, #212]	; (8010564 <tcp_input+0x72c>)
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	2300      	movs	r3, #0
 8010494:	69f9      	ldr	r1, [r7, #28]
 8010496:	2000      	movs	r0, #0
 8010498:	f7ff f890 	bl	800f5bc <tcp_recv_null>
 801049c:	4603      	mov	r3, r0
 801049e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80104a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104a4:	f113 0f0d 	cmn.w	r3, #13
 80104a8:	d053      	beq.n	8010552 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80104aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d003      	beq.n	80104ba <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80104b2:	4b2c      	ldr	r3, [pc, #176]	; (8010564 <tcp_input+0x72c>)
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	69fb      	ldr	r3, [r7, #28]
 80104b8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80104ba:	4b2b      	ldr	r3, [pc, #172]	; (8010568 <tcp_input+0x730>)
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	f003 0320 	and.w	r3, r3, #32
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d030      	beq.n	8010528 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d009      	beq.n	80104e2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80104ce:	69fb      	ldr	r3, [r7, #28]
 80104d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104d2:	7b5a      	ldrb	r2, [r3, #13]
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104d8:	f042 0220 	orr.w	r2, r2, #32
 80104dc:	b2d2      	uxtb	r2, r2
 80104de:	735a      	strb	r2, [r3, #13]
 80104e0:	e022      	b.n	8010528 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80104ea:	d005      	beq.n	80104f8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104f0:	3301      	adds	r3, #1
 80104f2:	b29a      	uxth	r2, r3
 80104f4:	69fb      	ldr	r3, [r7, #28]
 80104f6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00b      	beq.n	801051a <tcp_input+0x6e2>
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	6918      	ldr	r0, [r3, #16]
 801050c:	2300      	movs	r3, #0
 801050e:	2200      	movs	r2, #0
 8010510:	69f9      	ldr	r1, [r7, #28]
 8010512:	47a0      	blx	r4
 8010514:	4603      	mov	r3, r0
 8010516:	74fb      	strb	r3, [r7, #19]
 8010518:	e001      	b.n	801051e <tcp_input+0x6e6>
 801051a:	2300      	movs	r3, #0
 801051c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801051e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010522:	f113 0f0d 	cmn.w	r3, #13
 8010526:	d016      	beq.n	8010556 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010528:	4b13      	ldr	r3, [pc, #76]	; (8010578 <tcp_input+0x740>)
 801052a:	2200      	movs	r2, #0
 801052c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801052e:	69f8      	ldr	r0, [r7, #28]
 8010530:	f000 f88e 	bl	8010650 <tcp_input_delayed_close>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d128      	bne.n	801058c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801053a:	69f8      	ldr	r0, [r7, #28]
 801053c:	f002 ff24 	bl	8013388 <tcp_output>
 8010540:	e025      	b.n	801058e <tcp_input+0x756>
        goto aborted;
 8010542:	bf00      	nop
 8010544:	e023      	b.n	801058e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010546:	bf00      	nop
 8010548:	e021      	b.n	801058e <tcp_input+0x756>
              goto aborted;
 801054a:	bf00      	nop
 801054c:	e01f      	b.n	801058e <tcp_input+0x756>
          goto aborted;
 801054e:	bf00      	nop
 8010550:	e01d      	b.n	801058e <tcp_input+0x756>
            goto aborted;
 8010552:	bf00      	nop
 8010554:	e01b      	b.n	801058e <tcp_input+0x756>
              goto aborted;
 8010556:	bf00      	nop
 8010558:	e019      	b.n	801058e <tcp_input+0x756>
 801055a:	bf00      	nop
 801055c:	20077950 	.word	0x20077950
 8010560:	20077960 	.word	0x20077960
 8010564:	20077980 	.word	0x20077980
 8010568:	2007797d 	.word	0x2007797d
 801056c:	20077978 	.word	0x20077978
 8010570:	2007797c 	.word	0x2007797c
 8010574:	2007797a 	.word	0x2007797a
 8010578:	20077984 	.word	0x20077984
 801057c:	20077944 	.word	0x20077944
 8010580:	0801e9c0 	.word	0x0801e9c0
 8010584:	0801eb74 	.word	0x0801eb74
 8010588:	0801ea0c 	.word	0x0801ea0c
          goto aborted;
 801058c:	bf00      	nop
    tcp_input_pcb = NULL;
 801058e:	4b27      	ldr	r3, [pc, #156]	; (801062c <tcp_input+0x7f4>)
 8010590:	2200      	movs	r2, #0
 8010592:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010594:	4b26      	ldr	r3, [pc, #152]	; (8010630 <tcp_input+0x7f8>)
 8010596:	2200      	movs	r2, #0
 8010598:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801059a:	4b26      	ldr	r3, [pc, #152]	; (8010634 <tcp_input+0x7fc>)
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d03f      	beq.n	8010622 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80105a2:	4b24      	ldr	r3, [pc, #144]	; (8010634 <tcp_input+0x7fc>)
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fd fb7a 	bl	800dca0 <pbuf_free>
      inseg.p = NULL;
 80105ac:	4b21      	ldr	r3, [pc, #132]	; (8010634 <tcp_input+0x7fc>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80105b2:	e036      	b.n	8010622 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80105b4:	4b20      	ldr	r3, [pc, #128]	; (8010638 <tcp_input+0x800>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	899b      	ldrh	r3, [r3, #12]
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	4618      	mov	r0, r3
 80105be:	f7fb ff7d 	bl	800c4bc <lwip_htons>
 80105c2:	4603      	mov	r3, r0
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	f003 0304 	and.w	r3, r3, #4
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d118      	bne.n	8010600 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105ce:	4b1b      	ldr	r3, [pc, #108]	; (801063c <tcp_input+0x804>)
 80105d0:	6819      	ldr	r1, [r3, #0]
 80105d2:	4b1b      	ldr	r3, [pc, #108]	; (8010640 <tcp_input+0x808>)
 80105d4:	881b      	ldrh	r3, [r3, #0]
 80105d6:	461a      	mov	r2, r3
 80105d8:	4b1a      	ldr	r3, [pc, #104]	; (8010644 <tcp_input+0x80c>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105de:	4b16      	ldr	r3, [pc, #88]	; (8010638 <tcp_input+0x800>)
 80105e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105e2:	885b      	ldrh	r3, [r3, #2]
 80105e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105e6:	4a14      	ldr	r2, [pc, #80]	; (8010638 <tcp_input+0x800>)
 80105e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105ea:	8812      	ldrh	r2, [r2, #0]
 80105ec:	b292      	uxth	r2, r2
 80105ee:	9202      	str	r2, [sp, #8]
 80105f0:	9301      	str	r3, [sp, #4]
 80105f2:	4b15      	ldr	r3, [pc, #84]	; (8010648 <tcp_input+0x810>)
 80105f4:	9300      	str	r3, [sp, #0]
 80105f6:	4b15      	ldr	r3, [pc, #84]	; (801064c <tcp_input+0x814>)
 80105f8:	4602      	mov	r2, r0
 80105fa:	2000      	movs	r0, #0
 80105fc:	f003 fc7a 	bl	8013ef4 <tcp_rst>
    pbuf_free(p);
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f7fd fb4d 	bl	800dca0 <pbuf_free>
  return;
 8010606:	e00c      	b.n	8010622 <tcp_input+0x7ea>
    goto dropped;
 8010608:	bf00      	nop
 801060a:	e006      	b.n	801061a <tcp_input+0x7e2>
    goto dropped;
 801060c:	bf00      	nop
 801060e:	e004      	b.n	801061a <tcp_input+0x7e2>
    goto dropped;
 8010610:	bf00      	nop
 8010612:	e002      	b.n	801061a <tcp_input+0x7e2>
      goto dropped;
 8010614:	bf00      	nop
 8010616:	e000      	b.n	801061a <tcp_input+0x7e2>
      goto dropped;
 8010618:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f7fd fb40 	bl	800dca0 <pbuf_free>
 8010620:	e000      	b.n	8010624 <tcp_input+0x7ec>
  return;
 8010622:	bf00      	nop
}
 8010624:	3724      	adds	r7, #36	; 0x24
 8010626:	46bd      	mov	sp, r7
 8010628:	bd90      	pop	{r4, r7, pc}
 801062a:	bf00      	nop
 801062c:	20077984 	.word	0x20077984
 8010630:	20077980 	.word	0x20077980
 8010634:	20077950 	.word	0x20077950
 8010638:	20077960 	.word	0x20077960
 801063c:	20077974 	.word	0x20077974
 8010640:	2007797a 	.word	0x2007797a
 8010644:	20077970 	.word	0x20077970
 8010648:	200094b8 	.word	0x200094b8
 801064c:	200094bc 	.word	0x200094bc

08010650 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d106      	bne.n	801066c <tcp_input_delayed_close+0x1c>
 801065e:	4b17      	ldr	r3, [pc, #92]	; (80106bc <tcp_input_delayed_close+0x6c>)
 8010660:	f240 225a 	movw	r2, #602	; 0x25a
 8010664:	4916      	ldr	r1, [pc, #88]	; (80106c0 <tcp_input_delayed_close+0x70>)
 8010666:	4817      	ldr	r0, [pc, #92]	; (80106c4 <tcp_input_delayed_close+0x74>)
 8010668:	f008 fa92 	bl	8018b90 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801066c:	4b16      	ldr	r3, [pc, #88]	; (80106c8 <tcp_input_delayed_close+0x78>)
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	f003 0310 	and.w	r3, r3, #16
 8010674:	2b00      	cmp	r3, #0
 8010676:	d01c      	beq.n	80106b2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	8b5b      	ldrh	r3, [r3, #26]
 801067c:	f003 0310 	and.w	r3, r3, #16
 8010680:	2b00      	cmp	r3, #0
 8010682:	d10d      	bne.n	80106a0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801068a:	2b00      	cmp	r3, #0
 801068c:	d008      	beq.n	80106a0 <tcp_input_delayed_close+0x50>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	6912      	ldr	r2, [r2, #16]
 8010698:	f06f 010e 	mvn.w	r1, #14
 801069c:	4610      	mov	r0, r2
 801069e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80106a0:	6879      	ldr	r1, [r7, #4]
 80106a2:	480a      	ldr	r0, [pc, #40]	; (80106cc <tcp_input_delayed_close+0x7c>)
 80106a4:	f7ff fa50 	bl	800fb48 <tcp_pcb_remove>
    tcp_free(pcb);
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f7fd fdb5 	bl	800e218 <tcp_free>
    return 1;
 80106ae:	2301      	movs	r3, #1
 80106b0:	e000      	b.n	80106b4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80106b2:	2300      	movs	r3, #0
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3708      	adds	r7, #8
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	0801e9c0 	.word	0x0801e9c0
 80106c0:	0801eb90 	.word	0x0801eb90
 80106c4:	0801ea0c 	.word	0x0801ea0c
 80106c8:	2007797d 	.word	0x2007797d
 80106cc:	20077944 	.word	0x20077944

080106d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80106d0:	b590      	push	{r4, r7, lr}
 80106d2:	b08b      	sub	sp, #44	; 0x2c
 80106d4:	af04      	add	r7, sp, #16
 80106d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80106d8:	4b6f      	ldr	r3, [pc, #444]	; (8010898 <tcp_listen_input+0x1c8>)
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	f003 0304 	and.w	r3, r3, #4
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f040 80d2 	bne.w	801088a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d106      	bne.n	80106fa <tcp_listen_input+0x2a>
 80106ec:	4b6b      	ldr	r3, [pc, #428]	; (801089c <tcp_listen_input+0x1cc>)
 80106ee:	f240 2281 	movw	r2, #641	; 0x281
 80106f2:	496b      	ldr	r1, [pc, #428]	; (80108a0 <tcp_listen_input+0x1d0>)
 80106f4:	486b      	ldr	r0, [pc, #428]	; (80108a4 <tcp_listen_input+0x1d4>)
 80106f6:	f008 fa4b 	bl	8018b90 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80106fa:	4b67      	ldr	r3, [pc, #412]	; (8010898 <tcp_listen_input+0x1c8>)
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	f003 0310 	and.w	r3, r3, #16
 8010702:	2b00      	cmp	r3, #0
 8010704:	d019      	beq.n	801073a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010706:	4b68      	ldr	r3, [pc, #416]	; (80108a8 <tcp_listen_input+0x1d8>)
 8010708:	6819      	ldr	r1, [r3, #0]
 801070a:	4b68      	ldr	r3, [pc, #416]	; (80108ac <tcp_listen_input+0x1dc>)
 801070c:	881b      	ldrh	r3, [r3, #0]
 801070e:	461a      	mov	r2, r3
 8010710:	4b67      	ldr	r3, [pc, #412]	; (80108b0 <tcp_listen_input+0x1e0>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010716:	4b67      	ldr	r3, [pc, #412]	; (80108b4 <tcp_listen_input+0x1e4>)
 8010718:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801071a:	885b      	ldrh	r3, [r3, #2]
 801071c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801071e:	4a65      	ldr	r2, [pc, #404]	; (80108b4 <tcp_listen_input+0x1e4>)
 8010720:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010722:	8812      	ldrh	r2, [r2, #0]
 8010724:	b292      	uxth	r2, r2
 8010726:	9202      	str	r2, [sp, #8]
 8010728:	9301      	str	r3, [sp, #4]
 801072a:	4b63      	ldr	r3, [pc, #396]	; (80108b8 <tcp_listen_input+0x1e8>)
 801072c:	9300      	str	r3, [sp, #0]
 801072e:	4b63      	ldr	r3, [pc, #396]	; (80108bc <tcp_listen_input+0x1ec>)
 8010730:	4602      	mov	r2, r0
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f003 fbde 	bl	8013ef4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010738:	e0a9      	b.n	801088e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801073a:	4b57      	ldr	r3, [pc, #348]	; (8010898 <tcp_listen_input+0x1c8>)
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	f003 0302 	and.w	r3, r3, #2
 8010742:	2b00      	cmp	r3, #0
 8010744:	f000 80a3 	beq.w	801088e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	7d5b      	ldrb	r3, [r3, #21]
 801074c:	4618      	mov	r0, r3
 801074e:	f7ff f859 	bl	800f804 <tcp_alloc>
 8010752:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d111      	bne.n	801077e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	699b      	ldr	r3, [r3, #24]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d00a      	beq.n	8010778 <tcp_listen_input+0xa8>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	699b      	ldr	r3, [r3, #24]
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	6910      	ldr	r0, [r2, #16]
 801076a:	f04f 32ff 	mov.w	r2, #4294967295
 801076e:	2100      	movs	r1, #0
 8010770:	4798      	blx	r3
 8010772:	4603      	mov	r3, r0
 8010774:	73bb      	strb	r3, [r7, #14]
      return;
 8010776:	e08b      	b.n	8010890 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010778:	23f0      	movs	r3, #240	; 0xf0
 801077a:	73bb      	strb	r3, [r7, #14]
      return;
 801077c:	e088      	b.n	8010890 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801077e:	4b50      	ldr	r3, [pc, #320]	; (80108c0 <tcp_listen_input+0x1f0>)
 8010780:	695a      	ldr	r2, [r3, #20]
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010786:	4b4e      	ldr	r3, [pc, #312]	; (80108c0 <tcp_listen_input+0x1f0>)
 8010788:	691a      	ldr	r2, [r3, #16]
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	8ada      	ldrh	r2, [r3, #22]
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010796:	4b47      	ldr	r3, [pc, #284]	; (80108b4 <tcp_listen_input+0x1e4>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	881b      	ldrh	r3, [r3, #0]
 801079c:	b29a      	uxth	r2, r3
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	2203      	movs	r2, #3
 80107a6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80107a8:	4b41      	ldr	r3, [pc, #260]	; (80108b0 <tcp_listen_input+0x1e0>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	1c5a      	adds	r2, r3, #1
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80107ba:	6978      	ldr	r0, [r7, #20]
 80107bc:	f7ff fa58 	bl	800fc70 <tcp_next_iss>
 80107c0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	693a      	ldr	r2, [r7, #16]
 80107c6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	693a      	ldr	r2, [r7, #16]
 80107cc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	693a      	ldr	r2, [r7, #16]
 80107d2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	693a      	ldr	r2, [r7, #16]
 80107d8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80107da:	4b35      	ldr	r3, [pc, #212]	; (80108b0 <tcp_listen_input+0x1e0>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	1e5a      	subs	r2, r3, #1
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	691a      	ldr	r2, [r3, #16]
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	7a5b      	ldrb	r3, [r3, #9]
 80107f6:	f003 030c 	and.w	r3, r3, #12
 80107fa:	b2da      	uxtb	r2, r3
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	7a1a      	ldrb	r2, [r3, #8]
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010808:	4b2e      	ldr	r3, [pc, #184]	; (80108c4 <tcp_listen_input+0x1f4>)
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	60da      	str	r2, [r3, #12]
 8010810:	4a2c      	ldr	r2, [pc, #176]	; (80108c4 <tcp_listen_input+0x1f4>)
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	6013      	str	r3, [r2, #0]
 8010816:	f003 fd2d 	bl	8014274 <tcp_timer_needed>
 801081a:	4b2b      	ldr	r3, [pc, #172]	; (80108c8 <tcp_listen_input+0x1f8>)
 801081c:	2201      	movs	r2, #1
 801081e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010820:	6978      	ldr	r0, [r7, #20]
 8010822:	f001 fd8f 	bl	8012344 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010826:	4b23      	ldr	r3, [pc, #140]	; (80108b4 <tcp_listen_input+0x1e4>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	89db      	ldrh	r3, [r3, #14]
 801082c:	b29a      	uxth	r2, r3
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	3304      	adds	r3, #4
 8010848:	4618      	mov	r0, r3
 801084a:	f005 fce7 	bl	801621c <ip4_route>
 801084e:	4601      	mov	r1, r0
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	3304      	adds	r3, #4
 8010854:	461a      	mov	r2, r3
 8010856:	4620      	mov	r0, r4
 8010858:	f7ff fa30 	bl	800fcbc <tcp_eff_send_mss_netif>
 801085c:	4603      	mov	r3, r0
 801085e:	461a      	mov	r2, r3
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010864:	2112      	movs	r1, #18
 8010866:	6978      	ldr	r0, [r7, #20]
 8010868:	f002 fca0 	bl	80131ac <tcp_enqueue_flags>
 801086c:	4603      	mov	r3, r0
 801086e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d004      	beq.n	8010882 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010878:	2100      	movs	r1, #0
 801087a:	6978      	ldr	r0, [r7, #20]
 801087c:	f7fd ff52 	bl	800e724 <tcp_abandon>
      return;
 8010880:	e006      	b.n	8010890 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010882:	6978      	ldr	r0, [r7, #20]
 8010884:	f002 fd80 	bl	8013388 <tcp_output>
  return;
 8010888:	e001      	b.n	801088e <tcp_listen_input+0x1be>
    return;
 801088a:	bf00      	nop
 801088c:	e000      	b.n	8010890 <tcp_listen_input+0x1c0>
  return;
 801088e:	bf00      	nop
}
 8010890:	371c      	adds	r7, #28
 8010892:	46bd      	mov	sp, r7
 8010894:	bd90      	pop	{r4, r7, pc}
 8010896:	bf00      	nop
 8010898:	2007797c 	.word	0x2007797c
 801089c:	0801e9c0 	.word	0x0801e9c0
 80108a0:	0801ebb8 	.word	0x0801ebb8
 80108a4:	0801ea0c 	.word	0x0801ea0c
 80108a8:	20077974 	.word	0x20077974
 80108ac:	2007797a 	.word	0x2007797a
 80108b0:	20077970 	.word	0x20077970
 80108b4:	20077960 	.word	0x20077960
 80108b8:	200094b8 	.word	0x200094b8
 80108bc:	200094bc 	.word	0x200094bc
 80108c0:	200094a8 	.word	0x200094a8
 80108c4:	20077944 	.word	0x20077944
 80108c8:	2007794c 	.word	0x2007794c

080108cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b086      	sub	sp, #24
 80108d0:	af04      	add	r7, sp, #16
 80108d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80108d4:	4b2f      	ldr	r3, [pc, #188]	; (8010994 <tcp_timewait_input+0xc8>)
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	f003 0304 	and.w	r3, r3, #4
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d153      	bne.n	8010988 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d106      	bne.n	80108f4 <tcp_timewait_input+0x28>
 80108e6:	4b2c      	ldr	r3, [pc, #176]	; (8010998 <tcp_timewait_input+0xcc>)
 80108e8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80108ec:	492b      	ldr	r1, [pc, #172]	; (801099c <tcp_timewait_input+0xd0>)
 80108ee:	482c      	ldr	r0, [pc, #176]	; (80109a0 <tcp_timewait_input+0xd4>)
 80108f0:	f008 f94e 	bl	8018b90 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80108f4:	4b27      	ldr	r3, [pc, #156]	; (8010994 <tcp_timewait_input+0xc8>)
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	f003 0302 	and.w	r3, r3, #2
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d02a      	beq.n	8010956 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010900:	4b28      	ldr	r3, [pc, #160]	; (80109a4 <tcp_timewait_input+0xd8>)
 8010902:	681a      	ldr	r2, [r3, #0]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010908:	1ad3      	subs	r3, r2, r3
 801090a:	2b00      	cmp	r3, #0
 801090c:	db2d      	blt.n	801096a <tcp_timewait_input+0x9e>
 801090e:	4b25      	ldr	r3, [pc, #148]	; (80109a4 <tcp_timewait_input+0xd8>)
 8010910:	681a      	ldr	r2, [r3, #0]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010916:	6879      	ldr	r1, [r7, #4]
 8010918:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801091a:	440b      	add	r3, r1
 801091c:	1ad3      	subs	r3, r2, r3
 801091e:	2b00      	cmp	r3, #0
 8010920:	dc23      	bgt.n	801096a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010922:	4b21      	ldr	r3, [pc, #132]	; (80109a8 <tcp_timewait_input+0xdc>)
 8010924:	6819      	ldr	r1, [r3, #0]
 8010926:	4b21      	ldr	r3, [pc, #132]	; (80109ac <tcp_timewait_input+0xe0>)
 8010928:	881b      	ldrh	r3, [r3, #0]
 801092a:	461a      	mov	r2, r3
 801092c:	4b1d      	ldr	r3, [pc, #116]	; (80109a4 <tcp_timewait_input+0xd8>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010932:	4b1f      	ldr	r3, [pc, #124]	; (80109b0 <tcp_timewait_input+0xe4>)
 8010934:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010936:	885b      	ldrh	r3, [r3, #2]
 8010938:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801093a:	4a1d      	ldr	r2, [pc, #116]	; (80109b0 <tcp_timewait_input+0xe4>)
 801093c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801093e:	8812      	ldrh	r2, [r2, #0]
 8010940:	b292      	uxth	r2, r2
 8010942:	9202      	str	r2, [sp, #8]
 8010944:	9301      	str	r3, [sp, #4]
 8010946:	4b1b      	ldr	r3, [pc, #108]	; (80109b4 <tcp_timewait_input+0xe8>)
 8010948:	9300      	str	r3, [sp, #0]
 801094a:	4b1b      	ldr	r3, [pc, #108]	; (80109b8 <tcp_timewait_input+0xec>)
 801094c:	4602      	mov	r2, r0
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f003 fad0 	bl	8013ef4 <tcp_rst>
      return;
 8010954:	e01b      	b.n	801098e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010956:	4b0f      	ldr	r3, [pc, #60]	; (8010994 <tcp_timewait_input+0xc8>)
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	f003 0301 	and.w	r3, r3, #1
 801095e:	2b00      	cmp	r3, #0
 8010960:	d003      	beq.n	801096a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010962:	4b16      	ldr	r3, [pc, #88]	; (80109bc <tcp_timewait_input+0xf0>)
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801096a:	4b10      	ldr	r3, [pc, #64]	; (80109ac <tcp_timewait_input+0xe0>)
 801096c:	881b      	ldrh	r3, [r3, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00c      	beq.n	801098c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	8b5b      	ldrh	r3, [r3, #26]
 8010976:	f043 0302 	orr.w	r3, r3, #2
 801097a:	b29a      	uxth	r2, r3
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f002 fd01 	bl	8013388 <tcp_output>
  }
  return;
 8010986:	e001      	b.n	801098c <tcp_timewait_input+0xc0>
    return;
 8010988:	bf00      	nop
 801098a:	e000      	b.n	801098e <tcp_timewait_input+0xc2>
  return;
 801098c:	bf00      	nop
}
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	2007797c 	.word	0x2007797c
 8010998:	0801e9c0 	.word	0x0801e9c0
 801099c:	0801ebd8 	.word	0x0801ebd8
 80109a0:	0801ea0c 	.word	0x0801ea0c
 80109a4:	20077970 	.word	0x20077970
 80109a8:	20077974 	.word	0x20077974
 80109ac:	2007797a 	.word	0x2007797a
 80109b0:	20077960 	.word	0x20077960
 80109b4:	200094b8 	.word	0x200094b8
 80109b8:	200094bc 	.word	0x200094bc
 80109bc:	20077938 	.word	0x20077938

080109c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80109c0:	b590      	push	{r4, r7, lr}
 80109c2:	b08d      	sub	sp, #52	; 0x34
 80109c4:	af04      	add	r7, sp, #16
 80109c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80109c8:	2300      	movs	r3, #0
 80109ca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80109cc:	2300      	movs	r3, #0
 80109ce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d106      	bne.n	80109e4 <tcp_process+0x24>
 80109d6:	4b9d      	ldr	r3, [pc, #628]	; (8010c4c <tcp_process+0x28c>)
 80109d8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80109dc:	499c      	ldr	r1, [pc, #624]	; (8010c50 <tcp_process+0x290>)
 80109de:	489d      	ldr	r0, [pc, #628]	; (8010c54 <tcp_process+0x294>)
 80109e0:	f008 f8d6 	bl	8018b90 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80109e4:	4b9c      	ldr	r3, [pc, #624]	; (8010c58 <tcp_process+0x298>)
 80109e6:	781b      	ldrb	r3, [r3, #0]
 80109e8:	f003 0304 	and.w	r3, r3, #4
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d04e      	beq.n	8010a8e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	7d1b      	ldrb	r3, [r3, #20]
 80109f4:	2b02      	cmp	r3, #2
 80109f6:	d108      	bne.n	8010a0a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109fc:	4b97      	ldr	r3, [pc, #604]	; (8010c5c <tcp_process+0x29c>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d123      	bne.n	8010a4c <tcp_process+0x8c>
        acceptable = 1;
 8010a04:	2301      	movs	r3, #1
 8010a06:	76fb      	strb	r3, [r7, #27]
 8010a08:	e020      	b.n	8010a4c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a0e:	4b94      	ldr	r3, [pc, #592]	; (8010c60 <tcp_process+0x2a0>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d102      	bne.n	8010a1c <tcp_process+0x5c>
        acceptable = 1;
 8010a16:	2301      	movs	r3, #1
 8010a18:	76fb      	strb	r3, [r7, #27]
 8010a1a:	e017      	b.n	8010a4c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a1c:	4b90      	ldr	r3, [pc, #576]	; (8010c60 <tcp_process+0x2a0>)
 8010a1e:	681a      	ldr	r2, [r3, #0]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a24:	1ad3      	subs	r3, r2, r3
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	db10      	blt.n	8010a4c <tcp_process+0x8c>
 8010a2a:	4b8d      	ldr	r3, [pc, #564]	; (8010c60 <tcp_process+0x2a0>)
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a32:	6879      	ldr	r1, [r7, #4]
 8010a34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a36:	440b      	add	r3, r1
 8010a38:	1ad3      	subs	r3, r2, r3
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	dc06      	bgt.n	8010a4c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	8b5b      	ldrh	r3, [r3, #26]
 8010a42:	f043 0302 	orr.w	r3, r3, #2
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010a4c:	7efb      	ldrb	r3, [r7, #27]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d01b      	beq.n	8010a8a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	7d1b      	ldrb	r3, [r3, #20]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d106      	bne.n	8010a68 <tcp_process+0xa8>
 8010a5a:	4b7c      	ldr	r3, [pc, #496]	; (8010c4c <tcp_process+0x28c>)
 8010a5c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010a60:	4980      	ldr	r1, [pc, #512]	; (8010c64 <tcp_process+0x2a4>)
 8010a62:	487c      	ldr	r0, [pc, #496]	; (8010c54 <tcp_process+0x294>)
 8010a64:	f008 f894 	bl	8018b90 <iprintf>
      recv_flags |= TF_RESET;
 8010a68:	4b7f      	ldr	r3, [pc, #508]	; (8010c68 <tcp_process+0x2a8>)
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	f043 0308 	orr.w	r3, r3, #8
 8010a70:	b2da      	uxtb	r2, r3
 8010a72:	4b7d      	ldr	r3, [pc, #500]	; (8010c68 <tcp_process+0x2a8>)
 8010a74:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	8b5b      	ldrh	r3, [r3, #26]
 8010a7a:	f023 0301 	bic.w	r3, r3, #1
 8010a7e:	b29a      	uxth	r2, r3
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010a84:	f06f 030d 	mvn.w	r3, #13
 8010a88:	e37a      	b.n	8011180 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	e378      	b.n	8011180 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010a8e:	4b72      	ldr	r3, [pc, #456]	; (8010c58 <tcp_process+0x298>)
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	f003 0302 	and.w	r3, r3, #2
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d010      	beq.n	8010abc <tcp_process+0xfc>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	7d1b      	ldrb	r3, [r3, #20]
 8010a9e:	2b02      	cmp	r3, #2
 8010aa0:	d00c      	beq.n	8010abc <tcp_process+0xfc>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	7d1b      	ldrb	r3, [r3, #20]
 8010aa6:	2b03      	cmp	r3, #3
 8010aa8:	d008      	beq.n	8010abc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	8b5b      	ldrh	r3, [r3, #26]
 8010aae:	f043 0302 	orr.w	r3, r3, #2
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	e361      	b.n	8011180 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	8b5b      	ldrh	r3, [r3, #26]
 8010ac0:	f003 0310 	and.w	r3, r3, #16
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d103      	bne.n	8010ad0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010ac8:	4b68      	ldr	r3, [pc, #416]	; (8010c6c <tcp_process+0x2ac>)
 8010aca:	681a      	ldr	r2, [r3, #0]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f001 fc2f 	bl	8012344 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	7d1b      	ldrb	r3, [r3, #20]
 8010aea:	3b02      	subs	r3, #2
 8010aec:	2b07      	cmp	r3, #7
 8010aee:	f200 8337 	bhi.w	8011160 <tcp_process+0x7a0>
 8010af2:	a201      	add	r2, pc, #4	; (adr r2, 8010af8 <tcp_process+0x138>)
 8010af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010af8:	08010b19 	.word	0x08010b19
 8010afc:	08010d49 	.word	0x08010d49
 8010b00:	08010ec1 	.word	0x08010ec1
 8010b04:	08010eeb 	.word	0x08010eeb
 8010b08:	0801100f 	.word	0x0801100f
 8010b0c:	08010ec1 	.word	0x08010ec1
 8010b10:	0801109b 	.word	0x0801109b
 8010b14:	0801112b 	.word	0x0801112b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010b18:	4b4f      	ldr	r3, [pc, #316]	; (8010c58 <tcp_process+0x298>)
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	f003 0310 	and.w	r3, r3, #16
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f000 80e4 	beq.w	8010cee <tcp_process+0x32e>
 8010b26:	4b4c      	ldr	r3, [pc, #304]	; (8010c58 <tcp_process+0x298>)
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	f003 0302 	and.w	r3, r3, #2
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f000 80dd 	beq.w	8010cee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b38:	1c5a      	adds	r2, r3, #1
 8010b3a:	4b48      	ldr	r3, [pc, #288]	; (8010c5c <tcp_process+0x29c>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	f040 80d5 	bne.w	8010cee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010b44:	4b46      	ldr	r3, [pc, #280]	; (8010c60 <tcp_process+0x2a0>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	1c5a      	adds	r2, r3, #1
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010b56:	4b41      	ldr	r3, [pc, #260]	; (8010c5c <tcp_process+0x29c>)
 8010b58:	681a      	ldr	r2, [r3, #0]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010b5e:	4b44      	ldr	r3, [pc, #272]	; (8010c70 <tcp_process+0x2b0>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	89db      	ldrh	r3, [r3, #14]
 8010b64:	b29a      	uxth	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010b78:	4b39      	ldr	r3, [pc, #228]	; (8010c60 <tcp_process+0x2a0>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	1e5a      	subs	r2, r3, #1
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2204      	movs	r2, #4
 8010b86:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	3304      	adds	r3, #4
 8010b90:	4618      	mov	r0, r3
 8010b92:	f005 fb43 	bl	801621c <ip4_route>
 8010b96:	4601      	mov	r1, r0
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	3304      	adds	r3, #4
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	f7ff f88c 	bl	800fcbc <tcp_eff_send_mss_netif>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	461a      	mov	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bb0:	009a      	lsls	r2, r3, #2
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bb6:	005b      	lsls	r3, r3, #1
 8010bb8:	f241 111c 	movw	r1, #4380	; 0x111c
 8010bbc:	428b      	cmp	r3, r1
 8010bbe:	bf38      	it	cc
 8010bc0:	460b      	movcc	r3, r1
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d204      	bcs.n	8010bd0 <tcp_process+0x210>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bca:	009b      	lsls	r3, r3, #2
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	e00d      	b.n	8010bec <tcp_process+0x22c>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bd4:	005b      	lsls	r3, r3, #1
 8010bd6:	f241 121c 	movw	r2, #4380	; 0x111c
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d904      	bls.n	8010be8 <tcp_process+0x228>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010be2:	005b      	lsls	r3, r3, #1
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	e001      	b.n	8010bec <tcp_process+0x22c>
 8010be8:	f241 131c 	movw	r3, #4380	; 0x111c
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d106      	bne.n	8010c0a <tcp_process+0x24a>
 8010bfc:	4b13      	ldr	r3, [pc, #76]	; (8010c4c <tcp_process+0x28c>)
 8010bfe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010c02:	491c      	ldr	r1, [pc, #112]	; (8010c74 <tcp_process+0x2b4>)
 8010c04:	4813      	ldr	r0, [pc, #76]	; (8010c54 <tcp_process+0x294>)
 8010c06:	f007 ffc3 	bl	8018b90 <iprintf>
        --pcb->snd_queuelen;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c10:	3b01      	subs	r3, #1
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c1e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d12a      	bne.n	8010c7c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c2a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d106      	bne.n	8010c40 <tcp_process+0x280>
 8010c32:	4b06      	ldr	r3, [pc, #24]	; (8010c4c <tcp_process+0x28c>)
 8010c34:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010c38:	490f      	ldr	r1, [pc, #60]	; (8010c78 <tcp_process+0x2b8>)
 8010c3a:	4806      	ldr	r0, [pc, #24]	; (8010c54 <tcp_process+0x294>)
 8010c3c:	f007 ffa8 	bl	8018b90 <iprintf>
          pcb->unsent = rseg->next;
 8010c40:	69fb      	ldr	r3, [r7, #28]
 8010c42:	681a      	ldr	r2, [r3, #0]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	66da      	str	r2, [r3, #108]	; 0x6c
 8010c48:	e01c      	b.n	8010c84 <tcp_process+0x2c4>
 8010c4a:	bf00      	nop
 8010c4c:	0801e9c0 	.word	0x0801e9c0
 8010c50:	0801ebf8 	.word	0x0801ebf8
 8010c54:	0801ea0c 	.word	0x0801ea0c
 8010c58:	2007797c 	.word	0x2007797c
 8010c5c:	20077974 	.word	0x20077974
 8010c60:	20077970 	.word	0x20077970
 8010c64:	0801ec14 	.word	0x0801ec14
 8010c68:	2007797d 	.word	0x2007797d
 8010c6c:	20077938 	.word	0x20077938
 8010c70:	20077960 	.word	0x20077960
 8010c74:	0801ec34 	.word	0x0801ec34
 8010c78:	0801ec4c 	.word	0x0801ec4c
        } else {
          pcb->unacked = rseg->next;
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	681a      	ldr	r2, [r3, #0]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010c84:	69f8      	ldr	r0, [r7, #28]
 8010c86:	f7fe fc54 	bl	800f532 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d104      	bne.n	8010c9c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c98:	861a      	strh	r2, [r3, #48]	; 0x30
 8010c9a:	e006      	b.n	8010caa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d00a      	beq.n	8010cca <tcp_process+0x30a>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	6910      	ldr	r0, [r2, #16]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	6879      	ldr	r1, [r7, #4]
 8010cc2:	4798      	blx	r3
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	76bb      	strb	r3, [r7, #26]
 8010cc8:	e001      	b.n	8010cce <tcp_process+0x30e>
 8010cca:	2300      	movs	r3, #0
 8010ccc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010cce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010cd2:	f113 0f0d 	cmn.w	r3, #13
 8010cd6:	d102      	bne.n	8010cde <tcp_process+0x31e>
          return ERR_ABRT;
 8010cd8:	f06f 030c 	mvn.w	r3, #12
 8010cdc:	e250      	b.n	8011180 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	8b5b      	ldrh	r3, [r3, #26]
 8010ce2:	f043 0302 	orr.w	r3, r3, #2
 8010ce6:	b29a      	uxth	r2, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010cec:	e23a      	b.n	8011164 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010cee:	4b98      	ldr	r3, [pc, #608]	; (8010f50 <tcp_process+0x590>)
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	f003 0310 	and.w	r3, r3, #16
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	f000 8234 	beq.w	8011164 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cfc:	4b95      	ldr	r3, [pc, #596]	; (8010f54 <tcp_process+0x594>)
 8010cfe:	6819      	ldr	r1, [r3, #0]
 8010d00:	4b95      	ldr	r3, [pc, #596]	; (8010f58 <tcp_process+0x598>)
 8010d02:	881b      	ldrh	r3, [r3, #0]
 8010d04:	461a      	mov	r2, r3
 8010d06:	4b95      	ldr	r3, [pc, #596]	; (8010f5c <tcp_process+0x59c>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d0c:	4b94      	ldr	r3, [pc, #592]	; (8010f60 <tcp_process+0x5a0>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d10:	885b      	ldrh	r3, [r3, #2]
 8010d12:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d14:	4a92      	ldr	r2, [pc, #584]	; (8010f60 <tcp_process+0x5a0>)
 8010d16:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d18:	8812      	ldrh	r2, [r2, #0]
 8010d1a:	b292      	uxth	r2, r2
 8010d1c:	9202      	str	r2, [sp, #8]
 8010d1e:	9301      	str	r3, [sp, #4]
 8010d20:	4b90      	ldr	r3, [pc, #576]	; (8010f64 <tcp_process+0x5a4>)
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	4b90      	ldr	r3, [pc, #576]	; (8010f68 <tcp_process+0x5a8>)
 8010d26:	4602      	mov	r2, r0
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f003 f8e3 	bl	8013ef4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d34:	2b05      	cmp	r3, #5
 8010d36:	f200 8215 	bhi.w	8011164 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f002 feaf 	bl	8013aa4 <tcp_rexmit_rto>
      break;
 8010d46:	e20d      	b.n	8011164 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010d48:	4b81      	ldr	r3, [pc, #516]	; (8010f50 <tcp_process+0x590>)
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	f003 0310 	and.w	r3, r3, #16
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	f000 80a1 	beq.w	8010e98 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d56:	4b7f      	ldr	r3, [pc, #508]	; (8010f54 <tcp_process+0x594>)
 8010d58:	681a      	ldr	r2, [r3, #0]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d5e:	1ad3      	subs	r3, r2, r3
 8010d60:	3b01      	subs	r3, #1
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	db7e      	blt.n	8010e64 <tcp_process+0x4a4>
 8010d66:	4b7b      	ldr	r3, [pc, #492]	; (8010f54 <tcp_process+0x594>)
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d6e:	1ad3      	subs	r3, r2, r3
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	dc77      	bgt.n	8010e64 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2204      	movs	r2, #4
 8010d78:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d102      	bne.n	8010d88 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010d82:	23fa      	movs	r3, #250	; 0xfa
 8010d84:	76bb      	strb	r3, [r7, #26]
 8010d86:	e01d      	b.n	8010dc4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d8c:	699b      	ldr	r3, [r3, #24]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d106      	bne.n	8010da0 <tcp_process+0x3e0>
 8010d92:	4b76      	ldr	r3, [pc, #472]	; (8010f6c <tcp_process+0x5ac>)
 8010d94:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010d98:	4975      	ldr	r1, [pc, #468]	; (8010f70 <tcp_process+0x5b0>)
 8010d9a:	4876      	ldr	r0, [pc, #472]	; (8010f74 <tcp_process+0x5b4>)
 8010d9c:	f007 fef8 	bl	8018b90 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010da4:	699b      	ldr	r3, [r3, #24]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d00a      	beq.n	8010dc0 <tcp_process+0x400>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010dae:	699b      	ldr	r3, [r3, #24]
 8010db0:	687a      	ldr	r2, [r7, #4]
 8010db2:	6910      	ldr	r0, [r2, #16]
 8010db4:	2200      	movs	r2, #0
 8010db6:	6879      	ldr	r1, [r7, #4]
 8010db8:	4798      	blx	r3
 8010dba:	4603      	mov	r3, r0
 8010dbc:	76bb      	strb	r3, [r7, #26]
 8010dbe:	e001      	b.n	8010dc4 <tcp_process+0x404>
 8010dc0:	23f0      	movs	r3, #240	; 0xf0
 8010dc2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010dc4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d00a      	beq.n	8010de2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010dcc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010dd0:	f113 0f0d 	cmn.w	r3, #13
 8010dd4:	d002      	beq.n	8010ddc <tcp_process+0x41c>
              tcp_abort(pcb);
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f7fd fd62 	bl	800e8a0 <tcp_abort>
            }
            return ERR_ABRT;
 8010ddc:	f06f 030c 	mvn.w	r3, #12
 8010de0:	e1ce      	b.n	8011180 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f000 fae0 	bl	80113a8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010de8:	4b63      	ldr	r3, [pc, #396]	; (8010f78 <tcp_process+0x5b8>)
 8010dea:	881b      	ldrh	r3, [r3, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d005      	beq.n	8010dfc <tcp_process+0x43c>
            recv_acked--;
 8010df0:	4b61      	ldr	r3, [pc, #388]	; (8010f78 <tcp_process+0x5b8>)
 8010df2:	881b      	ldrh	r3, [r3, #0]
 8010df4:	3b01      	subs	r3, #1
 8010df6:	b29a      	uxth	r2, r3
 8010df8:	4b5f      	ldr	r3, [pc, #380]	; (8010f78 <tcp_process+0x5b8>)
 8010dfa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e00:	009a      	lsls	r2, r3, #2
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e06:	005b      	lsls	r3, r3, #1
 8010e08:	f241 111c 	movw	r1, #4380	; 0x111c
 8010e0c:	428b      	cmp	r3, r1
 8010e0e:	bf38      	it	cc
 8010e10:	460b      	movcc	r3, r1
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d204      	bcs.n	8010e20 <tcp_process+0x460>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	e00d      	b.n	8010e3c <tcp_process+0x47c>
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e24:	005b      	lsls	r3, r3, #1
 8010e26:	f241 121c 	movw	r2, #4380	; 0x111c
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d904      	bls.n	8010e38 <tcp_process+0x478>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e32:	005b      	lsls	r3, r3, #1
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	e001      	b.n	8010e3c <tcp_process+0x47c>
 8010e38:	f241 131c 	movw	r3, #4380	; 0x111c
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010e42:	4b4e      	ldr	r3, [pc, #312]	; (8010f7c <tcp_process+0x5bc>)
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	f003 0320 	and.w	r3, r3, #32
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d037      	beq.n	8010ebe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	8b5b      	ldrh	r3, [r3, #26]
 8010e52:	f043 0302 	orr.w	r3, r3, #2
 8010e56:	b29a      	uxth	r2, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2207      	movs	r2, #7
 8010e60:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010e62:	e02c      	b.n	8010ebe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e64:	4b3b      	ldr	r3, [pc, #236]	; (8010f54 <tcp_process+0x594>)
 8010e66:	6819      	ldr	r1, [r3, #0]
 8010e68:	4b3b      	ldr	r3, [pc, #236]	; (8010f58 <tcp_process+0x598>)
 8010e6a:	881b      	ldrh	r3, [r3, #0]
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	4b3b      	ldr	r3, [pc, #236]	; (8010f5c <tcp_process+0x59c>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e74:	4b3a      	ldr	r3, [pc, #232]	; (8010f60 <tcp_process+0x5a0>)
 8010e76:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e78:	885b      	ldrh	r3, [r3, #2]
 8010e7a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e7c:	4a38      	ldr	r2, [pc, #224]	; (8010f60 <tcp_process+0x5a0>)
 8010e7e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e80:	8812      	ldrh	r2, [r2, #0]
 8010e82:	b292      	uxth	r2, r2
 8010e84:	9202      	str	r2, [sp, #8]
 8010e86:	9301      	str	r3, [sp, #4]
 8010e88:	4b36      	ldr	r3, [pc, #216]	; (8010f64 <tcp_process+0x5a4>)
 8010e8a:	9300      	str	r3, [sp, #0]
 8010e8c:	4b36      	ldr	r3, [pc, #216]	; (8010f68 <tcp_process+0x5a8>)
 8010e8e:	4602      	mov	r2, r0
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f003 f82f 	bl	8013ef4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010e96:	e167      	b.n	8011168 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010e98:	4b2d      	ldr	r3, [pc, #180]	; (8010f50 <tcp_process+0x590>)
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	f003 0302 	and.w	r3, r3, #2
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	f000 8161 	beq.w	8011168 <tcp_process+0x7a8>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eaa:	1e5a      	subs	r2, r3, #1
 8010eac:	4b2b      	ldr	r3, [pc, #172]	; (8010f5c <tcp_process+0x59c>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	f040 8159 	bne.w	8011168 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f002 fe16 	bl	8013ae8 <tcp_rexmit>
      break;
 8010ebc:	e154      	b.n	8011168 <tcp_process+0x7a8>
 8010ebe:	e153      	b.n	8011168 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f000 fa71 	bl	80113a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010ec6:	4b2d      	ldr	r3, [pc, #180]	; (8010f7c <tcp_process+0x5bc>)
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	f003 0320 	and.w	r3, r3, #32
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	f000 814c 	beq.w	801116c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	8b5b      	ldrh	r3, [r3, #26]
 8010ed8:	f043 0302 	orr.w	r3, r3, #2
 8010edc:	b29a      	uxth	r2, r3
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2207      	movs	r2, #7
 8010ee6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010ee8:	e140      	b.n	801116c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f000 fa5c 	bl	80113a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010ef0:	4b22      	ldr	r3, [pc, #136]	; (8010f7c <tcp_process+0x5bc>)
 8010ef2:	781b      	ldrb	r3, [r3, #0]
 8010ef4:	f003 0320 	and.w	r3, r3, #32
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d071      	beq.n	8010fe0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010efc:	4b14      	ldr	r3, [pc, #80]	; (8010f50 <tcp_process+0x590>)
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	f003 0310 	and.w	r3, r3, #16
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d060      	beq.n	8010fca <tcp_process+0x60a>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f0c:	4b11      	ldr	r3, [pc, #68]	; (8010f54 <tcp_process+0x594>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d15a      	bne.n	8010fca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d156      	bne.n	8010fca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	8b5b      	ldrh	r3, [r3, #26]
 8010f20:	f043 0302 	orr.w	r3, r3, #2
 8010f24:	b29a      	uxth	r2, r3
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f7fe fdbc 	bl	800faa8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010f30:	4b13      	ldr	r3, [pc, #76]	; (8010f80 <tcp_process+0x5c0>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	687a      	ldr	r2, [r7, #4]
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d105      	bne.n	8010f46 <tcp_process+0x586>
 8010f3a:	4b11      	ldr	r3, [pc, #68]	; (8010f80 <tcp_process+0x5c0>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	4a0f      	ldr	r2, [pc, #60]	; (8010f80 <tcp_process+0x5c0>)
 8010f42:	6013      	str	r3, [r2, #0]
 8010f44:	e02e      	b.n	8010fa4 <tcp_process+0x5e4>
 8010f46:	4b0e      	ldr	r3, [pc, #56]	; (8010f80 <tcp_process+0x5c0>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	617b      	str	r3, [r7, #20]
 8010f4c:	e027      	b.n	8010f9e <tcp_process+0x5de>
 8010f4e:	bf00      	nop
 8010f50:	2007797c 	.word	0x2007797c
 8010f54:	20077974 	.word	0x20077974
 8010f58:	2007797a 	.word	0x2007797a
 8010f5c:	20077970 	.word	0x20077970
 8010f60:	20077960 	.word	0x20077960
 8010f64:	200094b8 	.word	0x200094b8
 8010f68:	200094bc 	.word	0x200094bc
 8010f6c:	0801e9c0 	.word	0x0801e9c0
 8010f70:	0801ec60 	.word	0x0801ec60
 8010f74:	0801ea0c 	.word	0x0801ea0c
 8010f78:	20077978 	.word	0x20077978
 8010f7c:	2007797d 	.word	0x2007797d
 8010f80:	20077944 	.word	0x20077944
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d104      	bne.n	8010f98 <tcp_process+0x5d8>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	68da      	ldr	r2, [r3, #12]
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	60da      	str	r2, [r3, #12]
 8010f96:	e005      	b.n	8010fa4 <tcp_process+0x5e4>
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	68db      	ldr	r3, [r3, #12]
 8010f9c:	617b      	str	r3, [r7, #20]
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1ef      	bne.n	8010f84 <tcp_process+0x5c4>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	60da      	str	r2, [r3, #12]
 8010faa:	4b77      	ldr	r3, [pc, #476]	; (8011188 <tcp_process+0x7c8>)
 8010fac:	2201      	movs	r2, #1
 8010fae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	220a      	movs	r2, #10
 8010fb4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010fb6:	4b75      	ldr	r3, [pc, #468]	; (801118c <tcp_process+0x7cc>)
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	60da      	str	r2, [r3, #12]
 8010fbe:	4a73      	ldr	r2, [pc, #460]	; (801118c <tcp_process+0x7cc>)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6013      	str	r3, [r2, #0]
 8010fc4:	f003 f956 	bl	8014274 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010fc8:	e0d2      	b.n	8011170 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	8b5b      	ldrh	r3, [r3, #26]
 8010fce:	f043 0302 	orr.w	r3, r3, #2
 8010fd2:	b29a      	uxth	r2, r3
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2208      	movs	r2, #8
 8010fdc:	751a      	strb	r2, [r3, #20]
      break;
 8010fde:	e0c7      	b.n	8011170 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010fe0:	4b6b      	ldr	r3, [pc, #428]	; (8011190 <tcp_process+0x7d0>)
 8010fe2:	781b      	ldrb	r3, [r3, #0]
 8010fe4:	f003 0310 	and.w	r3, r3, #16
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	f000 80c1 	beq.w	8011170 <tcp_process+0x7b0>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ff2:	4b68      	ldr	r3, [pc, #416]	; (8011194 <tcp_process+0x7d4>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	f040 80ba 	bne.w	8011170 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011000:	2b00      	cmp	r3, #0
 8011002:	f040 80b5 	bne.w	8011170 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2206      	movs	r2, #6
 801100a:	751a      	strb	r2, [r3, #20]
      break;
 801100c:	e0b0      	b.n	8011170 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f000 f9ca 	bl	80113a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011014:	4b60      	ldr	r3, [pc, #384]	; (8011198 <tcp_process+0x7d8>)
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	f003 0320 	and.w	r3, r3, #32
 801101c:	2b00      	cmp	r3, #0
 801101e:	f000 80a9 	beq.w	8011174 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	8b5b      	ldrh	r3, [r3, #26]
 8011026:	f043 0302 	orr.w	r3, r3, #2
 801102a:	b29a      	uxth	r2, r3
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f7fe fd39 	bl	800faa8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011036:	4b59      	ldr	r3, [pc, #356]	; (801119c <tcp_process+0x7dc>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	429a      	cmp	r2, r3
 801103e:	d105      	bne.n	801104c <tcp_process+0x68c>
 8011040:	4b56      	ldr	r3, [pc, #344]	; (801119c <tcp_process+0x7dc>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	68db      	ldr	r3, [r3, #12]
 8011046:	4a55      	ldr	r2, [pc, #340]	; (801119c <tcp_process+0x7dc>)
 8011048:	6013      	str	r3, [r2, #0]
 801104a:	e013      	b.n	8011074 <tcp_process+0x6b4>
 801104c:	4b53      	ldr	r3, [pc, #332]	; (801119c <tcp_process+0x7dc>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	613b      	str	r3, [r7, #16]
 8011052:	e00c      	b.n	801106e <tcp_process+0x6ae>
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	687a      	ldr	r2, [r7, #4]
 801105a:	429a      	cmp	r2, r3
 801105c:	d104      	bne.n	8011068 <tcp_process+0x6a8>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	68da      	ldr	r2, [r3, #12]
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	60da      	str	r2, [r3, #12]
 8011066:	e005      	b.n	8011074 <tcp_process+0x6b4>
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	613b      	str	r3, [r7, #16]
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d1ef      	bne.n	8011054 <tcp_process+0x694>
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2200      	movs	r2, #0
 8011078:	60da      	str	r2, [r3, #12]
 801107a:	4b43      	ldr	r3, [pc, #268]	; (8011188 <tcp_process+0x7c8>)
 801107c:	2201      	movs	r2, #1
 801107e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	220a      	movs	r2, #10
 8011084:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011086:	4b41      	ldr	r3, [pc, #260]	; (801118c <tcp_process+0x7cc>)
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	60da      	str	r2, [r3, #12]
 801108e:	4a3f      	ldr	r2, [pc, #252]	; (801118c <tcp_process+0x7cc>)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6013      	str	r3, [r2, #0]
 8011094:	f003 f8ee 	bl	8014274 <tcp_timer_needed>
      }
      break;
 8011098:	e06c      	b.n	8011174 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 f984 	bl	80113a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80110a0:	4b3b      	ldr	r3, [pc, #236]	; (8011190 <tcp_process+0x7d0>)
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	f003 0310 	and.w	r3, r3, #16
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d065      	beq.n	8011178 <tcp_process+0x7b8>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110b0:	4b38      	ldr	r3, [pc, #224]	; (8011194 <tcp_process+0x7d4>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d15f      	bne.n	8011178 <tcp_process+0x7b8>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d15b      	bne.n	8011178 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f7fe fcf1 	bl	800faa8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80110c6:	4b35      	ldr	r3, [pc, #212]	; (801119c <tcp_process+0x7dc>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	687a      	ldr	r2, [r7, #4]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d105      	bne.n	80110dc <tcp_process+0x71c>
 80110d0:	4b32      	ldr	r3, [pc, #200]	; (801119c <tcp_process+0x7dc>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68db      	ldr	r3, [r3, #12]
 80110d6:	4a31      	ldr	r2, [pc, #196]	; (801119c <tcp_process+0x7dc>)
 80110d8:	6013      	str	r3, [r2, #0]
 80110da:	e013      	b.n	8011104 <tcp_process+0x744>
 80110dc:	4b2f      	ldr	r3, [pc, #188]	; (801119c <tcp_process+0x7dc>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	60fb      	str	r3, [r7, #12]
 80110e2:	e00c      	b.n	80110fe <tcp_process+0x73e>
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d104      	bne.n	80110f8 <tcp_process+0x738>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	68da      	ldr	r2, [r3, #12]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	60da      	str	r2, [r3, #12]
 80110f6:	e005      	b.n	8011104 <tcp_process+0x744>
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	60fb      	str	r3, [r7, #12]
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d1ef      	bne.n	80110e4 <tcp_process+0x724>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2200      	movs	r2, #0
 8011108:	60da      	str	r2, [r3, #12]
 801110a:	4b1f      	ldr	r3, [pc, #124]	; (8011188 <tcp_process+0x7c8>)
 801110c:	2201      	movs	r2, #1
 801110e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	220a      	movs	r2, #10
 8011114:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011116:	4b1d      	ldr	r3, [pc, #116]	; (801118c <tcp_process+0x7cc>)
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	60da      	str	r2, [r3, #12]
 801111e:	4a1b      	ldr	r2, [pc, #108]	; (801118c <tcp_process+0x7cc>)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6013      	str	r3, [r2, #0]
 8011124:	f003 f8a6 	bl	8014274 <tcp_timer_needed>
      }
      break;
 8011128:	e026      	b.n	8011178 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f000 f93c 	bl	80113a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011130:	4b17      	ldr	r3, [pc, #92]	; (8011190 <tcp_process+0x7d0>)
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	f003 0310 	and.w	r3, r3, #16
 8011138:	2b00      	cmp	r3, #0
 801113a:	d01f      	beq.n	801117c <tcp_process+0x7bc>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011140:	4b14      	ldr	r3, [pc, #80]	; (8011194 <tcp_process+0x7d4>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	429a      	cmp	r2, r3
 8011146:	d119      	bne.n	801117c <tcp_process+0x7bc>
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801114c:	2b00      	cmp	r3, #0
 801114e:	d115      	bne.n	801117c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011150:	4b11      	ldr	r3, [pc, #68]	; (8011198 <tcp_process+0x7d8>)
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	f043 0310 	orr.w	r3, r3, #16
 8011158:	b2da      	uxtb	r2, r3
 801115a:	4b0f      	ldr	r3, [pc, #60]	; (8011198 <tcp_process+0x7d8>)
 801115c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801115e:	e00d      	b.n	801117c <tcp_process+0x7bc>
    default:
      break;
 8011160:	bf00      	nop
 8011162:	e00c      	b.n	801117e <tcp_process+0x7be>
      break;
 8011164:	bf00      	nop
 8011166:	e00a      	b.n	801117e <tcp_process+0x7be>
      break;
 8011168:	bf00      	nop
 801116a:	e008      	b.n	801117e <tcp_process+0x7be>
      break;
 801116c:	bf00      	nop
 801116e:	e006      	b.n	801117e <tcp_process+0x7be>
      break;
 8011170:	bf00      	nop
 8011172:	e004      	b.n	801117e <tcp_process+0x7be>
      break;
 8011174:	bf00      	nop
 8011176:	e002      	b.n	801117e <tcp_process+0x7be>
      break;
 8011178:	bf00      	nop
 801117a:	e000      	b.n	801117e <tcp_process+0x7be>
      break;
 801117c:	bf00      	nop
  }
  return ERR_OK;
 801117e:	2300      	movs	r3, #0
}
 8011180:	4618      	mov	r0, r3
 8011182:	3724      	adds	r7, #36	; 0x24
 8011184:	46bd      	mov	sp, r7
 8011186:	bd90      	pop	{r4, r7, pc}
 8011188:	2007794c 	.word	0x2007794c
 801118c:	20077948 	.word	0x20077948
 8011190:	2007797c 	.word	0x2007797c
 8011194:	20077974 	.word	0x20077974
 8011198:	2007797d 	.word	0x2007797d
 801119c:	20077944 	.word	0x20077944

080111a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80111a0:	b590      	push	{r4, r7, lr}
 80111a2:	b085      	sub	sp, #20
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d106      	bne.n	80111be <tcp_oos_insert_segment+0x1e>
 80111b0:	4b3b      	ldr	r3, [pc, #236]	; (80112a0 <tcp_oos_insert_segment+0x100>)
 80111b2:	f240 421f 	movw	r2, #1055	; 0x41f
 80111b6:	493b      	ldr	r1, [pc, #236]	; (80112a4 <tcp_oos_insert_segment+0x104>)
 80111b8:	483b      	ldr	r0, [pc, #236]	; (80112a8 <tcp_oos_insert_segment+0x108>)
 80111ba:	f007 fce9 	bl	8018b90 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	68db      	ldr	r3, [r3, #12]
 80111c2:	899b      	ldrh	r3, [r3, #12]
 80111c4:	b29b      	uxth	r3, r3
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fb f978 	bl	800c4bc <lwip_htons>
 80111cc:	4603      	mov	r3, r0
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	f003 0301 	and.w	r3, r3, #1
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d028      	beq.n	801122a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80111d8:	6838      	ldr	r0, [r7, #0]
 80111da:	f7fe f995 	bl	800f508 <tcp_segs_free>
    next = NULL;
 80111de:	2300      	movs	r3, #0
 80111e0:	603b      	str	r3, [r7, #0]
 80111e2:	e056      	b.n	8011292 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	899b      	ldrh	r3, [r3, #12]
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7fb f965 	bl	800c4bc <lwip_htons>
 80111f2:	4603      	mov	r3, r0
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	f003 0301 	and.w	r3, r3, #1
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d00d      	beq.n	801121a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	899b      	ldrh	r3, [r3, #12]
 8011204:	b29c      	uxth	r4, r3
 8011206:	2001      	movs	r0, #1
 8011208:	f7fb f958 	bl	800c4bc <lwip_htons>
 801120c:	4603      	mov	r3, r0
 801120e:	461a      	mov	r2, r3
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	4322      	orrs	r2, r4
 8011216:	b292      	uxth	r2, r2
 8011218:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011224:	68f8      	ldr	r0, [r7, #12]
 8011226:	f7fe f984 	bl	800f532 <tcp_seg_free>
    while (next &&
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00e      	beq.n	801124e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	891b      	ldrh	r3, [r3, #8]
 8011234:	461a      	mov	r2, r3
 8011236:	4b1d      	ldr	r3, [pc, #116]	; (80112ac <tcp_oos_insert_segment+0x10c>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	441a      	add	r2, r3
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	68db      	ldr	r3, [r3, #12]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	6839      	ldr	r1, [r7, #0]
 8011244:	8909      	ldrh	r1, [r1, #8]
 8011246:	440b      	add	r3, r1
 8011248:	1ad3      	subs	r3, r2, r3
    while (next &&
 801124a:	2b00      	cmp	r3, #0
 801124c:	daca      	bge.n	80111e4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d01e      	beq.n	8011292 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	891b      	ldrh	r3, [r3, #8]
 8011258:	461a      	mov	r2, r3
 801125a:	4b14      	ldr	r3, [pc, #80]	; (80112ac <tcp_oos_insert_segment+0x10c>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	441a      	add	r2, r3
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011268:	2b00      	cmp	r3, #0
 801126a:	dd12      	ble.n	8011292 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	68db      	ldr	r3, [r3, #12]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	b29a      	uxth	r2, r3
 8011274:	4b0d      	ldr	r3, [pc, #52]	; (80112ac <tcp_oos_insert_segment+0x10c>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	b29b      	uxth	r3, r3
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	b29a      	uxth	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	685a      	ldr	r2, [r3, #4]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	891b      	ldrh	r3, [r3, #8]
 801128a:	4619      	mov	r1, r3
 801128c:	4610      	mov	r0, r2
 801128e:	f7fc fb81 	bl	800d994 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	683a      	ldr	r2, [r7, #0]
 8011296:	601a      	str	r2, [r3, #0]
}
 8011298:	bf00      	nop
 801129a:	3714      	adds	r7, #20
 801129c:	46bd      	mov	sp, r7
 801129e:	bd90      	pop	{r4, r7, pc}
 80112a0:	0801e9c0 	.word	0x0801e9c0
 80112a4:	0801ec80 	.word	0x0801ec80
 80112a8:	0801ea0c 	.word	0x0801ea0c
 80112ac:	20077970 	.word	0x20077970

080112b0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80112b0:	b5b0      	push	{r4, r5, r7, lr}
 80112b2:	b086      	sub	sp, #24
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	607a      	str	r2, [r7, #4]
 80112bc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80112be:	e03e      	b.n	801133e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fc fd74 	bl	800ddbc <pbuf_clen>
 80112d4:	4603      	mov	r3, r0
 80112d6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80112de:	8a7a      	ldrh	r2, [r7, #18]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d906      	bls.n	80112f2 <tcp_free_acked_segments+0x42>
 80112e4:	4b2a      	ldr	r3, [pc, #168]	; (8011390 <tcp_free_acked_segments+0xe0>)
 80112e6:	f240 4257 	movw	r2, #1111	; 0x457
 80112ea:	492a      	ldr	r1, [pc, #168]	; (8011394 <tcp_free_acked_segments+0xe4>)
 80112ec:	482a      	ldr	r0, [pc, #168]	; (8011398 <tcp_free_acked_segments+0xe8>)
 80112ee:	f007 fc4f 	bl	8018b90 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80112f8:	8a7b      	ldrh	r3, [r7, #18]
 80112fa:	1ad3      	subs	r3, r2, r3
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	891a      	ldrh	r2, [r3, #8]
 8011308:	4b24      	ldr	r3, [pc, #144]	; (801139c <tcp_free_acked_segments+0xec>)
 801130a:	881b      	ldrh	r3, [r3, #0]
 801130c:	4413      	add	r3, r2
 801130e:	b29a      	uxth	r2, r3
 8011310:	4b22      	ldr	r3, [pc, #136]	; (801139c <tcp_free_acked_segments+0xec>)
 8011312:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011314:	6978      	ldr	r0, [r7, #20]
 8011316:	f7fe f90c 	bl	800f532 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011320:	2b00      	cmp	r3, #0
 8011322:	d00c      	beq.n	801133e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d109      	bne.n	801133e <tcp_free_acked_segments+0x8e>
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d106      	bne.n	801133e <tcp_free_acked_segments+0x8e>
 8011330:	4b17      	ldr	r3, [pc, #92]	; (8011390 <tcp_free_acked_segments+0xe0>)
 8011332:	f240 4261 	movw	r2, #1121	; 0x461
 8011336:	491a      	ldr	r1, [pc, #104]	; (80113a0 <tcp_free_acked_segments+0xf0>)
 8011338:	4817      	ldr	r0, [pc, #92]	; (8011398 <tcp_free_acked_segments+0xe8>)
 801133a:	f007 fc29 	bl	8018b90 <iprintf>
  while (seg_list != NULL &&
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d020      	beq.n	8011386 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	4618      	mov	r0, r3
 801134c:	f7fb f8cb 	bl	800c4e6 <lwip_htonl>
 8011350:	4604      	mov	r4, r0
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	891b      	ldrh	r3, [r3, #8]
 8011356:	461d      	mov	r5, r3
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	899b      	ldrh	r3, [r3, #12]
 801135e:	b29b      	uxth	r3, r3
 8011360:	4618      	mov	r0, r3
 8011362:	f7fb f8ab 	bl	800c4bc <lwip_htons>
 8011366:	4603      	mov	r3, r0
 8011368:	b2db      	uxtb	r3, r3
 801136a:	f003 0303 	and.w	r3, r3, #3
 801136e:	2b00      	cmp	r3, #0
 8011370:	d001      	beq.n	8011376 <tcp_free_acked_segments+0xc6>
 8011372:	2301      	movs	r3, #1
 8011374:	e000      	b.n	8011378 <tcp_free_acked_segments+0xc8>
 8011376:	2300      	movs	r3, #0
 8011378:	442b      	add	r3, r5
 801137a:	18e2      	adds	r2, r4, r3
 801137c:	4b09      	ldr	r3, [pc, #36]	; (80113a4 <tcp_free_acked_segments+0xf4>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011382:	2b00      	cmp	r3, #0
 8011384:	dd9c      	ble.n	80112c0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011386:	68bb      	ldr	r3, [r7, #8]
}
 8011388:	4618      	mov	r0, r3
 801138a:	3718      	adds	r7, #24
 801138c:	46bd      	mov	sp, r7
 801138e:	bdb0      	pop	{r4, r5, r7, pc}
 8011390:	0801e9c0 	.word	0x0801e9c0
 8011394:	0801eca8 	.word	0x0801eca8
 8011398:	0801ea0c 	.word	0x0801ea0c
 801139c:	20077978 	.word	0x20077978
 80113a0:	0801ecd0 	.word	0x0801ecd0
 80113a4:	20077974 	.word	0x20077974

080113a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80113a8:	b5b0      	push	{r4, r5, r7, lr}
 80113aa:	b094      	sub	sp, #80	; 0x50
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80113b0:	2300      	movs	r3, #0
 80113b2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d106      	bne.n	80113c8 <tcp_receive+0x20>
 80113ba:	4b91      	ldr	r3, [pc, #580]	; (8011600 <tcp_receive+0x258>)
 80113bc:	f240 427b 	movw	r2, #1147	; 0x47b
 80113c0:	4990      	ldr	r1, [pc, #576]	; (8011604 <tcp_receive+0x25c>)
 80113c2:	4891      	ldr	r0, [pc, #580]	; (8011608 <tcp_receive+0x260>)
 80113c4:	f007 fbe4 	bl	8018b90 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	7d1b      	ldrb	r3, [r3, #20]
 80113cc:	2b03      	cmp	r3, #3
 80113ce:	d806      	bhi.n	80113de <tcp_receive+0x36>
 80113d0:	4b8b      	ldr	r3, [pc, #556]	; (8011600 <tcp_receive+0x258>)
 80113d2:	f240 427c 	movw	r2, #1148	; 0x47c
 80113d6:	498d      	ldr	r1, [pc, #564]	; (801160c <tcp_receive+0x264>)
 80113d8:	488b      	ldr	r0, [pc, #556]	; (8011608 <tcp_receive+0x260>)
 80113da:	f007 fbd9 	bl	8018b90 <iprintf>

  if (flags & TCP_ACK) {
 80113de:	4b8c      	ldr	r3, [pc, #560]	; (8011610 <tcp_receive+0x268>)
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	f003 0310 	and.w	r3, r3, #16
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	f000 8264 	beq.w	80118b4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80113f2:	461a      	mov	r2, r3
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113f8:	4413      	add	r3, r2
 80113fa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011400:	4b84      	ldr	r3, [pc, #528]	; (8011614 <tcp_receive+0x26c>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	1ad3      	subs	r3, r2, r3
 8011406:	2b00      	cmp	r3, #0
 8011408:	db1b      	blt.n	8011442 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801140e:	4b81      	ldr	r3, [pc, #516]	; (8011614 <tcp_receive+0x26c>)
 8011410:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011412:	429a      	cmp	r2, r3
 8011414:	d106      	bne.n	8011424 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801141a:	4b7f      	ldr	r3, [pc, #508]	; (8011618 <tcp_receive+0x270>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	2b00      	cmp	r3, #0
 8011422:	db0e      	blt.n	8011442 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011428:	4b7b      	ldr	r3, [pc, #492]	; (8011618 <tcp_receive+0x270>)
 801142a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801142c:	429a      	cmp	r2, r3
 801142e:	d125      	bne.n	801147c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011430:	4b7a      	ldr	r3, [pc, #488]	; (801161c <tcp_receive+0x274>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	89db      	ldrh	r3, [r3, #14]
 8011436:	b29a      	uxth	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801143e:	429a      	cmp	r2, r3
 8011440:	d91c      	bls.n	801147c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011442:	4b76      	ldr	r3, [pc, #472]	; (801161c <tcp_receive+0x274>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	89db      	ldrh	r3, [r3, #14]
 8011448:	b29a      	uxth	r2, r3
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801145c:	429a      	cmp	r2, r3
 801145e:	d205      	bcs.n	801146c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801146c:	4b69      	ldr	r3, [pc, #420]	; (8011614 <tcp_receive+0x26c>)
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011474:	4b68      	ldr	r3, [pc, #416]	; (8011618 <tcp_receive+0x270>)
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801147c:	4b66      	ldr	r3, [pc, #408]	; (8011618 <tcp_receive+0x270>)
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011484:	1ad3      	subs	r3, r2, r3
 8011486:	2b00      	cmp	r3, #0
 8011488:	dc58      	bgt.n	801153c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801148a:	4b65      	ldr	r3, [pc, #404]	; (8011620 <tcp_receive+0x278>)
 801148c:	881b      	ldrh	r3, [r3, #0]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d14b      	bne.n	801152a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801149c:	4413      	add	r3, r2
 801149e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d142      	bne.n	801152a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	db3d      	blt.n	801152a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80114b2:	4b59      	ldr	r3, [pc, #356]	; (8011618 <tcp_receive+0x270>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d137      	bne.n	801152a <tcp_receive+0x182>
              found_dupack = 1;
 80114ba:	2301      	movs	r3, #1
 80114bc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80114c4:	2bff      	cmp	r3, #255	; 0xff
 80114c6:	d007      	beq.n	80114d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80114ce:	3301      	adds	r3, #1
 80114d0:	b2da      	uxtb	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80114de:	2b03      	cmp	r3, #3
 80114e0:	d91b      	bls.n	801151a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114ec:	4413      	add	r3, r2
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d30a      	bcc.n	8011510 <tcp_receive+0x168>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011504:	4413      	add	r3, r2
 8011506:	b29a      	uxth	r2, r3
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801150e:	e004      	b.n	801151a <tcp_receive+0x172>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011516:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011520:	2b02      	cmp	r3, #2
 8011522:	d902      	bls.n	801152a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f002 fb4b 	bl	8013bc0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801152a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801152c:	2b00      	cmp	r3, #0
 801152e:	f040 8161 	bne.w	80117f4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2200      	movs	r2, #0
 8011536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801153a:	e15b      	b.n	80117f4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801153c:	4b36      	ldr	r3, [pc, #216]	; (8011618 <tcp_receive+0x270>)
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011544:	1ad3      	subs	r3, r2, r3
 8011546:	3b01      	subs	r3, #1
 8011548:	2b00      	cmp	r3, #0
 801154a:	f2c0 814e 	blt.w	80117ea <tcp_receive+0x442>
 801154e:	4b32      	ldr	r3, [pc, #200]	; (8011618 <tcp_receive+0x270>)
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011556:	1ad3      	subs	r3, r2, r3
 8011558:	2b00      	cmp	r3, #0
 801155a:	f300 8146 	bgt.w	80117ea <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	8b5b      	ldrh	r3, [r3, #26]
 8011562:	f003 0304 	and.w	r3, r3, #4
 8011566:	2b00      	cmp	r3, #0
 8011568:	d010      	beq.n	801158c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	8b5b      	ldrh	r3, [r3, #26]
 801156e:	f023 0304 	bic.w	r3, r3, #4
 8011572:	b29a      	uxth	r2, r3
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2200      	movs	r2, #0
 8011588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2200      	movs	r2, #0
 8011590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801159a:	10db      	asrs	r3, r3, #3
 801159c:	b21b      	sxth	r3, r3
 801159e:	b29a      	uxth	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80115a6:	b29b      	uxth	r3, r3
 80115a8:	4413      	add	r3, r2
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	b21a      	sxth	r2, r3
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80115b4:	4b18      	ldr	r3, [pc, #96]	; (8011618 <tcp_receive+0x270>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	b29a      	uxth	r2, r3
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115be:	b29b      	uxth	r3, r3
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2200      	movs	r2, #0
 80115c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80115cc:	4b12      	ldr	r3, [pc, #72]	; (8011618 <tcp_receive+0x270>)
 80115ce:	681a      	ldr	r2, [r3, #0]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	7d1b      	ldrb	r3, [r3, #20]
 80115d8:	2b03      	cmp	r3, #3
 80115da:	f240 8097 	bls.w	801170c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d245      	bcs.n	801167a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	8b5b      	ldrh	r3, [r3, #26]
 80115f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d014      	beq.n	8011624 <tcp_receive+0x27c>
 80115fa:	2301      	movs	r3, #1
 80115fc:	e013      	b.n	8011626 <tcp_receive+0x27e>
 80115fe:	bf00      	nop
 8011600:	0801e9c0 	.word	0x0801e9c0
 8011604:	0801ecf0 	.word	0x0801ecf0
 8011608:	0801ea0c 	.word	0x0801ea0c
 801160c:	0801ed0c 	.word	0x0801ed0c
 8011610:	2007797c 	.word	0x2007797c
 8011614:	20077970 	.word	0x20077970
 8011618:	20077974 	.word	0x20077974
 801161c:	20077960 	.word	0x20077960
 8011620:	2007797a 	.word	0x2007797a
 8011624:	2302      	movs	r3, #2
 8011626:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801162a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801162e:	b29a      	uxth	r2, r3
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011634:	fb12 f303 	smulbb	r3, r2, r3
 8011638:	b29b      	uxth	r3, r3
 801163a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801163c:	4293      	cmp	r3, r2
 801163e:	bf28      	it	cs
 8011640:	4613      	movcs	r3, r2
 8011642:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801164a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801164c:	4413      	add	r3, r2
 801164e:	b29a      	uxth	r2, r3
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011656:	429a      	cmp	r2, r3
 8011658:	d309      	bcc.n	801166e <tcp_receive+0x2c6>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011660:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011662:	4413      	add	r3, r2
 8011664:	b29a      	uxth	r2, r3
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801166c:	e04e      	b.n	801170c <tcp_receive+0x364>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011674:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011678:	e048      	b.n	801170c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011680:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011682:	4413      	add	r3, r2
 8011684:	b29a      	uxth	r2, r3
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801168c:	429a      	cmp	r2, r3
 801168e:	d309      	bcc.n	80116a4 <tcp_receive+0x2fc>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011698:	4413      	add	r3, r2
 801169a:	b29a      	uxth	r2, r3
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80116a2:	e004      	b.n	80116ae <tcp_receive+0x306>
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d326      	bcc.n	801170c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116ca:	1ad3      	subs	r3, r2, r3
 80116cc:	b29a      	uxth	r2, r3
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116de:	4413      	add	r3, r2
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d30a      	bcc.n	8011702 <tcp_receive+0x35a>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116f6:	4413      	add	r3, r2
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011700:	e004      	b.n	801170c <tcp_receive+0x364>
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011708:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011714:	4a98      	ldr	r2, [pc, #608]	; (8011978 <tcp_receive+0x5d0>)
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7ff fdca 	bl	80112b0 <tcp_free_acked_segments>
 801171c:	4602      	mov	r2, r0
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801172a:	4a94      	ldr	r2, [pc, #592]	; (801197c <tcp_receive+0x5d4>)
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f7ff fdbf 	bl	80112b0 <tcp_free_acked_segments>
 8011732:	4602      	mov	r2, r0
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801173c:	2b00      	cmp	r3, #0
 801173e:	d104      	bne.n	801174a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011746:	861a      	strh	r2, [r3, #48]	; 0x30
 8011748:	e002      	b.n	8011750 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2200      	movs	r2, #0
 801174e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2200      	movs	r2, #0
 8011754:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801175a:	2b00      	cmp	r3, #0
 801175c:	d103      	bne.n	8011766 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2200      	movs	r2, #0
 8011762:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801176c:	4b84      	ldr	r3, [pc, #528]	; (8011980 <tcp_receive+0x5d8>)
 801176e:	881b      	ldrh	r3, [r3, #0]
 8011770:	4413      	add	r3, r2
 8011772:	b29a      	uxth	r2, r3
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	8b5b      	ldrh	r3, [r3, #26]
 801177e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011782:	2b00      	cmp	r3, #0
 8011784:	d035      	beq.n	80117f2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801178a:	2b00      	cmp	r3, #0
 801178c:	d118      	bne.n	80117c0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011792:	2b00      	cmp	r3, #0
 8011794:	d00c      	beq.n	80117b0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801179e:	68db      	ldr	r3, [r3, #12]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7fa fe9f 	bl	800c4e6 <lwip_htonl>
 80117a8:	4603      	mov	r3, r0
 80117aa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	dc20      	bgt.n	80117f2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	8b5b      	ldrh	r3, [r3, #26]
 80117b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80117b8:	b29a      	uxth	r2, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80117be:	e018      	b.n	80117f2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117c8:	68db      	ldr	r3, [r3, #12]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7fa fe8a 	bl	800c4e6 <lwip_htonl>
 80117d2:	4603      	mov	r3, r0
 80117d4:	1ae3      	subs	r3, r4, r3
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	dc0b      	bgt.n	80117f2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	8b5b      	ldrh	r3, [r3, #26]
 80117de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80117e2:	b29a      	uxth	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80117e8:	e003      	b.n	80117f2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f002 fbd2 	bl	8013f94 <tcp_send_empty_ack>
 80117f0:	e000      	b.n	80117f4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80117f2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d05b      	beq.n	80118b4 <tcp_receive+0x50c>
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011800:	4b60      	ldr	r3, [pc, #384]	; (8011984 <tcp_receive+0x5dc>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	1ad3      	subs	r3, r2, r3
 8011806:	2b00      	cmp	r3, #0
 8011808:	da54      	bge.n	80118b4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801180a:	4b5f      	ldr	r3, [pc, #380]	; (8011988 <tcp_receive+0x5e0>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	b29a      	uxth	r2, r3
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011814:	b29b      	uxth	r3, r3
 8011816:	1ad3      	subs	r3, r2, r3
 8011818:	b29b      	uxth	r3, r3
 801181a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801181e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011828:	10db      	asrs	r3, r3, #3
 801182a:	b21b      	sxth	r3, r3
 801182c:	b29b      	uxth	r3, r3
 801182e:	1ad3      	subs	r3, r2, r3
 8011830:	b29b      	uxth	r3, r3
 8011832:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801183c:	b29a      	uxth	r2, r3
 801183e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011842:	4413      	add	r3, r2
 8011844:	b29b      	uxth	r3, r3
 8011846:	b21a      	sxth	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801184c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011850:	2b00      	cmp	r3, #0
 8011852:	da05      	bge.n	8011860 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011854:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011858:	425b      	negs	r3, r3
 801185a:	b29b      	uxth	r3, r3
 801185c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011860:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801186a:	109b      	asrs	r3, r3, #2
 801186c:	b21b      	sxth	r3, r3
 801186e:	b29b      	uxth	r3, r3
 8011870:	1ad3      	subs	r3, r2, r3
 8011872:	b29b      	uxth	r3, r3
 8011874:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801187e:	b29a      	uxth	r2, r3
 8011880:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011884:	4413      	add	r3, r2
 8011886:	b29b      	uxth	r3, r3
 8011888:	b21a      	sxth	r2, r3
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011894:	10db      	asrs	r3, r3, #3
 8011896:	b21b      	sxth	r3, r3
 8011898:	b29a      	uxth	r2, r3
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	4413      	add	r3, r2
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	b21a      	sxth	r2, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2200      	movs	r2, #0
 80118b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80118b4:	4b35      	ldr	r3, [pc, #212]	; (801198c <tcp_receive+0x5e4>)
 80118b6:	881b      	ldrh	r3, [r3, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	f000 84e2 	beq.w	8012282 <tcp_receive+0xeda>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	7d1b      	ldrb	r3, [r3, #20]
 80118c2:	2b06      	cmp	r3, #6
 80118c4:	f200 84dd 	bhi.w	8012282 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118cc:	4b30      	ldr	r3, [pc, #192]	; (8011990 <tcp_receive+0x5e8>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	3b01      	subs	r3, #1
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	f2c0 808f 	blt.w	80119f8 <tcp_receive+0x650>
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118de:	4b2b      	ldr	r3, [pc, #172]	; (801198c <tcp_receive+0x5e4>)
 80118e0:	881b      	ldrh	r3, [r3, #0]
 80118e2:	4619      	mov	r1, r3
 80118e4:	4b2a      	ldr	r3, [pc, #168]	; (8011990 <tcp_receive+0x5e8>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	440b      	add	r3, r1
 80118ea:	1ad3      	subs	r3, r2, r3
 80118ec:	3301      	adds	r3, #1
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	f300 8082 	bgt.w	80119f8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80118f4:	4b27      	ldr	r3, [pc, #156]	; (8011994 <tcp_receive+0x5ec>)
 80118f6:	685b      	ldr	r3, [r3, #4]
 80118f8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118fe:	4b24      	ldr	r3, [pc, #144]	; (8011990 <tcp_receive+0x5e8>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	1ad3      	subs	r3, r2, r3
 8011904:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011906:	4b23      	ldr	r3, [pc, #140]	; (8011994 <tcp_receive+0x5ec>)
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d106      	bne.n	801191c <tcp_receive+0x574>
 801190e:	4b22      	ldr	r3, [pc, #136]	; (8011998 <tcp_receive+0x5f0>)
 8011910:	f240 5294 	movw	r2, #1428	; 0x594
 8011914:	4921      	ldr	r1, [pc, #132]	; (801199c <tcp_receive+0x5f4>)
 8011916:	4822      	ldr	r0, [pc, #136]	; (80119a0 <tcp_receive+0x5f8>)
 8011918:	f007 f93a 	bl	8018b90 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011922:	4293      	cmp	r3, r2
 8011924:	d906      	bls.n	8011934 <tcp_receive+0x58c>
 8011926:	4b1c      	ldr	r3, [pc, #112]	; (8011998 <tcp_receive+0x5f0>)
 8011928:	f240 5295 	movw	r2, #1429	; 0x595
 801192c:	491d      	ldr	r1, [pc, #116]	; (80119a4 <tcp_receive+0x5fc>)
 801192e:	481c      	ldr	r0, [pc, #112]	; (80119a0 <tcp_receive+0x5f8>)
 8011930:	f007 f92e 	bl	8018b90 <iprintf>
      off = (u16_t)off32;
 8011934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011936:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801193a:	4b16      	ldr	r3, [pc, #88]	; (8011994 <tcp_receive+0x5ec>)
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	891b      	ldrh	r3, [r3, #8]
 8011940:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011944:	429a      	cmp	r2, r3
 8011946:	d906      	bls.n	8011956 <tcp_receive+0x5ae>
 8011948:	4b13      	ldr	r3, [pc, #76]	; (8011998 <tcp_receive+0x5f0>)
 801194a:	f240 5297 	movw	r2, #1431	; 0x597
 801194e:	4916      	ldr	r1, [pc, #88]	; (80119a8 <tcp_receive+0x600>)
 8011950:	4813      	ldr	r0, [pc, #76]	; (80119a0 <tcp_receive+0x5f8>)
 8011952:	f007 f91d 	bl	8018b90 <iprintf>
      inseg.len -= off;
 8011956:	4b0f      	ldr	r3, [pc, #60]	; (8011994 <tcp_receive+0x5ec>)
 8011958:	891a      	ldrh	r2, [r3, #8]
 801195a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801195e:	1ad3      	subs	r3, r2, r3
 8011960:	b29a      	uxth	r2, r3
 8011962:	4b0c      	ldr	r3, [pc, #48]	; (8011994 <tcp_receive+0x5ec>)
 8011964:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011966:	4b0b      	ldr	r3, [pc, #44]	; (8011994 <tcp_receive+0x5ec>)
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	891a      	ldrh	r2, [r3, #8]
 801196c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011970:	1ad3      	subs	r3, r2, r3
 8011972:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011974:	e02a      	b.n	80119cc <tcp_receive+0x624>
 8011976:	bf00      	nop
 8011978:	0801ed28 	.word	0x0801ed28
 801197c:	0801ed30 	.word	0x0801ed30
 8011980:	20077978 	.word	0x20077978
 8011984:	20077974 	.word	0x20077974
 8011988:	20077938 	.word	0x20077938
 801198c:	2007797a 	.word	0x2007797a
 8011990:	20077970 	.word	0x20077970
 8011994:	20077950 	.word	0x20077950
 8011998:	0801e9c0 	.word	0x0801e9c0
 801199c:	0801ed38 	.word	0x0801ed38
 80119a0:	0801ea0c 	.word	0x0801ea0c
 80119a4:	0801ed48 	.word	0x0801ed48
 80119a8:	0801ed58 	.word	0x0801ed58
        off -= p->len;
 80119ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119ae:	895b      	ldrh	r3, [r3, #10]
 80119b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80119ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80119be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80119c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119c2:	2200      	movs	r2, #0
 80119c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80119c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80119cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119ce:	895b      	ldrh	r3, [r3, #10]
 80119d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d8e9      	bhi.n	80119ac <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80119d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80119dc:	4619      	mov	r1, r3
 80119de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80119e0:	f7fc f8d8 	bl	800db94 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e8:	4a91      	ldr	r2, [pc, #580]	; (8011c30 <tcp_receive+0x888>)
 80119ea:	6013      	str	r3, [r2, #0]
 80119ec:	4b91      	ldr	r3, [pc, #580]	; (8011c34 <tcp_receive+0x88c>)
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	4a8f      	ldr	r2, [pc, #572]	; (8011c30 <tcp_receive+0x888>)
 80119f2:	6812      	ldr	r2, [r2, #0]
 80119f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80119f6:	e00d      	b.n	8011a14 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80119f8:	4b8d      	ldr	r3, [pc, #564]	; (8011c30 <tcp_receive+0x888>)
 80119fa:	681a      	ldr	r2, [r3, #0]
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a00:	1ad3      	subs	r3, r2, r3
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	da06      	bge.n	8011a14 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	8b5b      	ldrh	r3, [r3, #26]
 8011a0a:	f043 0302 	orr.w	r3, r3, #2
 8011a0e:	b29a      	uxth	r2, r3
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011a14:	4b86      	ldr	r3, [pc, #536]	; (8011c30 <tcp_receive+0x888>)
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a1c:	1ad3      	subs	r3, r2, r3
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	f2c0 842a 	blt.w	8012278 <tcp_receive+0xed0>
 8011a24:	4b82      	ldr	r3, [pc, #520]	; (8011c30 <tcp_receive+0x888>)
 8011a26:	681a      	ldr	r2, [r3, #0]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2c:	6879      	ldr	r1, [r7, #4]
 8011a2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a30:	440b      	add	r3, r1
 8011a32:	1ad3      	subs	r3, r2, r3
 8011a34:	3301      	adds	r3, #1
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	f300 841e 	bgt.w	8012278 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a40:	4b7b      	ldr	r3, [pc, #492]	; (8011c30 <tcp_receive+0x888>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	f040 829a 	bne.w	8011f7e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011a4a:	4b7a      	ldr	r3, [pc, #488]	; (8011c34 <tcp_receive+0x88c>)
 8011a4c:	891c      	ldrh	r4, [r3, #8]
 8011a4e:	4b79      	ldr	r3, [pc, #484]	; (8011c34 <tcp_receive+0x88c>)
 8011a50:	68db      	ldr	r3, [r3, #12]
 8011a52:	899b      	ldrh	r3, [r3, #12]
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7fa fd30 	bl	800c4bc <lwip_htons>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	f003 0303 	and.w	r3, r3, #3
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d001      	beq.n	8011a6c <tcp_receive+0x6c4>
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e000      	b.n	8011a6e <tcp_receive+0x6c6>
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	4423      	add	r3, r4
 8011a70:	b29a      	uxth	r2, r3
 8011a72:	4b71      	ldr	r3, [pc, #452]	; (8011c38 <tcp_receive+0x890>)
 8011a74:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a7a:	4b6f      	ldr	r3, [pc, #444]	; (8011c38 <tcp_receive+0x890>)
 8011a7c:	881b      	ldrh	r3, [r3, #0]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d275      	bcs.n	8011b6e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011a82:	4b6c      	ldr	r3, [pc, #432]	; (8011c34 <tcp_receive+0x88c>)
 8011a84:	68db      	ldr	r3, [r3, #12]
 8011a86:	899b      	ldrh	r3, [r3, #12]
 8011a88:	b29b      	uxth	r3, r3
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7fa fd16 	bl	800c4bc <lwip_htons>
 8011a90:	4603      	mov	r3, r0
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	f003 0301 	and.w	r3, r3, #1
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d01f      	beq.n	8011adc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011a9c:	4b65      	ldr	r3, [pc, #404]	; (8011c34 <tcp_receive+0x88c>)
 8011a9e:	68db      	ldr	r3, [r3, #12]
 8011aa0:	899b      	ldrh	r3, [r3, #12]
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	b21b      	sxth	r3, r3
 8011aa6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011aaa:	b21c      	sxth	r4, r3
 8011aac:	4b61      	ldr	r3, [pc, #388]	; (8011c34 <tcp_receive+0x88c>)
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	899b      	ldrh	r3, [r3, #12]
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7fa fd01 	bl	800c4bc <lwip_htons>
 8011aba:	4603      	mov	r3, r0
 8011abc:	b2db      	uxtb	r3, r3
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7fa fcf8 	bl	800c4bc <lwip_htons>
 8011acc:	4603      	mov	r3, r0
 8011ace:	b21b      	sxth	r3, r3
 8011ad0:	4323      	orrs	r3, r4
 8011ad2:	b21a      	sxth	r2, r3
 8011ad4:	4b57      	ldr	r3, [pc, #348]	; (8011c34 <tcp_receive+0x88c>)
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	b292      	uxth	r2, r2
 8011ada:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ae0:	4b54      	ldr	r3, [pc, #336]	; (8011c34 <tcp_receive+0x88c>)
 8011ae2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011ae4:	4b53      	ldr	r3, [pc, #332]	; (8011c34 <tcp_receive+0x88c>)
 8011ae6:	68db      	ldr	r3, [r3, #12]
 8011ae8:	899b      	ldrh	r3, [r3, #12]
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fa fce5 	bl	800c4bc <lwip_htons>
 8011af2:	4603      	mov	r3, r0
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	f003 0302 	and.w	r3, r3, #2
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d005      	beq.n	8011b0a <tcp_receive+0x762>
            inseg.len -= 1;
 8011afe:	4b4d      	ldr	r3, [pc, #308]	; (8011c34 <tcp_receive+0x88c>)
 8011b00:	891b      	ldrh	r3, [r3, #8]
 8011b02:	3b01      	subs	r3, #1
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	4b4b      	ldr	r3, [pc, #300]	; (8011c34 <tcp_receive+0x88c>)
 8011b08:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011b0a:	4b4a      	ldr	r3, [pc, #296]	; (8011c34 <tcp_receive+0x88c>)
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	4a49      	ldr	r2, [pc, #292]	; (8011c34 <tcp_receive+0x88c>)
 8011b10:	8912      	ldrh	r2, [r2, #8]
 8011b12:	4611      	mov	r1, r2
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7fb ff3d 	bl	800d994 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011b1a:	4b46      	ldr	r3, [pc, #280]	; (8011c34 <tcp_receive+0x88c>)
 8011b1c:	891c      	ldrh	r4, [r3, #8]
 8011b1e:	4b45      	ldr	r3, [pc, #276]	; (8011c34 <tcp_receive+0x88c>)
 8011b20:	68db      	ldr	r3, [r3, #12]
 8011b22:	899b      	ldrh	r3, [r3, #12]
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fa fcc8 	bl	800c4bc <lwip_htons>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	b2db      	uxtb	r3, r3
 8011b30:	f003 0303 	and.w	r3, r3, #3
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d001      	beq.n	8011b3c <tcp_receive+0x794>
 8011b38:	2301      	movs	r3, #1
 8011b3a:	e000      	b.n	8011b3e <tcp_receive+0x796>
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	4423      	add	r3, r4
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	4b3d      	ldr	r3, [pc, #244]	; (8011c38 <tcp_receive+0x890>)
 8011b44:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011b46:	4b3c      	ldr	r3, [pc, #240]	; (8011c38 <tcp_receive+0x890>)
 8011b48:	881b      	ldrh	r3, [r3, #0]
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	4b38      	ldr	r3, [pc, #224]	; (8011c30 <tcp_receive+0x888>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	441a      	add	r2, r3
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b56:	6879      	ldr	r1, [r7, #4]
 8011b58:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b5a:	440b      	add	r3, r1
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d006      	beq.n	8011b6e <tcp_receive+0x7c6>
 8011b60:	4b36      	ldr	r3, [pc, #216]	; (8011c3c <tcp_receive+0x894>)
 8011b62:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011b66:	4936      	ldr	r1, [pc, #216]	; (8011c40 <tcp_receive+0x898>)
 8011b68:	4836      	ldr	r0, [pc, #216]	; (8011c44 <tcp_receive+0x89c>)
 8011b6a:	f007 f811 	bl	8018b90 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	f000 80e7 	beq.w	8011d46 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011b78:	4b2e      	ldr	r3, [pc, #184]	; (8011c34 <tcp_receive+0x88c>)
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	899b      	ldrh	r3, [r3, #12]
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7fa fc9b 	bl	800c4bc <lwip_htons>
 8011b86:	4603      	mov	r3, r0
 8011b88:	b2db      	uxtb	r3, r3
 8011b8a:	f003 0301 	and.w	r3, r3, #1
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d010      	beq.n	8011bb4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011b92:	e00a      	b.n	8011baa <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b98:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b9e:	681a      	ldr	r2, [r3, #0]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011ba4:	68f8      	ldr	r0, [r7, #12]
 8011ba6:	f7fd fcc4 	bl	800f532 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d1f0      	bne.n	8011b94 <tcp_receive+0x7ec>
 8011bb2:	e0c8      	b.n	8011d46 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011bba:	e052      	b.n	8011c62 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	899b      	ldrh	r3, [r3, #12]
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7fa fc79 	bl	800c4bc <lwip_htons>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	b2db      	uxtb	r3, r3
 8011bce:	f003 0301 	and.w	r3, r3, #1
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d03d      	beq.n	8011c52 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011bd6:	4b17      	ldr	r3, [pc, #92]	; (8011c34 <tcp_receive+0x88c>)
 8011bd8:	68db      	ldr	r3, [r3, #12]
 8011bda:	899b      	ldrh	r3, [r3, #12]
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7fa fc6c 	bl	800c4bc <lwip_htons>
 8011be4:	4603      	mov	r3, r0
 8011be6:	b2db      	uxtb	r3, r3
 8011be8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d130      	bne.n	8011c52 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011bf0:	4b10      	ldr	r3, [pc, #64]	; (8011c34 <tcp_receive+0x88c>)
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	899b      	ldrh	r3, [r3, #12]
 8011bf6:	b29c      	uxth	r4, r3
 8011bf8:	2001      	movs	r0, #1
 8011bfa:	f7fa fc5f 	bl	800c4bc <lwip_htons>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	461a      	mov	r2, r3
 8011c02:	4b0c      	ldr	r3, [pc, #48]	; (8011c34 <tcp_receive+0x88c>)
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	4322      	orrs	r2, r4
 8011c08:	b292      	uxth	r2, r2
 8011c0a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011c0c:	4b09      	ldr	r3, [pc, #36]	; (8011c34 <tcp_receive+0x88c>)
 8011c0e:	891c      	ldrh	r4, [r3, #8]
 8011c10:	4b08      	ldr	r3, [pc, #32]	; (8011c34 <tcp_receive+0x88c>)
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	899b      	ldrh	r3, [r3, #12]
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7fa fc4f 	bl	800c4bc <lwip_htons>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	f003 0303 	and.w	r3, r3, #3
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d00e      	beq.n	8011c48 <tcp_receive+0x8a0>
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	e00d      	b.n	8011c4a <tcp_receive+0x8a2>
 8011c2e:	bf00      	nop
 8011c30:	20077970 	.word	0x20077970
 8011c34:	20077950 	.word	0x20077950
 8011c38:	2007797a 	.word	0x2007797a
 8011c3c:	0801e9c0 	.word	0x0801e9c0
 8011c40:	0801ed68 	.word	0x0801ed68
 8011c44:	0801ea0c 	.word	0x0801ea0c
 8011c48:	2300      	movs	r3, #0
 8011c4a:	4423      	add	r3, r4
 8011c4c:	b29a      	uxth	r2, r3
 8011c4e:	4b98      	ldr	r3, [pc, #608]	; (8011eb0 <tcp_receive+0xb08>)
 8011c50:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c54:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011c5c:	6938      	ldr	r0, [r7, #16]
 8011c5e:	f7fd fc68 	bl	800f532 <tcp_seg_free>
            while (next &&
 8011c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d00e      	beq.n	8011c86 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011c68:	4b91      	ldr	r3, [pc, #580]	; (8011eb0 <tcp_receive+0xb08>)
 8011c6a:	881b      	ldrh	r3, [r3, #0]
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	4b91      	ldr	r3, [pc, #580]	; (8011eb4 <tcp_receive+0xb0c>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	441a      	add	r2, r3
 8011c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c7c:	8909      	ldrh	r1, [r1, #8]
 8011c7e:	440b      	add	r3, r1
 8011c80:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	da9a      	bge.n	8011bbc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d059      	beq.n	8011d40 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011c8c:	4b88      	ldr	r3, [pc, #544]	; (8011eb0 <tcp_receive+0xb08>)
 8011c8e:	881b      	ldrh	r3, [r3, #0]
 8011c90:	461a      	mov	r2, r3
 8011c92:	4b88      	ldr	r3, [pc, #544]	; (8011eb4 <tcp_receive+0xb0c>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	441a      	add	r2, r3
 8011c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	dd4d      	ble.n	8011d40 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	b29a      	uxth	r2, r3
 8011cac:	4b81      	ldr	r3, [pc, #516]	; (8011eb4 <tcp_receive+0xb0c>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	1ad3      	subs	r3, r2, r3
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	4b80      	ldr	r3, [pc, #512]	; (8011eb8 <tcp_receive+0xb10>)
 8011cb8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011cba:	4b7f      	ldr	r3, [pc, #508]	; (8011eb8 <tcp_receive+0xb10>)
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	899b      	ldrh	r3, [r3, #12]
 8011cc0:	b29b      	uxth	r3, r3
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7fa fbfa 	bl	800c4bc <lwip_htons>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	f003 0302 	and.w	r3, r3, #2
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d005      	beq.n	8011ce0 <tcp_receive+0x938>
                inseg.len -= 1;
 8011cd4:	4b78      	ldr	r3, [pc, #480]	; (8011eb8 <tcp_receive+0xb10>)
 8011cd6:	891b      	ldrh	r3, [r3, #8]
 8011cd8:	3b01      	subs	r3, #1
 8011cda:	b29a      	uxth	r2, r3
 8011cdc:	4b76      	ldr	r3, [pc, #472]	; (8011eb8 <tcp_receive+0xb10>)
 8011cde:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011ce0:	4b75      	ldr	r3, [pc, #468]	; (8011eb8 <tcp_receive+0xb10>)
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	4a74      	ldr	r2, [pc, #464]	; (8011eb8 <tcp_receive+0xb10>)
 8011ce6:	8912      	ldrh	r2, [r2, #8]
 8011ce8:	4611      	mov	r1, r2
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fb fe52 	bl	800d994 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011cf0:	4b71      	ldr	r3, [pc, #452]	; (8011eb8 <tcp_receive+0xb10>)
 8011cf2:	891c      	ldrh	r4, [r3, #8]
 8011cf4:	4b70      	ldr	r3, [pc, #448]	; (8011eb8 <tcp_receive+0xb10>)
 8011cf6:	68db      	ldr	r3, [r3, #12]
 8011cf8:	899b      	ldrh	r3, [r3, #12]
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7fa fbdd 	bl	800c4bc <lwip_htons>
 8011d02:	4603      	mov	r3, r0
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	f003 0303 	and.w	r3, r3, #3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d001      	beq.n	8011d12 <tcp_receive+0x96a>
 8011d0e:	2301      	movs	r3, #1
 8011d10:	e000      	b.n	8011d14 <tcp_receive+0x96c>
 8011d12:	2300      	movs	r3, #0
 8011d14:	4423      	add	r3, r4
 8011d16:	b29a      	uxth	r2, r3
 8011d18:	4b65      	ldr	r3, [pc, #404]	; (8011eb0 <tcp_receive+0xb08>)
 8011d1a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011d1c:	4b64      	ldr	r3, [pc, #400]	; (8011eb0 <tcp_receive+0xb08>)
 8011d1e:	881b      	ldrh	r3, [r3, #0]
 8011d20:	461a      	mov	r2, r3
 8011d22:	4b64      	ldr	r3, [pc, #400]	; (8011eb4 <tcp_receive+0xb0c>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	441a      	add	r2, r3
 8011d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d006      	beq.n	8011d40 <tcp_receive+0x998>
 8011d32:	4b62      	ldr	r3, [pc, #392]	; (8011ebc <tcp_receive+0xb14>)
 8011d34:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011d38:	4961      	ldr	r1, [pc, #388]	; (8011ec0 <tcp_receive+0xb18>)
 8011d3a:	4862      	ldr	r0, [pc, #392]	; (8011ec4 <tcp_receive+0xb1c>)
 8011d3c:	f006 ff28 	bl	8018b90 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011d44:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011d46:	4b5a      	ldr	r3, [pc, #360]	; (8011eb0 <tcp_receive+0xb08>)
 8011d48:	881b      	ldrh	r3, [r3, #0]
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	4b59      	ldr	r3, [pc, #356]	; (8011eb4 <tcp_receive+0xb0c>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	441a      	add	r2, r3
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d5a:	4b55      	ldr	r3, [pc, #340]	; (8011eb0 <tcp_receive+0xb08>)
 8011d5c:	881b      	ldrh	r3, [r3, #0]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d206      	bcs.n	8011d70 <tcp_receive+0x9c8>
 8011d62:	4b56      	ldr	r3, [pc, #344]	; (8011ebc <tcp_receive+0xb14>)
 8011d64:	f240 6207 	movw	r2, #1543	; 0x607
 8011d68:	4957      	ldr	r1, [pc, #348]	; (8011ec8 <tcp_receive+0xb20>)
 8011d6a:	4856      	ldr	r0, [pc, #344]	; (8011ec4 <tcp_receive+0xb1c>)
 8011d6c:	f006 ff10 	bl	8018b90 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d74:	4b4e      	ldr	r3, [pc, #312]	; (8011eb0 <tcp_receive+0xb08>)
 8011d76:	881b      	ldrh	r3, [r3, #0]
 8011d78:	1ad3      	subs	r3, r2, r3
 8011d7a:	b29a      	uxth	r2, r3
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f7fc fd99 	bl	800e8b8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011d86:	4b4c      	ldr	r3, [pc, #304]	; (8011eb8 <tcp_receive+0xb10>)
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	891b      	ldrh	r3, [r3, #8]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d006      	beq.n	8011d9e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011d90:	4b49      	ldr	r3, [pc, #292]	; (8011eb8 <tcp_receive+0xb10>)
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	4a4d      	ldr	r2, [pc, #308]	; (8011ecc <tcp_receive+0xb24>)
 8011d96:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011d98:	4b47      	ldr	r3, [pc, #284]	; (8011eb8 <tcp_receive+0xb10>)
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011d9e:	4b46      	ldr	r3, [pc, #280]	; (8011eb8 <tcp_receive+0xb10>)
 8011da0:	68db      	ldr	r3, [r3, #12]
 8011da2:	899b      	ldrh	r3, [r3, #12]
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7fa fb88 	bl	800c4bc <lwip_htons>
 8011dac:	4603      	mov	r3, r0
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	f003 0301 	and.w	r3, r3, #1
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	f000 80b8 	beq.w	8011f2a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011dba:	4b45      	ldr	r3, [pc, #276]	; (8011ed0 <tcp_receive+0xb28>)
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	f043 0320 	orr.w	r3, r3, #32
 8011dc2:	b2da      	uxtb	r2, r3
 8011dc4:	4b42      	ldr	r3, [pc, #264]	; (8011ed0 <tcp_receive+0xb28>)
 8011dc6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011dc8:	e0af      	b.n	8011f2a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dd4:	68db      	ldr	r3, [r3, #12]
 8011dd6:	685b      	ldr	r3, [r3, #4]
 8011dd8:	4a36      	ldr	r2, [pc, #216]	; (8011eb4 <tcp_receive+0xb0c>)
 8011dda:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	891b      	ldrh	r3, [r3, #8]
 8011de0:	461c      	mov	r4, r3
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	68db      	ldr	r3, [r3, #12]
 8011de6:	899b      	ldrh	r3, [r3, #12]
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7fa fb66 	bl	800c4bc <lwip_htons>
 8011df0:	4603      	mov	r3, r0
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	f003 0303 	and.w	r3, r3, #3
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d001      	beq.n	8011e00 <tcp_receive+0xa58>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e000      	b.n	8011e02 <tcp_receive+0xa5a>
 8011e00:	2300      	movs	r3, #0
 8011e02:	191a      	adds	r2, r3, r4
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e08:	441a      	add	r2, r3
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e12:	461c      	mov	r4, r3
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	891b      	ldrh	r3, [r3, #8]
 8011e18:	461d      	mov	r5, r3
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	68db      	ldr	r3, [r3, #12]
 8011e1e:	899b      	ldrh	r3, [r3, #12]
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7fa fb4a 	bl	800c4bc <lwip_htons>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	b2db      	uxtb	r3, r3
 8011e2c:	f003 0303 	and.w	r3, r3, #3
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d001      	beq.n	8011e38 <tcp_receive+0xa90>
 8011e34:	2301      	movs	r3, #1
 8011e36:	e000      	b.n	8011e3a <tcp_receive+0xa92>
 8011e38:	2300      	movs	r3, #0
 8011e3a:	442b      	add	r3, r5
 8011e3c:	429c      	cmp	r4, r3
 8011e3e:	d206      	bcs.n	8011e4e <tcp_receive+0xaa6>
 8011e40:	4b1e      	ldr	r3, [pc, #120]	; (8011ebc <tcp_receive+0xb14>)
 8011e42:	f240 622b 	movw	r2, #1579	; 0x62b
 8011e46:	4923      	ldr	r1, [pc, #140]	; (8011ed4 <tcp_receive+0xb2c>)
 8011e48:	481e      	ldr	r0, [pc, #120]	; (8011ec4 <tcp_receive+0xb1c>)
 8011e4a:	f006 fea1 	bl	8018b90 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	891b      	ldrh	r3, [r3, #8]
 8011e52:	461c      	mov	r4, r3
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	899b      	ldrh	r3, [r3, #12]
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f7fa fb2d 	bl	800c4bc <lwip_htons>
 8011e62:	4603      	mov	r3, r0
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	f003 0303 	and.w	r3, r3, #3
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d001      	beq.n	8011e72 <tcp_receive+0xaca>
 8011e6e:	2301      	movs	r3, #1
 8011e70:	e000      	b.n	8011e74 <tcp_receive+0xacc>
 8011e72:	2300      	movs	r3, #0
 8011e74:	1919      	adds	r1, r3, r4
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e7a:	b28b      	uxth	r3, r1
 8011e7c:	1ad3      	subs	r3, r2, r3
 8011e7e:	b29a      	uxth	r2, r3
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f7fc fd17 	bl	800e8b8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	891b      	ldrh	r3, [r3, #8]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d028      	beq.n	8011ee6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011e94:	4b0d      	ldr	r3, [pc, #52]	; (8011ecc <tcp_receive+0xb24>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d01d      	beq.n	8011ed8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011e9c:	4b0b      	ldr	r3, [pc, #44]	; (8011ecc <tcp_receive+0xb24>)
 8011e9e:	681a      	ldr	r2, [r3, #0]
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	4610      	mov	r0, r2
 8011ea8:	f7fb ffc8 	bl	800de3c <pbuf_cat>
 8011eac:	e018      	b.n	8011ee0 <tcp_receive+0xb38>
 8011eae:	bf00      	nop
 8011eb0:	2007797a 	.word	0x2007797a
 8011eb4:	20077970 	.word	0x20077970
 8011eb8:	20077950 	.word	0x20077950
 8011ebc:	0801e9c0 	.word	0x0801e9c0
 8011ec0:	0801eda0 	.word	0x0801eda0
 8011ec4:	0801ea0c 	.word	0x0801ea0c
 8011ec8:	0801eddc 	.word	0x0801eddc
 8011ecc:	20077980 	.word	0x20077980
 8011ed0:	2007797d 	.word	0x2007797d
 8011ed4:	0801edfc 	.word	0x0801edfc
            } else {
              recv_data = cseg->p;
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	4a70      	ldr	r2, [pc, #448]	; (80120a0 <tcp_receive+0xcf8>)
 8011ede:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	68db      	ldr	r3, [r3, #12]
 8011eea:	899b      	ldrh	r3, [r3, #12]
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7fa fae4 	bl	800c4bc <lwip_htons>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	f003 0301 	and.w	r3, r3, #1
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d00d      	beq.n	8011f1c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011f00:	4b68      	ldr	r3, [pc, #416]	; (80120a4 <tcp_receive+0xcfc>)
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	f043 0320 	orr.w	r3, r3, #32
 8011f08:	b2da      	uxtb	r2, r3
 8011f0a:	4b66      	ldr	r3, [pc, #408]	; (80120a4 <tcp_receive+0xcfc>)
 8011f0c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	7d1b      	ldrb	r3, [r3, #20]
 8011f12:	2b04      	cmp	r3, #4
 8011f14:	d102      	bne.n	8011f1c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2207      	movs	r2, #7
 8011f1a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011f24:	68b8      	ldr	r0, [r7, #8]
 8011f26:	f7fd fb04 	bl	800f532 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d008      	beq.n	8011f44 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	685a      	ldr	r2, [r3, #4]
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	f43f af43 	beq.w	8011dca <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	8b5b      	ldrh	r3, [r3, #26]
 8011f48:	f003 0301 	and.w	r3, r3, #1
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d00e      	beq.n	8011f6e <tcp_receive+0xbc6>
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	8b5b      	ldrh	r3, [r3, #26]
 8011f54:	f023 0301 	bic.w	r3, r3, #1
 8011f58:	b29a      	uxth	r2, r3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	835a      	strh	r2, [r3, #26]
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	8b5b      	ldrh	r3, [r3, #26]
 8011f62:	f043 0302 	orr.w	r3, r3, #2
 8011f66:	b29a      	uxth	r2, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011f6c:	e188      	b.n	8012280 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	8b5b      	ldrh	r3, [r3, #26]
 8011f72:	f043 0301 	orr.w	r3, r3, #1
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011f7c:	e180      	b.n	8012280 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d106      	bne.n	8011f94 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011f86:	4848      	ldr	r0, [pc, #288]	; (80120a8 <tcp_receive+0xd00>)
 8011f88:	f7fd faec 	bl	800f564 <tcp_seg_copy>
 8011f8c:	4602      	mov	r2, r0
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	675a      	str	r2, [r3, #116]	; 0x74
 8011f92:	e16d      	b.n	8012270 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011f94:	2300      	movs	r3, #0
 8011f96:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f9e:	e157      	b.n	8012250 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	685a      	ldr	r2, [r3, #4]
 8011fa6:	4b41      	ldr	r3, [pc, #260]	; (80120ac <tcp_receive+0xd04>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d11d      	bne.n	8011fea <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011fae:	4b3e      	ldr	r3, [pc, #248]	; (80120a8 <tcp_receive+0xd00>)
 8011fb0:	891a      	ldrh	r2, [r3, #8]
 8011fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb4:	891b      	ldrh	r3, [r3, #8]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	f240 814f 	bls.w	801225a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011fbc:	483a      	ldr	r0, [pc, #232]	; (80120a8 <tcp_receive+0xd00>)
 8011fbe:	f7fd fad1 	bl	800f564 <tcp_seg_copy>
 8011fc2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	f000 8149 	beq.w	801225e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d003      	beq.n	8011fda <tcp_receive+0xc32>
                    prev->next = cseg;
 8011fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fd4:	697a      	ldr	r2, [r7, #20]
 8011fd6:	601a      	str	r2, [r3, #0]
 8011fd8:	e002      	b.n	8011fe0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	697a      	ldr	r2, [r7, #20]
 8011fde:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011fe0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011fe2:	6978      	ldr	r0, [r7, #20]
 8011fe4:	f7ff f8dc 	bl	80111a0 <tcp_oos_insert_segment>
                }
                break;
 8011fe8:	e139      	b.n	801225e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d117      	bne.n	8012020 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011ff0:	4b2e      	ldr	r3, [pc, #184]	; (80120ac <tcp_receive+0xd04>)
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	1ad3      	subs	r3, r2, r3
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	da57      	bge.n	80120b0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012000:	4829      	ldr	r0, [pc, #164]	; (80120a8 <tcp_receive+0xd00>)
 8012002:	f7fd faaf 	bl	800f564 <tcp_seg_copy>
 8012006:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	2b00      	cmp	r3, #0
 801200c:	f000 8129 	beq.w	8012262 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	69ba      	ldr	r2, [r7, #24]
 8012014:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012016:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012018:	69b8      	ldr	r0, [r7, #24]
 801201a:	f7ff f8c1 	bl	80111a0 <tcp_oos_insert_segment>
                  }
                  break;
 801201e:	e120      	b.n	8012262 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012020:	4b22      	ldr	r3, [pc, #136]	; (80120ac <tcp_receive+0xd04>)
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012026:	68db      	ldr	r3, [r3, #12]
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	1ad3      	subs	r3, r2, r3
 801202c:	3b01      	subs	r3, #1
 801202e:	2b00      	cmp	r3, #0
 8012030:	db3e      	blt.n	80120b0 <tcp_receive+0xd08>
 8012032:	4b1e      	ldr	r3, [pc, #120]	; (80120ac <tcp_receive+0xd04>)
 8012034:	681a      	ldr	r2, [r3, #0]
 8012036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012038:	68db      	ldr	r3, [r3, #12]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	1ad3      	subs	r3, r2, r3
 801203e:	3301      	adds	r3, #1
 8012040:	2b00      	cmp	r3, #0
 8012042:	dc35      	bgt.n	80120b0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012044:	4818      	ldr	r0, [pc, #96]	; (80120a8 <tcp_receive+0xd00>)
 8012046:	f7fd fa8d 	bl	800f564 <tcp_seg_copy>
 801204a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801204c:	69fb      	ldr	r3, [r7, #28]
 801204e:	2b00      	cmp	r3, #0
 8012050:	f000 8109 	beq.w	8012266 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801205c:	8912      	ldrh	r2, [r2, #8]
 801205e:	441a      	add	r2, r3
 8012060:	4b12      	ldr	r3, [pc, #72]	; (80120ac <tcp_receive+0xd04>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	1ad3      	subs	r3, r2, r3
 8012066:	2b00      	cmp	r3, #0
 8012068:	dd12      	ble.n	8012090 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801206a:	4b10      	ldr	r3, [pc, #64]	; (80120ac <tcp_receive+0xd04>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	b29a      	uxth	r2, r3
 8012070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	685b      	ldr	r3, [r3, #4]
 8012076:	b29b      	uxth	r3, r3
 8012078:	1ad3      	subs	r3, r2, r3
 801207a:	b29a      	uxth	r2, r3
 801207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801207e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012082:	685a      	ldr	r2, [r3, #4]
 8012084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012086:	891b      	ldrh	r3, [r3, #8]
 8012088:	4619      	mov	r1, r3
 801208a:	4610      	mov	r0, r2
 801208c:	f7fb fc82 	bl	800d994 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012092:	69fa      	ldr	r2, [r7, #28]
 8012094:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012098:	69f8      	ldr	r0, [r7, #28]
 801209a:	f7ff f881 	bl	80111a0 <tcp_oos_insert_segment>
                  }
                  break;
 801209e:	e0e2      	b.n	8012266 <tcp_receive+0xebe>
 80120a0:	20077980 	.word	0x20077980
 80120a4:	2007797d 	.word	0x2007797d
 80120a8:	20077950 	.word	0x20077950
 80120ac:	20077970 	.word	0x20077970
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80120b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80120b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	f040 80c6 	bne.w	801224a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80120be:	4b80      	ldr	r3, [pc, #512]	; (80122c0 <tcp_receive+0xf18>)
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	f340 80bd 	ble.w	801224a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80120d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d2:	68db      	ldr	r3, [r3, #12]
 80120d4:	899b      	ldrh	r3, [r3, #12]
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	4618      	mov	r0, r3
 80120da:	f7fa f9ef 	bl	800c4bc <lwip_htons>
 80120de:	4603      	mov	r3, r0
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	f003 0301 	and.w	r3, r3, #1
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	f040 80bf 	bne.w	801226a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80120ec:	4875      	ldr	r0, [pc, #468]	; (80122c4 <tcp_receive+0xf1c>)
 80120ee:	f7fd fa39 	bl	800f564 <tcp_seg_copy>
 80120f2:	4602      	mov	r2, r0
 80120f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80120f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	f000 80b6 	beq.w	801226e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012104:	68db      	ldr	r3, [r3, #12]
 8012106:	685b      	ldr	r3, [r3, #4]
 8012108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801210a:	8912      	ldrh	r2, [r2, #8]
 801210c:	441a      	add	r2, r3
 801210e:	4b6c      	ldr	r3, [pc, #432]	; (80122c0 <tcp_receive+0xf18>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	1ad3      	subs	r3, r2, r3
 8012114:	2b00      	cmp	r3, #0
 8012116:	dd12      	ble.n	801213e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012118:	4b69      	ldr	r3, [pc, #420]	; (80122c0 <tcp_receive+0xf18>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	b29a      	uxth	r2, r3
 801211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012120:	68db      	ldr	r3, [r3, #12]
 8012122:	685b      	ldr	r3, [r3, #4]
 8012124:	b29b      	uxth	r3, r3
 8012126:	1ad3      	subs	r3, r2, r3
 8012128:	b29a      	uxth	r2, r3
 801212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801212c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012130:	685a      	ldr	r2, [r3, #4]
 8012132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012134:	891b      	ldrh	r3, [r3, #8]
 8012136:	4619      	mov	r1, r3
 8012138:	4610      	mov	r0, r2
 801213a:	f7fb fc2b 	bl	800d994 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801213e:	4b62      	ldr	r3, [pc, #392]	; (80122c8 <tcp_receive+0xf20>)
 8012140:	881b      	ldrh	r3, [r3, #0]
 8012142:	461a      	mov	r2, r3
 8012144:	4b5e      	ldr	r3, [pc, #376]	; (80122c0 <tcp_receive+0xf18>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	441a      	add	r2, r3
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801214e:	6879      	ldr	r1, [r7, #4]
 8012150:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012152:	440b      	add	r3, r1
 8012154:	1ad3      	subs	r3, r2, r3
 8012156:	2b00      	cmp	r3, #0
 8012158:	f340 8089 	ble.w	801226e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	899b      	ldrh	r3, [r3, #12]
 8012164:	b29b      	uxth	r3, r3
 8012166:	4618      	mov	r0, r3
 8012168:	f7fa f9a8 	bl	800c4bc <lwip_htons>
 801216c:	4603      	mov	r3, r0
 801216e:	b2db      	uxtb	r3, r3
 8012170:	f003 0301 	and.w	r3, r3, #1
 8012174:	2b00      	cmp	r3, #0
 8012176:	d022      	beq.n	80121be <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	68db      	ldr	r3, [r3, #12]
 801217e:	899b      	ldrh	r3, [r3, #12]
 8012180:	b29b      	uxth	r3, r3
 8012182:	b21b      	sxth	r3, r3
 8012184:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012188:	b21c      	sxth	r4, r3
 801218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	899b      	ldrh	r3, [r3, #12]
 8012192:	b29b      	uxth	r3, r3
 8012194:	4618      	mov	r0, r3
 8012196:	f7fa f991 	bl	800c4bc <lwip_htons>
 801219a:	4603      	mov	r3, r0
 801219c:	b2db      	uxtb	r3, r3
 801219e:	b29b      	uxth	r3, r3
 80121a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fa f988 	bl	800c4bc <lwip_htons>
 80121ac:	4603      	mov	r3, r0
 80121ae:	b21b      	sxth	r3, r3
 80121b0:	4323      	orrs	r3, r4
 80121b2:	b21a      	sxth	r2, r3
 80121b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	b292      	uxth	r2, r2
 80121bc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121c8:	4413      	add	r3, r2
 80121ca:	b299      	uxth	r1, r3
 80121cc:	4b3c      	ldr	r3, [pc, #240]	; (80122c0 <tcp_receive+0xf18>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	b29a      	uxth	r2, r3
 80121d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	1a8a      	subs	r2, r1, r2
 80121d8:	b292      	uxth	r2, r2
 80121da:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80121dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	685a      	ldr	r2, [r3, #4]
 80121e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	891b      	ldrh	r3, [r3, #8]
 80121e8:	4619      	mov	r1, r3
 80121ea:	4610      	mov	r0, r2
 80121ec:	f7fb fbd2 	bl	800d994 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80121f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	891c      	ldrh	r4, [r3, #8]
 80121f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	68db      	ldr	r3, [r3, #12]
 80121fc:	899b      	ldrh	r3, [r3, #12]
 80121fe:	b29b      	uxth	r3, r3
 8012200:	4618      	mov	r0, r3
 8012202:	f7fa f95b 	bl	800c4bc <lwip_htons>
 8012206:	4603      	mov	r3, r0
 8012208:	b2db      	uxtb	r3, r3
 801220a:	f003 0303 	and.w	r3, r3, #3
 801220e:	2b00      	cmp	r3, #0
 8012210:	d001      	beq.n	8012216 <tcp_receive+0xe6e>
 8012212:	2301      	movs	r3, #1
 8012214:	e000      	b.n	8012218 <tcp_receive+0xe70>
 8012216:	2300      	movs	r3, #0
 8012218:	4423      	add	r3, r4
 801221a:	b29a      	uxth	r2, r3
 801221c:	4b2a      	ldr	r3, [pc, #168]	; (80122c8 <tcp_receive+0xf20>)
 801221e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012220:	4b29      	ldr	r3, [pc, #164]	; (80122c8 <tcp_receive+0xf20>)
 8012222:	881b      	ldrh	r3, [r3, #0]
 8012224:	461a      	mov	r2, r3
 8012226:	4b26      	ldr	r3, [pc, #152]	; (80122c0 <tcp_receive+0xf18>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	441a      	add	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012230:	6879      	ldr	r1, [r7, #4]
 8012232:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012234:	440b      	add	r3, r1
 8012236:	429a      	cmp	r2, r3
 8012238:	d019      	beq.n	801226e <tcp_receive+0xec6>
 801223a:	4b24      	ldr	r3, [pc, #144]	; (80122cc <tcp_receive+0xf24>)
 801223c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012240:	4923      	ldr	r1, [pc, #140]	; (80122d0 <tcp_receive+0xf28>)
 8012242:	4824      	ldr	r0, [pc, #144]	; (80122d4 <tcp_receive+0xf2c>)
 8012244:	f006 fca4 	bl	8018b90 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012248:	e011      	b.n	801226e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012252:	2b00      	cmp	r3, #0
 8012254:	f47f aea4 	bne.w	8011fa0 <tcp_receive+0xbf8>
 8012258:	e00a      	b.n	8012270 <tcp_receive+0xec8>
                break;
 801225a:	bf00      	nop
 801225c:	e008      	b.n	8012270 <tcp_receive+0xec8>
                break;
 801225e:	bf00      	nop
 8012260:	e006      	b.n	8012270 <tcp_receive+0xec8>
                  break;
 8012262:	bf00      	nop
 8012264:	e004      	b.n	8012270 <tcp_receive+0xec8>
                  break;
 8012266:	bf00      	nop
 8012268:	e002      	b.n	8012270 <tcp_receive+0xec8>
                  break;
 801226a:	bf00      	nop
 801226c:	e000      	b.n	8012270 <tcp_receive+0xec8>
                break;
 801226e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f001 fe8f 	bl	8013f94 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012276:	e003      	b.n	8012280 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f001 fe8b 	bl	8013f94 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801227e:	e01a      	b.n	80122b6 <tcp_receive+0xf0e>
 8012280:	e019      	b.n	80122b6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012282:	4b0f      	ldr	r3, [pc, #60]	; (80122c0 <tcp_receive+0xf18>)
 8012284:	681a      	ldr	r2, [r3, #0]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801228a:	1ad3      	subs	r3, r2, r3
 801228c:	2b00      	cmp	r3, #0
 801228e:	db0a      	blt.n	80122a6 <tcp_receive+0xefe>
 8012290:	4b0b      	ldr	r3, [pc, #44]	; (80122c0 <tcp_receive+0xf18>)
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012298:	6879      	ldr	r1, [r7, #4]
 801229a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801229c:	440b      	add	r3, r1
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	3301      	adds	r3, #1
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	dd07      	ble.n	80122b6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	8b5b      	ldrh	r3, [r3, #26]
 80122aa:	f043 0302 	orr.w	r3, r3, #2
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80122b4:	e7ff      	b.n	80122b6 <tcp_receive+0xf0e>
 80122b6:	bf00      	nop
 80122b8:	3750      	adds	r7, #80	; 0x50
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bdb0      	pop	{r4, r5, r7, pc}
 80122be:	bf00      	nop
 80122c0:	20077970 	.word	0x20077970
 80122c4:	20077950 	.word	0x20077950
 80122c8:	2007797a 	.word	0x2007797a
 80122cc:	0801e9c0 	.word	0x0801e9c0
 80122d0:	0801ed68 	.word	0x0801ed68
 80122d4:	0801ea0c 	.word	0x0801ea0c

080122d8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80122d8:	b480      	push	{r7}
 80122da:	b083      	sub	sp, #12
 80122dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80122de:	4b15      	ldr	r3, [pc, #84]	; (8012334 <tcp_get_next_optbyte+0x5c>)
 80122e0:	881b      	ldrh	r3, [r3, #0]
 80122e2:	1c5a      	adds	r2, r3, #1
 80122e4:	b291      	uxth	r1, r2
 80122e6:	4a13      	ldr	r2, [pc, #76]	; (8012334 <tcp_get_next_optbyte+0x5c>)
 80122e8:	8011      	strh	r1, [r2, #0]
 80122ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80122ec:	4b12      	ldr	r3, [pc, #72]	; (8012338 <tcp_get_next_optbyte+0x60>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d004      	beq.n	80122fe <tcp_get_next_optbyte+0x26>
 80122f4:	4b11      	ldr	r3, [pc, #68]	; (801233c <tcp_get_next_optbyte+0x64>)
 80122f6:	881b      	ldrh	r3, [r3, #0]
 80122f8:	88fa      	ldrh	r2, [r7, #6]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d208      	bcs.n	8012310 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80122fe:	4b10      	ldr	r3, [pc, #64]	; (8012340 <tcp_get_next_optbyte+0x68>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	3314      	adds	r3, #20
 8012304:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012306:	88fb      	ldrh	r3, [r7, #6]
 8012308:	683a      	ldr	r2, [r7, #0]
 801230a:	4413      	add	r3, r2
 801230c:	781b      	ldrb	r3, [r3, #0]
 801230e:	e00b      	b.n	8012328 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012310:	88fb      	ldrh	r3, [r7, #6]
 8012312:	b2da      	uxtb	r2, r3
 8012314:	4b09      	ldr	r3, [pc, #36]	; (801233c <tcp_get_next_optbyte+0x64>)
 8012316:	881b      	ldrh	r3, [r3, #0]
 8012318:	b2db      	uxtb	r3, r3
 801231a:	1ad3      	subs	r3, r2, r3
 801231c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801231e:	4b06      	ldr	r3, [pc, #24]	; (8012338 <tcp_get_next_optbyte+0x60>)
 8012320:	681a      	ldr	r2, [r3, #0]
 8012322:	797b      	ldrb	r3, [r7, #5]
 8012324:	4413      	add	r3, r2
 8012326:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012328:	4618      	mov	r0, r3
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr
 8012334:	2007796c 	.word	0x2007796c
 8012338:	20077968 	.word	0x20077968
 801233c:	20077966 	.word	0x20077966
 8012340:	20077960 	.word	0x20077960

08012344 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b084      	sub	sp, #16
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d106      	bne.n	8012360 <tcp_parseopt+0x1c>
 8012352:	4b32      	ldr	r3, [pc, #200]	; (801241c <tcp_parseopt+0xd8>)
 8012354:	f240 727d 	movw	r2, #1917	; 0x77d
 8012358:	4931      	ldr	r1, [pc, #196]	; (8012420 <tcp_parseopt+0xdc>)
 801235a:	4832      	ldr	r0, [pc, #200]	; (8012424 <tcp_parseopt+0xe0>)
 801235c:	f006 fc18 	bl	8018b90 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012360:	4b31      	ldr	r3, [pc, #196]	; (8012428 <tcp_parseopt+0xe4>)
 8012362:	881b      	ldrh	r3, [r3, #0]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d055      	beq.n	8012414 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012368:	4b30      	ldr	r3, [pc, #192]	; (801242c <tcp_parseopt+0xe8>)
 801236a:	2200      	movs	r2, #0
 801236c:	801a      	strh	r2, [r3, #0]
 801236e:	e045      	b.n	80123fc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012370:	f7ff ffb2 	bl	80122d8 <tcp_get_next_optbyte>
 8012374:	4603      	mov	r3, r0
 8012376:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012378:	7bfb      	ldrb	r3, [r7, #15]
 801237a:	2b02      	cmp	r3, #2
 801237c:	d006      	beq.n	801238c <tcp_parseopt+0x48>
 801237e:	2b02      	cmp	r3, #2
 8012380:	dc2b      	bgt.n	80123da <tcp_parseopt+0x96>
 8012382:	2b00      	cmp	r3, #0
 8012384:	d041      	beq.n	801240a <tcp_parseopt+0xc6>
 8012386:	2b01      	cmp	r3, #1
 8012388:	d127      	bne.n	80123da <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801238a:	e037      	b.n	80123fc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801238c:	f7ff ffa4 	bl	80122d8 <tcp_get_next_optbyte>
 8012390:	4603      	mov	r3, r0
 8012392:	2b04      	cmp	r3, #4
 8012394:	d13b      	bne.n	801240e <tcp_parseopt+0xca>
 8012396:	4b25      	ldr	r3, [pc, #148]	; (801242c <tcp_parseopt+0xe8>)
 8012398:	881b      	ldrh	r3, [r3, #0]
 801239a:	3301      	adds	r3, #1
 801239c:	4a22      	ldr	r2, [pc, #136]	; (8012428 <tcp_parseopt+0xe4>)
 801239e:	8812      	ldrh	r2, [r2, #0]
 80123a0:	4293      	cmp	r3, r2
 80123a2:	da34      	bge.n	801240e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80123a4:	f7ff ff98 	bl	80122d8 <tcp_get_next_optbyte>
 80123a8:	4603      	mov	r3, r0
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	021b      	lsls	r3, r3, #8
 80123ae:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80123b0:	f7ff ff92 	bl	80122d8 <tcp_get_next_optbyte>
 80123b4:	4603      	mov	r3, r0
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	89bb      	ldrh	r3, [r7, #12]
 80123ba:	4313      	orrs	r3, r2
 80123bc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80123be:	89bb      	ldrh	r3, [r7, #12]
 80123c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123c4:	d804      	bhi.n	80123d0 <tcp_parseopt+0x8c>
 80123c6:	89bb      	ldrh	r3, [r7, #12]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <tcp_parseopt+0x8c>
 80123cc:	89ba      	ldrh	r2, [r7, #12]
 80123ce:	e001      	b.n	80123d4 <tcp_parseopt+0x90>
 80123d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80123d8:	e010      	b.n	80123fc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80123da:	f7ff ff7d 	bl	80122d8 <tcp_get_next_optbyte>
 80123de:	4603      	mov	r3, r0
 80123e0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80123e2:	7afb      	ldrb	r3, [r7, #11]
 80123e4:	2b01      	cmp	r3, #1
 80123e6:	d914      	bls.n	8012412 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80123e8:	7afb      	ldrb	r3, [r7, #11]
 80123ea:	b29a      	uxth	r2, r3
 80123ec:	4b0f      	ldr	r3, [pc, #60]	; (801242c <tcp_parseopt+0xe8>)
 80123ee:	881b      	ldrh	r3, [r3, #0]
 80123f0:	4413      	add	r3, r2
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	3b02      	subs	r3, #2
 80123f6:	b29a      	uxth	r2, r3
 80123f8:	4b0c      	ldr	r3, [pc, #48]	; (801242c <tcp_parseopt+0xe8>)
 80123fa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80123fc:	4b0b      	ldr	r3, [pc, #44]	; (801242c <tcp_parseopt+0xe8>)
 80123fe:	881a      	ldrh	r2, [r3, #0]
 8012400:	4b09      	ldr	r3, [pc, #36]	; (8012428 <tcp_parseopt+0xe4>)
 8012402:	881b      	ldrh	r3, [r3, #0]
 8012404:	429a      	cmp	r2, r3
 8012406:	d3b3      	bcc.n	8012370 <tcp_parseopt+0x2c>
 8012408:	e004      	b.n	8012414 <tcp_parseopt+0xd0>
          return;
 801240a:	bf00      	nop
 801240c:	e002      	b.n	8012414 <tcp_parseopt+0xd0>
            return;
 801240e:	bf00      	nop
 8012410:	e000      	b.n	8012414 <tcp_parseopt+0xd0>
            return;
 8012412:	bf00      	nop
      }
    }
  }
}
 8012414:	3710      	adds	r7, #16
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	0801e9c0 	.word	0x0801e9c0
 8012420:	0801ee24 	.word	0x0801ee24
 8012424:	0801ea0c 	.word	0x0801ea0c
 8012428:	20077964 	.word	0x20077964
 801242c:	2007796c 	.word	0x2007796c

08012430 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012430:	b480      	push	{r7}
 8012432:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012434:	4b05      	ldr	r3, [pc, #20]	; (801244c <tcp_trigger_input_pcb_close+0x1c>)
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	f043 0310 	orr.w	r3, r3, #16
 801243c:	b2da      	uxtb	r2, r3
 801243e:	4b03      	ldr	r3, [pc, #12]	; (801244c <tcp_trigger_input_pcb_close+0x1c>)
 8012440:	701a      	strb	r2, [r3, #0]
}
 8012442:	bf00      	nop
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr
 801244c:	2007797d 	.word	0x2007797d

08012450 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b084      	sub	sp, #16
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d00a      	beq.n	8012478 <tcp_route+0x28>
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	7a1b      	ldrb	r3, [r3, #8]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d006      	beq.n	8012478 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	7a1b      	ldrb	r3, [r3, #8]
 801246e:	4618      	mov	r0, r3
 8012470:	f7fb f888 	bl	800d584 <netif_get_by_index>
 8012474:	4603      	mov	r3, r0
 8012476:	e003      	b.n	8012480 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f003 fecf 	bl	801621c <ip4_route>
 801247e:	4603      	mov	r3, r0
  }
}
 8012480:	4618      	mov	r0, r3
 8012482:	3710      	adds	r7, #16
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}

08012488 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012488:	b590      	push	{r4, r7, lr}
 801248a:	b087      	sub	sp, #28
 801248c:	af00      	add	r7, sp, #0
 801248e:	60f8      	str	r0, [r7, #12]
 8012490:	60b9      	str	r1, [r7, #8]
 8012492:	603b      	str	r3, [r7, #0]
 8012494:	4613      	mov	r3, r2
 8012496:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d105      	bne.n	80124aa <tcp_create_segment+0x22>
 801249e:	4b44      	ldr	r3, [pc, #272]	; (80125b0 <tcp_create_segment+0x128>)
 80124a0:	22a3      	movs	r2, #163	; 0xa3
 80124a2:	4944      	ldr	r1, [pc, #272]	; (80125b4 <tcp_create_segment+0x12c>)
 80124a4:	4844      	ldr	r0, [pc, #272]	; (80125b8 <tcp_create_segment+0x130>)
 80124a6:	f006 fb73 	bl	8018b90 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d105      	bne.n	80124bc <tcp_create_segment+0x34>
 80124b0:	4b3f      	ldr	r3, [pc, #252]	; (80125b0 <tcp_create_segment+0x128>)
 80124b2:	22a4      	movs	r2, #164	; 0xa4
 80124b4:	4941      	ldr	r1, [pc, #260]	; (80125bc <tcp_create_segment+0x134>)
 80124b6:	4840      	ldr	r0, [pc, #256]	; (80125b8 <tcp_create_segment+0x130>)
 80124b8:	f006 fb6a 	bl	8018b90 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80124bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80124c0:	009b      	lsls	r3, r3, #2
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	f003 0304 	and.w	r3, r3, #4
 80124c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80124ca:	2003      	movs	r0, #3
 80124cc:	f7fa fcce 	bl	800ce6c <memp_malloc>
 80124d0:	6138      	str	r0, [r7, #16]
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d104      	bne.n	80124e2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80124d8:	68b8      	ldr	r0, [r7, #8]
 80124da:	f7fb fbe1 	bl	800dca0 <pbuf_free>
    return NULL;
 80124de:	2300      	movs	r3, #0
 80124e0:	e061      	b.n	80125a6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80124e8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	2200      	movs	r2, #0
 80124ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	68ba      	ldr	r2, [r7, #8]
 80124f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	891a      	ldrh	r2, [r3, #8]
 80124fa:	7dfb      	ldrb	r3, [r7, #23]
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	429a      	cmp	r2, r3
 8012500:	d205      	bcs.n	801250e <tcp_create_segment+0x86>
 8012502:	4b2b      	ldr	r3, [pc, #172]	; (80125b0 <tcp_create_segment+0x128>)
 8012504:	22b0      	movs	r2, #176	; 0xb0
 8012506:	492e      	ldr	r1, [pc, #184]	; (80125c0 <tcp_create_segment+0x138>)
 8012508:	482b      	ldr	r0, [pc, #172]	; (80125b8 <tcp_create_segment+0x130>)
 801250a:	f006 fb41 	bl	8018b90 <iprintf>
  seg->len = p->tot_len - optlen;
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	891a      	ldrh	r2, [r3, #8]
 8012512:	7dfb      	ldrb	r3, [r7, #23]
 8012514:	b29b      	uxth	r3, r3
 8012516:	1ad3      	subs	r3, r2, r3
 8012518:	b29a      	uxth	r2, r3
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801251e:	2114      	movs	r1, #20
 8012520:	68b8      	ldr	r0, [r7, #8]
 8012522:	f7fb fb27 	bl	800db74 <pbuf_add_header>
 8012526:	4603      	mov	r3, r0
 8012528:	2b00      	cmp	r3, #0
 801252a:	d004      	beq.n	8012536 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801252c:	6938      	ldr	r0, [r7, #16]
 801252e:	f7fd f800 	bl	800f532 <tcp_seg_free>
    return NULL;
 8012532:	2300      	movs	r3, #0
 8012534:	e037      	b.n	80125a6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	685a      	ldr	r2, [r3, #4]
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	8ada      	ldrh	r2, [r3, #22]
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	68dc      	ldr	r4, [r3, #12]
 8012548:	4610      	mov	r0, r2
 801254a:	f7f9 ffb7 	bl	800c4bc <lwip_htons>
 801254e:	4603      	mov	r3, r0
 8012550:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	8b1a      	ldrh	r2, [r3, #24]
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	68dc      	ldr	r4, [r3, #12]
 801255a:	4610      	mov	r0, r2
 801255c:	f7f9 ffae 	bl	800c4bc <lwip_htons>
 8012560:	4603      	mov	r3, r0
 8012562:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	68dc      	ldr	r4, [r3, #12]
 8012568:	6838      	ldr	r0, [r7, #0]
 801256a:	f7f9 ffbc 	bl	800c4e6 <lwip_htonl>
 801256e:	4603      	mov	r3, r0
 8012570:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012572:	7dfb      	ldrb	r3, [r7, #23]
 8012574:	089b      	lsrs	r3, r3, #2
 8012576:	b2db      	uxtb	r3, r3
 8012578:	b29b      	uxth	r3, r3
 801257a:	3305      	adds	r3, #5
 801257c:	b29b      	uxth	r3, r3
 801257e:	031b      	lsls	r3, r3, #12
 8012580:	b29a      	uxth	r2, r3
 8012582:	79fb      	ldrb	r3, [r7, #7]
 8012584:	b29b      	uxth	r3, r3
 8012586:	4313      	orrs	r3, r2
 8012588:	b29a      	uxth	r2, r3
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	68dc      	ldr	r4, [r3, #12]
 801258e:	4610      	mov	r0, r2
 8012590:	f7f9 ff94 	bl	800c4bc <lwip_htons>
 8012594:	4603      	mov	r3, r0
 8012596:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	68db      	ldr	r3, [r3, #12]
 801259c:	2200      	movs	r2, #0
 801259e:	749a      	strb	r2, [r3, #18]
 80125a0:	2200      	movs	r2, #0
 80125a2:	74da      	strb	r2, [r3, #19]
  return seg;
 80125a4:	693b      	ldr	r3, [r7, #16]
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	371c      	adds	r7, #28
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd90      	pop	{r4, r7, pc}
 80125ae:	bf00      	nop
 80125b0:	0801ee40 	.word	0x0801ee40
 80125b4:	0801ee74 	.word	0x0801ee74
 80125b8:	0801ee94 	.word	0x0801ee94
 80125bc:	0801eebc 	.word	0x0801eebc
 80125c0:	0801eee0 	.word	0x0801eee0

080125c4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b086      	sub	sp, #24
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	607b      	str	r3, [r7, #4]
 80125cc:	4603      	mov	r3, r0
 80125ce:	73fb      	strb	r3, [r7, #15]
 80125d0:	460b      	mov	r3, r1
 80125d2:	81bb      	strh	r3, [r7, #12]
 80125d4:	4613      	mov	r3, r2
 80125d6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80125d8:	89bb      	ldrh	r3, [r7, #12]
 80125da:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d105      	bne.n	80125ee <tcp_pbuf_prealloc+0x2a>
 80125e2:	4b30      	ldr	r3, [pc, #192]	; (80126a4 <tcp_pbuf_prealloc+0xe0>)
 80125e4:	22e8      	movs	r2, #232	; 0xe8
 80125e6:	4930      	ldr	r1, [pc, #192]	; (80126a8 <tcp_pbuf_prealloc+0xe4>)
 80125e8:	4830      	ldr	r0, [pc, #192]	; (80126ac <tcp_pbuf_prealloc+0xe8>)
 80125ea:	f006 fad1 	bl	8018b90 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80125ee:	6a3b      	ldr	r3, [r7, #32]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d105      	bne.n	8012600 <tcp_pbuf_prealloc+0x3c>
 80125f4:	4b2b      	ldr	r3, [pc, #172]	; (80126a4 <tcp_pbuf_prealloc+0xe0>)
 80125f6:	22e9      	movs	r2, #233	; 0xe9
 80125f8:	492d      	ldr	r1, [pc, #180]	; (80126b0 <tcp_pbuf_prealloc+0xec>)
 80125fa:	482c      	ldr	r0, [pc, #176]	; (80126ac <tcp_pbuf_prealloc+0xe8>)
 80125fc:	f006 fac8 	bl	8018b90 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012600:	89ba      	ldrh	r2, [r7, #12]
 8012602:	897b      	ldrh	r3, [r7, #10]
 8012604:	429a      	cmp	r2, r3
 8012606:	d221      	bcs.n	801264c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012608:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801260c:	f003 0302 	and.w	r3, r3, #2
 8012610:	2b00      	cmp	r3, #0
 8012612:	d111      	bne.n	8012638 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012614:	6a3b      	ldr	r3, [r7, #32]
 8012616:	8b5b      	ldrh	r3, [r3, #26]
 8012618:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801261c:	2b00      	cmp	r3, #0
 801261e:	d115      	bne.n	801264c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012624:	2b00      	cmp	r3, #0
 8012626:	d007      	beq.n	8012638 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012628:	6a3b      	ldr	r3, [r7, #32]
 801262a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801262c:	2b00      	cmp	r3, #0
 801262e:	d103      	bne.n	8012638 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012630:	6a3b      	ldr	r3, [r7, #32]
 8012632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012634:	2b00      	cmp	r3, #0
 8012636:	d009      	beq.n	801264c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012638:	89bb      	ldrh	r3, [r7, #12]
 801263a:	f203 2303 	addw	r3, r3, #515	; 0x203
 801263e:	f023 0203 	bic.w	r2, r3, #3
 8012642:	897b      	ldrh	r3, [r7, #10]
 8012644:	4293      	cmp	r3, r2
 8012646:	bf28      	it	cs
 8012648:	4613      	movcs	r3, r2
 801264a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801264c:	8af9      	ldrh	r1, [r7, #22]
 801264e:	7bfb      	ldrb	r3, [r7, #15]
 8012650:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012654:	4618      	mov	r0, r3
 8012656:	f7fb f83f 	bl	800d6d8 <pbuf_alloc>
 801265a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d101      	bne.n	8012666 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012662:	2300      	movs	r3, #0
 8012664:	e019      	b.n	801269a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012666:	693b      	ldr	r3, [r7, #16]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d006      	beq.n	801267c <tcp_pbuf_prealloc+0xb8>
 801266e:	4b0d      	ldr	r3, [pc, #52]	; (80126a4 <tcp_pbuf_prealloc+0xe0>)
 8012670:	f240 120b 	movw	r2, #267	; 0x10b
 8012674:	490f      	ldr	r1, [pc, #60]	; (80126b4 <tcp_pbuf_prealloc+0xf0>)
 8012676:	480d      	ldr	r0, [pc, #52]	; (80126ac <tcp_pbuf_prealloc+0xe8>)
 8012678:	f006 fa8a 	bl	8018b90 <iprintf>
  *oversize = p->len - length;
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	895a      	ldrh	r2, [r3, #10]
 8012680:	89bb      	ldrh	r3, [r7, #12]
 8012682:	1ad3      	subs	r3, r2, r3
 8012684:	b29a      	uxth	r2, r3
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	89ba      	ldrh	r2, [r7, #12]
 801268e:	811a      	strh	r2, [r3, #8]
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	891a      	ldrh	r2, [r3, #8]
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	815a      	strh	r2, [r3, #10]
  return p;
 8012698:	693b      	ldr	r3, [r7, #16]
}
 801269a:	4618      	mov	r0, r3
 801269c:	3718      	adds	r7, #24
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}
 80126a2:	bf00      	nop
 80126a4:	0801ee40 	.word	0x0801ee40
 80126a8:	0801eef8 	.word	0x0801eef8
 80126ac:	0801ee94 	.word	0x0801ee94
 80126b0:	0801ef1c 	.word	0x0801ef1c
 80126b4:	0801ef3c 	.word	0x0801ef3c

080126b8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	460b      	mov	r3, r1
 80126c2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d106      	bne.n	80126d8 <tcp_write_checks+0x20>
 80126ca:	4b34      	ldr	r3, [pc, #208]	; (801279c <tcp_write_checks+0xe4>)
 80126cc:	f240 1233 	movw	r2, #307	; 0x133
 80126d0:	4933      	ldr	r1, [pc, #204]	; (80127a0 <tcp_write_checks+0xe8>)
 80126d2:	4834      	ldr	r0, [pc, #208]	; (80127a4 <tcp_write_checks+0xec>)
 80126d4:	f006 fa5c 	bl	8018b90 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	7d1b      	ldrb	r3, [r3, #20]
 80126dc:	2b04      	cmp	r3, #4
 80126de:	d00e      	beq.n	80126fe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80126e4:	2b07      	cmp	r3, #7
 80126e6:	d00a      	beq.n	80126fe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80126ec:	2b02      	cmp	r3, #2
 80126ee:	d006      	beq.n	80126fe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80126f4:	2b03      	cmp	r3, #3
 80126f6:	d002      	beq.n	80126fe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80126f8:	f06f 030a 	mvn.w	r3, #10
 80126fc:	e04a      	b.n	8012794 <tcp_write_checks+0xdc>
  } else if (len == 0) {
 80126fe:	887b      	ldrh	r3, [r7, #2]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d101      	bne.n	8012708 <tcp_write_checks+0x50>
    return ERR_OK;
 8012704:	2300      	movs	r3, #0
 8012706:	e045      	b.n	8012794 <tcp_write_checks+0xdc>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801270e:	887a      	ldrh	r2, [r7, #2]
 8012710:	429a      	cmp	r2, r3
 8012712:	d909      	bls.n	8012728 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	8b5b      	ldrh	r3, [r3, #26]
 8012718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801271c:	b29a      	uxth	r2, r3
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012722:	f04f 33ff 	mov.w	r3, #4294967295
 8012726:	e035      	b.n	8012794 <tcp_write_checks+0xdc>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801272e:	f242 720f 	movw	r2, #9999	; 0x270f
 8012732:	4293      	cmp	r3, r2
 8012734:	d909      	bls.n	801274a <tcp_write_checks+0x92>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	8b5b      	ldrh	r3, [r3, #26]
 801273a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801273e:	b29a      	uxth	r2, r3
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012744:	f04f 33ff 	mov.w	r3, #4294967295
 8012748:	e024      	b.n	8012794 <tcp_write_checks+0xdc>
  }
  if (pcb->snd_queuelen != 0) {
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012750:	2b00      	cmp	r3, #0
 8012752:	d00f      	beq.n	8012774 <tcp_write_checks+0xbc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012758:	2b00      	cmp	r3, #0
 801275a:	d11a      	bne.n	8012792 <tcp_write_checks+0xda>
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012760:	2b00      	cmp	r3, #0
 8012762:	d116      	bne.n	8012792 <tcp_write_checks+0xda>
 8012764:	4b0d      	ldr	r3, [pc, #52]	; (801279c <tcp_write_checks+0xe4>)
 8012766:	f240 1255 	movw	r2, #341	; 0x155
 801276a:	490f      	ldr	r1, [pc, #60]	; (80127a8 <tcp_write_checks+0xf0>)
 801276c:	480d      	ldr	r0, [pc, #52]	; (80127a4 <tcp_write_checks+0xec>)
 801276e:	f006 fa0f 	bl	8018b90 <iprintf>
 8012772:	e00e      	b.n	8012792 <tcp_write_checks+0xda>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012778:	2b00      	cmp	r3, #0
 801277a:	d103      	bne.n	8012784 <tcp_write_checks+0xcc>
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012780:	2b00      	cmp	r3, #0
 8012782:	d006      	beq.n	8012792 <tcp_write_checks+0xda>
 8012784:	4b05      	ldr	r3, [pc, #20]	; (801279c <tcp_write_checks+0xe4>)
 8012786:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801278a:	4908      	ldr	r1, [pc, #32]	; (80127ac <tcp_write_checks+0xf4>)
 801278c:	4805      	ldr	r0, [pc, #20]	; (80127a4 <tcp_write_checks+0xec>)
 801278e:	f006 f9ff 	bl	8018b90 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012792:	2300      	movs	r3, #0
}
 8012794:	4618      	mov	r0, r3
 8012796:	3708      	adds	r7, #8
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}
 801279c:	0801ee40 	.word	0x0801ee40
 80127a0:	0801ef50 	.word	0x0801ef50
 80127a4:	0801ee94 	.word	0x0801ee94
 80127a8:	0801ef70 	.word	0x0801ef70
 80127ac:	0801efac 	.word	0x0801efac

080127b0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80127b0:	b590      	push	{r4, r7, lr}
 80127b2:	b09b      	sub	sp, #108	; 0x6c
 80127b4:	af04      	add	r7, sp, #16
 80127b6:	60f8      	str	r0, [r7, #12]
 80127b8:	60b9      	str	r1, [r7, #8]
 80127ba:	4611      	mov	r1, r2
 80127bc:	461a      	mov	r2, r3
 80127be:	460b      	mov	r3, r1
 80127c0:	80fb      	strh	r3, [r7, #6]
 80127c2:	4613      	mov	r3, r2
 80127c4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80127c6:	2300      	movs	r3, #0
 80127c8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80127ca:	2300      	movs	r3, #0
 80127cc:	653b      	str	r3, [r7, #80]	; 0x50
 80127ce:	2300      	movs	r3, #0
 80127d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80127d2:	2300      	movs	r3, #0
 80127d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80127d6:	2300      	movs	r3, #0
 80127d8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80127da:	2300      	movs	r3, #0
 80127dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80127e0:	2300      	movs	r3, #0
 80127e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80127e6:	2300      	movs	r3, #0
 80127e8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80127ea:	2300      	movs	r3, #0
 80127ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80127ee:	2300      	movs	r3, #0
 80127f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d109      	bne.n	801280c <tcp_write+0x5c>
 80127f8:	4ba4      	ldr	r3, [pc, #656]	; (8012a8c <tcp_write+0x2dc>)
 80127fa:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80127fe:	49a4      	ldr	r1, [pc, #656]	; (8012a90 <tcp_write+0x2e0>)
 8012800:	48a4      	ldr	r0, [pc, #656]	; (8012a94 <tcp_write+0x2e4>)
 8012802:	f006 f9c5 	bl	8018b90 <iprintf>
 8012806:	f06f 030f 	mvn.w	r3, #15
 801280a:	e32c      	b.n	8012e66 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012812:	085b      	lsrs	r3, r3, #1
 8012814:	b29a      	uxth	r2, r3
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801281a:	4293      	cmp	r3, r2
 801281c:	bf28      	it	cs
 801281e:	4613      	movcs	r3, r2
 8012820:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012824:	2b00      	cmp	r3, #0
 8012826:	d102      	bne.n	801282e <tcp_write+0x7e>
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801282c:	e000      	b.n	8012830 <tcp_write+0x80>
 801282e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012830:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d109      	bne.n	801284c <tcp_write+0x9c>
 8012838:	4b94      	ldr	r3, [pc, #592]	; (8012a8c <tcp_write+0x2dc>)
 801283a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801283e:	4996      	ldr	r1, [pc, #600]	; (8012a98 <tcp_write+0x2e8>)
 8012840:	4894      	ldr	r0, [pc, #592]	; (8012a94 <tcp_write+0x2e4>)
 8012842:	f006 f9a5 	bl	8018b90 <iprintf>
 8012846:	f06f 030f 	mvn.w	r3, #15
 801284a:	e30c      	b.n	8012e66 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801284c:	88fb      	ldrh	r3, [r7, #6]
 801284e:	4619      	mov	r1, r3
 8012850:	68f8      	ldr	r0, [r7, #12]
 8012852:	f7ff ff31 	bl	80126b8 <tcp_write_checks>
 8012856:	4603      	mov	r3, r0
 8012858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801285c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012860:	2b00      	cmp	r3, #0
 8012862:	d002      	beq.n	801286a <tcp_write+0xba>
    return err;
 8012864:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012868:	e2fd      	b.n	8012e66 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012870:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012874:	2300      	movs	r3, #0
 8012876:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801287e:	2b00      	cmp	r3, #0
 8012880:	f000 80f6 	beq.w	8012a70 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012888:	653b      	str	r3, [r7, #80]	; 0x50
 801288a:	e002      	b.n	8012892 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801288c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d1f8      	bne.n	801288c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801289a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801289c:	7a9b      	ldrb	r3, [r3, #10]
 801289e:	009b      	lsls	r3, r3, #2
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	f003 0304 	and.w	r3, r3, #4
 80128a6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80128a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80128aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128ac:	891b      	ldrh	r3, [r3, #8]
 80128ae:	4619      	mov	r1, r3
 80128b0:	8c3b      	ldrh	r3, [r7, #32]
 80128b2:	440b      	add	r3, r1
 80128b4:	429a      	cmp	r2, r3
 80128b6:	da06      	bge.n	80128c6 <tcp_write+0x116>
 80128b8:	4b74      	ldr	r3, [pc, #464]	; (8012a8c <tcp_write+0x2dc>)
 80128ba:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80128be:	4977      	ldr	r1, [pc, #476]	; (8012a9c <tcp_write+0x2ec>)
 80128c0:	4874      	ldr	r0, [pc, #464]	; (8012a94 <tcp_write+0x2e4>)
 80128c2:	f006 f965 	bl	8018b90 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80128c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128c8:	891a      	ldrh	r2, [r3, #8]
 80128ca:	8c3b      	ldrh	r3, [r7, #32]
 80128cc:	4413      	add	r3, r2
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80128d2:	1ad3      	subs	r3, r2, r3
 80128d4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80128dc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80128de:	8a7b      	ldrh	r3, [r7, #18]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d026      	beq.n	8012932 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80128e4:	8a7b      	ldrh	r3, [r7, #18]
 80128e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d206      	bcs.n	80128fa <tcp_write+0x14a>
 80128ec:	4b67      	ldr	r3, [pc, #412]	; (8012a8c <tcp_write+0x2dc>)
 80128ee:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80128f2:	496b      	ldr	r1, [pc, #428]	; (8012aa0 <tcp_write+0x2f0>)
 80128f4:	4867      	ldr	r0, [pc, #412]	; (8012a94 <tcp_write+0x2e4>)
 80128f6:	f006 f94b 	bl	8018b90 <iprintf>
      seg = last_unsent;
 80128fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128fc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80128fe:	8a7b      	ldrh	r3, [r7, #18]
 8012900:	88fa      	ldrh	r2, [r7, #6]
 8012902:	4293      	cmp	r3, r2
 8012904:	bf28      	it	cs
 8012906:	4613      	movcs	r3, r2
 8012908:	b29b      	uxth	r3, r3
 801290a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801290c:	4293      	cmp	r3, r2
 801290e:	bf28      	it	cs
 8012910:	4613      	movcs	r3, r2
 8012912:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012914:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012918:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801291a:	4413      	add	r3, r2
 801291c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012920:	8a7a      	ldrh	r2, [r7, #18]
 8012922:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012924:	1ad3      	subs	r3, r2, r3
 8012926:	b29b      	uxth	r3, r3
 8012928:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801292a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801292c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801292e:	1ad3      	subs	r3, r2, r3
 8012930:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012932:	8a7b      	ldrh	r3, [r7, #18]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d00b      	beq.n	8012950 <tcp_write+0x1a0>
 8012938:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801293c:	88fb      	ldrh	r3, [r7, #6]
 801293e:	429a      	cmp	r2, r3
 8012940:	d006      	beq.n	8012950 <tcp_write+0x1a0>
 8012942:	4b52      	ldr	r3, [pc, #328]	; (8012a8c <tcp_write+0x2dc>)
 8012944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012948:	4956      	ldr	r1, [pc, #344]	; (8012aa4 <tcp_write+0x2f4>)
 801294a:	4852      	ldr	r0, [pc, #328]	; (8012a94 <tcp_write+0x2e4>)
 801294c:	f006 f920 	bl	8018b90 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012950:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012954:	88fb      	ldrh	r3, [r7, #6]
 8012956:	429a      	cmp	r2, r3
 8012958:	f080 8169 	bcs.w	8012c2e <tcp_write+0x47e>
 801295c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801295e:	2b00      	cmp	r3, #0
 8012960:	f000 8165 	beq.w	8012c2e <tcp_write+0x47e>
 8012964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012966:	891b      	ldrh	r3, [r3, #8]
 8012968:	2b00      	cmp	r3, #0
 801296a:	f000 8160 	beq.w	8012c2e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801296e:	88fa      	ldrh	r2, [r7, #6]
 8012970:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012974:	1ad2      	subs	r2, r2, r3
 8012976:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012978:	4293      	cmp	r3, r2
 801297a:	bfa8      	it	ge
 801297c:	4613      	movge	r3, r2
 801297e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012982:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012984:	797b      	ldrb	r3, [r7, #5]
 8012986:	f003 0301 	and.w	r3, r3, #1
 801298a:	2b00      	cmp	r3, #0
 801298c:	d027      	beq.n	80129de <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801298e:	f107 0012 	add.w	r0, r7, #18
 8012992:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012994:	8bf9      	ldrh	r1, [r7, #30]
 8012996:	2301      	movs	r3, #1
 8012998:	9302      	str	r3, [sp, #8]
 801299a:	797b      	ldrb	r3, [r7, #5]
 801299c:	9301      	str	r3, [sp, #4]
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	9300      	str	r3, [sp, #0]
 80129a2:	4603      	mov	r3, r0
 80129a4:	2000      	movs	r0, #0
 80129a6:	f7ff fe0d 	bl	80125c4 <tcp_pbuf_prealloc>
 80129aa:	6578      	str	r0, [r7, #84]	; 0x54
 80129ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	f000 8227 	beq.w	8012e02 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80129b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129b6:	6858      	ldr	r0, [r3, #4]
 80129b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80129bc:	68ba      	ldr	r2, [r7, #8]
 80129be:	4413      	add	r3, r2
 80129c0:	8bfa      	ldrh	r2, [r7, #30]
 80129c2:	4619      	mov	r1, r3
 80129c4:	f006 fa6b 	bl	8018e9e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80129c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80129ca:	f7fb f9f7 	bl	800ddbc <pbuf_clen>
 80129ce:	4603      	mov	r3, r0
 80129d0:	461a      	mov	r2, r3
 80129d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80129d6:	4413      	add	r3, r2
 80129d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80129dc:	e041      	b.n	8012a62 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80129de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129e0:	685b      	ldr	r3, [r3, #4]
 80129e2:	637b      	str	r3, [r7, #52]	; 0x34
 80129e4:	e002      	b.n	80129ec <tcp_write+0x23c>
 80129e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	637b      	str	r3, [r7, #52]	; 0x34
 80129ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d1f8      	bne.n	80129e6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80129f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129f6:	7b1b      	ldrb	r3, [r3, #12]
 80129f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d115      	bne.n	8012a2c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a06:	8952      	ldrh	r2, [r2, #10]
 8012a08:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012a0a:	68ba      	ldr	r2, [r7, #8]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d10d      	bne.n	8012a2c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012a10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d006      	beq.n	8012a26 <tcp_write+0x276>
 8012a18:	4b1c      	ldr	r3, [pc, #112]	; (8012a8c <tcp_write+0x2dc>)
 8012a1a:	f240 2231 	movw	r2, #561	; 0x231
 8012a1e:	4922      	ldr	r1, [pc, #136]	; (8012aa8 <tcp_write+0x2f8>)
 8012a20:	481c      	ldr	r0, [pc, #112]	; (8012a94 <tcp_write+0x2e4>)
 8012a22:	f006 f8b5 	bl	8018b90 <iprintf>
          extendlen = seglen;
 8012a26:	8bfb      	ldrh	r3, [r7, #30]
 8012a28:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012a2a:	e01a      	b.n	8012a62 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012a2c:	8bfb      	ldrh	r3, [r7, #30]
 8012a2e:	2201      	movs	r2, #1
 8012a30:	4619      	mov	r1, r3
 8012a32:	2000      	movs	r0, #0
 8012a34:	f7fa fe50 	bl	800d6d8 <pbuf_alloc>
 8012a38:	6578      	str	r0, [r7, #84]	; 0x54
 8012a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f000 81e2 	beq.w	8012e06 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012a42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a46:	68ba      	ldr	r2, [r7, #8]
 8012a48:	441a      	add	r2, r3
 8012a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a4c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012a4e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012a50:	f7fb f9b4 	bl	800ddbc <pbuf_clen>
 8012a54:	4603      	mov	r3, r0
 8012a56:	461a      	mov	r2, r3
 8012a58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012a5c:	4413      	add	r3, r2
 8012a5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012a62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a66:	8bfb      	ldrh	r3, [r7, #30]
 8012a68:	4413      	add	r3, r2
 8012a6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012a6e:	e0de      	b.n	8012c2e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	f000 80d9 	beq.w	8012c2e <tcp_write+0x47e>
 8012a7c:	4b03      	ldr	r3, [pc, #12]	; (8012a8c <tcp_write+0x2dc>)
 8012a7e:	f240 224a 	movw	r2, #586	; 0x24a
 8012a82:	490a      	ldr	r1, [pc, #40]	; (8012aac <tcp_write+0x2fc>)
 8012a84:	4803      	ldr	r0, [pc, #12]	; (8012a94 <tcp_write+0x2e4>)
 8012a86:	f006 f883 	bl	8018b90 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012a8a:	e0d0      	b.n	8012c2e <tcp_write+0x47e>
 8012a8c:	0801ee40 	.word	0x0801ee40
 8012a90:	0801efe0 	.word	0x0801efe0
 8012a94:	0801ee94 	.word	0x0801ee94
 8012a98:	0801eff8 	.word	0x0801eff8
 8012a9c:	0801f02c 	.word	0x0801f02c
 8012aa0:	0801f044 	.word	0x0801f044
 8012aa4:	0801f064 	.word	0x0801f064
 8012aa8:	0801f084 	.word	0x0801f084
 8012aac:	0801f0b0 	.word	0x0801f0b0
    struct pbuf *p;
    u16_t left = len - pos;
 8012ab0:	88fa      	ldrh	r2, [r7, #6]
 8012ab2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ab6:	1ad3      	subs	r3, r2, r3
 8012ab8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012aba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012ac2:	1ad3      	subs	r3, r2, r3
 8012ac4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012ac6:	8b7a      	ldrh	r2, [r7, #26]
 8012ac8:	8bbb      	ldrh	r3, [r7, #28]
 8012aca:	4293      	cmp	r3, r2
 8012acc:	bf28      	it	cs
 8012ace:	4613      	movcs	r3, r2
 8012ad0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012ad2:	797b      	ldrb	r3, [r7, #5]
 8012ad4:	f003 0301 	and.w	r3, r3, #1
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d036      	beq.n	8012b4a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012adc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012ae0:	b29a      	uxth	r2, r3
 8012ae2:	8b3b      	ldrh	r3, [r7, #24]
 8012ae4:	4413      	add	r3, r2
 8012ae6:	b299      	uxth	r1, r3
 8012ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	bf0c      	ite	eq
 8012aee:	2301      	moveq	r3, #1
 8012af0:	2300      	movne	r3, #0
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	f107 0012 	add.w	r0, r7, #18
 8012af8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012afa:	9302      	str	r3, [sp, #8]
 8012afc:	797b      	ldrb	r3, [r7, #5]
 8012afe:	9301      	str	r3, [sp, #4]
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	9300      	str	r3, [sp, #0]
 8012b04:	4603      	mov	r3, r0
 8012b06:	2036      	movs	r0, #54	; 0x36
 8012b08:	f7ff fd5c 	bl	80125c4 <tcp_pbuf_prealloc>
 8012b0c:	6338      	str	r0, [r7, #48]	; 0x30
 8012b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	f000 817a 	beq.w	8012e0a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b18:	895b      	ldrh	r3, [r3, #10]
 8012b1a:	8b3a      	ldrh	r2, [r7, #24]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d906      	bls.n	8012b2e <tcp_write+0x37e>
 8012b20:	4b8d      	ldr	r3, [pc, #564]	; (8012d58 <tcp_write+0x5a8>)
 8012b22:	f240 2266 	movw	r2, #614	; 0x266
 8012b26:	498d      	ldr	r1, [pc, #564]	; (8012d5c <tcp_write+0x5ac>)
 8012b28:	488d      	ldr	r0, [pc, #564]	; (8012d60 <tcp_write+0x5b0>)
 8012b2a:	f006 f831 	bl	8018b90 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b30:	685a      	ldr	r2, [r3, #4]
 8012b32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012b36:	18d0      	adds	r0, r2, r3
 8012b38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b3c:	68ba      	ldr	r2, [r7, #8]
 8012b3e:	4413      	add	r3, r2
 8012b40:	8b3a      	ldrh	r2, [r7, #24]
 8012b42:	4619      	mov	r1, r3
 8012b44:	f006 f9ab 	bl	8018e9e <memcpy>
 8012b48:	e02f      	b.n	8012baa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012b4a:	8a7b      	ldrh	r3, [r7, #18]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d006      	beq.n	8012b5e <tcp_write+0x3ae>
 8012b50:	4b81      	ldr	r3, [pc, #516]	; (8012d58 <tcp_write+0x5a8>)
 8012b52:	f240 2271 	movw	r2, #625	; 0x271
 8012b56:	4983      	ldr	r1, [pc, #524]	; (8012d64 <tcp_write+0x5b4>)
 8012b58:	4881      	ldr	r0, [pc, #516]	; (8012d60 <tcp_write+0x5b0>)
 8012b5a:	f006 f819 	bl	8018b90 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012b5e:	8b3b      	ldrh	r3, [r7, #24]
 8012b60:	2201      	movs	r2, #1
 8012b62:	4619      	mov	r1, r3
 8012b64:	2036      	movs	r0, #54	; 0x36
 8012b66:	f7fa fdb7 	bl	800d6d8 <pbuf_alloc>
 8012b6a:	6178      	str	r0, [r7, #20]
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	f000 814d 	beq.w	8012e0e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012b74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b78:	68ba      	ldr	r2, [r7, #8]
 8012b7a:	441a      	add	r2, r3
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012b80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	2036      	movs	r0, #54	; 0x36
 8012b8e:	f7fa fda3 	bl	800d6d8 <pbuf_alloc>
 8012b92:	6338      	str	r0, [r7, #48]	; 0x30
 8012b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d103      	bne.n	8012ba2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012b9a:	6978      	ldr	r0, [r7, #20]
 8012b9c:	f7fb f880 	bl	800dca0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012ba0:	e138      	b.n	8012e14 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012ba2:	6979      	ldr	r1, [r7, #20]
 8012ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ba6:	f7fb f949 	bl	800de3c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bac:	f7fb f906 	bl	800ddbc <pbuf_clen>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012bb8:	4413      	add	r3, r2
 8012bba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012bbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012bc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8012bc6:	4293      	cmp	r3, r2
 8012bc8:	d903      	bls.n	8012bd2 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bcc:	f7fb f868 	bl	800dca0 <pbuf_free>
      goto memerr;
 8012bd0:	e120      	b.n	8012e14 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012bd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bda:	441a      	add	r2, r3
 8012bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012be0:	9300      	str	r3, [sp, #0]
 8012be2:	4613      	mov	r3, r2
 8012be4:	2200      	movs	r2, #0
 8012be6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	f7ff fc4d 	bl	8012488 <tcp_create_segment>
 8012bee:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	f000 810d 	beq.w	8012e12 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d102      	bne.n	8012c04 <tcp_write+0x454>
      queue = seg;
 8012bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c00:	647b      	str	r3, [r7, #68]	; 0x44
 8012c02:	e00c      	b.n	8012c1e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d106      	bne.n	8012c18 <tcp_write+0x468>
 8012c0a:	4b53      	ldr	r3, [pc, #332]	; (8012d58 <tcp_write+0x5a8>)
 8012c0c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012c10:	4955      	ldr	r1, [pc, #340]	; (8012d68 <tcp_write+0x5b8>)
 8012c12:	4853      	ldr	r0, [pc, #332]	; (8012d60 <tcp_write+0x5b0>)
 8012c14:	f005 ffbc 	bl	8018b90 <iprintf>
      prev_seg->next = seg;
 8012c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c1c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c20:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012c22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c26:	8b3b      	ldrh	r3, [r7, #24]
 8012c28:	4413      	add	r3, r2
 8012c2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012c2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c32:	88fb      	ldrh	r3, [r7, #6]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	f4ff af3b 	bcc.w	8012ab0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012c3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d02c      	beq.n	8012c9a <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c42:	685b      	ldr	r3, [r3, #4]
 8012c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c46:	e01e      	b.n	8012c86 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8012c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4a:	891a      	ldrh	r2, [r3, #8]
 8012c4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c4e:	4413      	add	r3, r2
 8012c50:	b29a      	uxth	r2, r3
 8012c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c54:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d110      	bne.n	8012c80 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c60:	685b      	ldr	r3, [r3, #4]
 8012c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c64:	8952      	ldrh	r2, [r2, #10]
 8012c66:	4413      	add	r3, r2
 8012c68:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012c6a:	68b9      	ldr	r1, [r7, #8]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f006 f916 	bl	8018e9e <memcpy>
        p->len += oversize_used;
 8012c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c74:	895a      	ldrh	r2, [r3, #10]
 8012c76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c78:	4413      	add	r3, r2
 8012c7a:	b29a      	uxth	r2, r3
 8012c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d1dd      	bne.n	8012c48 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8012c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c8e:	891a      	ldrh	r2, [r3, #8]
 8012c90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c92:	4413      	add	r3, r2
 8012c94:	b29a      	uxth	r2, r3
 8012c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c98:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012c9a:	8a7a      	ldrh	r2, [r7, #18]
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d018      	beq.n	8012cda <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d106      	bne.n	8012cbc <tcp_write+0x50c>
 8012cae:	4b2a      	ldr	r3, [pc, #168]	; (8012d58 <tcp_write+0x5a8>)
 8012cb0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012cb4:	492d      	ldr	r1, [pc, #180]	; (8012d6c <tcp_write+0x5bc>)
 8012cb6:	482a      	ldr	r0, [pc, #168]	; (8012d60 <tcp_write+0x5b0>)
 8012cb8:	f005 ff6a 	bl	8018b90 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cbe:	685b      	ldr	r3, [r3, #4]
 8012cc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7fb f8ba 	bl	800de3c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cca:	891a      	ldrh	r2, [r3, #8]
 8012ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cce:	891b      	ldrh	r3, [r3, #8]
 8012cd0:	4413      	add	r3, r2
 8012cd2:	b29a      	uxth	r2, r3
 8012cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cd6:	811a      	strh	r2, [r3, #8]
 8012cd8:	e037      	b.n	8012d4a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8012cda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d034      	beq.n	8012d4a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d003      	beq.n	8012cee <tcp_write+0x53e>
 8012ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d106      	bne.n	8012cfc <tcp_write+0x54c>
 8012cee:	4b1a      	ldr	r3, [pc, #104]	; (8012d58 <tcp_write+0x5a8>)
 8012cf0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012cf4:	491e      	ldr	r1, [pc, #120]	; (8012d70 <tcp_write+0x5c0>)
 8012cf6:	481a      	ldr	r0, [pc, #104]	; (8012d60 <tcp_write+0x5b0>)
 8012cf8:	f005 ff4a 	bl	8018b90 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d02:	e009      	b.n	8012d18 <tcp_write+0x568>
      p->tot_len += extendlen;
 8012d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d06:	891a      	ldrh	r2, [r3, #8]
 8012d08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d0a:	4413      	add	r3, r2
 8012d0c:	b29a      	uxth	r2, r3
 8012d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d10:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d1f1      	bne.n	8012d04 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8012d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d22:	891a      	ldrh	r2, [r3, #8]
 8012d24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d26:	4413      	add	r3, r2
 8012d28:	b29a      	uxth	r2, r3
 8012d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d2c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d30:	895a      	ldrh	r2, [r3, #10]
 8012d32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d34:	4413      	add	r3, r2
 8012d36:	b29a      	uxth	r2, r3
 8012d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d3a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d3e:	891a      	ldrh	r2, [r3, #8]
 8012d40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d42:	4413      	add	r3, r2
 8012d44:	b29a      	uxth	r2, r3
 8012d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d48:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d111      	bne.n	8012d74 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d54:	66da      	str	r2, [r3, #108]	; 0x6c
 8012d56:	e010      	b.n	8012d7a <tcp_write+0x5ca>
 8012d58:	0801ee40 	.word	0x0801ee40
 8012d5c:	0801f0e0 	.word	0x0801f0e0
 8012d60:	0801ee94 	.word	0x0801ee94
 8012d64:	0801f120 	.word	0x0801f120
 8012d68:	0801f130 	.word	0x0801f130
 8012d6c:	0801f144 	.word	0x0801f144
 8012d70:	0801f17c 	.word	0x0801f17c
  } else {
    last_unsent->next = queue;
 8012d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d78:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012d7e:	88fb      	ldrh	r3, [r7, #6]
 8012d80:	441a      	add	r2, r3
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012d8c:	88fb      	ldrh	r3, [r7, #6]
 8012d8e:	1ad3      	subs	r3, r2, r3
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012d9e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d00e      	beq.n	8012dca <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d10a      	bne.n	8012dca <tcp_write+0x61a>
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d106      	bne.n	8012dca <tcp_write+0x61a>
 8012dbc:	4b2c      	ldr	r3, [pc, #176]	; (8012e70 <tcp_write+0x6c0>)
 8012dbe:	f240 3212 	movw	r2, #786	; 0x312
 8012dc2:	492c      	ldr	r1, [pc, #176]	; (8012e74 <tcp_write+0x6c4>)
 8012dc4:	482c      	ldr	r0, [pc, #176]	; (8012e78 <tcp_write+0x6c8>)
 8012dc6:	f005 fee3 	bl	8018b90 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d016      	beq.n	8012dfe <tcp_write+0x64e>
 8012dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d012      	beq.n	8012dfe <tcp_write+0x64e>
 8012dd8:	797b      	ldrb	r3, [r7, #5]
 8012dda:	f003 0302 	and.w	r3, r3, #2
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d10d      	bne.n	8012dfe <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012de4:	68db      	ldr	r3, [r3, #12]
 8012de6:	899b      	ldrh	r3, [r3, #12]
 8012de8:	b29c      	uxth	r4, r3
 8012dea:	2008      	movs	r0, #8
 8012dec:	f7f9 fb66 	bl	800c4bc <lwip_htons>
 8012df0:	4603      	mov	r3, r0
 8012df2:	461a      	mov	r2, r3
 8012df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	4322      	orrs	r2, r4
 8012dfa:	b292      	uxth	r2, r2
 8012dfc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	e031      	b.n	8012e66 <tcp_write+0x6b6>
          goto memerr;
 8012e02:	bf00      	nop
 8012e04:	e006      	b.n	8012e14 <tcp_write+0x664>
            goto memerr;
 8012e06:	bf00      	nop
 8012e08:	e004      	b.n	8012e14 <tcp_write+0x664>
        goto memerr;
 8012e0a:	bf00      	nop
 8012e0c:	e002      	b.n	8012e14 <tcp_write+0x664>
        goto memerr;
 8012e0e:	bf00      	nop
 8012e10:	e000      	b.n	8012e14 <tcp_write+0x664>
      goto memerr;
 8012e12:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	8b5b      	ldrh	r3, [r3, #26]
 8012e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d002      	beq.n	8012e2e <tcp_write+0x67e>
    pbuf_free(concat_p);
 8012e28:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012e2a:	f7fa ff39 	bl	800dca0 <pbuf_free>
  }
  if (queue != NULL) {
 8012e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d002      	beq.n	8012e3a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8012e34:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012e36:	f7fc fb67 	bl	800f508 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d00e      	beq.n	8012e62 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d10a      	bne.n	8012e62 <tcp_write+0x6b2>
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d106      	bne.n	8012e62 <tcp_write+0x6b2>
 8012e54:	4b06      	ldr	r3, [pc, #24]	; (8012e70 <tcp_write+0x6c0>)
 8012e56:	f240 3227 	movw	r2, #807	; 0x327
 8012e5a:	4906      	ldr	r1, [pc, #24]	; (8012e74 <tcp_write+0x6c4>)
 8012e5c:	4806      	ldr	r0, [pc, #24]	; (8012e78 <tcp_write+0x6c8>)
 8012e5e:	f005 fe97 	bl	8018b90 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	375c      	adds	r7, #92	; 0x5c
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd90      	pop	{r4, r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	0801ee40 	.word	0x0801ee40
 8012e74:	0801f1b4 	.word	0x0801f1b4
 8012e78:	0801ee94 	.word	0x0801ee94

08012e7c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012e7c:	b590      	push	{r4, r7, lr}
 8012e7e:	b08b      	sub	sp, #44	; 0x2c
 8012e80:	af02      	add	r7, sp, #8
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	460b      	mov	r3, r1
 8012e86:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	61fb      	str	r3, [r7, #28]
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012e90:	2300      	movs	r3, #0
 8012e92:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d106      	bne.n	8012ea8 <tcp_split_unsent_seg+0x2c>
 8012e9a:	4b95      	ldr	r3, [pc, #596]	; (80130f0 <tcp_split_unsent_seg+0x274>)
 8012e9c:	f240 324b 	movw	r2, #843	; 0x34b
 8012ea0:	4994      	ldr	r1, [pc, #592]	; (80130f4 <tcp_split_unsent_seg+0x278>)
 8012ea2:	4895      	ldr	r0, [pc, #596]	; (80130f8 <tcp_split_unsent_seg+0x27c>)
 8012ea4:	f005 fe74 	bl	8018b90 <iprintf>

  useg = pcb->unsent;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012eac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d102      	bne.n	8012eba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8012eb8:	e116      	b.n	80130e8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012eba:	887b      	ldrh	r3, [r7, #2]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d109      	bne.n	8012ed4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012ec0:	4b8b      	ldr	r3, [pc, #556]	; (80130f0 <tcp_split_unsent_seg+0x274>)
 8012ec2:	f240 3253 	movw	r2, #851	; 0x353
 8012ec6:	498d      	ldr	r1, [pc, #564]	; (80130fc <tcp_split_unsent_seg+0x280>)
 8012ec8:	488b      	ldr	r0, [pc, #556]	; (80130f8 <tcp_split_unsent_seg+0x27c>)
 8012eca:	f005 fe61 	bl	8018b90 <iprintf>
    return ERR_VAL;
 8012ece:	f06f 0305 	mvn.w	r3, #5
 8012ed2:	e109      	b.n	80130e8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	891b      	ldrh	r3, [r3, #8]
 8012ed8:	887a      	ldrh	r2, [r7, #2]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d301      	bcc.n	8012ee2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	e102      	b.n	80130e8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ee6:	887a      	ldrh	r2, [r7, #2]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d906      	bls.n	8012efa <tcp_split_unsent_seg+0x7e>
 8012eec:	4b80      	ldr	r3, [pc, #512]	; (80130f0 <tcp_split_unsent_seg+0x274>)
 8012eee:	f240 325b 	movw	r2, #859	; 0x35b
 8012ef2:	4983      	ldr	r1, [pc, #524]	; (8013100 <tcp_split_unsent_seg+0x284>)
 8012ef4:	4880      	ldr	r0, [pc, #512]	; (80130f8 <tcp_split_unsent_seg+0x27c>)
 8012ef6:	f005 fe4b 	bl	8018b90 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	891b      	ldrh	r3, [r3, #8]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d106      	bne.n	8012f10 <tcp_split_unsent_seg+0x94>
 8012f02:	4b7b      	ldr	r3, [pc, #492]	; (80130f0 <tcp_split_unsent_seg+0x274>)
 8012f04:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012f08:	497e      	ldr	r1, [pc, #504]	; (8013104 <tcp_split_unsent_seg+0x288>)
 8012f0a:	487b      	ldr	r0, [pc, #492]	; (80130f8 <tcp_split_unsent_seg+0x27c>)
 8012f0c:	f005 fe40 	bl	8018b90 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	7a9b      	ldrb	r3, [r3, #10]
 8012f14:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012f16:	7bfb      	ldrb	r3, [r7, #15]
 8012f18:	009b      	lsls	r3, r3, #2
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	f003 0304 	and.w	r3, r3, #4
 8012f20:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	891a      	ldrh	r2, [r3, #8]
 8012f26:	887b      	ldrh	r3, [r7, #2]
 8012f28:	1ad3      	subs	r3, r2, r3
 8012f2a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012f2c:	7bbb      	ldrb	r3, [r7, #14]
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	89bb      	ldrh	r3, [r7, #12]
 8012f32:	4413      	add	r3, r2
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	2036      	movs	r0, #54	; 0x36
 8012f3e:	f7fa fbcb 	bl	800d6d8 <pbuf_alloc>
 8012f42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	f000 80b7 	beq.w	80130ba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	891a      	ldrh	r2, [r3, #8]
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	891b      	ldrh	r3, [r3, #8]
 8012f56:	1ad3      	subs	r3, r2, r3
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	887b      	ldrh	r3, [r7, #2]
 8012f5c:	4413      	add	r3, r2
 8012f5e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	6858      	ldr	r0, [r3, #4]
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	685a      	ldr	r2, [r3, #4]
 8012f68:	7bbb      	ldrb	r3, [r7, #14]
 8012f6a:	18d1      	adds	r1, r2, r3
 8012f6c:	897b      	ldrh	r3, [r7, #10]
 8012f6e:	89ba      	ldrh	r2, [r7, #12]
 8012f70:	f7fb f89c 	bl	800e0ac <pbuf_copy_partial>
 8012f74:	4603      	mov	r3, r0
 8012f76:	461a      	mov	r2, r3
 8012f78:	89bb      	ldrh	r3, [r7, #12]
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	f040 809f 	bne.w	80130be <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	68db      	ldr	r3, [r3, #12]
 8012f84:	899b      	ldrh	r3, [r3, #12]
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7f9 fa97 	bl	800c4bc <lwip_htons>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	b2db      	uxtb	r3, r3
 8012f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f96:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012f98:	2300      	movs	r3, #0
 8012f9a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012f9c:	7efb      	ldrb	r3, [r7, #27]
 8012f9e:	f003 0308 	and.w	r3, r3, #8
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d007      	beq.n	8012fb6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012fa6:	7efb      	ldrb	r3, [r7, #27]
 8012fa8:	f023 0308 	bic.w	r3, r3, #8
 8012fac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012fae:	7ebb      	ldrb	r3, [r7, #26]
 8012fb0:	f043 0308 	orr.w	r3, r3, #8
 8012fb4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012fb6:	7efb      	ldrb	r3, [r7, #27]
 8012fb8:	f003 0301 	and.w	r3, r3, #1
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d007      	beq.n	8012fd0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012fc0:	7efb      	ldrb	r3, [r7, #27]
 8012fc2:	f023 0301 	bic.w	r3, r3, #1
 8012fc6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012fc8:	7ebb      	ldrb	r3, [r7, #26]
 8012fca:	f043 0301 	orr.w	r3, r3, #1
 8012fce:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	68db      	ldr	r3, [r3, #12]
 8012fd4:	685b      	ldr	r3, [r3, #4]
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7f9 fa85 	bl	800c4e6 <lwip_htonl>
 8012fdc:	4602      	mov	r2, r0
 8012fde:	887b      	ldrh	r3, [r7, #2]
 8012fe0:	18d1      	adds	r1, r2, r3
 8012fe2:	7eba      	ldrb	r2, [r7, #26]
 8012fe4:	7bfb      	ldrb	r3, [r7, #15]
 8012fe6:	9300      	str	r3, [sp, #0]
 8012fe8:	460b      	mov	r3, r1
 8012fea:	6939      	ldr	r1, [r7, #16]
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f7ff fa4b 	bl	8012488 <tcp_create_segment>
 8012ff2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012ff4:	69fb      	ldr	r3, [r7, #28]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d063      	beq.n	80130c2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012ffa:	697b      	ldr	r3, [r7, #20]
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7fa fedc 	bl	800ddbc <pbuf_clen>
 8013004:	4603      	mov	r3, r0
 8013006:	461a      	mov	r2, r3
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801300e:	1a9b      	subs	r3, r3, r2
 8013010:	b29a      	uxth	r2, r3
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013018:	697b      	ldr	r3, [r7, #20]
 801301a:	6858      	ldr	r0, [r3, #4]
 801301c:	697b      	ldr	r3, [r7, #20]
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	891a      	ldrh	r2, [r3, #8]
 8013022:	89bb      	ldrh	r3, [r7, #12]
 8013024:	1ad3      	subs	r3, r2, r3
 8013026:	b29b      	uxth	r3, r3
 8013028:	4619      	mov	r1, r3
 801302a:	f7fa fcb3 	bl	800d994 <pbuf_realloc>
  useg->len -= remainder;
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	891a      	ldrh	r2, [r3, #8]
 8013032:	89bb      	ldrh	r3, [r7, #12]
 8013034:	1ad3      	subs	r3, r2, r3
 8013036:	b29a      	uxth	r2, r3
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	68db      	ldr	r3, [r3, #12]
 8013040:	899b      	ldrh	r3, [r3, #12]
 8013042:	b29c      	uxth	r4, r3
 8013044:	7efb      	ldrb	r3, [r7, #27]
 8013046:	b29b      	uxth	r3, r3
 8013048:	4618      	mov	r0, r3
 801304a:	f7f9 fa37 	bl	800c4bc <lwip_htons>
 801304e:	4603      	mov	r3, r0
 8013050:	461a      	mov	r2, r3
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	4322      	orrs	r2, r4
 8013058:	b292      	uxth	r2, r2
 801305a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	685b      	ldr	r3, [r3, #4]
 8013060:	4618      	mov	r0, r3
 8013062:	f7fa feab 	bl	800ddbc <pbuf_clen>
 8013066:	4603      	mov	r3, r0
 8013068:	461a      	mov	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013070:	4413      	add	r3, r2
 8013072:	b29a      	uxth	r2, r3
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801307a:	69fb      	ldr	r3, [r7, #28]
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	4618      	mov	r0, r3
 8013080:	f7fa fe9c 	bl	800ddbc <pbuf_clen>
 8013084:	4603      	mov	r3, r0
 8013086:	461a      	mov	r2, r3
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801308e:	4413      	add	r3, r2
 8013090:	b29a      	uxth	r2, r3
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	681a      	ldr	r2, [r3, #0]
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	69fa      	ldr	r2, [r7, #28]
 80130a4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d103      	bne.n	80130b6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2200      	movs	r2, #0
 80130b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80130b6:	2300      	movs	r3, #0
 80130b8:	e016      	b.n	80130e8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80130ba:	bf00      	nop
 80130bc:	e002      	b.n	80130c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80130be:	bf00      	nop
 80130c0:	e000      	b.n	80130c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80130c2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80130c4:	69fb      	ldr	r3, [r7, #28]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d006      	beq.n	80130d8 <tcp_split_unsent_seg+0x25c>
 80130ca:	4b09      	ldr	r3, [pc, #36]	; (80130f0 <tcp_split_unsent_seg+0x274>)
 80130cc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80130d0:	490d      	ldr	r1, [pc, #52]	; (8013108 <tcp_split_unsent_seg+0x28c>)
 80130d2:	4809      	ldr	r0, [pc, #36]	; (80130f8 <tcp_split_unsent_seg+0x27c>)
 80130d4:	f005 fd5c 	bl	8018b90 <iprintf>
  if (p != NULL) {
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d002      	beq.n	80130e4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80130de:	6938      	ldr	r0, [r7, #16]
 80130e0:	f7fa fdde 	bl	800dca0 <pbuf_free>
  }

  return ERR_MEM;
 80130e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	3724      	adds	r7, #36	; 0x24
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd90      	pop	{r4, r7, pc}
 80130f0:	0801ee40 	.word	0x0801ee40
 80130f4:	0801f1d4 	.word	0x0801f1d4
 80130f8:	0801ee94 	.word	0x0801ee94
 80130fc:	0801f1f8 	.word	0x0801f1f8
 8013100:	0801f21c 	.word	0x0801f21c
 8013104:	0801f22c 	.word	0x0801f22c
 8013108:	0801f23c 	.word	0x0801f23c

0801310c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801310c:	b590      	push	{r4, r7, lr}
 801310e:	b085      	sub	sp, #20
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d106      	bne.n	8013128 <tcp_send_fin+0x1c>
 801311a:	4b21      	ldr	r3, [pc, #132]	; (80131a0 <tcp_send_fin+0x94>)
 801311c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013120:	4920      	ldr	r1, [pc, #128]	; (80131a4 <tcp_send_fin+0x98>)
 8013122:	4821      	ldr	r0, [pc, #132]	; (80131a8 <tcp_send_fin+0x9c>)
 8013124:	f005 fd34 	bl	8018b90 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801312c:	2b00      	cmp	r3, #0
 801312e:	d02e      	beq.n	801318e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013134:	60fb      	str	r3, [r7, #12]
 8013136:	e002      	b.n	801313e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d1f8      	bne.n	8013138 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	68db      	ldr	r3, [r3, #12]
 801314a:	899b      	ldrh	r3, [r3, #12]
 801314c:	b29b      	uxth	r3, r3
 801314e:	4618      	mov	r0, r3
 8013150:	f7f9 f9b4 	bl	800c4bc <lwip_htons>
 8013154:	4603      	mov	r3, r0
 8013156:	b2db      	uxtb	r3, r3
 8013158:	f003 0307 	and.w	r3, r3, #7
 801315c:	2b00      	cmp	r3, #0
 801315e:	d116      	bne.n	801318e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	68db      	ldr	r3, [r3, #12]
 8013164:	899b      	ldrh	r3, [r3, #12]
 8013166:	b29c      	uxth	r4, r3
 8013168:	2001      	movs	r0, #1
 801316a:	f7f9 f9a7 	bl	800c4bc <lwip_htons>
 801316e:	4603      	mov	r3, r0
 8013170:	461a      	mov	r2, r3
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	68db      	ldr	r3, [r3, #12]
 8013176:	4322      	orrs	r2, r4
 8013178:	b292      	uxth	r2, r2
 801317a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	8b5b      	ldrh	r3, [r3, #26]
 8013180:	f043 0320 	orr.w	r3, r3, #32
 8013184:	b29a      	uxth	r2, r3
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801318a:	2300      	movs	r3, #0
 801318c:	e004      	b.n	8013198 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801318e:	2101      	movs	r1, #1
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f000 f80b 	bl	80131ac <tcp_enqueue_flags>
 8013196:	4603      	mov	r3, r0
}
 8013198:	4618      	mov	r0, r3
 801319a:	3714      	adds	r7, #20
 801319c:	46bd      	mov	sp, r7
 801319e:	bd90      	pop	{r4, r7, pc}
 80131a0:	0801ee40 	.word	0x0801ee40
 80131a4:	0801f248 	.word	0x0801f248
 80131a8:	0801ee94 	.word	0x0801ee94

080131ac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b08a      	sub	sp, #40	; 0x28
 80131b0:	af02      	add	r7, sp, #8
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	460b      	mov	r3, r1
 80131b6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80131b8:	2300      	movs	r3, #0
 80131ba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80131bc:	2300      	movs	r3, #0
 80131be:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80131c0:	78fb      	ldrb	r3, [r7, #3]
 80131c2:	f003 0303 	and.w	r3, r3, #3
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d106      	bne.n	80131d8 <tcp_enqueue_flags+0x2c>
 80131ca:	4b67      	ldr	r3, [pc, #412]	; (8013368 <tcp_enqueue_flags+0x1bc>)
 80131cc:	f240 4211 	movw	r2, #1041	; 0x411
 80131d0:	4966      	ldr	r1, [pc, #408]	; (801336c <tcp_enqueue_flags+0x1c0>)
 80131d2:	4867      	ldr	r0, [pc, #412]	; (8013370 <tcp_enqueue_flags+0x1c4>)
 80131d4:	f005 fcdc 	bl	8018b90 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d106      	bne.n	80131ec <tcp_enqueue_flags+0x40>
 80131de:	4b62      	ldr	r3, [pc, #392]	; (8013368 <tcp_enqueue_flags+0x1bc>)
 80131e0:	f240 4213 	movw	r2, #1043	; 0x413
 80131e4:	4963      	ldr	r1, [pc, #396]	; (8013374 <tcp_enqueue_flags+0x1c8>)
 80131e6:	4862      	ldr	r0, [pc, #392]	; (8013370 <tcp_enqueue_flags+0x1c4>)
 80131e8:	f005 fcd2 	bl	8018b90 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80131ec:	78fb      	ldrb	r3, [r7, #3]
 80131ee:	f003 0302 	and.w	r3, r3, #2
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d001      	beq.n	80131fa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80131f6:	2301      	movs	r3, #1
 80131f8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80131fa:	7ffb      	ldrb	r3, [r7, #31]
 80131fc:	009b      	lsls	r3, r3, #2
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	f003 0304 	and.w	r3, r3, #4
 8013204:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013206:	7dfb      	ldrb	r3, [r7, #23]
 8013208:	b29b      	uxth	r3, r3
 801320a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801320e:	4619      	mov	r1, r3
 8013210:	2036      	movs	r0, #54	; 0x36
 8013212:	f7fa fa61 	bl	800d6d8 <pbuf_alloc>
 8013216:	6138      	str	r0, [r7, #16]
 8013218:	693b      	ldr	r3, [r7, #16]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d109      	bne.n	8013232 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	8b5b      	ldrh	r3, [r3, #26]
 8013222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013226:	b29a      	uxth	r2, r3
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801322c:	f04f 33ff 	mov.w	r3, #4294967295
 8013230:	e095      	b.n	801335e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013232:	693b      	ldr	r3, [r7, #16]
 8013234:	895a      	ldrh	r2, [r3, #10]
 8013236:	7dfb      	ldrb	r3, [r7, #23]
 8013238:	b29b      	uxth	r3, r3
 801323a:	429a      	cmp	r2, r3
 801323c:	d206      	bcs.n	801324c <tcp_enqueue_flags+0xa0>
 801323e:	4b4a      	ldr	r3, [pc, #296]	; (8013368 <tcp_enqueue_flags+0x1bc>)
 8013240:	f240 4239 	movw	r2, #1081	; 0x439
 8013244:	494c      	ldr	r1, [pc, #304]	; (8013378 <tcp_enqueue_flags+0x1cc>)
 8013246:	484a      	ldr	r0, [pc, #296]	; (8013370 <tcp_enqueue_flags+0x1c4>)
 8013248:	f005 fca2 	bl	8018b90 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013250:	78fa      	ldrb	r2, [r7, #3]
 8013252:	7ffb      	ldrb	r3, [r7, #31]
 8013254:	9300      	str	r3, [sp, #0]
 8013256:	460b      	mov	r3, r1
 8013258:	6939      	ldr	r1, [r7, #16]
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f7ff f914 	bl	8012488 <tcp_create_segment>
 8013260:	60f8      	str	r0, [r7, #12]
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d109      	bne.n	801327c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	8b5b      	ldrh	r3, [r3, #26]
 801326c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013270:	b29a      	uxth	r2, r3
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013276:	f04f 33ff 	mov.w	r3, #4294967295
 801327a:	e070      	b.n	801335e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	f003 0303 	and.w	r3, r3, #3
 8013284:	2b00      	cmp	r3, #0
 8013286:	d006      	beq.n	8013296 <tcp_enqueue_flags+0xea>
 8013288:	4b37      	ldr	r3, [pc, #220]	; (8013368 <tcp_enqueue_flags+0x1bc>)
 801328a:	f240 4242 	movw	r2, #1090	; 0x442
 801328e:	493b      	ldr	r1, [pc, #236]	; (801337c <tcp_enqueue_flags+0x1d0>)
 8013290:	4837      	ldr	r0, [pc, #220]	; (8013370 <tcp_enqueue_flags+0x1c4>)
 8013292:	f005 fc7d 	bl	8018b90 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	891b      	ldrh	r3, [r3, #8]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d006      	beq.n	80132ac <tcp_enqueue_flags+0x100>
 801329e:	4b32      	ldr	r3, [pc, #200]	; (8013368 <tcp_enqueue_flags+0x1bc>)
 80132a0:	f240 4243 	movw	r2, #1091	; 0x443
 80132a4:	4936      	ldr	r1, [pc, #216]	; (8013380 <tcp_enqueue_flags+0x1d4>)
 80132a6:	4832      	ldr	r0, [pc, #200]	; (8013370 <tcp_enqueue_flags+0x1c4>)
 80132a8:	f005 fc72 	bl	8018b90 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d103      	bne.n	80132bc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	68fa      	ldr	r2, [r7, #12]
 80132b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80132ba:	e00d      	b.n	80132d8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132c0:	61bb      	str	r3, [r7, #24]
 80132c2:	e002      	b.n	80132ca <tcp_enqueue_flags+0x11e>
 80132c4:	69bb      	ldr	r3, [r7, #24]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	61bb      	str	r3, [r7, #24]
 80132ca:	69bb      	ldr	r3, [r7, #24]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d1f8      	bne.n	80132c4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80132d2:	69bb      	ldr	r3, [r7, #24]
 80132d4:	68fa      	ldr	r2, [r7, #12]
 80132d6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2200      	movs	r2, #0
 80132dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80132e0:	78fb      	ldrb	r3, [r7, #3]
 80132e2:	f003 0302 	and.w	r3, r3, #2
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d104      	bne.n	80132f4 <tcp_enqueue_flags+0x148>
 80132ea:	78fb      	ldrb	r3, [r7, #3]
 80132ec:	f003 0301 	and.w	r3, r3, #1
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d004      	beq.n	80132fe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80132f8:	1c5a      	adds	r2, r3, #1
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80132fe:	78fb      	ldrb	r3, [r7, #3]
 8013300:	f003 0301 	and.w	r3, r3, #1
 8013304:	2b00      	cmp	r3, #0
 8013306:	d006      	beq.n	8013316 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	8b5b      	ldrh	r3, [r3, #26]
 801330c:	f043 0320 	orr.w	r3, r3, #32
 8013310:	b29a      	uxth	r2, r3
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	4618      	mov	r0, r3
 801331c:	f7fa fd4e 	bl	800ddbc <pbuf_clen>
 8013320:	4603      	mov	r3, r0
 8013322:	461a      	mov	r2, r3
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801332a:	4413      	add	r3, r2
 801332c:	b29a      	uxth	r2, r3
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801333a:	2b00      	cmp	r3, #0
 801333c:	d00e      	beq.n	801335c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013342:	2b00      	cmp	r3, #0
 8013344:	d10a      	bne.n	801335c <tcp_enqueue_flags+0x1b0>
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801334a:	2b00      	cmp	r3, #0
 801334c:	d106      	bne.n	801335c <tcp_enqueue_flags+0x1b0>
 801334e:	4b06      	ldr	r3, [pc, #24]	; (8013368 <tcp_enqueue_flags+0x1bc>)
 8013350:	f240 4265 	movw	r2, #1125	; 0x465
 8013354:	490b      	ldr	r1, [pc, #44]	; (8013384 <tcp_enqueue_flags+0x1d8>)
 8013356:	4806      	ldr	r0, [pc, #24]	; (8013370 <tcp_enqueue_flags+0x1c4>)
 8013358:	f005 fc1a 	bl	8018b90 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801335c:	2300      	movs	r3, #0
}
 801335e:	4618      	mov	r0, r3
 8013360:	3720      	adds	r7, #32
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
 8013366:	bf00      	nop
 8013368:	0801ee40 	.word	0x0801ee40
 801336c:	0801f264 	.word	0x0801f264
 8013370:	0801ee94 	.word	0x0801ee94
 8013374:	0801f2bc 	.word	0x0801f2bc
 8013378:	0801f2dc 	.word	0x0801f2dc
 801337c:	0801f318 	.word	0x0801f318
 8013380:	0801f330 	.word	0x0801f330
 8013384:	0801f35c 	.word	0x0801f35c

08013388 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013388:	b5b0      	push	{r4, r5, r7, lr}
 801338a:	b08a      	sub	sp, #40	; 0x28
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d106      	bne.n	80133a4 <tcp_output+0x1c>
 8013396:	4b8b      	ldr	r3, [pc, #556]	; (80135c4 <tcp_output+0x23c>)
 8013398:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801339c:	498a      	ldr	r1, [pc, #552]	; (80135c8 <tcp_output+0x240>)
 801339e:	488b      	ldr	r0, [pc, #556]	; (80135cc <tcp_output+0x244>)
 80133a0:	f005 fbf6 	bl	8018b90 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	7d1b      	ldrb	r3, [r3, #20]
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d106      	bne.n	80133ba <tcp_output+0x32>
 80133ac:	4b85      	ldr	r3, [pc, #532]	; (80135c4 <tcp_output+0x23c>)
 80133ae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80133b2:	4987      	ldr	r1, [pc, #540]	; (80135d0 <tcp_output+0x248>)
 80133b4:	4885      	ldr	r0, [pc, #532]	; (80135cc <tcp_output+0x244>)
 80133b6:	f005 fbeb 	bl	8018b90 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80133ba:	4b86      	ldr	r3, [pc, #536]	; (80135d4 <tcp_output+0x24c>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d101      	bne.n	80133c8 <tcp_output+0x40>
    return ERR_OK;
 80133c4:	2300      	movs	r3, #0
 80133c6:	e1d0      	b.n	801376a <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80133d4:	4293      	cmp	r3, r2
 80133d6:	bf28      	it	cs
 80133d8:	4613      	movcs	r3, r2
 80133da:	b29b      	uxth	r3, r3
 80133dc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80133e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d10b      	bne.n	8013402 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	8b5b      	ldrh	r3, [r3, #26]
 80133ee:	f003 0302 	and.w	r3, r3, #2
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f000 81ac 	beq.w	8013750 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f000 fdcb 	bl	8013f94 <tcp_send_empty_ack>
 80133fe:	4603      	mov	r3, r0
 8013400:	e1b3      	b.n	801376a <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013402:	6879      	ldr	r1, [r7, #4]
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	3304      	adds	r3, #4
 8013408:	461a      	mov	r2, r3
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f7ff f820 	bl	8012450 <tcp_route>
 8013410:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d102      	bne.n	801341e <tcp_output+0x96>
    return ERR_RTE;
 8013418:	f06f 0303 	mvn.w	r3, #3
 801341c:	e1a5      	b.n	801376a <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d003      	beq.n	801342c <tcp_output+0xa4>
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d111      	bne.n	8013450 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d002      	beq.n	8013438 <tcp_output+0xb0>
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	3304      	adds	r3, #4
 8013436:	e000      	b.n	801343a <tcp_output+0xb2>
 8013438:	2300      	movs	r3, #0
 801343a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d102      	bne.n	8013448 <tcp_output+0xc0>
      return ERR_RTE;
 8013442:	f06f 0303 	mvn.w	r3, #3
 8013446:	e190      	b.n	801376a <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	681a      	ldr	r2, [r3, #0]
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013452:	68db      	ldr	r3, [r3, #12]
 8013454:	685b      	ldr	r3, [r3, #4]
 8013456:	4618      	mov	r0, r3
 8013458:	f7f9 f845 	bl	800c4e6 <lwip_htonl>
 801345c:	4602      	mov	r2, r0
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013462:	1ad3      	subs	r3, r2, r3
 8013464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013466:	8912      	ldrh	r2, [r2, #8]
 8013468:	4413      	add	r3, r2
 801346a:	69ba      	ldr	r2, [r7, #24]
 801346c:	429a      	cmp	r2, r3
 801346e:	d227      	bcs.n	80134c0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013476:	461a      	mov	r2, r3
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	4293      	cmp	r3, r2
 801347c:	d114      	bne.n	80134a8 <tcp_output+0x120>
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013482:	2b00      	cmp	r3, #0
 8013484:	d110      	bne.n	80134a8 <tcp_output+0x120>
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801348c:	2b00      	cmp	r3, #0
 801348e:	d10b      	bne.n	80134a8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2200      	movs	r2, #0
 8013494:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2201      	movs	r2, #1
 801349c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	2200      	movs	r2, #0
 80134a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	8b5b      	ldrh	r3, [r3, #26]
 80134ac:	f003 0302 	and.w	r3, r3, #2
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	f000 814f 	beq.w	8013754 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f000 fd6c 	bl	8013f94 <tcp_send_empty_ack>
 80134bc:	4603      	mov	r3, r0
 80134be:	e154      	b.n	801376a <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2200      	movs	r2, #0
 80134c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134cc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80134ce:	6a3b      	ldr	r3, [r7, #32]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	f000 811e 	beq.w	8013712 <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 80134d6:	e002      	b.n	80134de <tcp_output+0x156>
 80134d8:	6a3b      	ldr	r3, [r7, #32]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	623b      	str	r3, [r7, #32]
 80134de:	6a3b      	ldr	r3, [r7, #32]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d1f8      	bne.n	80134d8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80134e6:	e114      	b.n	8013712 <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80134e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ea:	68db      	ldr	r3, [r3, #12]
 80134ec:	899b      	ldrh	r3, [r3, #12]
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7f8 ffe3 	bl	800c4bc <lwip_htons>
 80134f6:	4603      	mov	r3, r0
 80134f8:	b2db      	uxtb	r3, r3
 80134fa:	f003 0304 	and.w	r3, r3, #4
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d006      	beq.n	8013510 <tcp_output+0x188>
 8013502:	4b30      	ldr	r3, [pc, #192]	; (80135c4 <tcp_output+0x23c>)
 8013504:	f240 5236 	movw	r2, #1334	; 0x536
 8013508:	4933      	ldr	r1, [pc, #204]	; (80135d8 <tcp_output+0x250>)
 801350a:	4830      	ldr	r0, [pc, #192]	; (80135cc <tcp_output+0x244>)
 801350c:	f005 fb40 	bl	8018b90 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013514:	2b00      	cmp	r3, #0
 8013516:	d021      	beq.n	801355c <tcp_output+0x1d4>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	8b5b      	ldrh	r3, [r3, #26]
 801351c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013520:	2b00      	cmp	r3, #0
 8013522:	d11b      	bne.n	801355c <tcp_output+0x1d4>
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013528:	2b00      	cmp	r3, #0
 801352a:	d00b      	beq.n	8013544 <tcp_output+0x1bc>
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d112      	bne.n	801355c <tcp_output+0x1d4>
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801353a:	891a      	ldrh	r2, [r3, #8]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013540:	429a      	cmp	r2, r3
 8013542:	d20b      	bcs.n	801355c <tcp_output+0x1d4>
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801354a:	2b00      	cmp	r3, #0
 801354c:	d006      	beq.n	801355c <tcp_output+0x1d4>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013554:	f242 720f 	movw	r2, #9999	; 0x270f
 8013558:	4293      	cmp	r3, r2
 801355a:	d901      	bls.n	8013560 <tcp_output+0x1d8>
 801355c:	2301      	movs	r3, #1
 801355e:	e000      	b.n	8013562 <tcp_output+0x1da>
 8013560:	2300      	movs	r3, #0
 8013562:	2b00      	cmp	r3, #0
 8013564:	d106      	bne.n	8013574 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	8b5b      	ldrh	r3, [r3, #26]
 801356a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801356e:	2b00      	cmp	r3, #0
 8013570:	f000 80e4 	beq.w	801373c <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	7d1b      	ldrb	r3, [r3, #20]
 8013578:	2b02      	cmp	r3, #2
 801357a:	d00d      	beq.n	8013598 <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801357e:	68db      	ldr	r3, [r3, #12]
 8013580:	899b      	ldrh	r3, [r3, #12]
 8013582:	b29c      	uxth	r4, r3
 8013584:	2010      	movs	r0, #16
 8013586:	f7f8 ff99 	bl	800c4bc <lwip_htons>
 801358a:	4603      	mov	r3, r0
 801358c:	461a      	mov	r2, r3
 801358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013590:	68db      	ldr	r3, [r3, #12]
 8013592:	4322      	orrs	r2, r4
 8013594:	b292      	uxth	r2, r2
 8013596:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013598:	697a      	ldr	r2, [r7, #20]
 801359a:	6879      	ldr	r1, [r7, #4]
 801359c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801359e:	f000 f909 	bl	80137b4 <tcp_output_segment>
 80135a2:	4603      	mov	r3, r0
 80135a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80135a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d016      	beq.n	80135dc <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	8b5b      	ldrh	r3, [r3, #26]
 80135b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135b6:	b29a      	uxth	r2, r3
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	835a      	strh	r2, [r3, #26]
      return err;
 80135bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135c0:	e0d3      	b.n	801376a <tcp_output+0x3e2>
 80135c2:	bf00      	nop
 80135c4:	0801ee40 	.word	0x0801ee40
 80135c8:	0801f384 	.word	0x0801f384
 80135cc:	0801ee94 	.word	0x0801ee94
 80135d0:	0801f39c 	.word	0x0801f39c
 80135d4:	20077984 	.word	0x20077984
 80135d8:	0801f3c4 	.word	0x0801f3c4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80135dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135de:	681a      	ldr	r2, [r3, #0]
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	7d1b      	ldrb	r3, [r3, #20]
 80135e8:	2b02      	cmp	r3, #2
 80135ea:	d006      	beq.n	80135fa <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	8b5b      	ldrh	r3, [r3, #26]
 80135f0:	f023 0303 	bic.w	r3, r3, #3
 80135f4:	b29a      	uxth	r2, r3
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80135fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fc:	68db      	ldr	r3, [r3, #12]
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	4618      	mov	r0, r3
 8013602:	f7f8 ff70 	bl	800c4e6 <lwip_htonl>
 8013606:	4604      	mov	r4, r0
 8013608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801360a:	891b      	ldrh	r3, [r3, #8]
 801360c:	461d      	mov	r5, r3
 801360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	899b      	ldrh	r3, [r3, #12]
 8013614:	b29b      	uxth	r3, r3
 8013616:	4618      	mov	r0, r3
 8013618:	f7f8 ff50 	bl	800c4bc <lwip_htons>
 801361c:	4603      	mov	r3, r0
 801361e:	b2db      	uxtb	r3, r3
 8013620:	f003 0303 	and.w	r3, r3, #3
 8013624:	2b00      	cmp	r3, #0
 8013626:	d001      	beq.n	801362c <tcp_output+0x2a4>
 8013628:	2301      	movs	r3, #1
 801362a:	e000      	b.n	801362e <tcp_output+0x2a6>
 801362c:	2300      	movs	r3, #0
 801362e:	442b      	add	r3, r5
 8013630:	4423      	add	r3, r4
 8013632:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	1ad3      	subs	r3, r2, r3
 801363c:	2b00      	cmp	r3, #0
 801363e:	da02      	bge.n	8013646 <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	68ba      	ldr	r2, [r7, #8]
 8013644:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013648:	891b      	ldrh	r3, [r3, #8]
 801364a:	461c      	mov	r4, r3
 801364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364e:	68db      	ldr	r3, [r3, #12]
 8013650:	899b      	ldrh	r3, [r3, #12]
 8013652:	b29b      	uxth	r3, r3
 8013654:	4618      	mov	r0, r3
 8013656:	f7f8 ff31 	bl	800c4bc <lwip_htons>
 801365a:	4603      	mov	r3, r0
 801365c:	b2db      	uxtb	r3, r3
 801365e:	f003 0303 	and.w	r3, r3, #3
 8013662:	2b00      	cmp	r3, #0
 8013664:	d001      	beq.n	801366a <tcp_output+0x2e2>
 8013666:	2301      	movs	r3, #1
 8013668:	e000      	b.n	801366c <tcp_output+0x2e4>
 801366a:	2300      	movs	r3, #0
 801366c:	4423      	add	r3, r4
 801366e:	2b00      	cmp	r3, #0
 8013670:	d049      	beq.n	8013706 <tcp_output+0x37e>
      seg->next = NULL;
 8013672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013674:	2200      	movs	r2, #0
 8013676:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801367c:	2b00      	cmp	r3, #0
 801367e:	d105      	bne.n	801368c <tcp_output+0x304>
        pcb->unacked = seg;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013684:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013688:	623b      	str	r3, [r7, #32]
 801368a:	e03f      	b.n	801370c <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801368e:	68db      	ldr	r3, [r3, #12]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	4618      	mov	r0, r3
 8013694:	f7f8 ff27 	bl	800c4e6 <lwip_htonl>
 8013698:	4604      	mov	r4, r0
 801369a:	6a3b      	ldr	r3, [r7, #32]
 801369c:	68db      	ldr	r3, [r3, #12]
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7f8 ff20 	bl	800c4e6 <lwip_htonl>
 80136a6:	4603      	mov	r3, r0
 80136a8:	1ae3      	subs	r3, r4, r3
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	da24      	bge.n	80136f8 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	3370      	adds	r3, #112	; 0x70
 80136b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80136b4:	e002      	b.n	80136bc <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80136b6:	69fb      	ldr	r3, [r7, #28]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80136bc:	69fb      	ldr	r3, [r7, #28]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d011      	beq.n	80136e8 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80136c4:	69fb      	ldr	r3, [r7, #28]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	68db      	ldr	r3, [r3, #12]
 80136ca:	685b      	ldr	r3, [r3, #4]
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7f8 ff0a 	bl	800c4e6 <lwip_htonl>
 80136d2:	4604      	mov	r4, r0
 80136d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d6:	68db      	ldr	r3, [r3, #12]
 80136d8:	685b      	ldr	r3, [r3, #4]
 80136da:	4618      	mov	r0, r3
 80136dc:	f7f8 ff03 	bl	800c4e6 <lwip_htonl>
 80136e0:	4603      	mov	r3, r0
 80136e2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	dbe6      	blt.n	80136b6 <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80136f0:	69fb      	ldr	r3, [r7, #28]
 80136f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136f4:	601a      	str	r2, [r3, #0]
 80136f6:	e009      	b.n	801370c <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80136f8:	6a3b      	ldr	r3, [r7, #32]
 80136fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136fc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80136fe:	6a3b      	ldr	r3, [r7, #32]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	623b      	str	r3, [r7, #32]
 8013704:	e002      	b.n	801370c <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013708:	f7fb ff13 	bl	800f532 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013710:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013714:	2b00      	cmp	r3, #0
 8013716:	d012      	beq.n	801373e <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	4618      	mov	r0, r3
 8013720:	f7f8 fee1 	bl	800c4e6 <lwip_htonl>
 8013724:	4602      	mov	r2, r0
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801372a:	1ad3      	subs	r3, r2, r3
 801372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801372e:	8912      	ldrh	r2, [r2, #8]
 8013730:	4413      	add	r3, r2
  while (seg != NULL &&
 8013732:	69ba      	ldr	r2, [r7, #24]
 8013734:	429a      	cmp	r2, r3
 8013736:	f4bf aed7 	bcs.w	80134e8 <tcp_output+0x160>
 801373a:	e000      	b.n	801373e <tcp_output+0x3b6>
      break;
 801373c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013742:	2b00      	cmp	r3, #0
 8013744:	d108      	bne.n	8013758 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2200      	movs	r2, #0
 801374a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801374e:	e004      	b.n	801375a <tcp_output+0x3d2>
    goto output_done;
 8013750:	bf00      	nop
 8013752:	e002      	b.n	801375a <tcp_output+0x3d2>
    goto output_done;
 8013754:	bf00      	nop
 8013756:	e000      	b.n	801375a <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013758:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	8b5b      	ldrh	r3, [r3, #26]
 801375e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013762:	b29a      	uxth	r2, r3
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013768:	2300      	movs	r3, #0
}
 801376a:	4618      	mov	r0, r3
 801376c:	3728      	adds	r7, #40	; 0x28
 801376e:	46bd      	mov	sp, r7
 8013770:	bdb0      	pop	{r4, r5, r7, pc}
 8013772:	bf00      	nop

08013774 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b082      	sub	sp, #8
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d106      	bne.n	8013790 <tcp_output_segment_busy+0x1c>
 8013782:	4b09      	ldr	r3, [pc, #36]	; (80137a8 <tcp_output_segment_busy+0x34>)
 8013784:	f240 529a 	movw	r2, #1434	; 0x59a
 8013788:	4908      	ldr	r1, [pc, #32]	; (80137ac <tcp_output_segment_busy+0x38>)
 801378a:	4809      	ldr	r0, [pc, #36]	; (80137b0 <tcp_output_segment_busy+0x3c>)
 801378c:	f005 fa00 	bl	8018b90 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	7b9b      	ldrb	r3, [r3, #14]
 8013796:	2b01      	cmp	r3, #1
 8013798:	d001      	beq.n	801379e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801379a:	2301      	movs	r3, #1
 801379c:	e000      	b.n	80137a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801379e:	2300      	movs	r3, #0
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3708      	adds	r7, #8
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	0801ee40 	.word	0x0801ee40
 80137ac:	0801f3dc 	.word	0x0801f3dc
 80137b0:	0801ee94 	.word	0x0801ee94

080137b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80137b4:	b5b0      	push	{r4, r5, r7, lr}
 80137b6:	b08c      	sub	sp, #48	; 0x30
 80137b8:	af04      	add	r7, sp, #16
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	60b9      	str	r1, [r7, #8]
 80137be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d106      	bne.n	80137d4 <tcp_output_segment+0x20>
 80137c6:	4b64      	ldr	r3, [pc, #400]	; (8013958 <tcp_output_segment+0x1a4>)
 80137c8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80137cc:	4963      	ldr	r1, [pc, #396]	; (801395c <tcp_output_segment+0x1a8>)
 80137ce:	4864      	ldr	r0, [pc, #400]	; (8013960 <tcp_output_segment+0x1ac>)
 80137d0:	f005 f9de 	bl	8018b90 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d106      	bne.n	80137e8 <tcp_output_segment+0x34>
 80137da:	4b5f      	ldr	r3, [pc, #380]	; (8013958 <tcp_output_segment+0x1a4>)
 80137dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80137e0:	4960      	ldr	r1, [pc, #384]	; (8013964 <tcp_output_segment+0x1b0>)
 80137e2:	485f      	ldr	r0, [pc, #380]	; (8013960 <tcp_output_segment+0x1ac>)
 80137e4:	f005 f9d4 	bl	8018b90 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d106      	bne.n	80137fc <tcp_output_segment+0x48>
 80137ee:	4b5a      	ldr	r3, [pc, #360]	; (8013958 <tcp_output_segment+0x1a4>)
 80137f0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80137f4:	495c      	ldr	r1, [pc, #368]	; (8013968 <tcp_output_segment+0x1b4>)
 80137f6:	485a      	ldr	r0, [pc, #360]	; (8013960 <tcp_output_segment+0x1ac>)
 80137f8:	f005 f9ca 	bl	8018b90 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80137fc:	68f8      	ldr	r0, [r7, #12]
 80137fe:	f7ff ffb9 	bl	8013774 <tcp_output_segment_busy>
 8013802:	4603      	mov	r3, r0
 8013804:	2b00      	cmp	r3, #0
 8013806:	d001      	beq.n	801380c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013808:	2300      	movs	r3, #0
 801380a:	e0a1      	b.n	8013950 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	68dc      	ldr	r4, [r3, #12]
 8013814:	4610      	mov	r0, r2
 8013816:	f7f8 fe66 	bl	800c4e6 <lwip_htonl>
 801381a:	4603      	mov	r3, r0
 801381c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	68dc      	ldr	r4, [r3, #12]
 8013826:	4610      	mov	r0, r2
 8013828:	f7f8 fe48 	bl	800c4bc <lwip_htons>
 801382c:	4603      	mov	r3, r0
 801382e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013834:	68ba      	ldr	r2, [r7, #8]
 8013836:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013838:	441a      	add	r2, r3
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	68db      	ldr	r3, [r3, #12]
 8013842:	3314      	adds	r3, #20
 8013844:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	7a9b      	ldrb	r3, [r3, #10]
 801384a:	f003 0301 	and.w	r3, r3, #1
 801384e:	2b00      	cmp	r3, #0
 8013850:	d015      	beq.n	801387e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	3304      	adds	r3, #4
 8013856:	461a      	mov	r2, r3
 8013858:	6879      	ldr	r1, [r7, #4]
 801385a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801385e:	f7fc fa2d 	bl	800fcbc <tcp_eff_send_mss_netif>
 8013862:	4603      	mov	r3, r0
 8013864:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013866:	8b7b      	ldrh	r3, [r7, #26]
 8013868:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801386c:	4618      	mov	r0, r3
 801386e:	f7f8 fe3a 	bl	800c4e6 <lwip_htonl>
 8013872:	4602      	mov	r2, r0
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013878:	69fb      	ldr	r3, [r7, #28]
 801387a:	3304      	adds	r3, #4
 801387c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801387e:	68bb      	ldr	r3, [r7, #8]
 8013880:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013884:	2b00      	cmp	r3, #0
 8013886:	da02      	bge.n	801388e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	2200      	movs	r2, #0
 801388c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013892:	2b00      	cmp	r3, #0
 8013894:	d10c      	bne.n	80138b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013896:	4b35      	ldr	r3, [pc, #212]	; (801396c <tcp_output_segment+0x1b8>)
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	68db      	ldr	r3, [r3, #12]
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7f8 fe1e 	bl	800c4e6 <lwip_htonl>
 80138aa:	4602      	mov	r2, r0
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	68da      	ldr	r2, [r3, #12]
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	685b      	ldr	r3, [r3, #4]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	1ad3      	subs	r3, r2, r3
 80138bc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	8959      	ldrh	r1, [r3, #10]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	685b      	ldr	r3, [r3, #4]
 80138c8:	8b3a      	ldrh	r2, [r7, #24]
 80138ca:	1a8a      	subs	r2, r1, r2
 80138cc:	b292      	uxth	r2, r2
 80138ce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	685b      	ldr	r3, [r3, #4]
 80138d4:	8919      	ldrh	r1, [r3, #8]
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	8b3a      	ldrh	r2, [r7, #24]
 80138dc:	1a8a      	subs	r2, r1, r2
 80138de:	b292      	uxth	r2, r2
 80138e0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	685b      	ldr	r3, [r3, #4]
 80138e6:	68fa      	ldr	r2, [r7, #12]
 80138e8:	68d2      	ldr	r2, [r2, #12]
 80138ea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	68db      	ldr	r3, [r3, #12]
 80138f0:	2200      	movs	r2, #0
 80138f2:	741a      	strb	r2, [r3, #16]
 80138f4:	2200      	movs	r2, #0
 80138f6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	68da      	ldr	r2, [r3, #12]
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	7a9b      	ldrb	r3, [r3, #10]
 8013900:	f003 0301 	and.w	r3, r3, #1
 8013904:	2b00      	cmp	r3, #0
 8013906:	d001      	beq.n	801390c <tcp_output_segment+0x158>
 8013908:	2318      	movs	r3, #24
 801390a:	e000      	b.n	801390e <tcp_output_segment+0x15a>
 801390c:	2314      	movs	r3, #20
 801390e:	4413      	add	r3, r2
 8013910:	69fa      	ldr	r2, [r7, #28]
 8013912:	429a      	cmp	r2, r3
 8013914:	d006      	beq.n	8013924 <tcp_output_segment+0x170>
 8013916:	4b10      	ldr	r3, [pc, #64]	; (8013958 <tcp_output_segment+0x1a4>)
 8013918:	f240 621c 	movw	r2, #1564	; 0x61c
 801391c:	4914      	ldr	r1, [pc, #80]	; (8013970 <tcp_output_segment+0x1bc>)
 801391e:	4810      	ldr	r0, [pc, #64]	; (8013960 <tcp_output_segment+0x1ac>)
 8013920:	f005 f936 	bl	8018b90 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	6858      	ldr	r0, [r3, #4]
 8013928:	68b9      	ldr	r1, [r7, #8]
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	1d1c      	adds	r4, r3, #4
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	7add      	ldrb	r5, [r3, #11]
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	7a9b      	ldrb	r3, [r3, #10]
 8013936:	687a      	ldr	r2, [r7, #4]
 8013938:	9202      	str	r2, [sp, #8]
 801393a:	2206      	movs	r2, #6
 801393c:	9201      	str	r2, [sp, #4]
 801393e:	9300      	str	r3, [sp, #0]
 8013940:	462b      	mov	r3, r5
 8013942:	4622      	mov	r2, r4
 8013944:	f002 fe28 	bl	8016598 <ip4_output_if>
 8013948:	4603      	mov	r3, r0
 801394a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801394c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013950:	4618      	mov	r0, r3
 8013952:	3720      	adds	r7, #32
 8013954:	46bd      	mov	sp, r7
 8013956:	bdb0      	pop	{r4, r5, r7, pc}
 8013958:	0801ee40 	.word	0x0801ee40
 801395c:	0801f404 	.word	0x0801f404
 8013960:	0801ee94 	.word	0x0801ee94
 8013964:	0801f424 	.word	0x0801f424
 8013968:	0801f444 	.word	0x0801f444
 801396c:	20077938 	.word	0x20077938
 8013970:	0801f468 	.word	0x0801f468

08013974 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013974:	b5b0      	push	{r4, r5, r7, lr}
 8013976:	b084      	sub	sp, #16
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d106      	bne.n	8013990 <tcp_rexmit_rto_prepare+0x1c>
 8013982:	4b31      	ldr	r3, [pc, #196]	; (8013a48 <tcp_rexmit_rto_prepare+0xd4>)
 8013984:	f240 6263 	movw	r2, #1635	; 0x663
 8013988:	4930      	ldr	r1, [pc, #192]	; (8013a4c <tcp_rexmit_rto_prepare+0xd8>)
 801398a:	4831      	ldr	r0, [pc, #196]	; (8013a50 <tcp_rexmit_rto_prepare+0xdc>)
 801398c:	f005 f900 	bl	8018b90 <iprintf>

  if (pcb->unacked == NULL) {
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013994:	2b00      	cmp	r3, #0
 8013996:	d102      	bne.n	801399e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013998:	f06f 0305 	mvn.w	r3, #5
 801399c:	e050      	b.n	8013a40 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139a2:	60fb      	str	r3, [r7, #12]
 80139a4:	e00b      	b.n	80139be <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80139a6:	68f8      	ldr	r0, [r7, #12]
 80139a8:	f7ff fee4 	bl	8013774 <tcp_output_segment_busy>
 80139ac:	4603      	mov	r3, r0
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d002      	beq.n	80139b8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80139b2:	f06f 0305 	mvn.w	r3, #5
 80139b6:	e043      	b.n	8013a40 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	60fb      	str	r3, [r7, #12]
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d1ef      	bne.n	80139a6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80139c6:	68f8      	ldr	r0, [r7, #12]
 80139c8:	f7ff fed4 	bl	8013774 <tcp_output_segment_busy>
 80139cc:	4603      	mov	r3, r0
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d002      	beq.n	80139d8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80139d2:	f06f 0305 	mvn.w	r3, #5
 80139d6:	e033      	b.n	8013a40 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2200      	movs	r2, #0
 80139ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	8b5b      	ldrh	r3, [r3, #26]
 80139f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80139f6:	b29a      	uxth	r2, r3
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	68db      	ldr	r3, [r3, #12]
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7f8 fd6f 	bl	800c4e6 <lwip_htonl>
 8013a08:	4604      	mov	r4, r0
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	891b      	ldrh	r3, [r3, #8]
 8013a0e:	461d      	mov	r5, r3
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	68db      	ldr	r3, [r3, #12]
 8013a14:	899b      	ldrh	r3, [r3, #12]
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7f8 fd4f 	bl	800c4bc <lwip_htons>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	b2db      	uxtb	r3, r3
 8013a22:	f003 0303 	and.w	r3, r3, #3
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d001      	beq.n	8013a2e <tcp_rexmit_rto_prepare+0xba>
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	e000      	b.n	8013a30 <tcp_rexmit_rto_prepare+0xbc>
 8013a2e:	2300      	movs	r3, #0
 8013a30:	442b      	add	r3, r5
 8013a32:	18e2      	adds	r2, r4, r3
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013a3e:	2300      	movs	r3, #0
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	3710      	adds	r7, #16
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bdb0      	pop	{r4, r5, r7, pc}
 8013a48:	0801ee40 	.word	0x0801ee40
 8013a4c:	0801f47c 	.word	0x0801f47c
 8013a50:	0801ee94 	.word	0x0801ee94

08013a54 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b082      	sub	sp, #8
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d106      	bne.n	8013a70 <tcp_rexmit_rto_commit+0x1c>
 8013a62:	4b0d      	ldr	r3, [pc, #52]	; (8013a98 <tcp_rexmit_rto_commit+0x44>)
 8013a64:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013a68:	490c      	ldr	r1, [pc, #48]	; (8013a9c <tcp_rexmit_rto_commit+0x48>)
 8013a6a:	480d      	ldr	r0, [pc, #52]	; (8013aa0 <tcp_rexmit_rto_commit+0x4c>)
 8013a6c:	f005 f890 	bl	8018b90 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a76:	2bff      	cmp	r3, #255	; 0xff
 8013a78:	d007      	beq.n	8013a8a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a80:	3301      	adds	r3, #1
 8013a82:	b2da      	uxtb	r2, r3
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f7ff fc7c 	bl	8013388 <tcp_output>
}
 8013a90:	bf00      	nop
 8013a92:	3708      	adds	r7, #8
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}
 8013a98:	0801ee40 	.word	0x0801ee40
 8013a9c:	0801f4a0 	.word	0x0801f4a0
 8013aa0:	0801ee94 	.word	0x0801ee94

08013aa4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d106      	bne.n	8013ac0 <tcp_rexmit_rto+0x1c>
 8013ab2:	4b0a      	ldr	r3, [pc, #40]	; (8013adc <tcp_rexmit_rto+0x38>)
 8013ab4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013ab8:	4909      	ldr	r1, [pc, #36]	; (8013ae0 <tcp_rexmit_rto+0x3c>)
 8013aba:	480a      	ldr	r0, [pc, #40]	; (8013ae4 <tcp_rexmit_rto+0x40>)
 8013abc:	f005 f868 	bl	8018b90 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f7ff ff57 	bl	8013974 <tcp_rexmit_rto_prepare>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d102      	bne.n	8013ad2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f7ff ffc1 	bl	8013a54 <tcp_rexmit_rto_commit>
  }
}
 8013ad2:	bf00      	nop
 8013ad4:	3708      	adds	r7, #8
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	0801ee40 	.word	0x0801ee40
 8013ae0:	0801f4c4 	.word	0x0801f4c4
 8013ae4:	0801ee94 	.word	0x0801ee94

08013ae8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013ae8:	b590      	push	{r4, r7, lr}
 8013aea:	b085      	sub	sp, #20
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d106      	bne.n	8013b04 <tcp_rexmit+0x1c>
 8013af6:	4b2f      	ldr	r3, [pc, #188]	; (8013bb4 <tcp_rexmit+0xcc>)
 8013af8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013afc:	492e      	ldr	r1, [pc, #184]	; (8013bb8 <tcp_rexmit+0xd0>)
 8013afe:	482f      	ldr	r0, [pc, #188]	; (8013bbc <tcp_rexmit+0xd4>)
 8013b00:	f005 f846 	bl	8018b90 <iprintf>

  if (pcb->unacked == NULL) {
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d102      	bne.n	8013b12 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013b0c:	f06f 0305 	mvn.w	r3, #5
 8013b10:	e04c      	b.n	8013bac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b16:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013b18:	68b8      	ldr	r0, [r7, #8]
 8013b1a:	f7ff fe2b 	bl	8013774 <tcp_output_segment_busy>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d002      	beq.n	8013b2a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013b24:	f06f 0305 	mvn.w	r3, #5
 8013b28:	e040      	b.n	8013bac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	336c      	adds	r3, #108	; 0x6c
 8013b36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013b38:	e002      	b.n	8013b40 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d011      	beq.n	8013b6c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	68db      	ldr	r3, [r3, #12]
 8013b4e:	685b      	ldr	r3, [r3, #4]
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7f8 fcc8 	bl	800c4e6 <lwip_htonl>
 8013b56:	4604      	mov	r4, r0
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	68db      	ldr	r3, [r3, #12]
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f7f8 fcc1 	bl	800c4e6 <lwip_htonl>
 8013b64:	4603      	mov	r3, r0
 8013b66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	dbe6      	blt.n	8013b3a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	68ba      	ldr	r2, [r7, #8]
 8013b78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d103      	bne.n	8013b8a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2200      	movs	r2, #0
 8013b86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013b90:	2bff      	cmp	r3, #255	; 0xff
 8013b92:	d007      	beq.n	8013ba4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	b2da      	uxtb	r2, r3
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013baa:	2300      	movs	r3, #0
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3714      	adds	r7, #20
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd90      	pop	{r4, r7, pc}
 8013bb4:	0801ee40 	.word	0x0801ee40
 8013bb8:	0801f4e0 	.word	0x0801f4e0
 8013bbc:	0801ee94 	.word	0x0801ee94

08013bc0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d106      	bne.n	8013bdc <tcp_rexmit_fast+0x1c>
 8013bce:	4b2a      	ldr	r3, [pc, #168]	; (8013c78 <tcp_rexmit_fast+0xb8>)
 8013bd0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013bd4:	4929      	ldr	r1, [pc, #164]	; (8013c7c <tcp_rexmit_fast+0xbc>)
 8013bd6:	482a      	ldr	r0, [pc, #168]	; (8013c80 <tcp_rexmit_fast+0xc0>)
 8013bd8:	f004 ffda 	bl	8018b90 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d045      	beq.n	8013c70 <tcp_rexmit_fast+0xb0>
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	8b5b      	ldrh	r3, [r3, #26]
 8013be8:	f003 0304 	and.w	r3, r3, #4
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d13f      	bne.n	8013c70 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f7ff ff79 	bl	8013ae8 <tcp_rexmit>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d139      	bne.n	8013c70 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	bf28      	it	cs
 8013c0c:	4613      	movcs	r3, r2
 8013c0e:	b29b      	uxth	r3, r3
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	da00      	bge.n	8013c16 <tcp_rexmit_fast+0x56>
 8013c14:	3301      	adds	r3, #1
 8013c16:	105b      	asrs	r3, r3, #1
 8013c18:	b29a      	uxth	r2, r3
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013c26:	461a      	mov	r2, r3
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c2c:	005b      	lsls	r3, r3, #1
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d206      	bcs.n	8013c40 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c36:	005b      	lsls	r3, r3, #1
 8013c38:	b29a      	uxth	r2, r3
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	0049      	lsls	r1, r1, #1
 8013c4e:	440b      	add	r3, r1
 8013c50:	b29b      	uxth	r3, r3
 8013c52:	4413      	add	r3, r2
 8013c54:	b29a      	uxth	r2, r3
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	8b5b      	ldrh	r3, [r3, #26]
 8013c60:	f043 0304 	orr.w	r3, r3, #4
 8013c64:	b29a      	uxth	r2, r3
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013c70:	bf00      	nop
 8013c72:	3708      	adds	r7, #8
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	0801ee40 	.word	0x0801ee40
 8013c7c:	0801f4f8 	.word	0x0801f4f8
 8013c80:	0801ee94 	.word	0x0801ee94

08013c84 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b086      	sub	sp, #24
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	60f8      	str	r0, [r7, #12]
 8013c8c:	607b      	str	r3, [r7, #4]
 8013c8e:	460b      	mov	r3, r1
 8013c90:	817b      	strh	r3, [r7, #10]
 8013c92:	4613      	mov	r3, r2
 8013c94:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013c96:	897a      	ldrh	r2, [r7, #10]
 8013c98:	893b      	ldrh	r3, [r7, #8]
 8013c9a:	4413      	add	r3, r2
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	3314      	adds	r3, #20
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013ca6:	4619      	mov	r1, r3
 8013ca8:	2022      	movs	r0, #34	; 0x22
 8013caa:	f7f9 fd15 	bl	800d6d8 <pbuf_alloc>
 8013cae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d04d      	beq.n	8013d52 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013cb6:	897b      	ldrh	r3, [r7, #10]
 8013cb8:	3313      	adds	r3, #19
 8013cba:	697a      	ldr	r2, [r7, #20]
 8013cbc:	8952      	ldrh	r2, [r2, #10]
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	db06      	blt.n	8013cd0 <tcp_output_alloc_header_common+0x4c>
 8013cc2:	4b26      	ldr	r3, [pc, #152]	; (8013d5c <tcp_output_alloc_header_common+0xd8>)
 8013cc4:	f240 7223 	movw	r2, #1827	; 0x723
 8013cc8:	4925      	ldr	r1, [pc, #148]	; (8013d60 <tcp_output_alloc_header_common+0xdc>)
 8013cca:	4826      	ldr	r0, [pc, #152]	; (8013d64 <tcp_output_alloc_header_common+0xe0>)
 8013ccc:	f004 ff60 	bl	8018b90 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	685b      	ldr	r3, [r3, #4]
 8013cd4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013cd6:	8c3b      	ldrh	r3, [r7, #32]
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7f8 fbef 	bl	800c4bc <lwip_htons>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	461a      	mov	r2, r3
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7f8 fbe7 	bl	800c4bc <lwip_htons>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	461a      	mov	r2, r3
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	687a      	ldr	r2, [r7, #4]
 8013cfa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013cfc:	68f8      	ldr	r0, [r7, #12]
 8013cfe:	f7f8 fbf2 	bl	800c4e6 <lwip_htonl>
 8013d02:	4602      	mov	r2, r0
 8013d04:	693b      	ldr	r3, [r7, #16]
 8013d06:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013d08:	897b      	ldrh	r3, [r7, #10]
 8013d0a:	089b      	lsrs	r3, r3, #2
 8013d0c:	b29b      	uxth	r3, r3
 8013d0e:	3305      	adds	r3, #5
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	031b      	lsls	r3, r3, #12
 8013d14:	b29a      	uxth	r2, r3
 8013d16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	4313      	orrs	r3, r2
 8013d1e:	b29b      	uxth	r3, r3
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7f8 fbcb 	bl	800c4bc <lwip_htons>
 8013d26:	4603      	mov	r3, r0
 8013d28:	461a      	mov	r2, r3
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013d2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7f8 fbc3 	bl	800c4bc <lwip_htons>
 8013d36:	4603      	mov	r3, r0
 8013d38:	461a      	mov	r2, r3
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	2200      	movs	r2, #0
 8013d42:	741a      	strb	r2, [r3, #16]
 8013d44:	2200      	movs	r2, #0
 8013d46:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	749a      	strb	r2, [r3, #18]
 8013d4e:	2200      	movs	r2, #0
 8013d50:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013d52:	697b      	ldr	r3, [r7, #20]
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	3718      	adds	r7, #24
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	0801ee40 	.word	0x0801ee40
 8013d60:	0801f518 	.word	0x0801f518
 8013d64:	0801ee94 	.word	0x0801ee94

08013d68 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013d68:	b5b0      	push	{r4, r5, r7, lr}
 8013d6a:	b08a      	sub	sp, #40	; 0x28
 8013d6c:	af04      	add	r7, sp, #16
 8013d6e:	60f8      	str	r0, [r7, #12]
 8013d70:	607b      	str	r3, [r7, #4]
 8013d72:	460b      	mov	r3, r1
 8013d74:	817b      	strh	r3, [r7, #10]
 8013d76:	4613      	mov	r3, r2
 8013d78:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d106      	bne.n	8013d8e <tcp_output_alloc_header+0x26>
 8013d80:	4b15      	ldr	r3, [pc, #84]	; (8013dd8 <tcp_output_alloc_header+0x70>)
 8013d82:	f240 7242 	movw	r2, #1858	; 0x742
 8013d86:	4915      	ldr	r1, [pc, #84]	; (8013ddc <tcp_output_alloc_header+0x74>)
 8013d88:	4815      	ldr	r0, [pc, #84]	; (8013de0 <tcp_output_alloc_header+0x78>)
 8013d8a:	f004 ff01 	bl	8018b90 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	8adb      	ldrh	r3, [r3, #22]
 8013d96:	68fa      	ldr	r2, [r7, #12]
 8013d98:	8b12      	ldrh	r2, [r2, #24]
 8013d9a:	68f9      	ldr	r1, [r7, #12]
 8013d9c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013d9e:	893d      	ldrh	r5, [r7, #8]
 8013da0:	897c      	ldrh	r4, [r7, #10]
 8013da2:	9103      	str	r1, [sp, #12]
 8013da4:	2110      	movs	r1, #16
 8013da6:	9102      	str	r1, [sp, #8]
 8013da8:	9201      	str	r2, [sp, #4]
 8013daa:	9300      	str	r3, [sp, #0]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	462a      	mov	r2, r5
 8013db0:	4621      	mov	r1, r4
 8013db2:	f7ff ff67 	bl	8013c84 <tcp_output_alloc_header_common>
 8013db6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013db8:	697b      	ldr	r3, [r7, #20]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d006      	beq.n	8013dcc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dc2:	68fa      	ldr	r2, [r7, #12]
 8013dc4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013dc6:	441a      	add	r2, r3
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013dcc:	697b      	ldr	r3, [r7, #20]
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3718      	adds	r7, #24
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8013dd6:	bf00      	nop
 8013dd8:	0801ee40 	.word	0x0801ee40
 8013ddc:	0801f548 	.word	0x0801f548
 8013de0:	0801ee94 	.word	0x0801ee94

08013de4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b088      	sub	sp, #32
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	60f8      	str	r0, [r7, #12]
 8013dec:	60b9      	str	r1, [r7, #8]
 8013dee:	4611      	mov	r1, r2
 8013df0:	461a      	mov	r2, r3
 8013df2:	460b      	mov	r3, r1
 8013df4:	71fb      	strb	r3, [r7, #7]
 8013df6:	4613      	mov	r3, r2
 8013df8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d106      	bne.n	8013e12 <tcp_output_fill_options+0x2e>
 8013e04:	4b12      	ldr	r3, [pc, #72]	; (8013e50 <tcp_output_fill_options+0x6c>)
 8013e06:	f240 7256 	movw	r2, #1878	; 0x756
 8013e0a:	4912      	ldr	r1, [pc, #72]	; (8013e54 <tcp_output_fill_options+0x70>)
 8013e0c:	4812      	ldr	r0, [pc, #72]	; (8013e58 <tcp_output_fill_options+0x74>)
 8013e0e:	f004 febf 	bl	8018b90 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013e12:	68bb      	ldr	r3, [r7, #8]
 8013e14:	685b      	ldr	r3, [r3, #4]
 8013e16:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013e18:	69bb      	ldr	r3, [r7, #24]
 8013e1a:	3314      	adds	r3, #20
 8013e1c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013e1e:	8bfb      	ldrh	r3, [r7, #30]
 8013e20:	009b      	lsls	r3, r3, #2
 8013e22:	461a      	mov	r2, r3
 8013e24:	79fb      	ldrb	r3, [r7, #7]
 8013e26:	009b      	lsls	r3, r3, #2
 8013e28:	f003 0304 	and.w	r3, r3, #4
 8013e2c:	4413      	add	r3, r2
 8013e2e:	3314      	adds	r3, #20
 8013e30:	69ba      	ldr	r2, [r7, #24]
 8013e32:	4413      	add	r3, r2
 8013e34:	697a      	ldr	r2, [r7, #20]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d006      	beq.n	8013e48 <tcp_output_fill_options+0x64>
 8013e3a:	4b05      	ldr	r3, [pc, #20]	; (8013e50 <tcp_output_fill_options+0x6c>)
 8013e3c:	f240 7275 	movw	r2, #1909	; 0x775
 8013e40:	4906      	ldr	r1, [pc, #24]	; (8013e5c <tcp_output_fill_options+0x78>)
 8013e42:	4805      	ldr	r0, [pc, #20]	; (8013e58 <tcp_output_fill_options+0x74>)
 8013e44:	f004 fea4 	bl	8018b90 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013e48:	bf00      	nop
 8013e4a:	3720      	adds	r7, #32
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}
 8013e50:	0801ee40 	.word	0x0801ee40
 8013e54:	0801f570 	.word	0x0801f570
 8013e58:	0801ee94 	.word	0x0801ee94
 8013e5c:	0801f468 	.word	0x0801f468

08013e60 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b08a      	sub	sp, #40	; 0x28
 8013e64:	af04      	add	r7, sp, #16
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	607a      	str	r2, [r7, #4]
 8013e6c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d106      	bne.n	8013e82 <tcp_output_control_segment+0x22>
 8013e74:	4b1c      	ldr	r3, [pc, #112]	; (8013ee8 <tcp_output_control_segment+0x88>)
 8013e76:	f240 7287 	movw	r2, #1927	; 0x787
 8013e7a:	491c      	ldr	r1, [pc, #112]	; (8013eec <tcp_output_control_segment+0x8c>)
 8013e7c:	481c      	ldr	r0, [pc, #112]	; (8013ef0 <tcp_output_control_segment+0x90>)
 8013e7e:	f004 fe87 	bl	8018b90 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013e82:	683a      	ldr	r2, [r7, #0]
 8013e84:	6879      	ldr	r1, [r7, #4]
 8013e86:	68f8      	ldr	r0, [r7, #12]
 8013e88:	f7fe fae2 	bl	8012450 <tcp_route>
 8013e8c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013e8e:	693b      	ldr	r3, [r7, #16]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d102      	bne.n	8013e9a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013e94:	23fc      	movs	r3, #252	; 0xfc
 8013e96:	75fb      	strb	r3, [r7, #23]
 8013e98:	e01c      	b.n	8013ed4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d006      	beq.n	8013eae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	7adb      	ldrb	r3, [r3, #11]
 8013ea4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	7a9b      	ldrb	r3, [r3, #10]
 8013eaa:	757b      	strb	r3, [r7, #21]
 8013eac:	e003      	b.n	8013eb6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013eae:	23ff      	movs	r3, #255	; 0xff
 8013eb0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013eb6:	7dba      	ldrb	r2, [r7, #22]
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	9302      	str	r3, [sp, #8]
 8013ebc:	2306      	movs	r3, #6
 8013ebe:	9301      	str	r3, [sp, #4]
 8013ec0:	7d7b      	ldrb	r3, [r7, #21]
 8013ec2:	9300      	str	r3, [sp, #0]
 8013ec4:	4613      	mov	r3, r2
 8013ec6:	683a      	ldr	r2, [r7, #0]
 8013ec8:	6879      	ldr	r1, [r7, #4]
 8013eca:	68b8      	ldr	r0, [r7, #8]
 8013ecc:	f002 fb64 	bl	8016598 <ip4_output_if>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013ed4:	68b8      	ldr	r0, [r7, #8]
 8013ed6:	f7f9 fee3 	bl	800dca0 <pbuf_free>
  return err;
 8013eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3718      	adds	r7, #24
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	0801ee40 	.word	0x0801ee40
 8013eec:	0801f598 	.word	0x0801f598
 8013ef0:	0801ee94 	.word	0x0801ee94

08013ef4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013ef4:	b590      	push	{r4, r7, lr}
 8013ef6:	b08b      	sub	sp, #44	; 0x2c
 8013ef8:	af04      	add	r7, sp, #16
 8013efa:	60f8      	str	r0, [r7, #12]
 8013efc:	60b9      	str	r1, [r7, #8]
 8013efe:	607a      	str	r2, [r7, #4]
 8013f00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d106      	bne.n	8013f16 <tcp_rst+0x22>
 8013f08:	4b1e      	ldr	r3, [pc, #120]	; (8013f84 <tcp_rst+0x90>)
 8013f0a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013f0e:	491e      	ldr	r1, [pc, #120]	; (8013f88 <tcp_rst+0x94>)
 8013f10:	481e      	ldr	r0, [pc, #120]	; (8013f8c <tcp_rst+0x98>)
 8013f12:	f004 fe3d 	bl	8018b90 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d106      	bne.n	8013f2a <tcp_rst+0x36>
 8013f1c:	4b19      	ldr	r3, [pc, #100]	; (8013f84 <tcp_rst+0x90>)
 8013f1e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013f22:	491b      	ldr	r1, [pc, #108]	; (8013f90 <tcp_rst+0x9c>)
 8013f24:	4819      	ldr	r0, [pc, #100]	; (8013f8c <tcp_rst+0x98>)
 8013f26:	f004 fe33 	bl	8018b90 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013f2e:	2308      	movs	r3, #8
 8013f30:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013f32:	7dfb      	ldrb	r3, [r7, #23]
 8013f34:	b29c      	uxth	r4, r3
 8013f36:	68b8      	ldr	r0, [r7, #8]
 8013f38:	f7f8 fad5 	bl	800c4e6 <lwip_htonl>
 8013f3c:	4602      	mov	r2, r0
 8013f3e:	8abb      	ldrh	r3, [r7, #20]
 8013f40:	9303      	str	r3, [sp, #12]
 8013f42:	2314      	movs	r3, #20
 8013f44:	9302      	str	r3, [sp, #8]
 8013f46:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013f48:	9301      	str	r3, [sp, #4]
 8013f4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013f4c:	9300      	str	r3, [sp, #0]
 8013f4e:	4613      	mov	r3, r2
 8013f50:	2200      	movs	r2, #0
 8013f52:	4621      	mov	r1, r4
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	f7ff fe95 	bl	8013c84 <tcp_output_alloc_header_common>
 8013f5a:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d00c      	beq.n	8013f7c <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013f62:	7dfb      	ldrb	r3, [r7, #23]
 8013f64:	2200      	movs	r2, #0
 8013f66:	6939      	ldr	r1, [r7, #16]
 8013f68:	68f8      	ldr	r0, [r7, #12]
 8013f6a:	f7ff ff3b 	bl	8013de4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f70:	683a      	ldr	r2, [r7, #0]
 8013f72:	6939      	ldr	r1, [r7, #16]
 8013f74:	68f8      	ldr	r0, [r7, #12]
 8013f76:	f7ff ff73 	bl	8013e60 <tcp_output_control_segment>
 8013f7a:	e000      	b.n	8013f7e <tcp_rst+0x8a>
    return;
 8013f7c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013f7e:	371c      	adds	r7, #28
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bd90      	pop	{r4, r7, pc}
 8013f84:	0801ee40 	.word	0x0801ee40
 8013f88:	0801f5c4 	.word	0x0801f5c4
 8013f8c:	0801ee94 	.word	0x0801ee94
 8013f90:	0801f5e0 	.word	0x0801f5e0

08013f94 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013f94:	b590      	push	{r4, r7, lr}
 8013f96:	b087      	sub	sp, #28
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d106      	bne.n	8013fb8 <tcp_send_empty_ack+0x24>
 8013faa:	4b28      	ldr	r3, [pc, #160]	; (801404c <tcp_send_empty_ack+0xb8>)
 8013fac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013fb0:	4927      	ldr	r1, [pc, #156]	; (8014050 <tcp_send_empty_ack+0xbc>)
 8013fb2:	4828      	ldr	r0, [pc, #160]	; (8014054 <tcp_send_empty_ack+0xc0>)
 8013fb4:	f004 fdec 	bl	8018b90 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013fb8:	7dfb      	ldrb	r3, [r7, #23]
 8013fba:	009b      	lsls	r3, r3, #2
 8013fbc:	b2db      	uxtb	r3, r3
 8013fbe:	f003 0304 	and.w	r3, r3, #4
 8013fc2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013fc4:	7d7b      	ldrb	r3, [r7, #21]
 8013fc6:	b29c      	uxth	r4, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7f8 fa8a 	bl	800c4e6 <lwip_htonl>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	4621      	mov	r1, r4
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f7ff fec5 	bl	8013d68 <tcp_output_alloc_header>
 8013fde:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d109      	bne.n	8013ffa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	8b5b      	ldrh	r3, [r3, #26]
 8013fea:	f043 0303 	orr.w	r3, r3, #3
 8013fee:	b29a      	uxth	r2, r3
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013ff4:	f06f 0301 	mvn.w	r3, #1
 8013ff8:	e023      	b.n	8014042 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013ffa:	7dbb      	ldrb	r3, [r7, #22]
 8013ffc:	7dfa      	ldrb	r2, [r7, #23]
 8013ffe:	6939      	ldr	r1, [r7, #16]
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f7ff feef 	bl	8013de4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014006:	687a      	ldr	r2, [r7, #4]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	3304      	adds	r3, #4
 801400c:	6939      	ldr	r1, [r7, #16]
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f7ff ff26 	bl	8013e60 <tcp_output_control_segment>
 8014014:	4603      	mov	r3, r0
 8014016:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d007      	beq.n	8014030 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	8b5b      	ldrh	r3, [r3, #26]
 8014024:	f043 0303 	orr.w	r3, r3, #3
 8014028:	b29a      	uxth	r2, r3
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	835a      	strh	r2, [r3, #26]
 801402e:	e006      	b.n	801403e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	8b5b      	ldrh	r3, [r3, #26]
 8014034:	f023 0303 	bic.w	r3, r3, #3
 8014038:	b29a      	uxth	r2, r3
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801403e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014042:	4618      	mov	r0, r3
 8014044:	371c      	adds	r7, #28
 8014046:	46bd      	mov	sp, r7
 8014048:	bd90      	pop	{r4, r7, pc}
 801404a:	bf00      	nop
 801404c:	0801ee40 	.word	0x0801ee40
 8014050:	0801f5fc 	.word	0x0801f5fc
 8014054:	0801ee94 	.word	0x0801ee94

08014058 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014058:	b590      	push	{r4, r7, lr}
 801405a:	b087      	sub	sp, #28
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014060:	2300      	movs	r3, #0
 8014062:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d106      	bne.n	8014078 <tcp_keepalive+0x20>
 801406a:	4b18      	ldr	r3, [pc, #96]	; (80140cc <tcp_keepalive+0x74>)
 801406c:	f640 0224 	movw	r2, #2084	; 0x824
 8014070:	4917      	ldr	r1, [pc, #92]	; (80140d0 <tcp_keepalive+0x78>)
 8014072:	4818      	ldr	r0, [pc, #96]	; (80140d4 <tcp_keepalive+0x7c>)
 8014074:	f004 fd8c 	bl	8018b90 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014078:	7dfb      	ldrb	r3, [r7, #23]
 801407a:	b29c      	uxth	r4, r3
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014080:	3b01      	subs	r3, #1
 8014082:	4618      	mov	r0, r3
 8014084:	f7f8 fa2f 	bl	800c4e6 <lwip_htonl>
 8014088:	4603      	mov	r3, r0
 801408a:	2200      	movs	r2, #0
 801408c:	4621      	mov	r1, r4
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	f7ff fe6a 	bl	8013d68 <tcp_output_alloc_header>
 8014094:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d102      	bne.n	80140a2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801409c:	f04f 33ff 	mov.w	r3, #4294967295
 80140a0:	e010      	b.n	80140c4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80140a2:	7dfb      	ldrb	r3, [r7, #23]
 80140a4:	2200      	movs	r2, #0
 80140a6:	6939      	ldr	r1, [r7, #16]
 80140a8:	6878      	ldr	r0, [r7, #4]
 80140aa:	f7ff fe9b 	bl	8013de4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	3304      	adds	r3, #4
 80140b4:	6939      	ldr	r1, [r7, #16]
 80140b6:	6878      	ldr	r0, [r7, #4]
 80140b8:	f7ff fed2 	bl	8013e60 <tcp_output_control_segment>
 80140bc:	4603      	mov	r3, r0
 80140be:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80140c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	371c      	adds	r7, #28
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd90      	pop	{r4, r7, pc}
 80140cc:	0801ee40 	.word	0x0801ee40
 80140d0:	0801f61c 	.word	0x0801f61c
 80140d4:	0801ee94 	.word	0x0801ee94

080140d8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80140d8:	b590      	push	{r4, r7, lr}
 80140da:	b08b      	sub	sp, #44	; 0x2c
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80140e0:	2300      	movs	r3, #0
 80140e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d106      	bne.n	80140fa <tcp_zero_window_probe+0x22>
 80140ec:	4b4c      	ldr	r3, [pc, #304]	; (8014220 <tcp_zero_window_probe+0x148>)
 80140ee:	f640 024f 	movw	r2, #2127	; 0x84f
 80140f2:	494c      	ldr	r1, [pc, #304]	; (8014224 <tcp_zero_window_probe+0x14c>)
 80140f4:	484c      	ldr	r0, [pc, #304]	; (8014228 <tcp_zero_window_probe+0x150>)
 80140f6:	f004 fd4b 	bl	8018b90 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140fe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014100:	6a3b      	ldr	r3, [r7, #32]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d101      	bne.n	801410a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014106:	2300      	movs	r3, #0
 8014108:	e086      	b.n	8014218 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014110:	2bff      	cmp	r3, #255	; 0xff
 8014112:	d007      	beq.n	8014124 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801411a:	3301      	adds	r3, #1
 801411c:	b2da      	uxtb	r2, r3
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014124:	6a3b      	ldr	r3, [r7, #32]
 8014126:	68db      	ldr	r3, [r3, #12]
 8014128:	899b      	ldrh	r3, [r3, #12]
 801412a:	b29b      	uxth	r3, r3
 801412c:	4618      	mov	r0, r3
 801412e:	f7f8 f9c5 	bl	800c4bc <lwip_htons>
 8014132:	4603      	mov	r3, r0
 8014134:	b2db      	uxtb	r3, r3
 8014136:	f003 0301 	and.w	r3, r3, #1
 801413a:	2b00      	cmp	r3, #0
 801413c:	d005      	beq.n	801414a <tcp_zero_window_probe+0x72>
 801413e:	6a3b      	ldr	r3, [r7, #32]
 8014140:	891b      	ldrh	r3, [r3, #8]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d101      	bne.n	801414a <tcp_zero_window_probe+0x72>
 8014146:	2301      	movs	r3, #1
 8014148:	e000      	b.n	801414c <tcp_zero_window_probe+0x74>
 801414a:	2300      	movs	r3, #0
 801414c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801414e:	7ffb      	ldrb	r3, [r7, #31]
 8014150:	2b00      	cmp	r3, #0
 8014152:	bf0c      	ite	eq
 8014154:	2301      	moveq	r3, #1
 8014156:	2300      	movne	r3, #0
 8014158:	b2db      	uxtb	r3, r3
 801415a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801415c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014160:	b299      	uxth	r1, r3
 8014162:	6a3b      	ldr	r3, [r7, #32]
 8014164:	68db      	ldr	r3, [r3, #12]
 8014166:	685b      	ldr	r3, [r3, #4]
 8014168:	8bba      	ldrh	r2, [r7, #28]
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f7ff fdfc 	bl	8013d68 <tcp_output_alloc_header>
 8014170:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014172:	69bb      	ldr	r3, [r7, #24]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d102      	bne.n	801417e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014178:	f04f 33ff 	mov.w	r3, #4294967295
 801417c:	e04c      	b.n	8014218 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801417e:	69bb      	ldr	r3, [r7, #24]
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014184:	7ffb      	ldrb	r3, [r7, #31]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d011      	beq.n	80141ae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	899b      	ldrh	r3, [r3, #12]
 801418e:	b29b      	uxth	r3, r3
 8014190:	b21b      	sxth	r3, r3
 8014192:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014196:	b21c      	sxth	r4, r3
 8014198:	2011      	movs	r0, #17
 801419a:	f7f8 f98f 	bl	800c4bc <lwip_htons>
 801419e:	4603      	mov	r3, r0
 80141a0:	b21b      	sxth	r3, r3
 80141a2:	4323      	orrs	r3, r4
 80141a4:	b21b      	sxth	r3, r3
 80141a6:	b29a      	uxth	r2, r3
 80141a8:	697b      	ldr	r3, [r7, #20]
 80141aa:	819a      	strh	r2, [r3, #12]
 80141ac:	e010      	b.n	80141d0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80141ae:	69bb      	ldr	r3, [r7, #24]
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	3314      	adds	r3, #20
 80141b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80141b6:	6a3b      	ldr	r3, [r7, #32]
 80141b8:	6858      	ldr	r0, [r3, #4]
 80141ba:	6a3b      	ldr	r3, [r7, #32]
 80141bc:	685b      	ldr	r3, [r3, #4]
 80141be:	891a      	ldrh	r2, [r3, #8]
 80141c0:	6a3b      	ldr	r3, [r7, #32]
 80141c2:	891b      	ldrh	r3, [r3, #8]
 80141c4:	1ad3      	subs	r3, r2, r3
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	2201      	movs	r2, #1
 80141ca:	6939      	ldr	r1, [r7, #16]
 80141cc:	f7f9 ff6e 	bl	800e0ac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80141d0:	6a3b      	ldr	r3, [r7, #32]
 80141d2:	68db      	ldr	r3, [r3, #12]
 80141d4:	685b      	ldr	r3, [r3, #4]
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7f8 f985 	bl	800c4e6 <lwip_htonl>
 80141dc:	4603      	mov	r3, r0
 80141de:	3301      	adds	r3, #1
 80141e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	1ad3      	subs	r3, r2, r3
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	da02      	bge.n	80141f4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	68fa      	ldr	r2, [r7, #12]
 80141f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80141f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141f8:	2200      	movs	r2, #0
 80141fa:	69b9      	ldr	r1, [r7, #24]
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f7ff fdf1 	bl	8013de4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014202:	687a      	ldr	r2, [r7, #4]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	3304      	adds	r3, #4
 8014208:	69b9      	ldr	r1, [r7, #24]
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f7ff fe28 	bl	8013e60 <tcp_output_control_segment>
 8014210:	4603      	mov	r3, r0
 8014212:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014214:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014218:	4618      	mov	r0, r3
 801421a:	372c      	adds	r7, #44	; 0x2c
 801421c:	46bd      	mov	sp, r7
 801421e:	bd90      	pop	{r4, r7, pc}
 8014220:	0801ee40 	.word	0x0801ee40
 8014224:	0801f638 	.word	0x0801f638
 8014228:	0801ee94 	.word	0x0801ee94

0801422c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014234:	f7fa f828 	bl	800e288 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014238:	4b0a      	ldr	r3, [pc, #40]	; (8014264 <tcpip_tcp_timer+0x38>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d103      	bne.n	8014248 <tcpip_tcp_timer+0x1c>
 8014240:	4b09      	ldr	r3, [pc, #36]	; (8014268 <tcpip_tcp_timer+0x3c>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d005      	beq.n	8014254 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014248:	2200      	movs	r2, #0
 801424a:	4908      	ldr	r1, [pc, #32]	; (801426c <tcpip_tcp_timer+0x40>)
 801424c:	20fa      	movs	r0, #250	; 0xfa
 801424e:	f000 f8f3 	bl	8014438 <sys_timeout>
 8014252:	e003      	b.n	801425c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014254:	4b06      	ldr	r3, [pc, #24]	; (8014270 <tcpip_tcp_timer+0x44>)
 8014256:	2200      	movs	r2, #0
 8014258:	601a      	str	r2, [r3, #0]
  }
}
 801425a:	bf00      	nop
 801425c:	bf00      	nop
 801425e:	3708      	adds	r7, #8
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}
 8014264:	20077944 	.word	0x20077944
 8014268:	20077948 	.word	0x20077948
 801426c:	0801422d 	.word	0x0801422d
 8014270:	20077990 	.word	0x20077990

08014274 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014278:	4b0a      	ldr	r3, [pc, #40]	; (80142a4 <tcp_timer_needed+0x30>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d10f      	bne.n	80142a0 <tcp_timer_needed+0x2c>
 8014280:	4b09      	ldr	r3, [pc, #36]	; (80142a8 <tcp_timer_needed+0x34>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d103      	bne.n	8014290 <tcp_timer_needed+0x1c>
 8014288:	4b08      	ldr	r3, [pc, #32]	; (80142ac <tcp_timer_needed+0x38>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d007      	beq.n	80142a0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014290:	4b04      	ldr	r3, [pc, #16]	; (80142a4 <tcp_timer_needed+0x30>)
 8014292:	2201      	movs	r2, #1
 8014294:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014296:	2200      	movs	r2, #0
 8014298:	4905      	ldr	r1, [pc, #20]	; (80142b0 <tcp_timer_needed+0x3c>)
 801429a:	20fa      	movs	r0, #250	; 0xfa
 801429c:	f000 f8cc 	bl	8014438 <sys_timeout>
  }
}
 80142a0:	bf00      	nop
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	20077990 	.word	0x20077990
 80142a8:	20077944 	.word	0x20077944
 80142ac:	20077948 	.word	0x20077948
 80142b0:	0801422d 	.word	0x0801422d

080142b4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b086      	sub	sp, #24
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	60f8      	str	r0, [r7, #12]
 80142bc:	60b9      	str	r1, [r7, #8]
 80142be:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80142c0:	200a      	movs	r0, #10
 80142c2:	f7f8 fdd3 	bl	800ce6c <memp_malloc>
 80142c6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80142c8:	693b      	ldr	r3, [r7, #16]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d109      	bne.n	80142e2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d151      	bne.n	8014378 <sys_timeout_abs+0xc4>
 80142d4:	4b2a      	ldr	r3, [pc, #168]	; (8014380 <sys_timeout_abs+0xcc>)
 80142d6:	22be      	movs	r2, #190	; 0xbe
 80142d8:	492a      	ldr	r1, [pc, #168]	; (8014384 <sys_timeout_abs+0xd0>)
 80142da:	482b      	ldr	r0, [pc, #172]	; (8014388 <sys_timeout_abs+0xd4>)
 80142dc:	f004 fc58 	bl	8018b90 <iprintf>
    return;
 80142e0:	e04a      	b.n	8014378 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	2200      	movs	r2, #0
 80142e6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	68ba      	ldr	r2, [r7, #8]
 80142ec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	687a      	ldr	r2, [r7, #4]
 80142f2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80142f4:	693b      	ldr	r3, [r7, #16]
 80142f6:	68fa      	ldr	r2, [r7, #12]
 80142f8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80142fa:	4b24      	ldr	r3, [pc, #144]	; (801438c <sys_timeout_abs+0xd8>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d103      	bne.n	801430a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014302:	4a22      	ldr	r2, [pc, #136]	; (801438c <sys_timeout_abs+0xd8>)
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	6013      	str	r3, [r2, #0]
    return;
 8014308:	e037      	b.n	801437a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	685a      	ldr	r2, [r3, #4]
 801430e:	4b1f      	ldr	r3, [pc, #124]	; (801438c <sys_timeout_abs+0xd8>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	685b      	ldr	r3, [r3, #4]
 8014314:	1ad3      	subs	r3, r2, r3
 8014316:	0fdb      	lsrs	r3, r3, #31
 8014318:	f003 0301 	and.w	r3, r3, #1
 801431c:	b2db      	uxtb	r3, r3
 801431e:	2b00      	cmp	r3, #0
 8014320:	d007      	beq.n	8014332 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014322:	4b1a      	ldr	r3, [pc, #104]	; (801438c <sys_timeout_abs+0xd8>)
 8014324:	681a      	ldr	r2, [r3, #0]
 8014326:	693b      	ldr	r3, [r7, #16]
 8014328:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801432a:	4a18      	ldr	r2, [pc, #96]	; (801438c <sys_timeout_abs+0xd8>)
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	6013      	str	r3, [r2, #0]
 8014330:	e023      	b.n	801437a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014332:	4b16      	ldr	r3, [pc, #88]	; (801438c <sys_timeout_abs+0xd8>)
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	617b      	str	r3, [r7, #20]
 8014338:	e01a      	b.n	8014370 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d00b      	beq.n	801435a <sys_timeout_abs+0xa6>
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	685a      	ldr	r2, [r3, #4]
 8014346:	697b      	ldr	r3, [r7, #20]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	1ad3      	subs	r3, r2, r3
 801434e:	0fdb      	lsrs	r3, r3, #31
 8014350:	f003 0301 	and.w	r3, r3, #1
 8014354:	b2db      	uxtb	r3, r3
 8014356:	2b00      	cmp	r3, #0
 8014358:	d007      	beq.n	801436a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	681a      	ldr	r2, [r3, #0]
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	693a      	ldr	r2, [r7, #16]
 8014366:	601a      	str	r2, [r3, #0]
        break;
 8014368:	e007      	b.n	801437a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801436a:	697b      	ldr	r3, [r7, #20]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	617b      	str	r3, [r7, #20]
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d1e1      	bne.n	801433a <sys_timeout_abs+0x86>
 8014376:	e000      	b.n	801437a <sys_timeout_abs+0xc6>
    return;
 8014378:	bf00      	nop
      }
    }
  }
}
 801437a:	3718      	adds	r7, #24
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}
 8014380:	0801f65c 	.word	0x0801f65c
 8014384:	0801f690 	.word	0x0801f690
 8014388:	0801f6d0 	.word	0x0801f6d0
 801438c:	20077988 	.word	0x20077988

08014390 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b086      	sub	sp, #24
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	4798      	blx	r3

  now = sys_now();
 80143a2:	f7f2 f90b 	bl	80065bc <sys_now>
 80143a6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	681a      	ldr	r2, [r3, #0]
 80143ac:	4b0f      	ldr	r3, [pc, #60]	; (80143ec <lwip_cyclic_timer+0x5c>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	4413      	add	r3, r2
 80143b2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80143b4:	68fa      	ldr	r2, [r7, #12]
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	1ad3      	subs	r3, r2, r3
 80143ba:	0fdb      	lsrs	r3, r3, #31
 80143bc:	f003 0301 	and.w	r3, r3, #1
 80143c0:	b2db      	uxtb	r3, r3
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d009      	beq.n	80143da <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	681a      	ldr	r2, [r3, #0]
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	4413      	add	r3, r2
 80143ce:	687a      	ldr	r2, [r7, #4]
 80143d0:	4907      	ldr	r1, [pc, #28]	; (80143f0 <lwip_cyclic_timer+0x60>)
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7ff ff6e 	bl	80142b4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80143d8:	e004      	b.n	80143e4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	4904      	ldr	r1, [pc, #16]	; (80143f0 <lwip_cyclic_timer+0x60>)
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f7ff ff68 	bl	80142b4 <sys_timeout_abs>
}
 80143e4:	bf00      	nop
 80143e6:	3718      	adds	r7, #24
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	2007798c 	.word	0x2007798c
 80143f0:	08014391 	.word	0x08014391

080143f4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b082      	sub	sp, #8
 80143f8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80143fa:	2301      	movs	r3, #1
 80143fc:	607b      	str	r3, [r7, #4]
 80143fe:	e00e      	b.n	801441e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014400:	4a0b      	ldr	r2, [pc, #44]	; (8014430 <sys_timeouts_init+0x3c>)
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	00db      	lsls	r3, r3, #3
 801440c:	4a08      	ldr	r2, [pc, #32]	; (8014430 <sys_timeouts_init+0x3c>)
 801440e:	4413      	add	r3, r2
 8014410:	461a      	mov	r2, r3
 8014412:	4908      	ldr	r1, [pc, #32]	; (8014434 <sys_timeouts_init+0x40>)
 8014414:	f000 f810 	bl	8014438 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	3301      	adds	r3, #1
 801441c:	607b      	str	r3, [r7, #4]
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2b02      	cmp	r3, #2
 8014422:	d9ed      	bls.n	8014400 <sys_timeouts_init+0xc>
  }
}
 8014424:	bf00      	nop
 8014426:	bf00      	nop
 8014428:	3708      	adds	r7, #8
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}
 801442e:	bf00      	nop
 8014430:	08020340 	.word	0x08020340
 8014434:	08014391 	.word	0x08014391

08014438 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b086      	sub	sp, #24
 801443c:	af00      	add	r7, sp, #0
 801443e:	60f8      	str	r0, [r7, #12]
 8014440:	60b9      	str	r1, [r7, #8]
 8014442:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801444a:	d306      	bcc.n	801445a <sys_timeout+0x22>
 801444c:	4b0a      	ldr	r3, [pc, #40]	; (8014478 <sys_timeout+0x40>)
 801444e:	f240 1229 	movw	r2, #297	; 0x129
 8014452:	490a      	ldr	r1, [pc, #40]	; (801447c <sys_timeout+0x44>)
 8014454:	480a      	ldr	r0, [pc, #40]	; (8014480 <sys_timeout+0x48>)
 8014456:	f004 fb9b 	bl	8018b90 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801445a:	f7f2 f8af 	bl	80065bc <sys_now>
 801445e:	4602      	mov	r2, r0
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	4413      	add	r3, r2
 8014464:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014466:	687a      	ldr	r2, [r7, #4]
 8014468:	68b9      	ldr	r1, [r7, #8]
 801446a:	6978      	ldr	r0, [r7, #20]
 801446c:	f7ff ff22 	bl	80142b4 <sys_timeout_abs>
#endif
}
 8014470:	bf00      	nop
 8014472:	3718      	adds	r7, #24
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}
 8014478:	0801f65c 	.word	0x0801f65c
 801447c:	0801f6f8 	.word	0x0801f6f8
 8014480:	0801f6d0 	.word	0x0801f6d0

08014484 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b084      	sub	sp, #16
 8014488:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801448a:	f7f2 f897 	bl	80065bc <sys_now>
 801448e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014490:	4b17      	ldr	r3, [pc, #92]	; (80144f0 <sys_check_timeouts+0x6c>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d022      	beq.n	80144e2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	685b      	ldr	r3, [r3, #4]
 80144a0:	68fa      	ldr	r2, [r7, #12]
 80144a2:	1ad3      	subs	r3, r2, r3
 80144a4:	0fdb      	lsrs	r3, r3, #31
 80144a6:	f003 0301 	and.w	r3, r3, #1
 80144aa:	b2db      	uxtb	r3, r3
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d11a      	bne.n	80144e6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	4a0e      	ldr	r2, [pc, #56]	; (80144f0 <sys_check_timeouts+0x6c>)
 80144b6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	689b      	ldr	r3, [r3, #8]
 80144bc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	68db      	ldr	r3, [r3, #12]
 80144c2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	685b      	ldr	r3, [r3, #4]
 80144c8:	4a0a      	ldr	r2, [pc, #40]	; (80144f4 <sys_check_timeouts+0x70>)
 80144ca:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80144cc:	68b9      	ldr	r1, [r7, #8]
 80144ce:	200a      	movs	r0, #10
 80144d0:	f7f8 fd42 	bl	800cf58 <memp_free>
    if (handler != NULL) {
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d0da      	beq.n	8014490 <sys_check_timeouts+0xc>
      handler(arg);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	6838      	ldr	r0, [r7, #0]
 80144de:	4798      	blx	r3
  do {
 80144e0:	e7d6      	b.n	8014490 <sys_check_timeouts+0xc>
      return;
 80144e2:	bf00      	nop
 80144e4:	e000      	b.n	80144e8 <sys_check_timeouts+0x64>
      return;
 80144e6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80144e8:	3710      	adds	r7, #16
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}
 80144ee:	bf00      	nop
 80144f0:	20077988 	.word	0x20077988
 80144f4:	2007798c 	.word	0x2007798c

080144f8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b082      	sub	sp, #8
 80144fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80144fe:	4b16      	ldr	r3, [pc, #88]	; (8014558 <sys_timeouts_sleeptime+0x60>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d102      	bne.n	801450c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014506:	f04f 33ff 	mov.w	r3, #4294967295
 801450a:	e020      	b.n	801454e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801450c:	f7f2 f856 	bl	80065bc <sys_now>
 8014510:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014512:	4b11      	ldr	r3, [pc, #68]	; (8014558 <sys_timeouts_sleeptime+0x60>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	685a      	ldr	r2, [r3, #4]
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	1ad3      	subs	r3, r2, r3
 801451c:	0fdb      	lsrs	r3, r3, #31
 801451e:	f003 0301 	and.w	r3, r3, #1
 8014522:	b2db      	uxtb	r3, r3
 8014524:	2b00      	cmp	r3, #0
 8014526:	d001      	beq.n	801452c <sys_timeouts_sleeptime+0x34>
    return 0;
 8014528:	2300      	movs	r3, #0
 801452a:	e010      	b.n	801454e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801452c:	4b0a      	ldr	r3, [pc, #40]	; (8014558 <sys_timeouts_sleeptime+0x60>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	685a      	ldr	r2, [r3, #4]
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	1ad3      	subs	r3, r2, r3
 8014536:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	2b00      	cmp	r3, #0
 801453c:	da06      	bge.n	801454c <sys_timeouts_sleeptime+0x54>
 801453e:	4b07      	ldr	r3, [pc, #28]	; (801455c <sys_timeouts_sleeptime+0x64>)
 8014540:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014544:	4906      	ldr	r1, [pc, #24]	; (8014560 <sys_timeouts_sleeptime+0x68>)
 8014546:	4807      	ldr	r0, [pc, #28]	; (8014564 <sys_timeouts_sleeptime+0x6c>)
 8014548:	f004 fb22 	bl	8018b90 <iprintf>
    return ret;
 801454c:	683b      	ldr	r3, [r7, #0]
  }
}
 801454e:	4618      	mov	r0, r3
 8014550:	3708      	adds	r7, #8
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
 8014556:	bf00      	nop
 8014558:	20077988 	.word	0x20077988
 801455c:	0801f65c 	.word	0x0801f65c
 8014560:	0801f730 	.word	0x0801f730
 8014564:	0801f6d0 	.word	0x0801f6d0

08014568 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801456c:	f003 fb4e 	bl	8017c0c <rand>
 8014570:	4603      	mov	r3, r0
 8014572:	b29b      	uxth	r3, r3
 8014574:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014578:	b29b      	uxth	r3, r3
 801457a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801457e:	b29a      	uxth	r2, r3
 8014580:	4b01      	ldr	r3, [pc, #4]	; (8014588 <udp_init+0x20>)
 8014582:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014584:	bf00      	nop
 8014586:	bd80      	pop	{r7, pc}
 8014588:	2000002c 	.word	0x2000002c

0801458c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801458c:	b480      	push	{r7}
 801458e:	b083      	sub	sp, #12
 8014590:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014592:	2300      	movs	r3, #0
 8014594:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014596:	4b17      	ldr	r3, [pc, #92]	; (80145f4 <udp_new_port+0x68>)
 8014598:	881b      	ldrh	r3, [r3, #0]
 801459a:	1c5a      	adds	r2, r3, #1
 801459c:	b291      	uxth	r1, r2
 801459e:	4a15      	ldr	r2, [pc, #84]	; (80145f4 <udp_new_port+0x68>)
 80145a0:	8011      	strh	r1, [r2, #0]
 80145a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145a6:	4293      	cmp	r3, r2
 80145a8:	d103      	bne.n	80145b2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80145aa:	4b12      	ldr	r3, [pc, #72]	; (80145f4 <udp_new_port+0x68>)
 80145ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80145b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80145b2:	4b11      	ldr	r3, [pc, #68]	; (80145f8 <udp_new_port+0x6c>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	603b      	str	r3, [r7, #0]
 80145b8:	e011      	b.n	80145de <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	8a5a      	ldrh	r2, [r3, #18]
 80145be:	4b0d      	ldr	r3, [pc, #52]	; (80145f4 <udp_new_port+0x68>)
 80145c0:	881b      	ldrh	r3, [r3, #0]
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d108      	bne.n	80145d8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80145c6:	88fb      	ldrh	r3, [r7, #6]
 80145c8:	3301      	adds	r3, #1
 80145ca:	80fb      	strh	r3, [r7, #6]
 80145cc:	88fb      	ldrh	r3, [r7, #6]
 80145ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80145d2:	d3e0      	bcc.n	8014596 <udp_new_port+0xa>
        return 0;
 80145d4:	2300      	movs	r3, #0
 80145d6:	e007      	b.n	80145e8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	68db      	ldr	r3, [r3, #12]
 80145dc:	603b      	str	r3, [r7, #0]
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d1ea      	bne.n	80145ba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80145e4:	4b03      	ldr	r3, [pc, #12]	; (80145f4 <udp_new_port+0x68>)
 80145e6:	881b      	ldrh	r3, [r3, #0]
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	370c      	adds	r7, #12
 80145ec:	46bd      	mov	sp, r7
 80145ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f2:	4770      	bx	lr
 80145f4:	2000002c 	.word	0x2000002c
 80145f8:	20077994 	.word	0x20077994

080145fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	60f8      	str	r0, [r7, #12]
 8014604:	60b9      	str	r1, [r7, #8]
 8014606:	4613      	mov	r3, r2
 8014608:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d105      	bne.n	801461c <udp_input_local_match+0x20>
 8014610:	4b27      	ldr	r3, [pc, #156]	; (80146b0 <udp_input_local_match+0xb4>)
 8014612:	2287      	movs	r2, #135	; 0x87
 8014614:	4927      	ldr	r1, [pc, #156]	; (80146b4 <udp_input_local_match+0xb8>)
 8014616:	4828      	ldr	r0, [pc, #160]	; (80146b8 <udp_input_local_match+0xbc>)
 8014618:	f004 faba 	bl	8018b90 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d105      	bne.n	801462e <udp_input_local_match+0x32>
 8014622:	4b23      	ldr	r3, [pc, #140]	; (80146b0 <udp_input_local_match+0xb4>)
 8014624:	2288      	movs	r2, #136	; 0x88
 8014626:	4925      	ldr	r1, [pc, #148]	; (80146bc <udp_input_local_match+0xc0>)
 8014628:	4823      	ldr	r0, [pc, #140]	; (80146b8 <udp_input_local_match+0xbc>)
 801462a:	f004 fab1 	bl	8018b90 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	7a1b      	ldrb	r3, [r3, #8]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d00b      	beq.n	801464e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	7a1a      	ldrb	r2, [r3, #8]
 801463a:	4b21      	ldr	r3, [pc, #132]	; (80146c0 <udp_input_local_match+0xc4>)
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014642:	3301      	adds	r3, #1
 8014644:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014646:	429a      	cmp	r2, r3
 8014648:	d001      	beq.n	801464e <udp_input_local_match+0x52>
    return 0;
 801464a:	2300      	movs	r3, #0
 801464c:	e02b      	b.n	80146a6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801464e:	79fb      	ldrb	r3, [r7, #7]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d018      	beq.n	8014686 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d013      	beq.n	8014682 <udp_input_local_match+0x86>
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d00f      	beq.n	8014682 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014662:	4b17      	ldr	r3, [pc, #92]	; (80146c0 <udp_input_local_match+0xc4>)
 8014664:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801466a:	d00a      	beq.n	8014682 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	681a      	ldr	r2, [r3, #0]
 8014670:	4b13      	ldr	r3, [pc, #76]	; (80146c0 <udp_input_local_match+0xc4>)
 8014672:	695b      	ldr	r3, [r3, #20]
 8014674:	405a      	eors	r2, r3
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	3308      	adds	r3, #8
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801467e:	2b00      	cmp	r3, #0
 8014680:	d110      	bne.n	80146a4 <udp_input_local_match+0xa8>
          return 1;
 8014682:	2301      	movs	r3, #1
 8014684:	e00f      	b.n	80146a6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d009      	beq.n	80146a0 <udp_input_local_match+0xa4>
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d005      	beq.n	80146a0 <udp_input_local_match+0xa4>
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	681a      	ldr	r2, [r3, #0]
 8014698:	4b09      	ldr	r3, [pc, #36]	; (80146c0 <udp_input_local_match+0xc4>)
 801469a:	695b      	ldr	r3, [r3, #20]
 801469c:	429a      	cmp	r2, r3
 801469e:	d101      	bne.n	80146a4 <udp_input_local_match+0xa8>
        return 1;
 80146a0:	2301      	movs	r3, #1
 80146a2:	e000      	b.n	80146a6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80146a4:	2300      	movs	r3, #0
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	3710      	adds	r7, #16
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
 80146ae:	bf00      	nop
 80146b0:	0801f744 	.word	0x0801f744
 80146b4:	0801f774 	.word	0x0801f774
 80146b8:	0801f798 	.word	0x0801f798
 80146bc:	0801f7c0 	.word	0x0801f7c0
 80146c0:	200094a8 	.word	0x200094a8

080146c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80146c4:	b590      	push	{r4, r7, lr}
 80146c6:	b08d      	sub	sp, #52	; 0x34
 80146c8:	af02      	add	r7, sp, #8
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80146ce:	2300      	movs	r3, #0
 80146d0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d105      	bne.n	80146e4 <udp_input+0x20>
 80146d8:	4b7c      	ldr	r3, [pc, #496]	; (80148cc <udp_input+0x208>)
 80146da:	22cf      	movs	r2, #207	; 0xcf
 80146dc:	497c      	ldr	r1, [pc, #496]	; (80148d0 <udp_input+0x20c>)
 80146de:	487d      	ldr	r0, [pc, #500]	; (80148d4 <udp_input+0x210>)
 80146e0:	f004 fa56 	bl	8018b90 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d105      	bne.n	80146f6 <udp_input+0x32>
 80146ea:	4b78      	ldr	r3, [pc, #480]	; (80148cc <udp_input+0x208>)
 80146ec:	22d0      	movs	r2, #208	; 0xd0
 80146ee:	497a      	ldr	r1, [pc, #488]	; (80148d8 <udp_input+0x214>)
 80146f0:	4878      	ldr	r0, [pc, #480]	; (80148d4 <udp_input+0x210>)
 80146f2:	f004 fa4d 	bl	8018b90 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	895b      	ldrh	r3, [r3, #10]
 80146fa:	2b07      	cmp	r3, #7
 80146fc:	d803      	bhi.n	8014706 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80146fe:	6878      	ldr	r0, [r7, #4]
 8014700:	f7f9 face 	bl	800dca0 <pbuf_free>
    goto end;
 8014704:	e0de      	b.n	80148c4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801470c:	4b73      	ldr	r3, [pc, #460]	; (80148dc <udp_input+0x218>)
 801470e:	695b      	ldr	r3, [r3, #20]
 8014710:	4a72      	ldr	r2, [pc, #456]	; (80148dc <udp_input+0x218>)
 8014712:	6812      	ldr	r2, [r2, #0]
 8014714:	4611      	mov	r1, r2
 8014716:	4618      	mov	r0, r3
 8014718:	f002 f816 	bl	8016748 <ip4_addr_isbroadcast_u32>
 801471c:	4603      	mov	r3, r0
 801471e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014720:	697b      	ldr	r3, [r7, #20]
 8014722:	881b      	ldrh	r3, [r3, #0]
 8014724:	b29b      	uxth	r3, r3
 8014726:	4618      	mov	r0, r3
 8014728:	f7f7 fec8 	bl	800c4bc <lwip_htons>
 801472c:	4603      	mov	r3, r0
 801472e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014730:	697b      	ldr	r3, [r7, #20]
 8014732:	885b      	ldrh	r3, [r3, #2]
 8014734:	b29b      	uxth	r3, r3
 8014736:	4618      	mov	r0, r3
 8014738:	f7f7 fec0 	bl	800c4bc <lwip_htons>
 801473c:	4603      	mov	r3, r0
 801473e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014740:	2300      	movs	r3, #0
 8014742:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014744:	2300      	movs	r3, #0
 8014746:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014748:	2300      	movs	r3, #0
 801474a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801474c:	4b64      	ldr	r3, [pc, #400]	; (80148e0 <udp_input+0x21c>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	627b      	str	r3, [r7, #36]	; 0x24
 8014752:	e054      	b.n	80147fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014756:	8a5b      	ldrh	r3, [r3, #18]
 8014758:	89fa      	ldrh	r2, [r7, #14]
 801475a:	429a      	cmp	r2, r3
 801475c:	d14a      	bne.n	80147f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801475e:	7cfb      	ldrb	r3, [r7, #19]
 8014760:	461a      	mov	r2, r3
 8014762:	6839      	ldr	r1, [r7, #0]
 8014764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014766:	f7ff ff49 	bl	80145fc <udp_input_local_match>
 801476a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801476c:	2b00      	cmp	r3, #0
 801476e:	d041      	beq.n	80147f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014772:	7c1b      	ldrb	r3, [r3, #16]
 8014774:	f003 0304 	and.w	r3, r3, #4
 8014778:	2b00      	cmp	r3, #0
 801477a:	d11d      	bne.n	80147b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801477c:	69fb      	ldr	r3, [r7, #28]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d102      	bne.n	8014788 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014784:	61fb      	str	r3, [r7, #28]
 8014786:	e017      	b.n	80147b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014788:	7cfb      	ldrb	r3, [r7, #19]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d014      	beq.n	80147b8 <udp_input+0xf4>
 801478e:	4b53      	ldr	r3, [pc, #332]	; (80148dc <udp_input+0x218>)
 8014790:	695b      	ldr	r3, [r3, #20]
 8014792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014796:	d10f      	bne.n	80147b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014798:	69fb      	ldr	r3, [r7, #28]
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	3304      	adds	r3, #4
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	429a      	cmp	r2, r3
 80147a4:	d008      	beq.n	80147b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80147a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a8:	681a      	ldr	r2, [r3, #0]
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	3304      	adds	r3, #4
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d101      	bne.n	80147b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80147b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80147b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ba:	8a9b      	ldrh	r3, [r3, #20]
 80147bc:	8a3a      	ldrh	r2, [r7, #16]
 80147be:	429a      	cmp	r2, r3
 80147c0:	d118      	bne.n	80147f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80147c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d005      	beq.n	80147d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80147ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147cc:	685a      	ldr	r2, [r3, #4]
 80147ce:	4b43      	ldr	r3, [pc, #268]	; (80148dc <udp_input+0x218>)
 80147d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d10e      	bne.n	80147f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80147d6:	6a3b      	ldr	r3, [r7, #32]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d014      	beq.n	8014806 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80147dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147de:	68da      	ldr	r2, [r3, #12]
 80147e0:	6a3b      	ldr	r3, [r7, #32]
 80147e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80147e4:	4b3e      	ldr	r3, [pc, #248]	; (80148e0 <udp_input+0x21c>)
 80147e6:	681a      	ldr	r2, [r3, #0]
 80147e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80147ec:	4a3c      	ldr	r2, [pc, #240]	; (80148e0 <udp_input+0x21c>)
 80147ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80147f2:	e008      	b.n	8014806 <udp_input+0x142>
      }
    }

    prev = pcb;
 80147f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80147f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fa:	68db      	ldr	r3, [r3, #12]
 80147fc:	627b      	str	r3, [r7, #36]	; 0x24
 80147fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014800:	2b00      	cmp	r3, #0
 8014802:	d1a7      	bne.n	8014754 <udp_input+0x90>
 8014804:	e000      	b.n	8014808 <udp_input+0x144>
        break;
 8014806:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480a:	2b00      	cmp	r3, #0
 801480c:	d101      	bne.n	8014812 <udp_input+0x14e>
    pcb = uncon_pcb;
 801480e:	69fb      	ldr	r3, [r7, #28]
 8014810:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014814:	2b00      	cmp	r3, #0
 8014816:	d002      	beq.n	801481e <udp_input+0x15a>
    for_us = 1;
 8014818:	2301      	movs	r3, #1
 801481a:	76fb      	strb	r3, [r7, #27]
 801481c:	e00a      	b.n	8014834 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	3304      	adds	r3, #4
 8014822:	681a      	ldr	r2, [r3, #0]
 8014824:	4b2d      	ldr	r3, [pc, #180]	; (80148dc <udp_input+0x218>)
 8014826:	695b      	ldr	r3, [r3, #20]
 8014828:	429a      	cmp	r2, r3
 801482a:	bf0c      	ite	eq
 801482c:	2301      	moveq	r3, #1
 801482e:	2300      	movne	r3, #0
 8014830:	b2db      	uxtb	r3, r3
 8014832:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014834:	7efb      	ldrb	r3, [r7, #27]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d041      	beq.n	80148be <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801483a:	2108      	movs	r1, #8
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7f9 f9a9 	bl	800db94 <pbuf_remove_header>
 8014842:	4603      	mov	r3, r0
 8014844:	2b00      	cmp	r3, #0
 8014846:	d00a      	beq.n	801485e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014848:	4b20      	ldr	r3, [pc, #128]	; (80148cc <udp_input+0x208>)
 801484a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801484e:	4925      	ldr	r1, [pc, #148]	; (80148e4 <udp_input+0x220>)
 8014850:	4820      	ldr	r0, [pc, #128]	; (80148d4 <udp_input+0x210>)
 8014852:	f004 f99d 	bl	8018b90 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f7f9 fa22 	bl	800dca0 <pbuf_free>
      goto end;
 801485c:	e032      	b.n	80148c4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014860:	2b00      	cmp	r3, #0
 8014862:	d012      	beq.n	801488a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014866:	699b      	ldr	r3, [r3, #24]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d00a      	beq.n	8014882 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486e:	699c      	ldr	r4, [r3, #24]
 8014870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014872:	69d8      	ldr	r0, [r3, #28]
 8014874:	8a3b      	ldrh	r3, [r7, #16]
 8014876:	9300      	str	r3, [sp, #0]
 8014878:	4b1b      	ldr	r3, [pc, #108]	; (80148e8 <udp_input+0x224>)
 801487a:	687a      	ldr	r2, [r7, #4]
 801487c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801487e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014880:	e021      	b.n	80148c6 <udp_input+0x202>
        pbuf_free(p);
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f7f9 fa0c 	bl	800dca0 <pbuf_free>
        goto end;
 8014888:	e01c      	b.n	80148c4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801488a:	7cfb      	ldrb	r3, [r7, #19]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d112      	bne.n	80148b6 <udp_input+0x1f2>
 8014890:	4b12      	ldr	r3, [pc, #72]	; (80148dc <udp_input+0x218>)
 8014892:	695b      	ldr	r3, [r3, #20]
 8014894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014898:	2be0      	cmp	r3, #224	; 0xe0
 801489a:	d00c      	beq.n	80148b6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801489c:	4b0f      	ldr	r3, [pc, #60]	; (80148dc <udp_input+0x218>)
 801489e:	899b      	ldrh	r3, [r3, #12]
 80148a0:	3308      	adds	r3, #8
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	b21b      	sxth	r3, r3
 80148a6:	4619      	mov	r1, r3
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f7f9 f9e6 	bl	800dc7a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80148ae:	2103      	movs	r1, #3
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f001 fc29 	bl	8016108 <icmp_dest_unreach>
      pbuf_free(p);
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f7f9 f9f2 	bl	800dca0 <pbuf_free>
  return;
 80148bc:	e003      	b.n	80148c6 <udp_input+0x202>
    pbuf_free(p);
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f7f9 f9ee 	bl	800dca0 <pbuf_free>
  return;
 80148c4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80148c6:	372c      	adds	r7, #44	; 0x2c
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd90      	pop	{r4, r7, pc}
 80148cc:	0801f744 	.word	0x0801f744
 80148d0:	0801f7e8 	.word	0x0801f7e8
 80148d4:	0801f798 	.word	0x0801f798
 80148d8:	0801f800 	.word	0x0801f800
 80148dc:	200094a8 	.word	0x200094a8
 80148e0:	20077994 	.word	0x20077994
 80148e4:	0801f81c 	.word	0x0801f81c
 80148e8:	200094b8 	.word	0x200094b8

080148ec <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b082      	sub	sp, #8
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
 80148f4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d109      	bne.n	8014910 <udp_send+0x24>
 80148fc:	4b11      	ldr	r3, [pc, #68]	; (8014944 <udp_send+0x58>)
 80148fe:	f240 12d5 	movw	r2, #469	; 0x1d5
 8014902:	4911      	ldr	r1, [pc, #68]	; (8014948 <udp_send+0x5c>)
 8014904:	4811      	ldr	r0, [pc, #68]	; (801494c <udp_send+0x60>)
 8014906:	f004 f943 	bl	8018b90 <iprintf>
 801490a:	f06f 030f 	mvn.w	r3, #15
 801490e:	e015      	b.n	801493c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d109      	bne.n	801492a <udp_send+0x3e>
 8014916:	4b0b      	ldr	r3, [pc, #44]	; (8014944 <udp_send+0x58>)
 8014918:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801491c:	490c      	ldr	r1, [pc, #48]	; (8014950 <udp_send+0x64>)
 801491e:	480b      	ldr	r0, [pc, #44]	; (801494c <udp_send+0x60>)
 8014920:	f004 f936 	bl	8018b90 <iprintf>
 8014924:	f06f 030f 	mvn.w	r3, #15
 8014928:	e008      	b.n	801493c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	1d1a      	adds	r2, r3, #4
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	8a9b      	ldrh	r3, [r3, #20]
 8014932:	6839      	ldr	r1, [r7, #0]
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f000 f80d 	bl	8014954 <udp_sendto>
 801493a:	4603      	mov	r3, r0
}
 801493c:	4618      	mov	r0, r3
 801493e:	3708      	adds	r7, #8
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}
 8014944:	0801f744 	.word	0x0801f744
 8014948:	0801f838 	.word	0x0801f838
 801494c:	0801f798 	.word	0x0801f798
 8014950:	0801f850 	.word	0x0801f850

08014954 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b088      	sub	sp, #32
 8014958:	af02      	add	r7, sp, #8
 801495a:	60f8      	str	r0, [r7, #12]
 801495c:	60b9      	str	r1, [r7, #8]
 801495e:	607a      	str	r2, [r7, #4]
 8014960:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d109      	bne.n	801497c <udp_sendto+0x28>
 8014968:	4b23      	ldr	r3, [pc, #140]	; (80149f8 <udp_sendto+0xa4>)
 801496a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801496e:	4923      	ldr	r1, [pc, #140]	; (80149fc <udp_sendto+0xa8>)
 8014970:	4823      	ldr	r0, [pc, #140]	; (8014a00 <udp_sendto+0xac>)
 8014972:	f004 f90d 	bl	8018b90 <iprintf>
 8014976:	f06f 030f 	mvn.w	r3, #15
 801497a:	e038      	b.n	80149ee <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d109      	bne.n	8014996 <udp_sendto+0x42>
 8014982:	4b1d      	ldr	r3, [pc, #116]	; (80149f8 <udp_sendto+0xa4>)
 8014984:	f240 2219 	movw	r2, #537	; 0x219
 8014988:	491e      	ldr	r1, [pc, #120]	; (8014a04 <udp_sendto+0xb0>)
 801498a:	481d      	ldr	r0, [pc, #116]	; (8014a00 <udp_sendto+0xac>)
 801498c:	f004 f900 	bl	8018b90 <iprintf>
 8014990:	f06f 030f 	mvn.w	r3, #15
 8014994:	e02b      	b.n	80149ee <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d109      	bne.n	80149b0 <udp_sendto+0x5c>
 801499c:	4b16      	ldr	r3, [pc, #88]	; (80149f8 <udp_sendto+0xa4>)
 801499e:	f240 221a 	movw	r2, #538	; 0x21a
 80149a2:	4919      	ldr	r1, [pc, #100]	; (8014a08 <udp_sendto+0xb4>)
 80149a4:	4816      	ldr	r0, [pc, #88]	; (8014a00 <udp_sendto+0xac>)
 80149a6:	f004 f8f3 	bl	8018b90 <iprintf>
 80149aa:	f06f 030f 	mvn.w	r3, #15
 80149ae:	e01e      	b.n	80149ee <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	7a1b      	ldrb	r3, [r3, #8]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d006      	beq.n	80149c6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	7a1b      	ldrb	r3, [r3, #8]
 80149bc:	4618      	mov	r0, r3
 80149be:	f7f8 fde1 	bl	800d584 <netif_get_by_index>
 80149c2:	6178      	str	r0, [r7, #20]
 80149c4:	e003      	b.n	80149ce <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f001 fc28 	bl	801621c <ip4_route>
 80149cc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80149ce:	697b      	ldr	r3, [r7, #20]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d102      	bne.n	80149da <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80149d4:	f06f 0303 	mvn.w	r3, #3
 80149d8:	e009      	b.n	80149ee <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80149da:	887a      	ldrh	r2, [r7, #2]
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	9300      	str	r3, [sp, #0]
 80149e0:	4613      	mov	r3, r2
 80149e2:	687a      	ldr	r2, [r7, #4]
 80149e4:	68b9      	ldr	r1, [r7, #8]
 80149e6:	68f8      	ldr	r0, [r7, #12]
 80149e8:	f000 f810 	bl	8014a0c <udp_sendto_if>
 80149ec:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3718      	adds	r7, #24
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	0801f744 	.word	0x0801f744
 80149fc:	0801f868 	.word	0x0801f868
 8014a00:	0801f798 	.word	0x0801f798
 8014a04:	0801f880 	.word	0x0801f880
 8014a08:	0801f89c 	.word	0x0801f89c

08014a0c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b088      	sub	sp, #32
 8014a10:	af02      	add	r7, sp, #8
 8014a12:	60f8      	str	r0, [r7, #12]
 8014a14:	60b9      	str	r1, [r7, #8]
 8014a16:	607a      	str	r2, [r7, #4]
 8014a18:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d109      	bne.n	8014a34 <udp_sendto_if+0x28>
 8014a20:	4b2e      	ldr	r3, [pc, #184]	; (8014adc <udp_sendto_if+0xd0>)
 8014a22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a26:	492e      	ldr	r1, [pc, #184]	; (8014ae0 <udp_sendto_if+0xd4>)
 8014a28:	482e      	ldr	r0, [pc, #184]	; (8014ae4 <udp_sendto_if+0xd8>)
 8014a2a:	f004 f8b1 	bl	8018b90 <iprintf>
 8014a2e:	f06f 030f 	mvn.w	r3, #15
 8014a32:	e04f      	b.n	8014ad4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014a34:	68bb      	ldr	r3, [r7, #8]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d109      	bne.n	8014a4e <udp_sendto_if+0x42>
 8014a3a:	4b28      	ldr	r3, [pc, #160]	; (8014adc <udp_sendto_if+0xd0>)
 8014a3c:	f240 2281 	movw	r2, #641	; 0x281
 8014a40:	4929      	ldr	r1, [pc, #164]	; (8014ae8 <udp_sendto_if+0xdc>)
 8014a42:	4828      	ldr	r0, [pc, #160]	; (8014ae4 <udp_sendto_if+0xd8>)
 8014a44:	f004 f8a4 	bl	8018b90 <iprintf>
 8014a48:	f06f 030f 	mvn.w	r3, #15
 8014a4c:	e042      	b.n	8014ad4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d109      	bne.n	8014a68 <udp_sendto_if+0x5c>
 8014a54:	4b21      	ldr	r3, [pc, #132]	; (8014adc <udp_sendto_if+0xd0>)
 8014a56:	f240 2282 	movw	r2, #642	; 0x282
 8014a5a:	4924      	ldr	r1, [pc, #144]	; (8014aec <udp_sendto_if+0xe0>)
 8014a5c:	4821      	ldr	r0, [pc, #132]	; (8014ae4 <udp_sendto_if+0xd8>)
 8014a5e:	f004 f897 	bl	8018b90 <iprintf>
 8014a62:	f06f 030f 	mvn.w	r3, #15
 8014a66:	e035      	b.n	8014ad4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014a68:	6a3b      	ldr	r3, [r7, #32]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d109      	bne.n	8014a82 <udp_sendto_if+0x76>
 8014a6e:	4b1b      	ldr	r3, [pc, #108]	; (8014adc <udp_sendto_if+0xd0>)
 8014a70:	f240 2283 	movw	r2, #643	; 0x283
 8014a74:	491e      	ldr	r1, [pc, #120]	; (8014af0 <udp_sendto_if+0xe4>)
 8014a76:	481b      	ldr	r0, [pc, #108]	; (8014ae4 <udp_sendto_if+0xd8>)
 8014a78:	f004 f88a 	bl	8018b90 <iprintf>
 8014a7c:	f06f 030f 	mvn.w	r3, #15
 8014a80:	e028      	b.n	8014ad4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d009      	beq.n	8014a9c <udp_sendto_if+0x90>
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d005      	beq.n	8014a9c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014a98:	2be0      	cmp	r3, #224	; 0xe0
 8014a9a:	d103      	bne.n	8014aa4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014a9c:	6a3b      	ldr	r3, [r7, #32]
 8014a9e:	3304      	adds	r3, #4
 8014aa0:	617b      	str	r3, [r7, #20]
 8014aa2:	e00b      	b.n	8014abc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	681a      	ldr	r2, [r3, #0]
 8014aa8:	6a3b      	ldr	r3, [r7, #32]
 8014aaa:	3304      	adds	r3, #4
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d002      	beq.n	8014ab8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014ab2:	f06f 0303 	mvn.w	r3, #3
 8014ab6:	e00d      	b.n	8014ad4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014abc:	887a      	ldrh	r2, [r7, #2]
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	9301      	str	r3, [sp, #4]
 8014ac2:	6a3b      	ldr	r3, [r7, #32]
 8014ac4:	9300      	str	r3, [sp, #0]
 8014ac6:	4613      	mov	r3, r2
 8014ac8:	687a      	ldr	r2, [r7, #4]
 8014aca:	68b9      	ldr	r1, [r7, #8]
 8014acc:	68f8      	ldr	r0, [r7, #12]
 8014ace:	f000 f811 	bl	8014af4 <udp_sendto_if_src>
 8014ad2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3718      	adds	r7, #24
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}
 8014adc:	0801f744 	.word	0x0801f744
 8014ae0:	0801f8b8 	.word	0x0801f8b8
 8014ae4:	0801f798 	.word	0x0801f798
 8014ae8:	0801f8d4 	.word	0x0801f8d4
 8014aec:	0801f8f0 	.word	0x0801f8f0
 8014af0:	0801f910 	.word	0x0801f910

08014af4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b08c      	sub	sp, #48	; 0x30
 8014af8:	af04      	add	r7, sp, #16
 8014afa:	60f8      	str	r0, [r7, #12]
 8014afc:	60b9      	str	r1, [r7, #8]
 8014afe:	607a      	str	r2, [r7, #4]
 8014b00:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d109      	bne.n	8014b1c <udp_sendto_if_src+0x28>
 8014b08:	4b65      	ldr	r3, [pc, #404]	; (8014ca0 <udp_sendto_if_src+0x1ac>)
 8014b0a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014b0e:	4965      	ldr	r1, [pc, #404]	; (8014ca4 <udp_sendto_if_src+0x1b0>)
 8014b10:	4865      	ldr	r0, [pc, #404]	; (8014ca8 <udp_sendto_if_src+0x1b4>)
 8014b12:	f004 f83d 	bl	8018b90 <iprintf>
 8014b16:	f06f 030f 	mvn.w	r3, #15
 8014b1a:	e0bc      	b.n	8014c96 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014b1c:	68bb      	ldr	r3, [r7, #8]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d109      	bne.n	8014b36 <udp_sendto_if_src+0x42>
 8014b22:	4b5f      	ldr	r3, [pc, #380]	; (8014ca0 <udp_sendto_if_src+0x1ac>)
 8014b24:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014b28:	4960      	ldr	r1, [pc, #384]	; (8014cac <udp_sendto_if_src+0x1b8>)
 8014b2a:	485f      	ldr	r0, [pc, #380]	; (8014ca8 <udp_sendto_if_src+0x1b4>)
 8014b2c:	f004 f830 	bl	8018b90 <iprintf>
 8014b30:	f06f 030f 	mvn.w	r3, #15
 8014b34:	e0af      	b.n	8014c96 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d109      	bne.n	8014b50 <udp_sendto_if_src+0x5c>
 8014b3c:	4b58      	ldr	r3, [pc, #352]	; (8014ca0 <udp_sendto_if_src+0x1ac>)
 8014b3e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014b42:	495b      	ldr	r1, [pc, #364]	; (8014cb0 <udp_sendto_if_src+0x1bc>)
 8014b44:	4858      	ldr	r0, [pc, #352]	; (8014ca8 <udp_sendto_if_src+0x1b4>)
 8014b46:	f004 f823 	bl	8018b90 <iprintf>
 8014b4a:	f06f 030f 	mvn.w	r3, #15
 8014b4e:	e0a2      	b.n	8014c96 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d109      	bne.n	8014b6a <udp_sendto_if_src+0x76>
 8014b56:	4b52      	ldr	r3, [pc, #328]	; (8014ca0 <udp_sendto_if_src+0x1ac>)
 8014b58:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014b5c:	4955      	ldr	r1, [pc, #340]	; (8014cb4 <udp_sendto_if_src+0x1c0>)
 8014b5e:	4852      	ldr	r0, [pc, #328]	; (8014ca8 <udp_sendto_if_src+0x1b4>)
 8014b60:	f004 f816 	bl	8018b90 <iprintf>
 8014b64:	f06f 030f 	mvn.w	r3, #15
 8014b68:	e095      	b.n	8014c96 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d109      	bne.n	8014b84 <udp_sendto_if_src+0x90>
 8014b70:	4b4b      	ldr	r3, [pc, #300]	; (8014ca0 <udp_sendto_if_src+0x1ac>)
 8014b72:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014b76:	4950      	ldr	r1, [pc, #320]	; (8014cb8 <udp_sendto_if_src+0x1c4>)
 8014b78:	484b      	ldr	r0, [pc, #300]	; (8014ca8 <udp_sendto_if_src+0x1b4>)
 8014b7a:	f004 f809 	bl	8018b90 <iprintf>
 8014b7e:	f06f 030f 	mvn.w	r3, #15
 8014b82:	e088      	b.n	8014c96 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	8a5b      	ldrh	r3, [r3, #18]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d10f      	bne.n	8014bac <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014b8c:	68f9      	ldr	r1, [r7, #12]
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	8a5b      	ldrh	r3, [r3, #18]
 8014b92:	461a      	mov	r2, r3
 8014b94:	68f8      	ldr	r0, [r7, #12]
 8014b96:	f000 f893 	bl	8014cc0 <udp_bind>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014b9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d002      	beq.n	8014bac <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014ba6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014baa:	e074      	b.n	8014c96 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	891b      	ldrh	r3, [r3, #8]
 8014bb0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	d902      	bls.n	8014bbe <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014bbc:	e06b      	b.n	8014c96 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014bbe:	2108      	movs	r1, #8
 8014bc0:	68b8      	ldr	r0, [r7, #8]
 8014bc2:	f7f8 ffd7 	bl	800db74 <pbuf_add_header>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d015      	beq.n	8014bf8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014bcc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014bd0:	2108      	movs	r1, #8
 8014bd2:	2022      	movs	r0, #34	; 0x22
 8014bd4:	f7f8 fd80 	bl	800d6d8 <pbuf_alloc>
 8014bd8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d102      	bne.n	8014be6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014be0:	f04f 33ff 	mov.w	r3, #4294967295
 8014be4:	e057      	b.n	8014c96 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	891b      	ldrh	r3, [r3, #8]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d006      	beq.n	8014bfc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014bee:	68b9      	ldr	r1, [r7, #8]
 8014bf0:	69f8      	ldr	r0, [r7, #28]
 8014bf2:	f7f9 f979 	bl	800dee8 <pbuf_chain>
 8014bf6:	e001      	b.n	8014bfc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014bfc:	69fb      	ldr	r3, [r7, #28]
 8014bfe:	895b      	ldrh	r3, [r3, #10]
 8014c00:	2b07      	cmp	r3, #7
 8014c02:	d806      	bhi.n	8014c12 <udp_sendto_if_src+0x11e>
 8014c04:	4b26      	ldr	r3, [pc, #152]	; (8014ca0 <udp_sendto_if_src+0x1ac>)
 8014c06:	f240 320d 	movw	r2, #781	; 0x30d
 8014c0a:	492c      	ldr	r1, [pc, #176]	; (8014cbc <udp_sendto_if_src+0x1c8>)
 8014c0c:	4826      	ldr	r0, [pc, #152]	; (8014ca8 <udp_sendto_if_src+0x1b4>)
 8014c0e:	f003 ffbf 	bl	8018b90 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014c12:	69fb      	ldr	r3, [r7, #28]
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	8a5b      	ldrh	r3, [r3, #18]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7f7 fc4d 	bl	800c4bc <lwip_htons>
 8014c22:	4603      	mov	r3, r0
 8014c24:	461a      	mov	r2, r3
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014c2a:	887b      	ldrh	r3, [r7, #2]
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7f7 fc45 	bl	800c4bc <lwip_htons>
 8014c32:	4603      	mov	r3, r0
 8014c34:	461a      	mov	r2, r3
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	719a      	strb	r2, [r3, #6]
 8014c40:	2200      	movs	r2, #0
 8014c42:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014c44:	69fb      	ldr	r3, [r7, #28]
 8014c46:	891b      	ldrh	r3, [r3, #8]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f7f7 fc37 	bl	800c4bc <lwip_htons>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	461a      	mov	r2, r3
 8014c52:	697b      	ldr	r3, [r7, #20]
 8014c54:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014c56:	2311      	movs	r3, #17
 8014c58:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	7adb      	ldrb	r3, [r3, #11]
 8014c5e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	7a9b      	ldrb	r3, [r3, #10]
 8014c64:	7cb9      	ldrb	r1, [r7, #18]
 8014c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c68:	9202      	str	r2, [sp, #8]
 8014c6a:	7cfa      	ldrb	r2, [r7, #19]
 8014c6c:	9201      	str	r2, [sp, #4]
 8014c6e:	9300      	str	r3, [sp, #0]
 8014c70:	460b      	mov	r3, r1
 8014c72:	687a      	ldr	r2, [r7, #4]
 8014c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014c76:	69f8      	ldr	r0, [r7, #28]
 8014c78:	f001 fcb8 	bl	80165ec <ip4_output_if_src>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014c80:	69fa      	ldr	r2, [r7, #28]
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d004      	beq.n	8014c92 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014c88:	69f8      	ldr	r0, [r7, #28]
 8014c8a:	f7f9 f809 	bl	800dca0 <pbuf_free>
    q = NULL;
 8014c8e:	2300      	movs	r3, #0
 8014c90:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014c92:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3720      	adds	r7, #32
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	0801f744 	.word	0x0801f744
 8014ca4:	0801f930 	.word	0x0801f930
 8014ca8:	0801f798 	.word	0x0801f798
 8014cac:	0801f950 	.word	0x0801f950
 8014cb0:	0801f970 	.word	0x0801f970
 8014cb4:	0801f994 	.word	0x0801f994
 8014cb8:	0801f9b8 	.word	0x0801f9b8
 8014cbc:	0801f9dc 	.word	0x0801f9dc

08014cc0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b086      	sub	sp, #24
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	60f8      	str	r0, [r7, #12]
 8014cc8:	60b9      	str	r1, [r7, #8]
 8014cca:	4613      	mov	r3, r2
 8014ccc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d101      	bne.n	8014cd8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014cd4:	4b39      	ldr	r3, [pc, #228]	; (8014dbc <udp_bind+0xfc>)
 8014cd6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d109      	bne.n	8014cf2 <udp_bind+0x32>
 8014cde:	4b38      	ldr	r3, [pc, #224]	; (8014dc0 <udp_bind+0x100>)
 8014ce0:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014ce4:	4937      	ldr	r1, [pc, #220]	; (8014dc4 <udp_bind+0x104>)
 8014ce6:	4838      	ldr	r0, [pc, #224]	; (8014dc8 <udp_bind+0x108>)
 8014ce8:	f003 ff52 	bl	8018b90 <iprintf>
 8014cec:	f06f 030f 	mvn.w	r3, #15
 8014cf0:	e060      	b.n	8014db4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014cf6:	4b35      	ldr	r3, [pc, #212]	; (8014dcc <udp_bind+0x10c>)
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	617b      	str	r3, [r7, #20]
 8014cfc:	e009      	b.n	8014d12 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014cfe:	68fa      	ldr	r2, [r7, #12]
 8014d00:	697b      	ldr	r3, [r7, #20]
 8014d02:	429a      	cmp	r2, r3
 8014d04:	d102      	bne.n	8014d0c <udp_bind+0x4c>
      rebind = 1;
 8014d06:	2301      	movs	r3, #1
 8014d08:	74fb      	strb	r3, [r7, #19]
      break;
 8014d0a:	e005      	b.n	8014d18 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	68db      	ldr	r3, [r3, #12]
 8014d10:	617b      	str	r3, [r7, #20]
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d1f2      	bne.n	8014cfe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014d18:	88fb      	ldrh	r3, [r7, #6]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d109      	bne.n	8014d32 <udp_bind+0x72>
    port = udp_new_port();
 8014d1e:	f7ff fc35 	bl	801458c <udp_new_port>
 8014d22:	4603      	mov	r3, r0
 8014d24:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014d26:	88fb      	ldrh	r3, [r7, #6]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d12c      	bne.n	8014d86 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014d2c:	f06f 0307 	mvn.w	r3, #7
 8014d30:	e040      	b.n	8014db4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014d32:	4b26      	ldr	r3, [pc, #152]	; (8014dcc <udp_bind+0x10c>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	617b      	str	r3, [r7, #20]
 8014d38:	e022      	b.n	8014d80 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014d3a:	68fa      	ldr	r2, [r7, #12]
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d01b      	beq.n	8014d7a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	8a5b      	ldrh	r3, [r3, #18]
 8014d46:	88fa      	ldrh	r2, [r7, #6]
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	d116      	bne.n	8014d7a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	681a      	ldr	r2, [r3, #0]
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d00d      	beq.n	8014d74 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d00a      	beq.n	8014d74 <udp_bind+0xb4>
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d006      	beq.n	8014d74 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014d66:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d003      	beq.n	8014d74 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014d6c:	697b      	ldr	r3, [r7, #20]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d102      	bne.n	8014d7a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014d74:	f06f 0307 	mvn.w	r3, #7
 8014d78:	e01c      	b.n	8014db4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	68db      	ldr	r3, [r3, #12]
 8014d7e:	617b      	str	r3, [r7, #20]
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d1d9      	bne.n	8014d3a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d002      	beq.n	8014d92 <udp_bind+0xd2>
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	e000      	b.n	8014d94 <udp_bind+0xd4>
 8014d92:	2300      	movs	r3, #0
 8014d94:	68fa      	ldr	r2, [r7, #12]
 8014d96:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	88fa      	ldrh	r2, [r7, #6]
 8014d9c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014d9e:	7cfb      	ldrb	r3, [r7, #19]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d106      	bne.n	8014db2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014da4:	4b09      	ldr	r3, [pc, #36]	; (8014dcc <udp_bind+0x10c>)
 8014da6:	681a      	ldr	r2, [r3, #0]
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014dac:	4a07      	ldr	r2, [pc, #28]	; (8014dcc <udp_bind+0x10c>)
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014db2:	2300      	movs	r3, #0
}
 8014db4:	4618      	mov	r0, r3
 8014db6:	3718      	adds	r7, #24
 8014db8:	46bd      	mov	sp, r7
 8014dba:	bd80      	pop	{r7, pc}
 8014dbc:	08020358 	.word	0x08020358
 8014dc0:	0801f744 	.word	0x0801f744
 8014dc4:	0801fa0c 	.word	0x0801fa0c
 8014dc8:	0801f798 	.word	0x0801f798
 8014dcc:	20077994 	.word	0x20077994

08014dd0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b086      	sub	sp, #24
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	60f8      	str	r0, [r7, #12]
 8014dd8:	60b9      	str	r1, [r7, #8]
 8014dda:	4613      	mov	r3, r2
 8014ddc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d109      	bne.n	8014df8 <udp_connect+0x28>
 8014de4:	4b2c      	ldr	r3, [pc, #176]	; (8014e98 <udp_connect+0xc8>)
 8014de6:	f240 4235 	movw	r2, #1077	; 0x435
 8014dea:	492c      	ldr	r1, [pc, #176]	; (8014e9c <udp_connect+0xcc>)
 8014dec:	482c      	ldr	r0, [pc, #176]	; (8014ea0 <udp_connect+0xd0>)
 8014dee:	f003 fecf 	bl	8018b90 <iprintf>
 8014df2:	f06f 030f 	mvn.w	r3, #15
 8014df6:	e04b      	b.n	8014e90 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d109      	bne.n	8014e12 <udp_connect+0x42>
 8014dfe:	4b26      	ldr	r3, [pc, #152]	; (8014e98 <udp_connect+0xc8>)
 8014e00:	f240 4236 	movw	r2, #1078	; 0x436
 8014e04:	4927      	ldr	r1, [pc, #156]	; (8014ea4 <udp_connect+0xd4>)
 8014e06:	4826      	ldr	r0, [pc, #152]	; (8014ea0 <udp_connect+0xd0>)
 8014e08:	f003 fec2 	bl	8018b90 <iprintf>
 8014e0c:	f06f 030f 	mvn.w	r3, #15
 8014e10:	e03e      	b.n	8014e90 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	8a5b      	ldrh	r3, [r3, #18]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d10f      	bne.n	8014e3a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014e1a:	68f9      	ldr	r1, [r7, #12]
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	8a5b      	ldrh	r3, [r3, #18]
 8014e20:	461a      	mov	r2, r3
 8014e22:	68f8      	ldr	r0, [r7, #12]
 8014e24:	f7ff ff4c 	bl	8014cc0 <udp_bind>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014e2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d002      	beq.n	8014e3a <udp_connect+0x6a>
      return err;
 8014e34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e38:	e02a      	b.n	8014e90 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d002      	beq.n	8014e46 <udp_connect+0x76>
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	e000      	b.n	8014e48 <udp_connect+0x78>
 8014e46:	2300      	movs	r3, #0
 8014e48:	68fa      	ldr	r2, [r7, #12]
 8014e4a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	88fa      	ldrh	r2, [r7, #6]
 8014e50:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	7c1b      	ldrb	r3, [r3, #16]
 8014e56:	f043 0304 	orr.w	r3, r3, #4
 8014e5a:	b2da      	uxtb	r2, r3
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e60:	4b11      	ldr	r3, [pc, #68]	; (8014ea8 <udp_connect+0xd8>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	617b      	str	r3, [r7, #20]
 8014e66:	e008      	b.n	8014e7a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014e68:	68fa      	ldr	r2, [r7, #12]
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d101      	bne.n	8014e74 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014e70:	2300      	movs	r3, #0
 8014e72:	e00d      	b.n	8014e90 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	68db      	ldr	r3, [r3, #12]
 8014e78:	617b      	str	r3, [r7, #20]
 8014e7a:	697b      	ldr	r3, [r7, #20]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d1f3      	bne.n	8014e68 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014e80:	4b09      	ldr	r3, [pc, #36]	; (8014ea8 <udp_connect+0xd8>)
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014e88:	4a07      	ldr	r2, [pc, #28]	; (8014ea8 <udp_connect+0xd8>)
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014e8e:	2300      	movs	r3, #0
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	3718      	adds	r7, #24
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}
 8014e98:	0801f744 	.word	0x0801f744
 8014e9c:	0801fa24 	.word	0x0801fa24
 8014ea0:	0801f798 	.word	0x0801f798
 8014ea4:	0801fa40 	.word	0x0801fa40
 8014ea8:	20077994 	.word	0x20077994

08014eac <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b082      	sub	sp, #8
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d107      	bne.n	8014eca <udp_disconnect+0x1e>
 8014eba:	4b0d      	ldr	r3, [pc, #52]	; (8014ef0 <udp_disconnect+0x44>)
 8014ebc:	f240 426a 	movw	r2, #1130	; 0x46a
 8014ec0:	490c      	ldr	r1, [pc, #48]	; (8014ef4 <udp_disconnect+0x48>)
 8014ec2:	480d      	ldr	r0, [pc, #52]	; (8014ef8 <udp_disconnect+0x4c>)
 8014ec4:	f003 fe64 	bl	8018b90 <iprintf>
 8014ec8:	e00f      	b.n	8014eea <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	2200      	movs	r2, #0
 8014ece:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	7c1b      	ldrb	r3, [r3, #16]
 8014ee0:	f023 0304 	bic.w	r3, r3, #4
 8014ee4:	b2da      	uxtb	r2, r3
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	741a      	strb	r2, [r3, #16]
}
 8014eea:	3708      	adds	r7, #8
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}
 8014ef0:	0801f744 	.word	0x0801f744
 8014ef4:	0801fa5c 	.word	0x0801fa5c
 8014ef8:	0801f798 	.word	0x0801f798

08014efc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	60f8      	str	r0, [r7, #12]
 8014f04:	60b9      	str	r1, [r7, #8]
 8014f06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d107      	bne.n	8014f1e <udp_recv+0x22>
 8014f0e:	4b08      	ldr	r3, [pc, #32]	; (8014f30 <udp_recv+0x34>)
 8014f10:	f240 428a 	movw	r2, #1162	; 0x48a
 8014f14:	4907      	ldr	r1, [pc, #28]	; (8014f34 <udp_recv+0x38>)
 8014f16:	4808      	ldr	r0, [pc, #32]	; (8014f38 <udp_recv+0x3c>)
 8014f18:	f003 fe3a 	bl	8018b90 <iprintf>
 8014f1c:	e005      	b.n	8014f2a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	68ba      	ldr	r2, [r7, #8]
 8014f22:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	61da      	str	r2, [r3, #28]
}
 8014f2a:	3710      	adds	r7, #16
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}
 8014f30:	0801f744 	.word	0x0801f744
 8014f34:	0801fa78 	.word	0x0801fa78
 8014f38:	0801f798 	.word	0x0801f798

08014f3c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b084      	sub	sp, #16
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d107      	bne.n	8014f5a <udp_remove+0x1e>
 8014f4a:	4b19      	ldr	r3, [pc, #100]	; (8014fb0 <udp_remove+0x74>)
 8014f4c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014f50:	4918      	ldr	r1, [pc, #96]	; (8014fb4 <udp_remove+0x78>)
 8014f52:	4819      	ldr	r0, [pc, #100]	; (8014fb8 <udp_remove+0x7c>)
 8014f54:	f003 fe1c 	bl	8018b90 <iprintf>
 8014f58:	e026      	b.n	8014fa8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014f5a:	4b18      	ldr	r3, [pc, #96]	; (8014fbc <udp_remove+0x80>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	687a      	ldr	r2, [r7, #4]
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d105      	bne.n	8014f70 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014f64:	4b15      	ldr	r3, [pc, #84]	; (8014fbc <udp_remove+0x80>)
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	68db      	ldr	r3, [r3, #12]
 8014f6a:	4a14      	ldr	r2, [pc, #80]	; (8014fbc <udp_remove+0x80>)
 8014f6c:	6013      	str	r3, [r2, #0]
 8014f6e:	e017      	b.n	8014fa0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014f70:	4b12      	ldr	r3, [pc, #72]	; (8014fbc <udp_remove+0x80>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	60fb      	str	r3, [r7, #12]
 8014f76:	e010      	b.n	8014f9a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	68db      	ldr	r3, [r3, #12]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d009      	beq.n	8014f94 <udp_remove+0x58>
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	687a      	ldr	r2, [r7, #4]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d104      	bne.n	8014f94 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	68da      	ldr	r2, [r3, #12]
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	60da      	str	r2, [r3, #12]
        break;
 8014f92:	e005      	b.n	8014fa0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	68db      	ldr	r3, [r3, #12]
 8014f98:	60fb      	str	r3, [r7, #12]
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d1eb      	bne.n	8014f78 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014fa0:	6879      	ldr	r1, [r7, #4]
 8014fa2:	2000      	movs	r0, #0
 8014fa4:	f7f7 ffd8 	bl	800cf58 <memp_free>
}
 8014fa8:	3710      	adds	r7, #16
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	0801f744 	.word	0x0801f744
 8014fb4:	0801fa90 	.word	0x0801fa90
 8014fb8:	0801f798 	.word	0x0801f798
 8014fbc:	20077994 	.word	0x20077994

08014fc0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014fc6:	2000      	movs	r0, #0
 8014fc8:	f7f7 ff50 	bl	800ce6c <memp_malloc>
 8014fcc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d007      	beq.n	8014fe4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014fd4:	2220      	movs	r2, #32
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f003 fe78 	bl	8018cce <memset>
    pcb->ttl = UDP_TTL;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	22ff      	movs	r2, #255	; 0xff
 8014fe2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014fe4:	687b      	ldr	r3, [r7, #4]
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3708      	adds	r7, #8
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}

08014fee <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014fee:	b580      	push	{r7, lr}
 8014ff0:	b084      	sub	sp, #16
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014ff8:	f7ff ffe2 	bl	8014fc0 <udp_new>
 8014ffc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014ffe:	68fb      	ldr	r3, [r7, #12]
}
 8015000:	4618      	mov	r0, r3
 8015002:	3710      	adds	r7, #16
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}

08015008 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015008:	b480      	push	{r7}
 801500a:	b085      	sub	sp, #20
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
 8015010:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d01e      	beq.n	8015056 <udp_netif_ip_addr_changed+0x4e>
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d01a      	beq.n	8015056 <udp_netif_ip_addr_changed+0x4e>
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d017      	beq.n	8015056 <udp_netif_ip_addr_changed+0x4e>
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d013      	beq.n	8015056 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801502e:	4b0d      	ldr	r3, [pc, #52]	; (8015064 <udp_netif_ip_addr_changed+0x5c>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	60fb      	str	r3, [r7, #12]
 8015034:	e00c      	b.n	8015050 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	681a      	ldr	r2, [r3, #0]
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	429a      	cmp	r2, r3
 8015040:	d103      	bne.n	801504a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	681a      	ldr	r2, [r3, #0]
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	68db      	ldr	r3, [r3, #12]
 801504e:	60fb      	str	r3, [r7, #12]
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d1ef      	bne.n	8015036 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015056:	bf00      	nop
 8015058:	3714      	adds	r7, #20
 801505a:	46bd      	mov	sp, r7
 801505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015060:	4770      	bx	lr
 8015062:	bf00      	nop
 8015064:	20077994 	.word	0x20077994

08015068 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b082      	sub	sp, #8
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015070:	4915      	ldr	r1, [pc, #84]	; (80150c8 <etharp_free_entry+0x60>)
 8015072:	687a      	ldr	r2, [r7, #4]
 8015074:	4613      	mov	r3, r2
 8015076:	005b      	lsls	r3, r3, #1
 8015078:	4413      	add	r3, r2
 801507a:	00db      	lsls	r3, r3, #3
 801507c:	440b      	add	r3, r1
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d013      	beq.n	80150ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015084:	4910      	ldr	r1, [pc, #64]	; (80150c8 <etharp_free_entry+0x60>)
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	4613      	mov	r3, r2
 801508a:	005b      	lsls	r3, r3, #1
 801508c:	4413      	add	r3, r2
 801508e:	00db      	lsls	r3, r3, #3
 8015090:	440b      	add	r3, r1
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	4618      	mov	r0, r3
 8015096:	f7f8 fe03 	bl	800dca0 <pbuf_free>
    arp_table[i].q = NULL;
 801509a:	490b      	ldr	r1, [pc, #44]	; (80150c8 <etharp_free_entry+0x60>)
 801509c:	687a      	ldr	r2, [r7, #4]
 801509e:	4613      	mov	r3, r2
 80150a0:	005b      	lsls	r3, r3, #1
 80150a2:	4413      	add	r3, r2
 80150a4:	00db      	lsls	r3, r3, #3
 80150a6:	440b      	add	r3, r1
 80150a8:	2200      	movs	r2, #0
 80150aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80150ac:	4906      	ldr	r1, [pc, #24]	; (80150c8 <etharp_free_entry+0x60>)
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	4613      	mov	r3, r2
 80150b2:	005b      	lsls	r3, r3, #1
 80150b4:	4413      	add	r3, r2
 80150b6:	00db      	lsls	r3, r3, #3
 80150b8:	440b      	add	r3, r1
 80150ba:	3314      	adds	r3, #20
 80150bc:	2200      	movs	r2, #0
 80150be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80150c0:	bf00      	nop
 80150c2:	3708      	adds	r7, #8
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}
 80150c8:	20077998 	.word	0x20077998

080150cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150d2:	2300      	movs	r3, #0
 80150d4:	607b      	str	r3, [r7, #4]
 80150d6:	e096      	b.n	8015206 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80150d8:	494f      	ldr	r1, [pc, #316]	; (8015218 <etharp_tmr+0x14c>)
 80150da:	687a      	ldr	r2, [r7, #4]
 80150dc:	4613      	mov	r3, r2
 80150de:	005b      	lsls	r3, r3, #1
 80150e0:	4413      	add	r3, r2
 80150e2:	00db      	lsls	r3, r3, #3
 80150e4:	440b      	add	r3, r1
 80150e6:	3314      	adds	r3, #20
 80150e8:	781b      	ldrb	r3, [r3, #0]
 80150ea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80150ec:	78fb      	ldrb	r3, [r7, #3]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	f000 8086 	beq.w	8015200 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80150f4:	4948      	ldr	r1, [pc, #288]	; (8015218 <etharp_tmr+0x14c>)
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	4613      	mov	r3, r2
 80150fa:	005b      	lsls	r3, r3, #1
 80150fc:	4413      	add	r3, r2
 80150fe:	00db      	lsls	r3, r3, #3
 8015100:	440b      	add	r3, r1
 8015102:	3312      	adds	r3, #18
 8015104:	881b      	ldrh	r3, [r3, #0]
 8015106:	3301      	adds	r3, #1
 8015108:	b298      	uxth	r0, r3
 801510a:	4943      	ldr	r1, [pc, #268]	; (8015218 <etharp_tmr+0x14c>)
 801510c:	687a      	ldr	r2, [r7, #4]
 801510e:	4613      	mov	r3, r2
 8015110:	005b      	lsls	r3, r3, #1
 8015112:	4413      	add	r3, r2
 8015114:	00db      	lsls	r3, r3, #3
 8015116:	440b      	add	r3, r1
 8015118:	3312      	adds	r3, #18
 801511a:	4602      	mov	r2, r0
 801511c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801511e:	493e      	ldr	r1, [pc, #248]	; (8015218 <etharp_tmr+0x14c>)
 8015120:	687a      	ldr	r2, [r7, #4]
 8015122:	4613      	mov	r3, r2
 8015124:	005b      	lsls	r3, r3, #1
 8015126:	4413      	add	r3, r2
 8015128:	00db      	lsls	r3, r3, #3
 801512a:	440b      	add	r3, r1
 801512c:	3312      	adds	r3, #18
 801512e:	881b      	ldrh	r3, [r3, #0]
 8015130:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015134:	d215      	bcs.n	8015162 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015136:	4938      	ldr	r1, [pc, #224]	; (8015218 <etharp_tmr+0x14c>)
 8015138:	687a      	ldr	r2, [r7, #4]
 801513a:	4613      	mov	r3, r2
 801513c:	005b      	lsls	r3, r3, #1
 801513e:	4413      	add	r3, r2
 8015140:	00db      	lsls	r3, r3, #3
 8015142:	440b      	add	r3, r1
 8015144:	3314      	adds	r3, #20
 8015146:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015148:	2b01      	cmp	r3, #1
 801514a:	d10e      	bne.n	801516a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801514c:	4932      	ldr	r1, [pc, #200]	; (8015218 <etharp_tmr+0x14c>)
 801514e:	687a      	ldr	r2, [r7, #4]
 8015150:	4613      	mov	r3, r2
 8015152:	005b      	lsls	r3, r3, #1
 8015154:	4413      	add	r3, r2
 8015156:	00db      	lsls	r3, r3, #3
 8015158:	440b      	add	r3, r1
 801515a:	3312      	adds	r3, #18
 801515c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801515e:	2b04      	cmp	r3, #4
 8015160:	d903      	bls.n	801516a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	f7ff ff80 	bl	8015068 <etharp_free_entry>
 8015168:	e04a      	b.n	8015200 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801516a:	492b      	ldr	r1, [pc, #172]	; (8015218 <etharp_tmr+0x14c>)
 801516c:	687a      	ldr	r2, [r7, #4]
 801516e:	4613      	mov	r3, r2
 8015170:	005b      	lsls	r3, r3, #1
 8015172:	4413      	add	r3, r2
 8015174:	00db      	lsls	r3, r3, #3
 8015176:	440b      	add	r3, r1
 8015178:	3314      	adds	r3, #20
 801517a:	781b      	ldrb	r3, [r3, #0]
 801517c:	2b03      	cmp	r3, #3
 801517e:	d10a      	bne.n	8015196 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015180:	4925      	ldr	r1, [pc, #148]	; (8015218 <etharp_tmr+0x14c>)
 8015182:	687a      	ldr	r2, [r7, #4]
 8015184:	4613      	mov	r3, r2
 8015186:	005b      	lsls	r3, r3, #1
 8015188:	4413      	add	r3, r2
 801518a:	00db      	lsls	r3, r3, #3
 801518c:	440b      	add	r3, r1
 801518e:	3314      	adds	r3, #20
 8015190:	2204      	movs	r2, #4
 8015192:	701a      	strb	r2, [r3, #0]
 8015194:	e034      	b.n	8015200 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015196:	4920      	ldr	r1, [pc, #128]	; (8015218 <etharp_tmr+0x14c>)
 8015198:	687a      	ldr	r2, [r7, #4]
 801519a:	4613      	mov	r3, r2
 801519c:	005b      	lsls	r3, r3, #1
 801519e:	4413      	add	r3, r2
 80151a0:	00db      	lsls	r3, r3, #3
 80151a2:	440b      	add	r3, r1
 80151a4:	3314      	adds	r3, #20
 80151a6:	781b      	ldrb	r3, [r3, #0]
 80151a8:	2b04      	cmp	r3, #4
 80151aa:	d10a      	bne.n	80151c2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80151ac:	491a      	ldr	r1, [pc, #104]	; (8015218 <etharp_tmr+0x14c>)
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	4613      	mov	r3, r2
 80151b2:	005b      	lsls	r3, r3, #1
 80151b4:	4413      	add	r3, r2
 80151b6:	00db      	lsls	r3, r3, #3
 80151b8:	440b      	add	r3, r1
 80151ba:	3314      	adds	r3, #20
 80151bc:	2202      	movs	r2, #2
 80151be:	701a      	strb	r2, [r3, #0]
 80151c0:	e01e      	b.n	8015200 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80151c2:	4915      	ldr	r1, [pc, #84]	; (8015218 <etharp_tmr+0x14c>)
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	4613      	mov	r3, r2
 80151c8:	005b      	lsls	r3, r3, #1
 80151ca:	4413      	add	r3, r2
 80151cc:	00db      	lsls	r3, r3, #3
 80151ce:	440b      	add	r3, r1
 80151d0:	3314      	adds	r3, #20
 80151d2:	781b      	ldrb	r3, [r3, #0]
 80151d4:	2b01      	cmp	r3, #1
 80151d6:	d113      	bne.n	8015200 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80151d8:	490f      	ldr	r1, [pc, #60]	; (8015218 <etharp_tmr+0x14c>)
 80151da:	687a      	ldr	r2, [r7, #4]
 80151dc:	4613      	mov	r3, r2
 80151de:	005b      	lsls	r3, r3, #1
 80151e0:	4413      	add	r3, r2
 80151e2:	00db      	lsls	r3, r3, #3
 80151e4:	440b      	add	r3, r1
 80151e6:	3308      	adds	r3, #8
 80151e8:	6818      	ldr	r0, [r3, #0]
 80151ea:	687a      	ldr	r2, [r7, #4]
 80151ec:	4613      	mov	r3, r2
 80151ee:	005b      	lsls	r3, r3, #1
 80151f0:	4413      	add	r3, r2
 80151f2:	00db      	lsls	r3, r3, #3
 80151f4:	4a08      	ldr	r2, [pc, #32]	; (8015218 <etharp_tmr+0x14c>)
 80151f6:	4413      	add	r3, r2
 80151f8:	3304      	adds	r3, #4
 80151fa:	4619      	mov	r1, r3
 80151fc:	f000 fe6e 	bl	8015edc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	3301      	adds	r3, #1
 8015204:	607b      	str	r3, [r7, #4]
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	2b09      	cmp	r3, #9
 801520a:	f77f af65 	ble.w	80150d8 <etharp_tmr+0xc>
      }
    }
  }
}
 801520e:	bf00      	nop
 8015210:	bf00      	nop
 8015212:	3708      	adds	r7, #8
 8015214:	46bd      	mov	sp, r7
 8015216:	bd80      	pop	{r7, pc}
 8015218:	20077998 	.word	0x20077998

0801521c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801521c:	b580      	push	{r7, lr}
 801521e:	b08a      	sub	sp, #40	; 0x28
 8015220:	af00      	add	r7, sp, #0
 8015222:	60f8      	str	r0, [r7, #12]
 8015224:	460b      	mov	r3, r1
 8015226:	607a      	str	r2, [r7, #4]
 8015228:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801522a:	230a      	movs	r3, #10
 801522c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801522e:	230a      	movs	r3, #10
 8015230:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015232:	230a      	movs	r3, #10
 8015234:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015236:	2300      	movs	r3, #0
 8015238:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801523a:	230a      	movs	r3, #10
 801523c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801523e:	2300      	movs	r3, #0
 8015240:	83bb      	strh	r3, [r7, #28]
 8015242:	2300      	movs	r3, #0
 8015244:	837b      	strh	r3, [r7, #26]
 8015246:	2300      	movs	r3, #0
 8015248:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801524a:	2300      	movs	r3, #0
 801524c:	843b      	strh	r3, [r7, #32]
 801524e:	e0ae      	b.n	80153ae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015250:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015254:	49a6      	ldr	r1, [pc, #664]	; (80154f0 <etharp_find_entry+0x2d4>)
 8015256:	4613      	mov	r3, r2
 8015258:	005b      	lsls	r3, r3, #1
 801525a:	4413      	add	r3, r2
 801525c:	00db      	lsls	r3, r3, #3
 801525e:	440b      	add	r3, r1
 8015260:	3314      	adds	r3, #20
 8015262:	781b      	ldrb	r3, [r3, #0]
 8015264:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015266:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801526a:	2b0a      	cmp	r3, #10
 801526c:	d105      	bne.n	801527a <etharp_find_entry+0x5e>
 801526e:	7dfb      	ldrb	r3, [r7, #23]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d102      	bne.n	801527a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015274:	8c3b      	ldrh	r3, [r7, #32]
 8015276:	847b      	strh	r3, [r7, #34]	; 0x22
 8015278:	e095      	b.n	80153a6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801527a:	7dfb      	ldrb	r3, [r7, #23]
 801527c:	2b00      	cmp	r3, #0
 801527e:	f000 8092 	beq.w	80153a6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015282:	7dfb      	ldrb	r3, [r7, #23]
 8015284:	2b01      	cmp	r3, #1
 8015286:	d009      	beq.n	801529c <etharp_find_entry+0x80>
 8015288:	7dfb      	ldrb	r3, [r7, #23]
 801528a:	2b01      	cmp	r3, #1
 801528c:	d806      	bhi.n	801529c <etharp_find_entry+0x80>
 801528e:	4b99      	ldr	r3, [pc, #612]	; (80154f4 <etharp_find_entry+0x2d8>)
 8015290:	f240 1223 	movw	r2, #291	; 0x123
 8015294:	4998      	ldr	r1, [pc, #608]	; (80154f8 <etharp_find_entry+0x2dc>)
 8015296:	4899      	ldr	r0, [pc, #612]	; (80154fc <etharp_find_entry+0x2e0>)
 8015298:	f003 fc7a 	bl	8018b90 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d020      	beq.n	80152e4 <etharp_find_entry+0xc8>
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	6819      	ldr	r1, [r3, #0]
 80152a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152aa:	4891      	ldr	r0, [pc, #580]	; (80154f0 <etharp_find_entry+0x2d4>)
 80152ac:	4613      	mov	r3, r2
 80152ae:	005b      	lsls	r3, r3, #1
 80152b0:	4413      	add	r3, r2
 80152b2:	00db      	lsls	r3, r3, #3
 80152b4:	4403      	add	r3, r0
 80152b6:	3304      	adds	r3, #4
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	4299      	cmp	r1, r3
 80152bc:	d112      	bne.n	80152e4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d00c      	beq.n	80152de <etharp_find_entry+0xc2>
 80152c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152c8:	4989      	ldr	r1, [pc, #548]	; (80154f0 <etharp_find_entry+0x2d4>)
 80152ca:	4613      	mov	r3, r2
 80152cc:	005b      	lsls	r3, r3, #1
 80152ce:	4413      	add	r3, r2
 80152d0:	00db      	lsls	r3, r3, #3
 80152d2:	440b      	add	r3, r1
 80152d4:	3308      	adds	r3, #8
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	687a      	ldr	r2, [r7, #4]
 80152da:	429a      	cmp	r2, r3
 80152dc:	d102      	bne.n	80152e4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80152de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80152e2:	e100      	b.n	80154e6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80152e4:	7dfb      	ldrb	r3, [r7, #23]
 80152e6:	2b01      	cmp	r3, #1
 80152e8:	d140      	bne.n	801536c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80152ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152ee:	4980      	ldr	r1, [pc, #512]	; (80154f0 <etharp_find_entry+0x2d4>)
 80152f0:	4613      	mov	r3, r2
 80152f2:	005b      	lsls	r3, r3, #1
 80152f4:	4413      	add	r3, r2
 80152f6:	00db      	lsls	r3, r3, #3
 80152f8:	440b      	add	r3, r1
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d01a      	beq.n	8015336 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015300:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015304:	497a      	ldr	r1, [pc, #488]	; (80154f0 <etharp_find_entry+0x2d4>)
 8015306:	4613      	mov	r3, r2
 8015308:	005b      	lsls	r3, r3, #1
 801530a:	4413      	add	r3, r2
 801530c:	00db      	lsls	r3, r3, #3
 801530e:	440b      	add	r3, r1
 8015310:	3312      	adds	r3, #18
 8015312:	881b      	ldrh	r3, [r3, #0]
 8015314:	8bba      	ldrh	r2, [r7, #28]
 8015316:	429a      	cmp	r2, r3
 8015318:	d845      	bhi.n	80153a6 <etharp_find_entry+0x18a>
            old_queue = i;
 801531a:	8c3b      	ldrh	r3, [r7, #32]
 801531c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801531e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015322:	4973      	ldr	r1, [pc, #460]	; (80154f0 <etharp_find_entry+0x2d4>)
 8015324:	4613      	mov	r3, r2
 8015326:	005b      	lsls	r3, r3, #1
 8015328:	4413      	add	r3, r2
 801532a:	00db      	lsls	r3, r3, #3
 801532c:	440b      	add	r3, r1
 801532e:	3312      	adds	r3, #18
 8015330:	881b      	ldrh	r3, [r3, #0]
 8015332:	83bb      	strh	r3, [r7, #28]
 8015334:	e037      	b.n	80153a6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015336:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801533a:	496d      	ldr	r1, [pc, #436]	; (80154f0 <etharp_find_entry+0x2d4>)
 801533c:	4613      	mov	r3, r2
 801533e:	005b      	lsls	r3, r3, #1
 8015340:	4413      	add	r3, r2
 8015342:	00db      	lsls	r3, r3, #3
 8015344:	440b      	add	r3, r1
 8015346:	3312      	adds	r3, #18
 8015348:	881b      	ldrh	r3, [r3, #0]
 801534a:	8b7a      	ldrh	r2, [r7, #26]
 801534c:	429a      	cmp	r2, r3
 801534e:	d82a      	bhi.n	80153a6 <etharp_find_entry+0x18a>
            old_pending = i;
 8015350:	8c3b      	ldrh	r3, [r7, #32]
 8015352:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015354:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015358:	4965      	ldr	r1, [pc, #404]	; (80154f0 <etharp_find_entry+0x2d4>)
 801535a:	4613      	mov	r3, r2
 801535c:	005b      	lsls	r3, r3, #1
 801535e:	4413      	add	r3, r2
 8015360:	00db      	lsls	r3, r3, #3
 8015362:	440b      	add	r3, r1
 8015364:	3312      	adds	r3, #18
 8015366:	881b      	ldrh	r3, [r3, #0]
 8015368:	837b      	strh	r3, [r7, #26]
 801536a:	e01c      	b.n	80153a6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801536c:	7dfb      	ldrb	r3, [r7, #23]
 801536e:	2b01      	cmp	r3, #1
 8015370:	d919      	bls.n	80153a6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015372:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015376:	495e      	ldr	r1, [pc, #376]	; (80154f0 <etharp_find_entry+0x2d4>)
 8015378:	4613      	mov	r3, r2
 801537a:	005b      	lsls	r3, r3, #1
 801537c:	4413      	add	r3, r2
 801537e:	00db      	lsls	r3, r3, #3
 8015380:	440b      	add	r3, r1
 8015382:	3312      	adds	r3, #18
 8015384:	881b      	ldrh	r3, [r3, #0]
 8015386:	8b3a      	ldrh	r2, [r7, #24]
 8015388:	429a      	cmp	r2, r3
 801538a:	d80c      	bhi.n	80153a6 <etharp_find_entry+0x18a>
            old_stable = i;
 801538c:	8c3b      	ldrh	r3, [r7, #32]
 801538e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015390:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015394:	4956      	ldr	r1, [pc, #344]	; (80154f0 <etharp_find_entry+0x2d4>)
 8015396:	4613      	mov	r3, r2
 8015398:	005b      	lsls	r3, r3, #1
 801539a:	4413      	add	r3, r2
 801539c:	00db      	lsls	r3, r3, #3
 801539e:	440b      	add	r3, r1
 80153a0:	3312      	adds	r3, #18
 80153a2:	881b      	ldrh	r3, [r3, #0]
 80153a4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153a6:	8c3b      	ldrh	r3, [r7, #32]
 80153a8:	3301      	adds	r3, #1
 80153aa:	b29b      	uxth	r3, r3
 80153ac:	843b      	strh	r3, [r7, #32]
 80153ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153b2:	2b09      	cmp	r3, #9
 80153b4:	f77f af4c 	ble.w	8015250 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80153b8:	7afb      	ldrb	r3, [r7, #11]
 80153ba:	f003 0302 	and.w	r3, r3, #2
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d108      	bne.n	80153d4 <etharp_find_entry+0x1b8>
 80153c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80153c6:	2b0a      	cmp	r3, #10
 80153c8:	d107      	bne.n	80153da <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80153ca:	7afb      	ldrb	r3, [r7, #11]
 80153cc:	f003 0301 	and.w	r3, r3, #1
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d102      	bne.n	80153da <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80153d4:	f04f 33ff 	mov.w	r3, #4294967295
 80153d8:	e085      	b.n	80154e6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80153da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80153de:	2b09      	cmp	r3, #9
 80153e0:	dc02      	bgt.n	80153e8 <etharp_find_entry+0x1cc>
    i = empty;
 80153e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80153e4:	843b      	strh	r3, [r7, #32]
 80153e6:	e039      	b.n	801545c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80153e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80153ec:	2b09      	cmp	r3, #9
 80153ee:	dc14      	bgt.n	801541a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80153f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80153f2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80153f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153f8:	493d      	ldr	r1, [pc, #244]	; (80154f0 <etharp_find_entry+0x2d4>)
 80153fa:	4613      	mov	r3, r2
 80153fc:	005b      	lsls	r3, r3, #1
 80153fe:	4413      	add	r3, r2
 8015400:	00db      	lsls	r3, r3, #3
 8015402:	440b      	add	r3, r1
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d018      	beq.n	801543c <etharp_find_entry+0x220>
 801540a:	4b3a      	ldr	r3, [pc, #232]	; (80154f4 <etharp_find_entry+0x2d8>)
 801540c:	f240 126d 	movw	r2, #365	; 0x16d
 8015410:	493b      	ldr	r1, [pc, #236]	; (8015500 <etharp_find_entry+0x2e4>)
 8015412:	483a      	ldr	r0, [pc, #232]	; (80154fc <etharp_find_entry+0x2e0>)
 8015414:	f003 fbbc 	bl	8018b90 <iprintf>
 8015418:	e010      	b.n	801543c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801541a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801541e:	2b09      	cmp	r3, #9
 8015420:	dc02      	bgt.n	8015428 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015422:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015424:	843b      	strh	r3, [r7, #32]
 8015426:	e009      	b.n	801543c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015428:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801542c:	2b09      	cmp	r3, #9
 801542e:	dc02      	bgt.n	8015436 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015430:	8bfb      	ldrh	r3, [r7, #30]
 8015432:	843b      	strh	r3, [r7, #32]
 8015434:	e002      	b.n	801543c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015436:	f04f 33ff 	mov.w	r3, #4294967295
 801543a:	e054      	b.n	80154e6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801543c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015440:	2b09      	cmp	r3, #9
 8015442:	dd06      	ble.n	8015452 <etharp_find_entry+0x236>
 8015444:	4b2b      	ldr	r3, [pc, #172]	; (80154f4 <etharp_find_entry+0x2d8>)
 8015446:	f240 127f 	movw	r2, #383	; 0x17f
 801544a:	492e      	ldr	r1, [pc, #184]	; (8015504 <etharp_find_entry+0x2e8>)
 801544c:	482b      	ldr	r0, [pc, #172]	; (80154fc <etharp_find_entry+0x2e0>)
 801544e:	f003 fb9f 	bl	8018b90 <iprintf>
    etharp_free_entry(i);
 8015452:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015456:	4618      	mov	r0, r3
 8015458:	f7ff fe06 	bl	8015068 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801545c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015460:	2b09      	cmp	r3, #9
 8015462:	dd06      	ble.n	8015472 <etharp_find_entry+0x256>
 8015464:	4b23      	ldr	r3, [pc, #140]	; (80154f4 <etharp_find_entry+0x2d8>)
 8015466:	f240 1283 	movw	r2, #387	; 0x183
 801546a:	4926      	ldr	r1, [pc, #152]	; (8015504 <etharp_find_entry+0x2e8>)
 801546c:	4823      	ldr	r0, [pc, #140]	; (80154fc <etharp_find_entry+0x2e0>)
 801546e:	f003 fb8f 	bl	8018b90 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015476:	491e      	ldr	r1, [pc, #120]	; (80154f0 <etharp_find_entry+0x2d4>)
 8015478:	4613      	mov	r3, r2
 801547a:	005b      	lsls	r3, r3, #1
 801547c:	4413      	add	r3, r2
 801547e:	00db      	lsls	r3, r3, #3
 8015480:	440b      	add	r3, r1
 8015482:	3314      	adds	r3, #20
 8015484:	781b      	ldrb	r3, [r3, #0]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d006      	beq.n	8015498 <etharp_find_entry+0x27c>
 801548a:	4b1a      	ldr	r3, [pc, #104]	; (80154f4 <etharp_find_entry+0x2d8>)
 801548c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015490:	491d      	ldr	r1, [pc, #116]	; (8015508 <etharp_find_entry+0x2ec>)
 8015492:	481a      	ldr	r0, [pc, #104]	; (80154fc <etharp_find_entry+0x2e0>)
 8015494:	f003 fb7c 	bl	8018b90 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d00b      	beq.n	80154b6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801549e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	6819      	ldr	r1, [r3, #0]
 80154a6:	4812      	ldr	r0, [pc, #72]	; (80154f0 <etharp_find_entry+0x2d4>)
 80154a8:	4613      	mov	r3, r2
 80154aa:	005b      	lsls	r3, r3, #1
 80154ac:	4413      	add	r3, r2
 80154ae:	00db      	lsls	r3, r3, #3
 80154b0:	4403      	add	r3, r0
 80154b2:	3304      	adds	r3, #4
 80154b4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80154b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154ba:	490d      	ldr	r1, [pc, #52]	; (80154f0 <etharp_find_entry+0x2d4>)
 80154bc:	4613      	mov	r3, r2
 80154be:	005b      	lsls	r3, r3, #1
 80154c0:	4413      	add	r3, r2
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	440b      	add	r3, r1
 80154c6:	3312      	adds	r3, #18
 80154c8:	2200      	movs	r2, #0
 80154ca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80154cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154d0:	4907      	ldr	r1, [pc, #28]	; (80154f0 <etharp_find_entry+0x2d4>)
 80154d2:	4613      	mov	r3, r2
 80154d4:	005b      	lsls	r3, r3, #1
 80154d6:	4413      	add	r3, r2
 80154d8:	00db      	lsls	r3, r3, #3
 80154da:	440b      	add	r3, r1
 80154dc:	3308      	adds	r3, #8
 80154de:	687a      	ldr	r2, [r7, #4]
 80154e0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80154e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	3728      	adds	r7, #40	; 0x28
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	bf00      	nop
 80154f0:	20077998 	.word	0x20077998
 80154f4:	0801faa8 	.word	0x0801faa8
 80154f8:	0801fae0 	.word	0x0801fae0
 80154fc:	0801fb20 	.word	0x0801fb20
 8015500:	0801fb48 	.word	0x0801fb48
 8015504:	0801fb60 	.word	0x0801fb60
 8015508:	0801fb74 	.word	0x0801fb74

0801550c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b088      	sub	sp, #32
 8015510:	af02      	add	r7, sp, #8
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	607a      	str	r2, [r7, #4]
 8015518:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015520:	2b06      	cmp	r3, #6
 8015522:	d006      	beq.n	8015532 <etharp_update_arp_entry+0x26>
 8015524:	4b48      	ldr	r3, [pc, #288]	; (8015648 <etharp_update_arp_entry+0x13c>)
 8015526:	f240 12a9 	movw	r2, #425	; 0x1a9
 801552a:	4948      	ldr	r1, [pc, #288]	; (801564c <etharp_update_arp_entry+0x140>)
 801552c:	4848      	ldr	r0, [pc, #288]	; (8015650 <etharp_update_arp_entry+0x144>)
 801552e:	f003 fb2f 	bl	8018b90 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d012      	beq.n	801555e <etharp_update_arp_entry+0x52>
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d00e      	beq.n	801555e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	68f9      	ldr	r1, [r7, #12]
 8015546:	4618      	mov	r0, r3
 8015548:	f001 f8fe 	bl	8016748 <ip4_addr_isbroadcast_u32>
 801554c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801554e:	2b00      	cmp	r3, #0
 8015550:	d105      	bne.n	801555e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801555a:	2be0      	cmp	r3, #224	; 0xe0
 801555c:	d102      	bne.n	8015564 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801555e:	f06f 030f 	mvn.w	r3, #15
 8015562:	e06c      	b.n	801563e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015564:	78fb      	ldrb	r3, [r7, #3]
 8015566:	68fa      	ldr	r2, [r7, #12]
 8015568:	4619      	mov	r1, r3
 801556a:	68b8      	ldr	r0, [r7, #8]
 801556c:	f7ff fe56 	bl	801521c <etharp_find_entry>
 8015570:	4603      	mov	r3, r0
 8015572:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015574:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015578:	2b00      	cmp	r3, #0
 801557a:	da02      	bge.n	8015582 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801557c:	8afb      	ldrh	r3, [r7, #22]
 801557e:	b25b      	sxtb	r3, r3
 8015580:	e05d      	b.n	801563e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015582:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015586:	4933      	ldr	r1, [pc, #204]	; (8015654 <etharp_update_arp_entry+0x148>)
 8015588:	4613      	mov	r3, r2
 801558a:	005b      	lsls	r3, r3, #1
 801558c:	4413      	add	r3, r2
 801558e:	00db      	lsls	r3, r3, #3
 8015590:	440b      	add	r3, r1
 8015592:	3314      	adds	r3, #20
 8015594:	2202      	movs	r2, #2
 8015596:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015598:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801559c:	492d      	ldr	r1, [pc, #180]	; (8015654 <etharp_update_arp_entry+0x148>)
 801559e:	4613      	mov	r3, r2
 80155a0:	005b      	lsls	r3, r3, #1
 80155a2:	4413      	add	r3, r2
 80155a4:	00db      	lsls	r3, r3, #3
 80155a6:	440b      	add	r3, r1
 80155a8:	3308      	adds	r3, #8
 80155aa:	68fa      	ldr	r2, [r7, #12]
 80155ac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80155ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80155b2:	4613      	mov	r3, r2
 80155b4:	005b      	lsls	r3, r3, #1
 80155b6:	4413      	add	r3, r2
 80155b8:	00db      	lsls	r3, r3, #3
 80155ba:	3308      	adds	r3, #8
 80155bc:	4a25      	ldr	r2, [pc, #148]	; (8015654 <etharp_update_arp_entry+0x148>)
 80155be:	4413      	add	r3, r2
 80155c0:	3304      	adds	r3, #4
 80155c2:	2206      	movs	r2, #6
 80155c4:	6879      	ldr	r1, [r7, #4]
 80155c6:	4618      	mov	r0, r3
 80155c8:	f003 fc69 	bl	8018e9e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80155cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80155d0:	4920      	ldr	r1, [pc, #128]	; (8015654 <etharp_update_arp_entry+0x148>)
 80155d2:	4613      	mov	r3, r2
 80155d4:	005b      	lsls	r3, r3, #1
 80155d6:	4413      	add	r3, r2
 80155d8:	00db      	lsls	r3, r3, #3
 80155da:	440b      	add	r3, r1
 80155dc:	3312      	adds	r3, #18
 80155de:	2200      	movs	r2, #0
 80155e0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80155e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80155e6:	491b      	ldr	r1, [pc, #108]	; (8015654 <etharp_update_arp_entry+0x148>)
 80155e8:	4613      	mov	r3, r2
 80155ea:	005b      	lsls	r3, r3, #1
 80155ec:	4413      	add	r3, r2
 80155ee:	00db      	lsls	r3, r3, #3
 80155f0:	440b      	add	r3, r1
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d021      	beq.n	801563c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80155f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80155fc:	4915      	ldr	r1, [pc, #84]	; (8015654 <etharp_update_arp_entry+0x148>)
 80155fe:	4613      	mov	r3, r2
 8015600:	005b      	lsls	r3, r3, #1
 8015602:	4413      	add	r3, r2
 8015604:	00db      	lsls	r3, r3, #3
 8015606:	440b      	add	r3, r1
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801560c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015610:	4910      	ldr	r1, [pc, #64]	; (8015654 <etharp_update_arp_entry+0x148>)
 8015612:	4613      	mov	r3, r2
 8015614:	005b      	lsls	r3, r3, #1
 8015616:	4413      	add	r3, r2
 8015618:	00db      	lsls	r3, r3, #3
 801561a:	440b      	add	r3, r1
 801561c:	2200      	movs	r2, #0
 801561e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015626:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801562a:	9300      	str	r3, [sp, #0]
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	6939      	ldr	r1, [r7, #16]
 8015630:	68f8      	ldr	r0, [r7, #12]
 8015632:	f002 f8c1 	bl	80177b8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015636:	6938      	ldr	r0, [r7, #16]
 8015638:	f7f8 fb32 	bl	800dca0 <pbuf_free>
  }
  return ERR_OK;
 801563c:	2300      	movs	r3, #0
}
 801563e:	4618      	mov	r0, r3
 8015640:	3718      	adds	r7, #24
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}
 8015646:	bf00      	nop
 8015648:	0801faa8 	.word	0x0801faa8
 801564c:	0801fba0 	.word	0x0801fba0
 8015650:	0801fb20 	.word	0x0801fb20
 8015654:	20077998 	.word	0x20077998

08015658 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b084      	sub	sp, #16
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015660:	2300      	movs	r3, #0
 8015662:	60fb      	str	r3, [r7, #12]
 8015664:	e01e      	b.n	80156a4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015666:	4913      	ldr	r1, [pc, #76]	; (80156b4 <etharp_cleanup_netif+0x5c>)
 8015668:	68fa      	ldr	r2, [r7, #12]
 801566a:	4613      	mov	r3, r2
 801566c:	005b      	lsls	r3, r3, #1
 801566e:	4413      	add	r3, r2
 8015670:	00db      	lsls	r3, r3, #3
 8015672:	440b      	add	r3, r1
 8015674:	3314      	adds	r3, #20
 8015676:	781b      	ldrb	r3, [r3, #0]
 8015678:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801567a:	7afb      	ldrb	r3, [r7, #11]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d00e      	beq.n	801569e <etharp_cleanup_netif+0x46>
 8015680:	490c      	ldr	r1, [pc, #48]	; (80156b4 <etharp_cleanup_netif+0x5c>)
 8015682:	68fa      	ldr	r2, [r7, #12]
 8015684:	4613      	mov	r3, r2
 8015686:	005b      	lsls	r3, r3, #1
 8015688:	4413      	add	r3, r2
 801568a:	00db      	lsls	r3, r3, #3
 801568c:	440b      	add	r3, r1
 801568e:	3308      	adds	r3, #8
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	687a      	ldr	r2, [r7, #4]
 8015694:	429a      	cmp	r2, r3
 8015696:	d102      	bne.n	801569e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015698:	68f8      	ldr	r0, [r7, #12]
 801569a:	f7ff fce5 	bl	8015068 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	3301      	adds	r3, #1
 80156a2:	60fb      	str	r3, [r7, #12]
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	2b09      	cmp	r3, #9
 80156a8:	dddd      	ble.n	8015666 <etharp_cleanup_netif+0xe>
    }
  }
}
 80156aa:	bf00      	nop
 80156ac:	bf00      	nop
 80156ae:	3710      	adds	r7, #16
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	20077998 	.word	0x20077998

080156b8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80156b8:	b5b0      	push	{r4, r5, r7, lr}
 80156ba:	b08a      	sub	sp, #40	; 0x28
 80156bc:	af04      	add	r7, sp, #16
 80156be:	6078      	str	r0, [r7, #4]
 80156c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d107      	bne.n	80156d8 <etharp_input+0x20>
 80156c8:	4b3d      	ldr	r3, [pc, #244]	; (80157c0 <etharp_input+0x108>)
 80156ca:	f240 228a 	movw	r2, #650	; 0x28a
 80156ce:	493d      	ldr	r1, [pc, #244]	; (80157c4 <etharp_input+0x10c>)
 80156d0:	483d      	ldr	r0, [pc, #244]	; (80157c8 <etharp_input+0x110>)
 80156d2:	f003 fa5d 	bl	8018b90 <iprintf>
 80156d6:	e06f      	b.n	80157b8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	881b      	ldrh	r3, [r3, #0]
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80156e8:	d10c      	bne.n	8015704 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80156ee:	2b06      	cmp	r3, #6
 80156f0:	d108      	bne.n	8015704 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80156f6:	2b04      	cmp	r3, #4
 80156f8:	d104      	bne.n	8015704 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80156fa:	693b      	ldr	r3, [r7, #16]
 80156fc:	885b      	ldrh	r3, [r3, #2]
 80156fe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015700:	2b08      	cmp	r3, #8
 8015702:	d003      	beq.n	801570c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f7f8 facb 	bl	800dca0 <pbuf_free>
    return;
 801570a:	e055      	b.n	80157b8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	330e      	adds	r3, #14
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015714:	693b      	ldr	r3, [r7, #16]
 8015716:	3318      	adds	r3, #24
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	3304      	adds	r3, #4
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d102      	bne.n	801572c <etharp_input+0x74>
    for_us = 0;
 8015726:	2300      	movs	r3, #0
 8015728:	75fb      	strb	r3, [r7, #23]
 801572a:	e009      	b.n	8015740 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801572c:	68ba      	ldr	r2, [r7, #8]
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	3304      	adds	r3, #4
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	429a      	cmp	r2, r3
 8015736:	bf0c      	ite	eq
 8015738:	2301      	moveq	r3, #1
 801573a:	2300      	movne	r3, #0
 801573c:	b2db      	uxtb	r3, r3
 801573e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015740:	693b      	ldr	r3, [r7, #16]
 8015742:	f103 0208 	add.w	r2, r3, #8
 8015746:	7dfb      	ldrb	r3, [r7, #23]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d001      	beq.n	8015750 <etharp_input+0x98>
 801574c:	2301      	movs	r3, #1
 801574e:	e000      	b.n	8015752 <etharp_input+0x9a>
 8015750:	2302      	movs	r3, #2
 8015752:	f107 010c 	add.w	r1, r7, #12
 8015756:	6838      	ldr	r0, [r7, #0]
 8015758:	f7ff fed8 	bl	801550c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	88db      	ldrh	r3, [r3, #6]
 8015760:	b29b      	uxth	r3, r3
 8015762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015766:	d003      	beq.n	8015770 <etharp_input+0xb8>
 8015768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801576c:	d01e      	beq.n	80157ac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801576e:	e020      	b.n	80157b2 <etharp_input+0xfa>
      if (for_us) {
 8015770:	7dfb      	ldrb	r3, [r7, #23]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d01c      	beq.n	80157b0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015776:	683b      	ldr	r3, [r7, #0]
 8015778:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015788:	683b      	ldr	r3, [r7, #0]
 801578a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801578c:	693a      	ldr	r2, [r7, #16]
 801578e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015790:	2102      	movs	r1, #2
 8015792:	9103      	str	r1, [sp, #12]
 8015794:	f107 010c 	add.w	r1, r7, #12
 8015798:	9102      	str	r1, [sp, #8]
 801579a:	9201      	str	r2, [sp, #4]
 801579c:	9300      	str	r3, [sp, #0]
 801579e:	462b      	mov	r3, r5
 80157a0:	4622      	mov	r2, r4
 80157a2:	4601      	mov	r1, r0
 80157a4:	6838      	ldr	r0, [r7, #0]
 80157a6:	f000 faeb 	bl	8015d80 <etharp_raw>
      break;
 80157aa:	e001      	b.n	80157b0 <etharp_input+0xf8>
      break;
 80157ac:	bf00      	nop
 80157ae:	e000      	b.n	80157b2 <etharp_input+0xfa>
      break;
 80157b0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f7f8 fa74 	bl	800dca0 <pbuf_free>
}
 80157b8:	3718      	adds	r7, #24
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bdb0      	pop	{r4, r5, r7, pc}
 80157be:	bf00      	nop
 80157c0:	0801faa8 	.word	0x0801faa8
 80157c4:	0801fbf8 	.word	0x0801fbf8
 80157c8:	0801fb20 	.word	0x0801fb20

080157cc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b086      	sub	sp, #24
 80157d0:	af02      	add	r7, sp, #8
 80157d2:	60f8      	str	r0, [r7, #12]
 80157d4:	60b9      	str	r1, [r7, #8]
 80157d6:	4613      	mov	r3, r2
 80157d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80157da:	79fa      	ldrb	r2, [r7, #7]
 80157dc:	4944      	ldr	r1, [pc, #272]	; (80158f0 <etharp_output_to_arp_index+0x124>)
 80157de:	4613      	mov	r3, r2
 80157e0:	005b      	lsls	r3, r3, #1
 80157e2:	4413      	add	r3, r2
 80157e4:	00db      	lsls	r3, r3, #3
 80157e6:	440b      	add	r3, r1
 80157e8:	3314      	adds	r3, #20
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	d806      	bhi.n	80157fe <etharp_output_to_arp_index+0x32>
 80157f0:	4b40      	ldr	r3, [pc, #256]	; (80158f4 <etharp_output_to_arp_index+0x128>)
 80157f2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80157f6:	4940      	ldr	r1, [pc, #256]	; (80158f8 <etharp_output_to_arp_index+0x12c>)
 80157f8:	4840      	ldr	r0, [pc, #256]	; (80158fc <etharp_output_to_arp_index+0x130>)
 80157fa:	f003 f9c9 	bl	8018b90 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80157fe:	79fa      	ldrb	r2, [r7, #7]
 8015800:	493b      	ldr	r1, [pc, #236]	; (80158f0 <etharp_output_to_arp_index+0x124>)
 8015802:	4613      	mov	r3, r2
 8015804:	005b      	lsls	r3, r3, #1
 8015806:	4413      	add	r3, r2
 8015808:	00db      	lsls	r3, r3, #3
 801580a:	440b      	add	r3, r1
 801580c:	3314      	adds	r3, #20
 801580e:	781b      	ldrb	r3, [r3, #0]
 8015810:	2b02      	cmp	r3, #2
 8015812:	d153      	bne.n	80158bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015814:	79fa      	ldrb	r2, [r7, #7]
 8015816:	4936      	ldr	r1, [pc, #216]	; (80158f0 <etharp_output_to_arp_index+0x124>)
 8015818:	4613      	mov	r3, r2
 801581a:	005b      	lsls	r3, r3, #1
 801581c:	4413      	add	r3, r2
 801581e:	00db      	lsls	r3, r3, #3
 8015820:	440b      	add	r3, r1
 8015822:	3312      	adds	r3, #18
 8015824:	881b      	ldrh	r3, [r3, #0]
 8015826:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801582a:	d919      	bls.n	8015860 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801582c:	79fa      	ldrb	r2, [r7, #7]
 801582e:	4613      	mov	r3, r2
 8015830:	005b      	lsls	r3, r3, #1
 8015832:	4413      	add	r3, r2
 8015834:	00db      	lsls	r3, r3, #3
 8015836:	4a2e      	ldr	r2, [pc, #184]	; (80158f0 <etharp_output_to_arp_index+0x124>)
 8015838:	4413      	add	r3, r2
 801583a:	3304      	adds	r3, #4
 801583c:	4619      	mov	r1, r3
 801583e:	68f8      	ldr	r0, [r7, #12]
 8015840:	f000 fb4c 	bl	8015edc <etharp_request>
 8015844:	4603      	mov	r3, r0
 8015846:	2b00      	cmp	r3, #0
 8015848:	d138      	bne.n	80158bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801584a:	79fa      	ldrb	r2, [r7, #7]
 801584c:	4928      	ldr	r1, [pc, #160]	; (80158f0 <etharp_output_to_arp_index+0x124>)
 801584e:	4613      	mov	r3, r2
 8015850:	005b      	lsls	r3, r3, #1
 8015852:	4413      	add	r3, r2
 8015854:	00db      	lsls	r3, r3, #3
 8015856:	440b      	add	r3, r1
 8015858:	3314      	adds	r3, #20
 801585a:	2203      	movs	r2, #3
 801585c:	701a      	strb	r2, [r3, #0]
 801585e:	e02d      	b.n	80158bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015860:	79fa      	ldrb	r2, [r7, #7]
 8015862:	4923      	ldr	r1, [pc, #140]	; (80158f0 <etharp_output_to_arp_index+0x124>)
 8015864:	4613      	mov	r3, r2
 8015866:	005b      	lsls	r3, r3, #1
 8015868:	4413      	add	r3, r2
 801586a:	00db      	lsls	r3, r3, #3
 801586c:	440b      	add	r3, r1
 801586e:	3312      	adds	r3, #18
 8015870:	881b      	ldrh	r3, [r3, #0]
 8015872:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015876:	d321      	bcc.n	80158bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015878:	79fa      	ldrb	r2, [r7, #7]
 801587a:	4613      	mov	r3, r2
 801587c:	005b      	lsls	r3, r3, #1
 801587e:	4413      	add	r3, r2
 8015880:	00db      	lsls	r3, r3, #3
 8015882:	4a1b      	ldr	r2, [pc, #108]	; (80158f0 <etharp_output_to_arp_index+0x124>)
 8015884:	4413      	add	r3, r2
 8015886:	1d19      	adds	r1, r3, #4
 8015888:	79fa      	ldrb	r2, [r7, #7]
 801588a:	4613      	mov	r3, r2
 801588c:	005b      	lsls	r3, r3, #1
 801588e:	4413      	add	r3, r2
 8015890:	00db      	lsls	r3, r3, #3
 8015892:	3308      	adds	r3, #8
 8015894:	4a16      	ldr	r2, [pc, #88]	; (80158f0 <etharp_output_to_arp_index+0x124>)
 8015896:	4413      	add	r3, r2
 8015898:	3304      	adds	r3, #4
 801589a:	461a      	mov	r2, r3
 801589c:	68f8      	ldr	r0, [r7, #12]
 801589e:	f000 fafb 	bl	8015e98 <etharp_request_dst>
 80158a2:	4603      	mov	r3, r0
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d109      	bne.n	80158bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80158a8:	79fa      	ldrb	r2, [r7, #7]
 80158aa:	4911      	ldr	r1, [pc, #68]	; (80158f0 <etharp_output_to_arp_index+0x124>)
 80158ac:	4613      	mov	r3, r2
 80158ae:	005b      	lsls	r3, r3, #1
 80158b0:	4413      	add	r3, r2
 80158b2:	00db      	lsls	r3, r3, #3
 80158b4:	440b      	add	r3, r1
 80158b6:	3314      	adds	r3, #20
 80158b8:	2203      	movs	r2, #3
 80158ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80158c2:	79fa      	ldrb	r2, [r7, #7]
 80158c4:	4613      	mov	r3, r2
 80158c6:	005b      	lsls	r3, r3, #1
 80158c8:	4413      	add	r3, r2
 80158ca:	00db      	lsls	r3, r3, #3
 80158cc:	3308      	adds	r3, #8
 80158ce:	4a08      	ldr	r2, [pc, #32]	; (80158f0 <etharp_output_to_arp_index+0x124>)
 80158d0:	4413      	add	r3, r2
 80158d2:	3304      	adds	r3, #4
 80158d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80158d8:	9200      	str	r2, [sp, #0]
 80158da:	460a      	mov	r2, r1
 80158dc:	68b9      	ldr	r1, [r7, #8]
 80158de:	68f8      	ldr	r0, [r7, #12]
 80158e0:	f001 ff6a 	bl	80177b8 <ethernet_output>
 80158e4:	4603      	mov	r3, r0
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	3710      	adds	r7, #16
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
 80158ee:	bf00      	nop
 80158f0:	20077998 	.word	0x20077998
 80158f4:	0801faa8 	.word	0x0801faa8
 80158f8:	0801fc18 	.word	0x0801fc18
 80158fc:	0801fb20 	.word	0x0801fb20

08015900 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b08a      	sub	sp, #40	; 0x28
 8015904:	af02      	add	r7, sp, #8
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d106      	bne.n	8015924 <etharp_output+0x24>
 8015916:	4b73      	ldr	r3, [pc, #460]	; (8015ae4 <etharp_output+0x1e4>)
 8015918:	f240 321e 	movw	r2, #798	; 0x31e
 801591c:	4972      	ldr	r1, [pc, #456]	; (8015ae8 <etharp_output+0x1e8>)
 801591e:	4873      	ldr	r0, [pc, #460]	; (8015aec <etharp_output+0x1ec>)
 8015920:	f003 f936 	bl	8018b90 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d106      	bne.n	8015938 <etharp_output+0x38>
 801592a:	4b6e      	ldr	r3, [pc, #440]	; (8015ae4 <etharp_output+0x1e4>)
 801592c:	f240 321f 	movw	r2, #799	; 0x31f
 8015930:	496f      	ldr	r1, [pc, #444]	; (8015af0 <etharp_output+0x1f0>)
 8015932:	486e      	ldr	r0, [pc, #440]	; (8015aec <etharp_output+0x1ec>)
 8015934:	f003 f92c 	bl	8018b90 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d106      	bne.n	801594c <etharp_output+0x4c>
 801593e:	4b69      	ldr	r3, [pc, #420]	; (8015ae4 <etharp_output+0x1e4>)
 8015940:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015944:	496b      	ldr	r1, [pc, #428]	; (8015af4 <etharp_output+0x1f4>)
 8015946:	4869      	ldr	r0, [pc, #420]	; (8015aec <etharp_output+0x1ec>)
 8015948:	f003 f922 	bl	8018b90 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	68f9      	ldr	r1, [r7, #12]
 8015952:	4618      	mov	r0, r3
 8015954:	f000 fef8 	bl	8016748 <ip4_addr_isbroadcast_u32>
 8015958:	4603      	mov	r3, r0
 801595a:	2b00      	cmp	r3, #0
 801595c:	d002      	beq.n	8015964 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801595e:	4b66      	ldr	r3, [pc, #408]	; (8015af8 <etharp_output+0x1f8>)
 8015960:	61fb      	str	r3, [r7, #28]
 8015962:	e0af      	b.n	8015ac4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801596c:	2be0      	cmp	r3, #224	; 0xe0
 801596e:	d118      	bne.n	80159a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015970:	2301      	movs	r3, #1
 8015972:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015974:	2300      	movs	r3, #0
 8015976:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015978:	235e      	movs	r3, #94	; 0x5e
 801597a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	3301      	adds	r3, #1
 8015980:	781b      	ldrb	r3, [r3, #0]
 8015982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015986:	b2db      	uxtb	r3, r3
 8015988:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	3302      	adds	r3, #2
 801598e:	781b      	ldrb	r3, [r3, #0]
 8015990:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	3303      	adds	r3, #3
 8015996:	781b      	ldrb	r3, [r3, #0]
 8015998:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801599a:	f107 0310 	add.w	r3, r7, #16
 801599e:	61fb      	str	r3, [r7, #28]
 80159a0:	e090      	b.n	8015ac4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681a      	ldr	r2, [r3, #0]
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	3304      	adds	r3, #4
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	405a      	eors	r2, r3
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	3308      	adds	r3, #8
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	4013      	ands	r3, r2
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d012      	beq.n	80159e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80159c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80159c4:	4293      	cmp	r3, r2
 80159c6:	d00b      	beq.n	80159e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	330c      	adds	r3, #12
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d003      	beq.n	80159da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	330c      	adds	r3, #12
 80159d6:	61bb      	str	r3, [r7, #24]
 80159d8:	e002      	b.n	80159e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80159da:	f06f 0303 	mvn.w	r3, #3
 80159de:	e07d      	b.n	8015adc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80159e0:	4b46      	ldr	r3, [pc, #280]	; (8015afc <etharp_output+0x1fc>)
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	4619      	mov	r1, r3
 80159e6:	4a46      	ldr	r2, [pc, #280]	; (8015b00 <etharp_output+0x200>)
 80159e8:	460b      	mov	r3, r1
 80159ea:	005b      	lsls	r3, r3, #1
 80159ec:	440b      	add	r3, r1
 80159ee:	00db      	lsls	r3, r3, #3
 80159f0:	4413      	add	r3, r2
 80159f2:	3314      	adds	r3, #20
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	2b01      	cmp	r3, #1
 80159f8:	d925      	bls.n	8015a46 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80159fa:	4b40      	ldr	r3, [pc, #256]	; (8015afc <etharp_output+0x1fc>)
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	4619      	mov	r1, r3
 8015a00:	4a3f      	ldr	r2, [pc, #252]	; (8015b00 <etharp_output+0x200>)
 8015a02:	460b      	mov	r3, r1
 8015a04:	005b      	lsls	r3, r3, #1
 8015a06:	440b      	add	r3, r1
 8015a08:	00db      	lsls	r3, r3, #3
 8015a0a:	4413      	add	r3, r2
 8015a0c:	3308      	adds	r3, #8
 8015a0e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015a10:	68fa      	ldr	r2, [r7, #12]
 8015a12:	429a      	cmp	r2, r3
 8015a14:	d117      	bne.n	8015a46 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	681a      	ldr	r2, [r3, #0]
 8015a1a:	4b38      	ldr	r3, [pc, #224]	; (8015afc <etharp_output+0x1fc>)
 8015a1c:	781b      	ldrb	r3, [r3, #0]
 8015a1e:	4618      	mov	r0, r3
 8015a20:	4937      	ldr	r1, [pc, #220]	; (8015b00 <etharp_output+0x200>)
 8015a22:	4603      	mov	r3, r0
 8015a24:	005b      	lsls	r3, r3, #1
 8015a26:	4403      	add	r3, r0
 8015a28:	00db      	lsls	r3, r3, #3
 8015a2a:	440b      	add	r3, r1
 8015a2c:	3304      	adds	r3, #4
 8015a2e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d108      	bne.n	8015a46 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015a34:	4b31      	ldr	r3, [pc, #196]	; (8015afc <etharp_output+0x1fc>)
 8015a36:	781b      	ldrb	r3, [r3, #0]
 8015a38:	461a      	mov	r2, r3
 8015a3a:	68b9      	ldr	r1, [r7, #8]
 8015a3c:	68f8      	ldr	r0, [r7, #12]
 8015a3e:	f7ff fec5 	bl	80157cc <etharp_output_to_arp_index>
 8015a42:	4603      	mov	r3, r0
 8015a44:	e04a      	b.n	8015adc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015a46:	2300      	movs	r3, #0
 8015a48:	75fb      	strb	r3, [r7, #23]
 8015a4a:	e031      	b.n	8015ab0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015a4c:	7dfa      	ldrb	r2, [r7, #23]
 8015a4e:	492c      	ldr	r1, [pc, #176]	; (8015b00 <etharp_output+0x200>)
 8015a50:	4613      	mov	r3, r2
 8015a52:	005b      	lsls	r3, r3, #1
 8015a54:	4413      	add	r3, r2
 8015a56:	00db      	lsls	r3, r3, #3
 8015a58:	440b      	add	r3, r1
 8015a5a:	3314      	adds	r3, #20
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	2b01      	cmp	r3, #1
 8015a60:	d923      	bls.n	8015aaa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015a62:	7dfa      	ldrb	r2, [r7, #23]
 8015a64:	4926      	ldr	r1, [pc, #152]	; (8015b00 <etharp_output+0x200>)
 8015a66:	4613      	mov	r3, r2
 8015a68:	005b      	lsls	r3, r3, #1
 8015a6a:	4413      	add	r3, r2
 8015a6c:	00db      	lsls	r3, r3, #3
 8015a6e:	440b      	add	r3, r1
 8015a70:	3308      	adds	r3, #8
 8015a72:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015a74:	68fa      	ldr	r2, [r7, #12]
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d117      	bne.n	8015aaa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015a7a:	69bb      	ldr	r3, [r7, #24]
 8015a7c:	6819      	ldr	r1, [r3, #0]
 8015a7e:	7dfa      	ldrb	r2, [r7, #23]
 8015a80:	481f      	ldr	r0, [pc, #124]	; (8015b00 <etharp_output+0x200>)
 8015a82:	4613      	mov	r3, r2
 8015a84:	005b      	lsls	r3, r3, #1
 8015a86:	4413      	add	r3, r2
 8015a88:	00db      	lsls	r3, r3, #3
 8015a8a:	4403      	add	r3, r0
 8015a8c:	3304      	adds	r3, #4
 8015a8e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015a90:	4299      	cmp	r1, r3
 8015a92:	d10a      	bne.n	8015aaa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015a94:	4a19      	ldr	r2, [pc, #100]	; (8015afc <etharp_output+0x1fc>)
 8015a96:	7dfb      	ldrb	r3, [r7, #23]
 8015a98:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015a9a:	7dfb      	ldrb	r3, [r7, #23]
 8015a9c:	461a      	mov	r2, r3
 8015a9e:	68b9      	ldr	r1, [r7, #8]
 8015aa0:	68f8      	ldr	r0, [r7, #12]
 8015aa2:	f7ff fe93 	bl	80157cc <etharp_output_to_arp_index>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	e018      	b.n	8015adc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015aaa:	7dfb      	ldrb	r3, [r7, #23]
 8015aac:	3301      	adds	r3, #1
 8015aae:	75fb      	strb	r3, [r7, #23]
 8015ab0:	7dfb      	ldrb	r3, [r7, #23]
 8015ab2:	2b09      	cmp	r3, #9
 8015ab4:	d9ca      	bls.n	8015a4c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015ab6:	68ba      	ldr	r2, [r7, #8]
 8015ab8:	69b9      	ldr	r1, [r7, #24]
 8015aba:	68f8      	ldr	r0, [r7, #12]
 8015abc:	f000 f822 	bl	8015b04 <etharp_query>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	e00b      	b.n	8015adc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015ace:	9300      	str	r3, [sp, #0]
 8015ad0:	69fb      	ldr	r3, [r7, #28]
 8015ad2:	68b9      	ldr	r1, [r7, #8]
 8015ad4:	68f8      	ldr	r0, [r7, #12]
 8015ad6:	f001 fe6f 	bl	80177b8 <ethernet_output>
 8015ada:	4603      	mov	r3, r0
}
 8015adc:	4618      	mov	r0, r3
 8015ade:	3720      	adds	r7, #32
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}
 8015ae4:	0801faa8 	.word	0x0801faa8
 8015ae8:	0801fbf8 	.word	0x0801fbf8
 8015aec:	0801fb20 	.word	0x0801fb20
 8015af0:	0801fc48 	.word	0x0801fc48
 8015af4:	0801fbe8 	.word	0x0801fbe8
 8015af8:	0802035c 	.word	0x0802035c
 8015afc:	20077a88 	.word	0x20077a88
 8015b00:	20077998 	.word	0x20077998

08015b04 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b08c      	sub	sp, #48	; 0x30
 8015b08:	af02      	add	r7, sp, #8
 8015b0a:	60f8      	str	r0, [r7, #12]
 8015b0c:	60b9      	str	r1, [r7, #8]
 8015b0e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	3326      	adds	r3, #38	; 0x26
 8015b14:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015b16:	23ff      	movs	r3, #255	; 0xff
 8015b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	68f9      	ldr	r1, [r7, #12]
 8015b26:	4618      	mov	r0, r3
 8015b28:	f000 fe0e 	bl	8016748 <ip4_addr_isbroadcast_u32>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d10c      	bne.n	8015b4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b3a:	2be0      	cmp	r3, #224	; 0xe0
 8015b3c:	d006      	beq.n	8015b4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d003      	beq.n	8015b4c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d102      	bne.n	8015b52 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015b4c:	f06f 030f 	mvn.w	r3, #15
 8015b50:	e101      	b.n	8015d56 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015b52:	68fa      	ldr	r2, [r7, #12]
 8015b54:	2101      	movs	r1, #1
 8015b56:	68b8      	ldr	r0, [r7, #8]
 8015b58:	f7ff fb60 	bl	801521c <etharp_find_entry>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015b60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	da02      	bge.n	8015b6e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015b68:	8a7b      	ldrh	r3, [r7, #18]
 8015b6a:	b25b      	sxtb	r3, r3
 8015b6c:	e0f3      	b.n	8015d56 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015b6e:	8a7b      	ldrh	r3, [r7, #18]
 8015b70:	2b7e      	cmp	r3, #126	; 0x7e
 8015b72:	d906      	bls.n	8015b82 <etharp_query+0x7e>
 8015b74:	4b7a      	ldr	r3, [pc, #488]	; (8015d60 <etharp_query+0x25c>)
 8015b76:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015b7a:	497a      	ldr	r1, [pc, #488]	; (8015d64 <etharp_query+0x260>)
 8015b7c:	487a      	ldr	r0, [pc, #488]	; (8015d68 <etharp_query+0x264>)
 8015b7e:	f003 f807 	bl	8018b90 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015b82:	8a7b      	ldrh	r3, [r7, #18]
 8015b84:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015b86:	7c7a      	ldrb	r2, [r7, #17]
 8015b88:	4978      	ldr	r1, [pc, #480]	; (8015d6c <etharp_query+0x268>)
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	005b      	lsls	r3, r3, #1
 8015b8e:	4413      	add	r3, r2
 8015b90:	00db      	lsls	r3, r3, #3
 8015b92:	440b      	add	r3, r1
 8015b94:	3314      	adds	r3, #20
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d115      	bne.n	8015bc8 <etharp_query+0xc4>
    is_new_entry = 1;
 8015b9c:	2301      	movs	r3, #1
 8015b9e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015ba0:	7c7a      	ldrb	r2, [r7, #17]
 8015ba2:	4972      	ldr	r1, [pc, #456]	; (8015d6c <etharp_query+0x268>)
 8015ba4:	4613      	mov	r3, r2
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	4413      	add	r3, r2
 8015baa:	00db      	lsls	r3, r3, #3
 8015bac:	440b      	add	r3, r1
 8015bae:	3314      	adds	r3, #20
 8015bb0:	2201      	movs	r2, #1
 8015bb2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015bb4:	7c7a      	ldrb	r2, [r7, #17]
 8015bb6:	496d      	ldr	r1, [pc, #436]	; (8015d6c <etharp_query+0x268>)
 8015bb8:	4613      	mov	r3, r2
 8015bba:	005b      	lsls	r3, r3, #1
 8015bbc:	4413      	add	r3, r2
 8015bbe:	00db      	lsls	r3, r3, #3
 8015bc0:	440b      	add	r3, r1
 8015bc2:	3308      	adds	r3, #8
 8015bc4:	68fa      	ldr	r2, [r7, #12]
 8015bc6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015bc8:	7c7a      	ldrb	r2, [r7, #17]
 8015bca:	4968      	ldr	r1, [pc, #416]	; (8015d6c <etharp_query+0x268>)
 8015bcc:	4613      	mov	r3, r2
 8015bce:	005b      	lsls	r3, r3, #1
 8015bd0:	4413      	add	r3, r2
 8015bd2:	00db      	lsls	r3, r3, #3
 8015bd4:	440b      	add	r3, r1
 8015bd6:	3314      	adds	r3, #20
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	2b01      	cmp	r3, #1
 8015bdc:	d011      	beq.n	8015c02 <etharp_query+0xfe>
 8015bde:	7c7a      	ldrb	r2, [r7, #17]
 8015be0:	4962      	ldr	r1, [pc, #392]	; (8015d6c <etharp_query+0x268>)
 8015be2:	4613      	mov	r3, r2
 8015be4:	005b      	lsls	r3, r3, #1
 8015be6:	4413      	add	r3, r2
 8015be8:	00db      	lsls	r3, r3, #3
 8015bea:	440b      	add	r3, r1
 8015bec:	3314      	adds	r3, #20
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	2b01      	cmp	r3, #1
 8015bf2:	d806      	bhi.n	8015c02 <etharp_query+0xfe>
 8015bf4:	4b5a      	ldr	r3, [pc, #360]	; (8015d60 <etharp_query+0x25c>)
 8015bf6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015bfa:	495d      	ldr	r1, [pc, #372]	; (8015d70 <etharp_query+0x26c>)
 8015bfc:	485a      	ldr	r0, [pc, #360]	; (8015d68 <etharp_query+0x264>)
 8015bfe:	f002 ffc7 	bl	8018b90 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015c02:	6a3b      	ldr	r3, [r7, #32]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d102      	bne.n	8015c0e <etharp_query+0x10a>
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d10c      	bne.n	8015c28 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015c0e:	68b9      	ldr	r1, [r7, #8]
 8015c10:	68f8      	ldr	r0, [r7, #12]
 8015c12:	f000 f963 	bl	8015edc <etharp_request>
 8015c16:	4603      	mov	r3, r0
 8015c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d102      	bne.n	8015c28 <etharp_query+0x124>
      return result;
 8015c22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015c26:	e096      	b.n	8015d56 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d106      	bne.n	8015c3c <etharp_query+0x138>
 8015c2e:	4b4c      	ldr	r3, [pc, #304]	; (8015d60 <etharp_query+0x25c>)
 8015c30:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015c34:	494f      	ldr	r1, [pc, #316]	; (8015d74 <etharp_query+0x270>)
 8015c36:	484c      	ldr	r0, [pc, #304]	; (8015d68 <etharp_query+0x264>)
 8015c38:	f002 ffaa 	bl	8018b90 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015c3c:	7c7a      	ldrb	r2, [r7, #17]
 8015c3e:	494b      	ldr	r1, [pc, #300]	; (8015d6c <etharp_query+0x268>)
 8015c40:	4613      	mov	r3, r2
 8015c42:	005b      	lsls	r3, r3, #1
 8015c44:	4413      	add	r3, r2
 8015c46:	00db      	lsls	r3, r3, #3
 8015c48:	440b      	add	r3, r1
 8015c4a:	3314      	adds	r3, #20
 8015c4c:	781b      	ldrb	r3, [r3, #0]
 8015c4e:	2b01      	cmp	r3, #1
 8015c50:	d917      	bls.n	8015c82 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015c52:	4a49      	ldr	r2, [pc, #292]	; (8015d78 <etharp_query+0x274>)
 8015c54:	7c7b      	ldrb	r3, [r7, #17]
 8015c56:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015c58:	7c7a      	ldrb	r2, [r7, #17]
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	005b      	lsls	r3, r3, #1
 8015c5e:	4413      	add	r3, r2
 8015c60:	00db      	lsls	r3, r3, #3
 8015c62:	3308      	adds	r3, #8
 8015c64:	4a41      	ldr	r2, [pc, #260]	; (8015d6c <etharp_query+0x268>)
 8015c66:	4413      	add	r3, r2
 8015c68:	3304      	adds	r3, #4
 8015c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015c6e:	9200      	str	r2, [sp, #0]
 8015c70:	697a      	ldr	r2, [r7, #20]
 8015c72:	6879      	ldr	r1, [r7, #4]
 8015c74:	68f8      	ldr	r0, [r7, #12]
 8015c76:	f001 fd9f 	bl	80177b8 <ethernet_output>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c80:	e067      	b.n	8015d52 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015c82:	7c7a      	ldrb	r2, [r7, #17]
 8015c84:	4939      	ldr	r1, [pc, #228]	; (8015d6c <etharp_query+0x268>)
 8015c86:	4613      	mov	r3, r2
 8015c88:	005b      	lsls	r3, r3, #1
 8015c8a:	4413      	add	r3, r2
 8015c8c:	00db      	lsls	r3, r3, #3
 8015c8e:	440b      	add	r3, r1
 8015c90:	3314      	adds	r3, #20
 8015c92:	781b      	ldrb	r3, [r3, #0]
 8015c94:	2b01      	cmp	r3, #1
 8015c96:	d15c      	bne.n	8015d52 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015ca0:	e01c      	b.n	8015cdc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015ca2:	69fb      	ldr	r3, [r7, #28]
 8015ca4:	895a      	ldrh	r2, [r3, #10]
 8015ca6:	69fb      	ldr	r3, [r7, #28]
 8015ca8:	891b      	ldrh	r3, [r3, #8]
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d10a      	bne.n	8015cc4 <etharp_query+0x1c0>
 8015cae:	69fb      	ldr	r3, [r7, #28]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d006      	beq.n	8015cc4 <etharp_query+0x1c0>
 8015cb6:	4b2a      	ldr	r3, [pc, #168]	; (8015d60 <etharp_query+0x25c>)
 8015cb8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015cbc:	492f      	ldr	r1, [pc, #188]	; (8015d7c <etharp_query+0x278>)
 8015cbe:	482a      	ldr	r0, [pc, #168]	; (8015d68 <etharp_query+0x264>)
 8015cc0:	f002 ff66 	bl	8018b90 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015cc4:	69fb      	ldr	r3, [r7, #28]
 8015cc6:	7b1b      	ldrb	r3, [r3, #12]
 8015cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d002      	beq.n	8015cd6 <etharp_query+0x1d2>
        copy_needed = 1;
 8015cd0:	2301      	movs	r3, #1
 8015cd2:	61bb      	str	r3, [r7, #24]
        break;
 8015cd4:	e005      	b.n	8015ce2 <etharp_query+0x1de>
      }
      p = p->next;
 8015cd6:	69fb      	ldr	r3, [r7, #28]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015cdc:	69fb      	ldr	r3, [r7, #28]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d1df      	bne.n	8015ca2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015ce2:	69bb      	ldr	r3, [r7, #24]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d007      	beq.n	8015cf8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015ce8:	687a      	ldr	r2, [r7, #4]
 8015cea:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015cee:	200e      	movs	r0, #14
 8015cf0:	f7f8 fa4e 	bl	800e190 <pbuf_clone>
 8015cf4:	61f8      	str	r0, [r7, #28]
 8015cf6:	e004      	b.n	8015d02 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015cfc:	69f8      	ldr	r0, [r7, #28]
 8015cfe:	f7f8 f875 	bl	800ddec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015d02:	69fb      	ldr	r3, [r7, #28]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d021      	beq.n	8015d4c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015d08:	7c7a      	ldrb	r2, [r7, #17]
 8015d0a:	4918      	ldr	r1, [pc, #96]	; (8015d6c <etharp_query+0x268>)
 8015d0c:	4613      	mov	r3, r2
 8015d0e:	005b      	lsls	r3, r3, #1
 8015d10:	4413      	add	r3, r2
 8015d12:	00db      	lsls	r3, r3, #3
 8015d14:	440b      	add	r3, r1
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d00a      	beq.n	8015d32 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015d1c:	7c7a      	ldrb	r2, [r7, #17]
 8015d1e:	4913      	ldr	r1, [pc, #76]	; (8015d6c <etharp_query+0x268>)
 8015d20:	4613      	mov	r3, r2
 8015d22:	005b      	lsls	r3, r3, #1
 8015d24:	4413      	add	r3, r2
 8015d26:	00db      	lsls	r3, r3, #3
 8015d28:	440b      	add	r3, r1
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7f7 ffb7 	bl	800dca0 <pbuf_free>
      }
      arp_table[i].q = p;
 8015d32:	7c7a      	ldrb	r2, [r7, #17]
 8015d34:	490d      	ldr	r1, [pc, #52]	; (8015d6c <etharp_query+0x268>)
 8015d36:	4613      	mov	r3, r2
 8015d38:	005b      	lsls	r3, r3, #1
 8015d3a:	4413      	add	r3, r2
 8015d3c:	00db      	lsls	r3, r3, #3
 8015d3e:	440b      	add	r3, r1
 8015d40:	69fa      	ldr	r2, [r7, #28]
 8015d42:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015d44:	2300      	movs	r3, #0
 8015d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d4a:	e002      	b.n	8015d52 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015d4c:	23ff      	movs	r3, #255	; 0xff
 8015d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015d52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	3728      	adds	r7, #40	; 0x28
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}
 8015d5e:	bf00      	nop
 8015d60:	0801faa8 	.word	0x0801faa8
 8015d64:	0801fc54 	.word	0x0801fc54
 8015d68:	0801fb20 	.word	0x0801fb20
 8015d6c:	20077998 	.word	0x20077998
 8015d70:	0801fc64 	.word	0x0801fc64
 8015d74:	0801fc48 	.word	0x0801fc48
 8015d78:	20077a88 	.word	0x20077a88
 8015d7c:	0801fc8c 	.word	0x0801fc8c

08015d80 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b08a      	sub	sp, #40	; 0x28
 8015d84:	af02      	add	r7, sp, #8
 8015d86:	60f8      	str	r0, [r7, #12]
 8015d88:	60b9      	str	r1, [r7, #8]
 8015d8a:	607a      	str	r2, [r7, #4]
 8015d8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d106      	bne.n	8015da6 <etharp_raw+0x26>
 8015d98:	4b3a      	ldr	r3, [pc, #232]	; (8015e84 <etharp_raw+0x104>)
 8015d9a:	f240 4257 	movw	r2, #1111	; 0x457
 8015d9e:	493a      	ldr	r1, [pc, #232]	; (8015e88 <etharp_raw+0x108>)
 8015da0:	483a      	ldr	r0, [pc, #232]	; (8015e8c <etharp_raw+0x10c>)
 8015da2:	f002 fef5 	bl	8018b90 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015da6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015daa:	211c      	movs	r1, #28
 8015dac:	200e      	movs	r0, #14
 8015dae:	f7f7 fc93 	bl	800d6d8 <pbuf_alloc>
 8015db2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015db4:	69bb      	ldr	r3, [r7, #24]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d102      	bne.n	8015dc0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015dba:	f04f 33ff 	mov.w	r3, #4294967295
 8015dbe:	e05d      	b.n	8015e7c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015dc0:	69bb      	ldr	r3, [r7, #24]
 8015dc2:	895b      	ldrh	r3, [r3, #10]
 8015dc4:	2b1b      	cmp	r3, #27
 8015dc6:	d806      	bhi.n	8015dd6 <etharp_raw+0x56>
 8015dc8:	4b2e      	ldr	r3, [pc, #184]	; (8015e84 <etharp_raw+0x104>)
 8015dca:	f240 4262 	movw	r2, #1122	; 0x462
 8015dce:	4930      	ldr	r1, [pc, #192]	; (8015e90 <etharp_raw+0x110>)
 8015dd0:	482e      	ldr	r0, [pc, #184]	; (8015e8c <etharp_raw+0x10c>)
 8015dd2:	f002 fedd 	bl	8018b90 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015dd6:	69bb      	ldr	r3, [r7, #24]
 8015dd8:	685b      	ldr	r3, [r3, #4]
 8015dda:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015ddc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7f6 fb6c 	bl	800c4bc <lwip_htons>
 8015de4:	4603      	mov	r3, r0
 8015de6:	461a      	mov	r2, r3
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015df2:	2b06      	cmp	r3, #6
 8015df4:	d006      	beq.n	8015e04 <etharp_raw+0x84>
 8015df6:	4b23      	ldr	r3, [pc, #140]	; (8015e84 <etharp_raw+0x104>)
 8015df8:	f240 4269 	movw	r2, #1129	; 0x469
 8015dfc:	4925      	ldr	r1, [pc, #148]	; (8015e94 <etharp_raw+0x114>)
 8015dfe:	4823      	ldr	r0, [pc, #140]	; (8015e8c <etharp_raw+0x10c>)
 8015e00:	f002 fec6 	bl	8018b90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015e04:	697b      	ldr	r3, [r7, #20]
 8015e06:	3308      	adds	r3, #8
 8015e08:	2206      	movs	r2, #6
 8015e0a:	6839      	ldr	r1, [r7, #0]
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f003 f846 	bl	8018e9e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015e12:	697b      	ldr	r3, [r7, #20]
 8015e14:	3312      	adds	r3, #18
 8015e16:	2206      	movs	r2, #6
 8015e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f003 f83f 	bl	8018e9e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	330e      	adds	r3, #14
 8015e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e26:	6812      	ldr	r2, [r2, #0]
 8015e28:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	3318      	adds	r3, #24
 8015e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e30:	6812      	ldr	r2, [r2, #0]
 8015e32:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	2200      	movs	r2, #0
 8015e38:	701a      	strb	r2, [r3, #0]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	f042 0201 	orr.w	r2, r2, #1
 8015e40:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	2200      	movs	r2, #0
 8015e46:	f042 0208 	orr.w	r2, r2, #8
 8015e4a:	709a      	strb	r2, [r3, #2]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015e50:	697b      	ldr	r3, [r7, #20]
 8015e52:	2206      	movs	r2, #6
 8015e54:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015e56:	697b      	ldr	r3, [r7, #20]
 8015e58:	2204      	movs	r2, #4
 8015e5a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015e5c:	f640 0306 	movw	r3, #2054	; 0x806
 8015e60:	9300      	str	r3, [sp, #0]
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	68ba      	ldr	r2, [r7, #8]
 8015e66:	69b9      	ldr	r1, [r7, #24]
 8015e68:	68f8      	ldr	r0, [r7, #12]
 8015e6a:	f001 fca5 	bl	80177b8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015e6e:	69b8      	ldr	r0, [r7, #24]
 8015e70:	f7f7 ff16 	bl	800dca0 <pbuf_free>
  p = NULL;
 8015e74:	2300      	movs	r3, #0
 8015e76:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015e78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3720      	adds	r7, #32
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}
 8015e84:	0801faa8 	.word	0x0801faa8
 8015e88:	0801fbf8 	.word	0x0801fbf8
 8015e8c:	0801fb20 	.word	0x0801fb20
 8015e90:	0801fca8 	.word	0x0801fca8
 8015e94:	0801fcdc 	.word	0x0801fcdc

08015e98 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b088      	sub	sp, #32
 8015e9c:	af04      	add	r7, sp, #16
 8015e9e:	60f8      	str	r0, [r7, #12]
 8015ea0:	60b9      	str	r1, [r7, #8]
 8015ea2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015eb4:	2201      	movs	r2, #1
 8015eb6:	9203      	str	r2, [sp, #12]
 8015eb8:	68ba      	ldr	r2, [r7, #8]
 8015eba:	9202      	str	r2, [sp, #8]
 8015ebc:	4a06      	ldr	r2, [pc, #24]	; (8015ed8 <etharp_request_dst+0x40>)
 8015ebe:	9201      	str	r2, [sp, #4]
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	687a      	ldr	r2, [r7, #4]
 8015ec6:	68f8      	ldr	r0, [r7, #12]
 8015ec8:	f7ff ff5a 	bl	8015d80 <etharp_raw>
 8015ecc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3710      	adds	r7, #16
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}
 8015ed6:	bf00      	nop
 8015ed8:	08020364 	.word	0x08020364

08015edc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b082      	sub	sp, #8
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015ee6:	4a05      	ldr	r2, [pc, #20]	; (8015efc <etharp_request+0x20>)
 8015ee8:	6839      	ldr	r1, [r7, #0]
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f7ff ffd4 	bl	8015e98 <etharp_request_dst>
 8015ef0:	4603      	mov	r3, r0
}
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	3708      	adds	r7, #8
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
 8015efa:	bf00      	nop
 8015efc:	0802035c 	.word	0x0802035c

08015f00 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b08e      	sub	sp, #56	; 0x38
 8015f04:	af04      	add	r7, sp, #16
 8015f06:	6078      	str	r0, [r7, #4]
 8015f08:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015f0a:	4b79      	ldr	r3, [pc, #484]	; (80160f0 <icmp_input+0x1f0>)
 8015f0c:	689b      	ldr	r3, [r3, #8]
 8015f0e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	f003 030f 	and.w	r3, r3, #15
 8015f18:	b2db      	uxtb	r3, r3
 8015f1a:	009b      	lsls	r3, r3, #2
 8015f1c:	b2db      	uxtb	r3, r3
 8015f1e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015f20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f22:	2b13      	cmp	r3, #19
 8015f24:	f240 80cd 	bls.w	80160c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	895b      	ldrh	r3, [r3, #10]
 8015f2c:	2b03      	cmp	r3, #3
 8015f2e:	f240 80ca 	bls.w	80160c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	685b      	ldr	r3, [r3, #4]
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015f3c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	f000 80b7 	beq.w	80160b4 <icmp_input+0x1b4>
 8015f46:	2b08      	cmp	r3, #8
 8015f48:	f040 80b7 	bne.w	80160ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015f4c:	4b69      	ldr	r3, [pc, #420]	; (80160f4 <icmp_input+0x1f4>)
 8015f4e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015f50:	4b67      	ldr	r3, [pc, #412]	; (80160f0 <icmp_input+0x1f0>)
 8015f52:	695b      	ldr	r3, [r3, #20]
 8015f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f58:	2be0      	cmp	r3, #224	; 0xe0
 8015f5a:	f000 80bb 	beq.w	80160d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015f5e:	4b64      	ldr	r3, [pc, #400]	; (80160f0 <icmp_input+0x1f0>)
 8015f60:	695b      	ldr	r3, [r3, #20]
 8015f62:	4a63      	ldr	r2, [pc, #396]	; (80160f0 <icmp_input+0x1f0>)
 8015f64:	6812      	ldr	r2, [r2, #0]
 8015f66:	4611      	mov	r1, r2
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f000 fbed 	bl	8016748 <ip4_addr_isbroadcast_u32>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	f040 80b1 	bne.w	80160d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	891b      	ldrh	r3, [r3, #8]
 8015f7a:	2b07      	cmp	r3, #7
 8015f7c:	f240 80a5 	bls.w	80160ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f82:	330e      	adds	r3, #14
 8015f84:	4619      	mov	r1, r3
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f7f7 fdf4 	bl	800db74 <pbuf_add_header>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d04b      	beq.n	801602a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	891a      	ldrh	r2, [r3, #8]
 8015f96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f98:	4413      	add	r3, r2
 8015f9a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	891b      	ldrh	r3, [r3, #8]
 8015fa0:	8b7a      	ldrh	r2, [r7, #26]
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	f0c0 809a 	bcc.w	80160dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015fa8:	8b7b      	ldrh	r3, [r7, #26]
 8015faa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015fae:	4619      	mov	r1, r3
 8015fb0:	200e      	movs	r0, #14
 8015fb2:	f7f7 fb91 	bl	800d6d8 <pbuf_alloc>
 8015fb6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015fb8:	697b      	ldr	r3, [r7, #20]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	f000 8090 	beq.w	80160e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	895b      	ldrh	r3, [r3, #10]
 8015fc4:	461a      	mov	r2, r3
 8015fc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015fc8:	3308      	adds	r3, #8
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d203      	bcs.n	8015fd6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015fce:	6978      	ldr	r0, [r7, #20]
 8015fd0:	f7f7 fe66 	bl	800dca0 <pbuf_free>
          goto icmperr;
 8015fd4:	e085      	b.n	80160e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	685b      	ldr	r3, [r3, #4]
 8015fda:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015fde:	4618      	mov	r0, r3
 8015fe0:	f002 ff5d 	bl	8018e9e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015fe6:	4619      	mov	r1, r3
 8015fe8:	6978      	ldr	r0, [r7, #20]
 8015fea:	f7f7 fdd3 	bl	800db94 <pbuf_remove_header>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d009      	beq.n	8016008 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015ff4:	4b40      	ldr	r3, [pc, #256]	; (80160f8 <icmp_input+0x1f8>)
 8015ff6:	22b6      	movs	r2, #182	; 0xb6
 8015ff8:	4940      	ldr	r1, [pc, #256]	; (80160fc <icmp_input+0x1fc>)
 8015ffa:	4841      	ldr	r0, [pc, #260]	; (8016100 <icmp_input+0x200>)
 8015ffc:	f002 fdc8 	bl	8018b90 <iprintf>
          pbuf_free(r);
 8016000:	6978      	ldr	r0, [r7, #20]
 8016002:	f7f7 fe4d 	bl	800dca0 <pbuf_free>
          goto icmperr;
 8016006:	e06c      	b.n	80160e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016008:	6879      	ldr	r1, [r7, #4]
 801600a:	6978      	ldr	r0, [r7, #20]
 801600c:	f7f7 ff7c 	bl	800df08 <pbuf_copy>
 8016010:	4603      	mov	r3, r0
 8016012:	2b00      	cmp	r3, #0
 8016014:	d003      	beq.n	801601e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016016:	6978      	ldr	r0, [r7, #20]
 8016018:	f7f7 fe42 	bl	800dca0 <pbuf_free>
          goto icmperr;
 801601c:	e061      	b.n	80160e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	f7f7 fe3e 	bl	800dca0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	607b      	str	r3, [r7, #4]
 8016028:	e00f      	b.n	801604a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801602a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801602c:	330e      	adds	r3, #14
 801602e:	4619      	mov	r1, r3
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f7f7 fdaf 	bl	800db94 <pbuf_remove_header>
 8016036:	4603      	mov	r3, r0
 8016038:	2b00      	cmp	r3, #0
 801603a:	d006      	beq.n	801604a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801603c:	4b2e      	ldr	r3, [pc, #184]	; (80160f8 <icmp_input+0x1f8>)
 801603e:	22c7      	movs	r2, #199	; 0xc7
 8016040:	4930      	ldr	r1, [pc, #192]	; (8016104 <icmp_input+0x204>)
 8016042:	482f      	ldr	r0, [pc, #188]	; (8016100 <icmp_input+0x200>)
 8016044:	f002 fda4 	bl	8018b90 <iprintf>
          goto icmperr;
 8016048:	e04b      	b.n	80160e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	685b      	ldr	r3, [r3, #4]
 801604e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016050:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016052:	4619      	mov	r1, r3
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f7f7 fd8d 	bl	800db74 <pbuf_add_header>
 801605a:	4603      	mov	r3, r0
 801605c:	2b00      	cmp	r3, #0
 801605e:	d12b      	bne.n	80160b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016066:	69fb      	ldr	r3, [r7, #28]
 8016068:	681a      	ldr	r2, [r3, #0]
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801606e:	4b20      	ldr	r3, [pc, #128]	; (80160f0 <icmp_input+0x1f0>)
 8016070:	691a      	ldr	r2, [r3, #16]
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	2200      	movs	r2, #0
 801607a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	2200      	movs	r2, #0
 8016080:	709a      	strb	r2, [r3, #2]
 8016082:	2200      	movs	r2, #0
 8016084:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	22ff      	movs	r2, #255	; 0xff
 801608a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	2200      	movs	r2, #0
 8016090:	729a      	strb	r2, [r3, #10]
 8016092:	2200      	movs	r2, #0
 8016094:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016096:	683b      	ldr	r3, [r7, #0]
 8016098:	9302      	str	r3, [sp, #8]
 801609a:	2301      	movs	r3, #1
 801609c:	9301      	str	r3, [sp, #4]
 801609e:	2300      	movs	r3, #0
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	23ff      	movs	r3, #255	; 0xff
 80160a4:	2200      	movs	r2, #0
 80160a6:	69f9      	ldr	r1, [r7, #28]
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f000 fa75 	bl	8016598 <ip4_output_if>
 80160ae:	4603      	mov	r3, r0
 80160b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80160b2:	e001      	b.n	80160b8 <icmp_input+0x1b8>
      break;
 80160b4:	bf00      	nop
 80160b6:	e000      	b.n	80160ba <icmp_input+0x1ba>
      break;
 80160b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f7f7 fdf0 	bl	800dca0 <pbuf_free>
  return;
 80160c0:	e013      	b.n	80160ea <icmp_input+0x1ea>
    goto lenerr;
 80160c2:	bf00      	nop
 80160c4:	e002      	b.n	80160cc <icmp_input+0x1cc>
    goto lenerr;
 80160c6:	bf00      	nop
 80160c8:	e000      	b.n	80160cc <icmp_input+0x1cc>
        goto lenerr;
 80160ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 80160cc:	6878      	ldr	r0, [r7, #4]
 80160ce:	f7f7 fde7 	bl	800dca0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80160d2:	e00a      	b.n	80160ea <icmp_input+0x1ea>
        goto icmperr;
 80160d4:	bf00      	nop
 80160d6:	e004      	b.n	80160e2 <icmp_input+0x1e2>
        goto icmperr;
 80160d8:	bf00      	nop
 80160da:	e002      	b.n	80160e2 <icmp_input+0x1e2>
          goto icmperr;
 80160dc:	bf00      	nop
 80160de:	e000      	b.n	80160e2 <icmp_input+0x1e2>
          goto icmperr;
 80160e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f7f7 fddc 	bl	800dca0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80160e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80160ea:	3728      	adds	r7, #40	; 0x28
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}
 80160f0:	200094a8 	.word	0x200094a8
 80160f4:	200094bc 	.word	0x200094bc
 80160f8:	0801fd20 	.word	0x0801fd20
 80160fc:	0801fd58 	.word	0x0801fd58
 8016100:	0801fd90 	.word	0x0801fd90
 8016104:	0801fdb8 	.word	0x0801fdb8

08016108 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b082      	sub	sp, #8
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
 8016110:	460b      	mov	r3, r1
 8016112:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016114:	78fb      	ldrb	r3, [r7, #3]
 8016116:	461a      	mov	r2, r3
 8016118:	2103      	movs	r1, #3
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	f000 f814 	bl	8016148 <icmp_send_response>
}
 8016120:	bf00      	nop
 8016122:	3708      	adds	r7, #8
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}

08016128 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b082      	sub	sp, #8
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
 8016130:	460b      	mov	r3, r1
 8016132:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016134:	78fb      	ldrb	r3, [r7, #3]
 8016136:	461a      	mov	r2, r3
 8016138:	210b      	movs	r1, #11
 801613a:	6878      	ldr	r0, [r7, #4]
 801613c:	f000 f804 	bl	8016148 <icmp_send_response>
}
 8016140:	bf00      	nop
 8016142:	3708      	adds	r7, #8
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b08c      	sub	sp, #48	; 0x30
 801614c:	af04      	add	r7, sp, #16
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	460b      	mov	r3, r1
 8016152:	70fb      	strb	r3, [r7, #3]
 8016154:	4613      	mov	r3, r2
 8016156:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016158:	f44f 7220 	mov.w	r2, #640	; 0x280
 801615c:	2124      	movs	r1, #36	; 0x24
 801615e:	2022      	movs	r0, #34	; 0x22
 8016160:	f7f7 faba 	bl	800d6d8 <pbuf_alloc>
 8016164:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016166:	69fb      	ldr	r3, [r7, #28]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d04c      	beq.n	8016206 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801616c:	69fb      	ldr	r3, [r7, #28]
 801616e:	895b      	ldrh	r3, [r3, #10]
 8016170:	2b23      	cmp	r3, #35	; 0x23
 8016172:	d806      	bhi.n	8016182 <icmp_send_response+0x3a>
 8016174:	4b26      	ldr	r3, [pc, #152]	; (8016210 <icmp_send_response+0xc8>)
 8016176:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801617a:	4926      	ldr	r1, [pc, #152]	; (8016214 <icmp_send_response+0xcc>)
 801617c:	4826      	ldr	r0, [pc, #152]	; (8016218 <icmp_send_response+0xd0>)
 801617e:	f002 fd07 	bl	8018b90 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	685b      	ldr	r3, [r3, #4]
 8016186:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016188:	69fb      	ldr	r3, [r7, #28]
 801618a:	685b      	ldr	r3, [r3, #4]
 801618c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801618e:	697b      	ldr	r3, [r7, #20]
 8016190:	78fa      	ldrb	r2, [r7, #3]
 8016192:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	78ba      	ldrb	r2, [r7, #2]
 8016198:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801619a:	697b      	ldr	r3, [r7, #20]
 801619c:	2200      	movs	r2, #0
 801619e:	711a      	strb	r2, [r3, #4]
 80161a0:	2200      	movs	r2, #0
 80161a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80161a4:	697b      	ldr	r3, [r7, #20]
 80161a6:	2200      	movs	r2, #0
 80161a8:	719a      	strb	r2, [r3, #6]
 80161aa:	2200      	movs	r2, #0
 80161ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80161ae:	69fb      	ldr	r3, [r7, #28]
 80161b0:	685b      	ldr	r3, [r3, #4]
 80161b2:	f103 0008 	add.w	r0, r3, #8
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	685b      	ldr	r3, [r3, #4]
 80161ba:	221c      	movs	r2, #28
 80161bc:	4619      	mov	r1, r3
 80161be:	f002 fe6e 	bl	8018e9e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80161c2:	69bb      	ldr	r3, [r7, #24]
 80161c4:	68db      	ldr	r3, [r3, #12]
 80161c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80161c8:	f107 030c 	add.w	r3, r7, #12
 80161cc:	4618      	mov	r0, r3
 80161ce:	f000 f825 	bl	801621c <ip4_route>
 80161d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80161d4:	693b      	ldr	r3, [r7, #16]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d011      	beq.n	80161fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80161da:	697b      	ldr	r3, [r7, #20]
 80161dc:	2200      	movs	r2, #0
 80161de:	709a      	strb	r2, [r3, #2]
 80161e0:	2200      	movs	r2, #0
 80161e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80161e4:	f107 020c 	add.w	r2, r7, #12
 80161e8:	693b      	ldr	r3, [r7, #16]
 80161ea:	9302      	str	r3, [sp, #8]
 80161ec:	2301      	movs	r3, #1
 80161ee:	9301      	str	r3, [sp, #4]
 80161f0:	2300      	movs	r3, #0
 80161f2:	9300      	str	r3, [sp, #0]
 80161f4:	23ff      	movs	r3, #255	; 0xff
 80161f6:	2100      	movs	r1, #0
 80161f8:	69f8      	ldr	r0, [r7, #28]
 80161fa:	f000 f9cd 	bl	8016598 <ip4_output_if>
  }
  pbuf_free(q);
 80161fe:	69f8      	ldr	r0, [r7, #28]
 8016200:	f7f7 fd4e 	bl	800dca0 <pbuf_free>
 8016204:	e000      	b.n	8016208 <icmp_send_response+0xc0>
    return;
 8016206:	bf00      	nop
}
 8016208:	3720      	adds	r7, #32
 801620a:	46bd      	mov	sp, r7
 801620c:	bd80      	pop	{r7, pc}
 801620e:	bf00      	nop
 8016210:	0801fd20 	.word	0x0801fd20
 8016214:	0801fdec 	.word	0x0801fdec
 8016218:	0801fd90 	.word	0x0801fd90

0801621c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801621c:	b480      	push	{r7}
 801621e:	b085      	sub	sp, #20
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016224:	4b33      	ldr	r3, [pc, #204]	; (80162f4 <ip4_route+0xd8>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	60fb      	str	r3, [r7, #12]
 801622a:	e036      	b.n	801629a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016232:	f003 0301 	and.w	r3, r3, #1
 8016236:	b2db      	uxtb	r3, r3
 8016238:	2b00      	cmp	r3, #0
 801623a:	d02b      	beq.n	8016294 <ip4_route+0x78>
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016242:	089b      	lsrs	r3, r3, #2
 8016244:	f003 0301 	and.w	r3, r3, #1
 8016248:	b2db      	uxtb	r3, r3
 801624a:	2b00      	cmp	r3, #0
 801624c:	d022      	beq.n	8016294 <ip4_route+0x78>
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	3304      	adds	r3, #4
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d01d      	beq.n	8016294 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681a      	ldr	r2, [r3, #0]
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	3304      	adds	r3, #4
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	405a      	eors	r2, r3
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	3308      	adds	r3, #8
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	4013      	ands	r3, r2
 801626c:	2b00      	cmp	r3, #0
 801626e:	d101      	bne.n	8016274 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	e038      	b.n	80162e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801627a:	f003 0302 	and.w	r3, r3, #2
 801627e:	2b00      	cmp	r3, #0
 8016280:	d108      	bne.n	8016294 <ip4_route+0x78>
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681a      	ldr	r2, [r3, #0]
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	330c      	adds	r3, #12
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	429a      	cmp	r2, r3
 801628e:	d101      	bne.n	8016294 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	e028      	b.n	80162e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	60fb      	str	r3, [r7, #12]
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d1c5      	bne.n	801622c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80162a0:	4b15      	ldr	r3, [pc, #84]	; (80162f8 <ip4_route+0xdc>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d01a      	beq.n	80162de <ip4_route+0xc2>
 80162a8:	4b13      	ldr	r3, [pc, #76]	; (80162f8 <ip4_route+0xdc>)
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80162b0:	f003 0301 	and.w	r3, r3, #1
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d012      	beq.n	80162de <ip4_route+0xc2>
 80162b8:	4b0f      	ldr	r3, [pc, #60]	; (80162f8 <ip4_route+0xdc>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80162c0:	f003 0304 	and.w	r3, r3, #4
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d00a      	beq.n	80162de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80162c8:	4b0b      	ldr	r3, [pc, #44]	; (80162f8 <ip4_route+0xdc>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	3304      	adds	r3, #4
 80162ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d004      	beq.n	80162de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	b2db      	uxtb	r3, r3
 80162da:	2b7f      	cmp	r3, #127	; 0x7f
 80162dc:	d101      	bne.n	80162e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80162de:	2300      	movs	r3, #0
 80162e0:	e001      	b.n	80162e6 <ip4_route+0xca>
  }

  return netif_default;
 80162e2:	4b05      	ldr	r3, [pc, #20]	; (80162f8 <ip4_route+0xdc>)
 80162e4:	681b      	ldr	r3, [r3, #0]
}
 80162e6:	4618      	mov	r0, r3
 80162e8:	3714      	adds	r7, #20
 80162ea:	46bd      	mov	sp, r7
 80162ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f0:	4770      	bx	lr
 80162f2:	bf00      	nop
 80162f4:	2007792c 	.word	0x2007792c
 80162f8:	20077930 	.word	0x20077930

080162fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b082      	sub	sp, #8
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801630a:	f003 0301 	and.w	r3, r3, #1
 801630e:	b2db      	uxtb	r3, r3
 8016310:	2b00      	cmp	r3, #0
 8016312:	d016      	beq.n	8016342 <ip4_input_accept+0x46>
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	3304      	adds	r3, #4
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d011      	beq.n	8016342 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801631e:	4b0b      	ldr	r3, [pc, #44]	; (801634c <ip4_input_accept+0x50>)
 8016320:	695a      	ldr	r2, [r3, #20]
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	3304      	adds	r3, #4
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	429a      	cmp	r2, r3
 801632a:	d008      	beq.n	801633e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801632c:	4b07      	ldr	r3, [pc, #28]	; (801634c <ip4_input_accept+0x50>)
 801632e:	695b      	ldr	r3, [r3, #20]
 8016330:	6879      	ldr	r1, [r7, #4]
 8016332:	4618      	mov	r0, r3
 8016334:	f000 fa08 	bl	8016748 <ip4_addr_isbroadcast_u32>
 8016338:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801633a:	2b00      	cmp	r3, #0
 801633c:	d001      	beq.n	8016342 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801633e:	2301      	movs	r3, #1
 8016340:	e000      	b.n	8016344 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016342:	2300      	movs	r3, #0
}
 8016344:	4618      	mov	r0, r3
 8016346:	3708      	adds	r7, #8
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}
 801634c:	200094a8 	.word	0x200094a8

08016350 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b086      	sub	sp, #24
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
 8016358:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016360:	697b      	ldr	r3, [r7, #20]
 8016362:	781b      	ldrb	r3, [r3, #0]
 8016364:	091b      	lsrs	r3, r3, #4
 8016366:	b2db      	uxtb	r3, r3
 8016368:	2b04      	cmp	r3, #4
 801636a:	d004      	beq.n	8016376 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	f7f7 fc97 	bl	800dca0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016372:	2300      	movs	r3, #0
 8016374:	e107      	b.n	8016586 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016376:	697b      	ldr	r3, [r7, #20]
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	f003 030f 	and.w	r3, r3, #15
 801637e:	b2db      	uxtb	r3, r3
 8016380:	009b      	lsls	r3, r3, #2
 8016382:	b2db      	uxtb	r3, r3
 8016384:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016386:	697b      	ldr	r3, [r7, #20]
 8016388:	885b      	ldrh	r3, [r3, #2]
 801638a:	b29b      	uxth	r3, r3
 801638c:	4618      	mov	r0, r3
 801638e:	f7f6 f895 	bl	800c4bc <lwip_htons>
 8016392:	4603      	mov	r3, r0
 8016394:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	891b      	ldrh	r3, [r3, #8]
 801639a:	89ba      	ldrh	r2, [r7, #12]
 801639c:	429a      	cmp	r2, r3
 801639e:	d204      	bcs.n	80163aa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80163a0:	89bb      	ldrh	r3, [r7, #12]
 80163a2:	4619      	mov	r1, r3
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	f7f7 faf5 	bl	800d994 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	895b      	ldrh	r3, [r3, #10]
 80163ae:	89fa      	ldrh	r2, [r7, #14]
 80163b0:	429a      	cmp	r2, r3
 80163b2:	d807      	bhi.n	80163c4 <ip4_input+0x74>
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	891b      	ldrh	r3, [r3, #8]
 80163b8:	89ba      	ldrh	r2, [r7, #12]
 80163ba:	429a      	cmp	r2, r3
 80163bc:	d802      	bhi.n	80163c4 <ip4_input+0x74>
 80163be:	89fb      	ldrh	r3, [r7, #14]
 80163c0:	2b13      	cmp	r3, #19
 80163c2:	d804      	bhi.n	80163ce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80163c4:	6878      	ldr	r0, [r7, #4]
 80163c6:	f7f7 fc6b 	bl	800dca0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80163ca:	2300      	movs	r3, #0
 80163cc:	e0db      	b.n	8016586 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80163ce:	697b      	ldr	r3, [r7, #20]
 80163d0:	691b      	ldr	r3, [r3, #16]
 80163d2:	4a6f      	ldr	r2, [pc, #444]	; (8016590 <ip4_input+0x240>)
 80163d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	68db      	ldr	r3, [r3, #12]
 80163da:	4a6d      	ldr	r2, [pc, #436]	; (8016590 <ip4_input+0x240>)
 80163dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80163de:	4b6c      	ldr	r3, [pc, #432]	; (8016590 <ip4_input+0x240>)
 80163e0:	695b      	ldr	r3, [r3, #20]
 80163e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80163e6:	2be0      	cmp	r3, #224	; 0xe0
 80163e8:	d112      	bne.n	8016410 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163f0:	f003 0301 	and.w	r3, r3, #1
 80163f4:	b2db      	uxtb	r3, r3
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d007      	beq.n	801640a <ip4_input+0xba>
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	3304      	adds	r3, #4
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d002      	beq.n	801640a <ip4_input+0xba>
      netif = inp;
 8016404:	683b      	ldr	r3, [r7, #0]
 8016406:	613b      	str	r3, [r7, #16]
 8016408:	e02a      	b.n	8016460 <ip4_input+0x110>
    } else {
      netif = NULL;
 801640a:	2300      	movs	r3, #0
 801640c:	613b      	str	r3, [r7, #16]
 801640e:	e027      	b.n	8016460 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016410:	6838      	ldr	r0, [r7, #0]
 8016412:	f7ff ff73 	bl	80162fc <ip4_input_accept>
 8016416:	4603      	mov	r3, r0
 8016418:	2b00      	cmp	r3, #0
 801641a:	d002      	beq.n	8016422 <ip4_input+0xd2>
      netif = inp;
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	613b      	str	r3, [r7, #16]
 8016420:	e01e      	b.n	8016460 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016422:	2300      	movs	r3, #0
 8016424:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016426:	4b5a      	ldr	r3, [pc, #360]	; (8016590 <ip4_input+0x240>)
 8016428:	695b      	ldr	r3, [r3, #20]
 801642a:	b2db      	uxtb	r3, r3
 801642c:	2b7f      	cmp	r3, #127	; 0x7f
 801642e:	d017      	beq.n	8016460 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016430:	4b58      	ldr	r3, [pc, #352]	; (8016594 <ip4_input+0x244>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	613b      	str	r3, [r7, #16]
 8016436:	e00e      	b.n	8016456 <ip4_input+0x106>
          if (netif == inp) {
 8016438:	693a      	ldr	r2, [r7, #16]
 801643a:	683b      	ldr	r3, [r7, #0]
 801643c:	429a      	cmp	r2, r3
 801643e:	d006      	beq.n	801644e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016440:	6938      	ldr	r0, [r7, #16]
 8016442:	f7ff ff5b 	bl	80162fc <ip4_input_accept>
 8016446:	4603      	mov	r3, r0
 8016448:	2b00      	cmp	r3, #0
 801644a:	d108      	bne.n	801645e <ip4_input+0x10e>
 801644c:	e000      	b.n	8016450 <ip4_input+0x100>
            continue;
 801644e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	613b      	str	r3, [r7, #16]
 8016456:	693b      	ldr	r3, [r7, #16]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d1ed      	bne.n	8016438 <ip4_input+0xe8>
 801645c:	e000      	b.n	8016460 <ip4_input+0x110>
            break;
 801645e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016460:	4b4b      	ldr	r3, [pc, #300]	; (8016590 <ip4_input+0x240>)
 8016462:	691b      	ldr	r3, [r3, #16]
 8016464:	6839      	ldr	r1, [r7, #0]
 8016466:	4618      	mov	r0, r3
 8016468:	f000 f96e 	bl	8016748 <ip4_addr_isbroadcast_u32>
 801646c:	4603      	mov	r3, r0
 801646e:	2b00      	cmp	r3, #0
 8016470:	d105      	bne.n	801647e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016472:	4b47      	ldr	r3, [pc, #284]	; (8016590 <ip4_input+0x240>)
 8016474:	691b      	ldr	r3, [r3, #16]
 8016476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801647a:	2be0      	cmp	r3, #224	; 0xe0
 801647c:	d104      	bne.n	8016488 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f7f7 fc0e 	bl	800dca0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016484:	2300      	movs	r3, #0
 8016486:	e07e      	b.n	8016586 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016488:	693b      	ldr	r3, [r7, #16]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d104      	bne.n	8016498 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f7f7 fc06 	bl	800dca0 <pbuf_free>
    return ERR_OK;
 8016494:	2300      	movs	r3, #0
 8016496:	e076      	b.n	8016586 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016498:	697b      	ldr	r3, [r7, #20]
 801649a:	88db      	ldrh	r3, [r3, #6]
 801649c:	b29b      	uxth	r3, r3
 801649e:	461a      	mov	r2, r3
 80164a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80164a4:	4013      	ands	r3, r2
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d00b      	beq.n	80164c2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80164aa:	6878      	ldr	r0, [r7, #4]
 80164ac:	f000 fdbc 	bl	8017028 <ip4_reass>
 80164b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d101      	bne.n	80164bc <ip4_input+0x16c>
      return ERR_OK;
 80164b8:	2300      	movs	r3, #0
 80164ba:	e064      	b.n	8016586 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	685b      	ldr	r3, [r3, #4]
 80164c0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80164c2:	4a33      	ldr	r2, [pc, #204]	; (8016590 <ip4_input+0x240>)
 80164c4:	693b      	ldr	r3, [r7, #16]
 80164c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80164c8:	4a31      	ldr	r2, [pc, #196]	; (8016590 <ip4_input+0x240>)
 80164ca:	683b      	ldr	r3, [r7, #0]
 80164cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80164ce:	4a30      	ldr	r2, [pc, #192]	; (8016590 <ip4_input+0x240>)
 80164d0:	697b      	ldr	r3, [r7, #20]
 80164d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	781b      	ldrb	r3, [r3, #0]
 80164d8:	f003 030f 	and.w	r3, r3, #15
 80164dc:	b2db      	uxtb	r3, r3
 80164de:	009b      	lsls	r3, r3, #2
 80164e0:	b2db      	uxtb	r3, r3
 80164e2:	b29a      	uxth	r2, r3
 80164e4:	4b2a      	ldr	r3, [pc, #168]	; (8016590 <ip4_input+0x240>)
 80164e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80164e8:	89fb      	ldrh	r3, [r7, #14]
 80164ea:	4619      	mov	r1, r3
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f7f7 fb51 	bl	800db94 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80164f2:	697b      	ldr	r3, [r7, #20]
 80164f4:	7a5b      	ldrb	r3, [r3, #9]
 80164f6:	2b11      	cmp	r3, #17
 80164f8:	d006      	beq.n	8016508 <ip4_input+0x1b8>
 80164fa:	2b11      	cmp	r3, #17
 80164fc:	dc13      	bgt.n	8016526 <ip4_input+0x1d6>
 80164fe:	2b01      	cmp	r3, #1
 8016500:	d00c      	beq.n	801651c <ip4_input+0x1cc>
 8016502:	2b06      	cmp	r3, #6
 8016504:	d005      	beq.n	8016512 <ip4_input+0x1c2>
 8016506:	e00e      	b.n	8016526 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016508:	6839      	ldr	r1, [r7, #0]
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f7fe f8da 	bl	80146c4 <udp_input>
        break;
 8016510:	e026      	b.n	8016560 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016512:	6839      	ldr	r1, [r7, #0]
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f7f9 fc8f 	bl	800fe38 <tcp_input>
        break;
 801651a:	e021      	b.n	8016560 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801651c:	6839      	ldr	r1, [r7, #0]
 801651e:	6878      	ldr	r0, [r7, #4]
 8016520:	f7ff fcee 	bl	8015f00 <icmp_input>
        break;
 8016524:	e01c      	b.n	8016560 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016526:	4b1a      	ldr	r3, [pc, #104]	; (8016590 <ip4_input+0x240>)
 8016528:	695b      	ldr	r3, [r3, #20]
 801652a:	6939      	ldr	r1, [r7, #16]
 801652c:	4618      	mov	r0, r3
 801652e:	f000 f90b 	bl	8016748 <ip4_addr_isbroadcast_u32>
 8016532:	4603      	mov	r3, r0
 8016534:	2b00      	cmp	r3, #0
 8016536:	d10f      	bne.n	8016558 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016538:	4b15      	ldr	r3, [pc, #84]	; (8016590 <ip4_input+0x240>)
 801653a:	695b      	ldr	r3, [r3, #20]
 801653c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016540:	2be0      	cmp	r3, #224	; 0xe0
 8016542:	d009      	beq.n	8016558 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016544:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016548:	4619      	mov	r1, r3
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f7f7 fb95 	bl	800dc7a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016550:	2102      	movs	r1, #2
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f7ff fdd8 	bl	8016108 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016558:	6878      	ldr	r0, [r7, #4]
 801655a:	f7f7 fba1 	bl	800dca0 <pbuf_free>
        break;
 801655e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016560:	4b0b      	ldr	r3, [pc, #44]	; (8016590 <ip4_input+0x240>)
 8016562:	2200      	movs	r2, #0
 8016564:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016566:	4b0a      	ldr	r3, [pc, #40]	; (8016590 <ip4_input+0x240>)
 8016568:	2200      	movs	r2, #0
 801656a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801656c:	4b08      	ldr	r3, [pc, #32]	; (8016590 <ip4_input+0x240>)
 801656e:	2200      	movs	r2, #0
 8016570:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016572:	4b07      	ldr	r3, [pc, #28]	; (8016590 <ip4_input+0x240>)
 8016574:	2200      	movs	r2, #0
 8016576:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016578:	4b05      	ldr	r3, [pc, #20]	; (8016590 <ip4_input+0x240>)
 801657a:	2200      	movs	r2, #0
 801657c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801657e:	4b04      	ldr	r3, [pc, #16]	; (8016590 <ip4_input+0x240>)
 8016580:	2200      	movs	r2, #0
 8016582:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016584:	2300      	movs	r3, #0
}
 8016586:	4618      	mov	r0, r3
 8016588:	3718      	adds	r7, #24
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}
 801658e:	bf00      	nop
 8016590:	200094a8 	.word	0x200094a8
 8016594:	2007792c 	.word	0x2007792c

08016598 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b08a      	sub	sp, #40	; 0x28
 801659c:	af04      	add	r7, sp, #16
 801659e:	60f8      	str	r0, [r7, #12]
 80165a0:	60b9      	str	r1, [r7, #8]
 80165a2:	607a      	str	r2, [r7, #4]
 80165a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80165a6:	68bb      	ldr	r3, [r7, #8]
 80165a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d009      	beq.n	80165c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d003      	beq.n	80165be <ip4_output_if+0x26>
 80165b6:	68bb      	ldr	r3, [r7, #8]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d102      	bne.n	80165c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80165be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c0:	3304      	adds	r3, #4
 80165c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80165c4:	78fa      	ldrb	r2, [r7, #3]
 80165c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c8:	9302      	str	r3, [sp, #8]
 80165ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80165ce:	9301      	str	r3, [sp, #4]
 80165d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80165d4:	9300      	str	r3, [sp, #0]
 80165d6:	4613      	mov	r3, r2
 80165d8:	687a      	ldr	r2, [r7, #4]
 80165da:	6979      	ldr	r1, [r7, #20]
 80165dc:	68f8      	ldr	r0, [r7, #12]
 80165de:	f000 f805 	bl	80165ec <ip4_output_if_src>
 80165e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80165e4:	4618      	mov	r0, r3
 80165e6:	3718      	adds	r7, #24
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}

080165ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b088      	sub	sp, #32
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	60f8      	str	r0, [r7, #12]
 80165f4:	60b9      	str	r1, [r7, #8]
 80165f6:	607a      	str	r2, [r7, #4]
 80165f8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	7b9b      	ldrb	r3, [r3, #14]
 80165fe:	2b01      	cmp	r3, #1
 8016600:	d006      	beq.n	8016610 <ip4_output_if_src+0x24>
 8016602:	4b4b      	ldr	r3, [pc, #300]	; (8016730 <ip4_output_if_src+0x144>)
 8016604:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016608:	494a      	ldr	r1, [pc, #296]	; (8016734 <ip4_output_if_src+0x148>)
 801660a:	484b      	ldr	r0, [pc, #300]	; (8016738 <ip4_output_if_src+0x14c>)
 801660c:	f002 fac0 	bl	8018b90 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d060      	beq.n	80166d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016616:	2314      	movs	r3, #20
 8016618:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801661a:	2114      	movs	r1, #20
 801661c:	68f8      	ldr	r0, [r7, #12]
 801661e:	f7f7 faa9 	bl	800db74 <pbuf_add_header>
 8016622:	4603      	mov	r3, r0
 8016624:	2b00      	cmp	r3, #0
 8016626:	d002      	beq.n	801662e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016628:	f06f 0301 	mvn.w	r3, #1
 801662c:	e07c      	b.n	8016728 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	685b      	ldr	r3, [r3, #4]
 8016632:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	895b      	ldrh	r3, [r3, #10]
 8016638:	2b13      	cmp	r3, #19
 801663a:	d806      	bhi.n	801664a <ip4_output_if_src+0x5e>
 801663c:	4b3c      	ldr	r3, [pc, #240]	; (8016730 <ip4_output_if_src+0x144>)
 801663e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016642:	493e      	ldr	r1, [pc, #248]	; (801673c <ip4_output_if_src+0x150>)
 8016644:	483c      	ldr	r0, [pc, #240]	; (8016738 <ip4_output_if_src+0x14c>)
 8016646:	f002 faa3 	bl	8018b90 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801664a:	69fb      	ldr	r3, [r7, #28]
 801664c:	78fa      	ldrb	r2, [r7, #3]
 801664e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016650:	69fb      	ldr	r3, [r7, #28]
 8016652:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016656:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681a      	ldr	r2, [r3, #0]
 801665c:	69fb      	ldr	r3, [r7, #28]
 801665e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016660:	8b7b      	ldrh	r3, [r7, #26]
 8016662:	089b      	lsrs	r3, r3, #2
 8016664:	b29b      	uxth	r3, r3
 8016666:	b2db      	uxtb	r3, r3
 8016668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801666c:	b2da      	uxtb	r2, r3
 801666e:	69fb      	ldr	r3, [r7, #28]
 8016670:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016672:	69fb      	ldr	r3, [r7, #28]
 8016674:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016678:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	891b      	ldrh	r3, [r3, #8]
 801667e:	4618      	mov	r0, r3
 8016680:	f7f5 ff1c 	bl	800c4bc <lwip_htons>
 8016684:	4603      	mov	r3, r0
 8016686:	461a      	mov	r2, r3
 8016688:	69fb      	ldr	r3, [r7, #28]
 801668a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801668c:	69fb      	ldr	r3, [r7, #28]
 801668e:	2200      	movs	r2, #0
 8016690:	719a      	strb	r2, [r3, #6]
 8016692:	2200      	movs	r2, #0
 8016694:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016696:	4b2a      	ldr	r3, [pc, #168]	; (8016740 <ip4_output_if_src+0x154>)
 8016698:	881b      	ldrh	r3, [r3, #0]
 801669a:	4618      	mov	r0, r3
 801669c:	f7f5 ff0e 	bl	800c4bc <lwip_htons>
 80166a0:	4603      	mov	r3, r0
 80166a2:	461a      	mov	r2, r3
 80166a4:	69fb      	ldr	r3, [r7, #28]
 80166a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80166a8:	4b25      	ldr	r3, [pc, #148]	; (8016740 <ip4_output_if_src+0x154>)
 80166aa:	881b      	ldrh	r3, [r3, #0]
 80166ac:	3301      	adds	r3, #1
 80166ae:	b29a      	uxth	r2, r3
 80166b0:	4b23      	ldr	r3, [pc, #140]	; (8016740 <ip4_output_if_src+0x154>)
 80166b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80166b4:	68bb      	ldr	r3, [r7, #8]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d104      	bne.n	80166c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80166ba:	4b22      	ldr	r3, [pc, #136]	; (8016744 <ip4_output_if_src+0x158>)
 80166bc:	681a      	ldr	r2, [r3, #0]
 80166be:	69fb      	ldr	r3, [r7, #28]
 80166c0:	60da      	str	r2, [r3, #12]
 80166c2:	e003      	b.n	80166cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80166c4:	68bb      	ldr	r3, [r7, #8]
 80166c6:	681a      	ldr	r2, [r3, #0]
 80166c8:	69fb      	ldr	r3, [r7, #28]
 80166ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80166cc:	69fb      	ldr	r3, [r7, #28]
 80166ce:	2200      	movs	r2, #0
 80166d0:	729a      	strb	r2, [r3, #10]
 80166d2:	2200      	movs	r2, #0
 80166d4:	72da      	strb	r2, [r3, #11]
 80166d6:	e00f      	b.n	80166f8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	895b      	ldrh	r3, [r3, #10]
 80166dc:	2b13      	cmp	r3, #19
 80166de:	d802      	bhi.n	80166e6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80166e0:	f06f 0301 	mvn.w	r3, #1
 80166e4:	e020      	b.n	8016728 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	685b      	ldr	r3, [r3, #4]
 80166ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	691b      	ldr	r3, [r3, #16]
 80166f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80166f2:	f107 0314 	add.w	r3, r7, #20
 80166f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80166f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d00c      	beq.n	801671a <ip4_output_if_src+0x12e>
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	891a      	ldrh	r2, [r3, #8]
 8016704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016706:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016708:	429a      	cmp	r2, r3
 801670a:	d906      	bls.n	801671a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801670c:	687a      	ldr	r2, [r7, #4]
 801670e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016710:	68f8      	ldr	r0, [r7, #12]
 8016712:	f000 fe7d 	bl	8017410 <ip4_frag>
 8016716:	4603      	mov	r3, r0
 8016718:	e006      	b.n	8016728 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801671c:	695b      	ldr	r3, [r3, #20]
 801671e:	687a      	ldr	r2, [r7, #4]
 8016720:	68f9      	ldr	r1, [r7, #12]
 8016722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016724:	4798      	blx	r3
 8016726:	4603      	mov	r3, r0
}
 8016728:	4618      	mov	r0, r3
 801672a:	3720      	adds	r7, #32
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}
 8016730:	0801fe18 	.word	0x0801fe18
 8016734:	0801fe4c 	.word	0x0801fe4c
 8016738:	0801fe58 	.word	0x0801fe58
 801673c:	0801fe80 	.word	0x0801fe80
 8016740:	20077a8a 	.word	0x20077a8a
 8016744:	08020358 	.word	0x08020358

08016748 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016748:	b480      	push	{r7}
 801674a:	b085      	sub	sp, #20
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]
 8016750:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	f1b3 3fff 	cmp.w	r3, #4294967295
 801675c:	d002      	beq.n	8016764 <ip4_addr_isbroadcast_u32+0x1c>
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d101      	bne.n	8016768 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016764:	2301      	movs	r3, #1
 8016766:	e02a      	b.n	80167be <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801676e:	f003 0302 	and.w	r3, r3, #2
 8016772:	2b00      	cmp	r3, #0
 8016774:	d101      	bne.n	801677a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016776:	2300      	movs	r3, #0
 8016778:	e021      	b.n	80167be <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	3304      	adds	r3, #4
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	687a      	ldr	r2, [r7, #4]
 8016782:	429a      	cmp	r2, r3
 8016784:	d101      	bne.n	801678a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016786:	2300      	movs	r3, #0
 8016788:	e019      	b.n	80167be <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801678a:	68fa      	ldr	r2, [r7, #12]
 801678c:	683b      	ldr	r3, [r7, #0]
 801678e:	3304      	adds	r3, #4
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	405a      	eors	r2, r3
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	3308      	adds	r3, #8
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	4013      	ands	r3, r2
 801679c:	2b00      	cmp	r3, #0
 801679e:	d10d      	bne.n	80167bc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	3308      	adds	r3, #8
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	43da      	mvns	r2, r3
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80167ac:	683b      	ldr	r3, [r7, #0]
 80167ae:	3308      	adds	r3, #8
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d101      	bne.n	80167bc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80167b8:	2301      	movs	r3, #1
 80167ba:	e000      	b.n	80167be <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80167bc:	2300      	movs	r3, #0
  }
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3714      	adds	r7, #20
 80167c2:	46bd      	mov	sp, r7
 80167c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c8:	4770      	bx	lr
	...

080167cc <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b08a      	sub	sp, #40	; 0x28
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
 80167d4:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 80167d6:	f107 030c 	add.w	r3, r7, #12
 80167da:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	781b      	ldrb	r3, [r3, #0]
 80167e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80167e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80167e8:	3301      	adds	r3, #1
 80167ea:	4a89      	ldr	r2, [pc, #548]	; (8016a10 <ip4addr_aton+0x244>)
 80167ec:	4413      	add	r3, r2
 80167ee:	781b      	ldrb	r3, [r3, #0]
 80167f0:	f003 0304 	and.w	r3, r3, #4
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d101      	bne.n	80167fc <ip4addr_aton+0x30>
      return 0;
 80167f8:	2300      	movs	r3, #0
 80167fa:	e105      	b.n	8016a08 <ip4addr_aton+0x23c>
    }
    val = 0;
 80167fc:	2300      	movs	r3, #0
 80167fe:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8016800:	230a      	movs	r3, #10
 8016802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8016806:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801680a:	2b30      	cmp	r3, #48	; 0x30
 801680c:	d11c      	bne.n	8016848 <ip4addr_aton+0x7c>
      c = *++cp;
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	3301      	adds	r3, #1
 8016812:	607b      	str	r3, [r7, #4]
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	781b      	ldrb	r3, [r3, #0]
 8016818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801681c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016820:	2b78      	cmp	r3, #120	; 0x78
 8016822:	d003      	beq.n	801682c <ip4addr_aton+0x60>
 8016824:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016828:	2b58      	cmp	r3, #88	; 0x58
 801682a:	d10a      	bne.n	8016842 <ip4addr_aton+0x76>
        base = 16;
 801682c:	2310      	movs	r3, #16
 801682e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	3301      	adds	r3, #1
 8016836:	607b      	str	r3, [r7, #4]
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	781b      	ldrb	r3, [r3, #0]
 801683c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016840:	e002      	b.n	8016848 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8016842:	2308      	movs	r3, #8
 8016844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8016848:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801684c:	3301      	adds	r3, #1
 801684e:	4a70      	ldr	r2, [pc, #448]	; (8016a10 <ip4addr_aton+0x244>)
 8016850:	4413      	add	r3, r2
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	f003 0304 	and.w	r3, r3, #4
 8016858:	2b00      	cmp	r3, #0
 801685a:	d011      	beq.n	8016880 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801685c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016862:	fb03 f202 	mul.w	r2, r3, r2
 8016866:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801686a:	4413      	add	r3, r2
 801686c:	3b30      	subs	r3, #48	; 0x30
 801686e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	3301      	adds	r3, #1
 8016874:	607b      	str	r3, [r7, #4]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	781b      	ldrb	r3, [r3, #0]
 801687a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801687e:	e7e3      	b.n	8016848 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8016880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016884:	2b10      	cmp	r3, #16
 8016886:	d127      	bne.n	80168d8 <ip4addr_aton+0x10c>
 8016888:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801688c:	3301      	adds	r3, #1
 801688e:	4a60      	ldr	r2, [pc, #384]	; (8016a10 <ip4addr_aton+0x244>)
 8016890:	4413      	add	r3, r2
 8016892:	781b      	ldrb	r3, [r3, #0]
 8016894:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016898:	2b00      	cmp	r3, #0
 801689a:	d01d      	beq.n	80168d8 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801689e:	011b      	lsls	r3, r3, #4
 80168a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80168a4:	f102 010a 	add.w	r1, r2, #10
 80168a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80168ac:	3201      	adds	r2, #1
 80168ae:	4858      	ldr	r0, [pc, #352]	; (8016a10 <ip4addr_aton+0x244>)
 80168b0:	4402      	add	r2, r0
 80168b2:	7812      	ldrb	r2, [r2, #0]
 80168b4:	f002 0203 	and.w	r2, r2, #3
 80168b8:	2a02      	cmp	r2, #2
 80168ba:	d101      	bne.n	80168c0 <ip4addr_aton+0xf4>
 80168bc:	2261      	movs	r2, #97	; 0x61
 80168be:	e000      	b.n	80168c2 <ip4addr_aton+0xf6>
 80168c0:	2241      	movs	r2, #65	; 0x41
 80168c2:	1a8a      	subs	r2, r1, r2
 80168c4:	4313      	orrs	r3, r2
 80168c6:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	3301      	adds	r3, #1
 80168cc:	607b      	str	r3, [r7, #4]
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	781b      	ldrb	r3, [r3, #0]
 80168d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 80168d6:	e7b7      	b.n	8016848 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 80168d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80168dc:	2b2e      	cmp	r3, #46	; 0x2e
 80168de:	d114      	bne.n	801690a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80168e0:	f107 030c 	add.w	r3, r7, #12
 80168e4:	330c      	adds	r3, #12
 80168e6:	69fa      	ldr	r2, [r7, #28]
 80168e8:	429a      	cmp	r2, r3
 80168ea:	d301      	bcc.n	80168f0 <ip4addr_aton+0x124>
        return 0;
 80168ec:	2300      	movs	r3, #0
 80168ee:	e08b      	b.n	8016a08 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 80168f0:	69fb      	ldr	r3, [r7, #28]
 80168f2:	1d1a      	adds	r2, r3, #4
 80168f4:	61fa      	str	r2, [r7, #28]
 80168f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168f8:	601a      	str	r2, [r3, #0]
      c = *++cp;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	3301      	adds	r3, #1
 80168fe:	607b      	str	r3, [r7, #4]
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8016908:	e76c      	b.n	80167e4 <ip4addr_aton+0x18>
    } else {
      break;
 801690a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801690c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016910:	2b00      	cmp	r3, #0
 8016912:	d00b      	beq.n	801692c <ip4addr_aton+0x160>
 8016914:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016918:	3301      	adds	r3, #1
 801691a:	4a3d      	ldr	r2, [pc, #244]	; (8016a10 <ip4addr_aton+0x244>)
 801691c:	4413      	add	r3, r2
 801691e:	781b      	ldrb	r3, [r3, #0]
 8016920:	f003 0308 	and.w	r3, r3, #8
 8016924:	2b00      	cmp	r3, #0
 8016926:	d101      	bne.n	801692c <ip4addr_aton+0x160>
    return 0;
 8016928:	2300      	movs	r3, #0
 801692a:	e06d      	b.n	8016a08 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801692c:	f107 030c 	add.w	r3, r7, #12
 8016930:	69fa      	ldr	r2, [r7, #28]
 8016932:	1ad3      	subs	r3, r2, r3
 8016934:	109b      	asrs	r3, r3, #2
 8016936:	3301      	adds	r3, #1
 8016938:	2b04      	cmp	r3, #4
 801693a:	d853      	bhi.n	80169e4 <ip4addr_aton+0x218>
 801693c:	a201      	add	r2, pc, #4	; (adr r2, 8016944 <ip4addr_aton+0x178>)
 801693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016942:	bf00      	nop
 8016944:	08016959 	.word	0x08016959
 8016948:	080169f3 	.word	0x080169f3
 801694c:	0801695d 	.word	0x0801695d
 8016950:	0801697f 	.word	0x0801697f
 8016954:	080169ad 	.word	0x080169ad

    case 0:
      return 0;       /* initial nondigit */
 8016958:	2300      	movs	r3, #0
 801695a:	e055      	b.n	8016a08 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801695e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016962:	d301      	bcc.n	8016968 <ip4addr_aton+0x19c>
        return 0;
 8016964:	2300      	movs	r3, #0
 8016966:	e04f      	b.n	8016a08 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	2bff      	cmp	r3, #255	; 0xff
 801696c:	d901      	bls.n	8016972 <ip4addr_aton+0x1a6>
        return 0;
 801696e:	2300      	movs	r3, #0
 8016970:	e04a      	b.n	8016a08 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	061b      	lsls	r3, r3, #24
 8016976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016978:	4313      	orrs	r3, r2
 801697a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801697c:	e03a      	b.n	80169f4 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016984:	d301      	bcc.n	801698a <ip4addr_aton+0x1be>
        return 0;
 8016986:	2300      	movs	r3, #0
 8016988:	e03e      	b.n	8016a08 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	2bff      	cmp	r3, #255	; 0xff
 801698e:	d802      	bhi.n	8016996 <ip4addr_aton+0x1ca>
 8016990:	693b      	ldr	r3, [r7, #16]
 8016992:	2bff      	cmp	r3, #255	; 0xff
 8016994:	d901      	bls.n	801699a <ip4addr_aton+0x1ce>
        return 0;
 8016996:	2300      	movs	r3, #0
 8016998:	e036      	b.n	8016a08 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	061a      	lsls	r2, r3, #24
 801699e:	693b      	ldr	r3, [r7, #16]
 80169a0:	041b      	lsls	r3, r3, #16
 80169a2:	4313      	orrs	r3, r2
 80169a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169a6:	4313      	orrs	r3, r2
 80169a8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80169aa:	e023      	b.n	80169f4 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 80169ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ae:	2bff      	cmp	r3, #255	; 0xff
 80169b0:	d901      	bls.n	80169b6 <ip4addr_aton+0x1ea>
        return 0;
 80169b2:	2300      	movs	r3, #0
 80169b4:	e028      	b.n	8016a08 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	2bff      	cmp	r3, #255	; 0xff
 80169ba:	d805      	bhi.n	80169c8 <ip4addr_aton+0x1fc>
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	2bff      	cmp	r3, #255	; 0xff
 80169c0:	d802      	bhi.n	80169c8 <ip4addr_aton+0x1fc>
 80169c2:	697b      	ldr	r3, [r7, #20]
 80169c4:	2bff      	cmp	r3, #255	; 0xff
 80169c6:	d901      	bls.n	80169cc <ip4addr_aton+0x200>
        return 0;
 80169c8:	2300      	movs	r3, #0
 80169ca:	e01d      	b.n	8016a08 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	061a      	lsls	r2, r3, #24
 80169d0:	693b      	ldr	r3, [r7, #16]
 80169d2:	041b      	lsls	r3, r3, #16
 80169d4:	431a      	orrs	r2, r3
 80169d6:	697b      	ldr	r3, [r7, #20]
 80169d8:	021b      	lsls	r3, r3, #8
 80169da:	4313      	orrs	r3, r2
 80169dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169de:	4313      	orrs	r3, r2
 80169e0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80169e2:	e007      	b.n	80169f4 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 80169e4:	4b0b      	ldr	r3, [pc, #44]	; (8016a14 <ip4addr_aton+0x248>)
 80169e6:	22f9      	movs	r2, #249	; 0xf9
 80169e8:	490b      	ldr	r1, [pc, #44]	; (8016a18 <ip4addr_aton+0x24c>)
 80169ea:	480c      	ldr	r0, [pc, #48]	; (8016a1c <ip4addr_aton+0x250>)
 80169ec:	f002 f8d0 	bl	8018b90 <iprintf>
      break;
 80169f0:	e000      	b.n	80169f4 <ip4addr_aton+0x228>
      break;
 80169f2:	bf00      	nop
  }
  if (addr) {
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d005      	beq.n	8016a06 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80169fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169fc:	f7f5 fd73 	bl	800c4e6 <lwip_htonl>
 8016a00:	4602      	mov	r2, r0
 8016a02:	683b      	ldr	r3, [r7, #0]
 8016a04:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8016a06:	2301      	movs	r3, #1
}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	3728      	adds	r7, #40	; 0x28
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}
 8016a10:	080203e3 	.word	0x080203e3
 8016a14:	0801feb0 	.word	0x0801feb0
 8016a18:	0801feec 	.word	0x0801feec
 8016a1c:	0801fef8 	.word	0x0801fef8

08016a20 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b084      	sub	sp, #16
 8016a24:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016a26:	2300      	movs	r3, #0
 8016a28:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016a2a:	4b12      	ldr	r3, [pc, #72]	; (8016a74 <ip_reass_tmr+0x54>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016a30:	e018      	b.n	8016a64 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	7fdb      	ldrb	r3, [r3, #31]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d00b      	beq.n	8016a52 <ip_reass_tmr+0x32>
      r->timer--;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	7fdb      	ldrb	r3, [r3, #31]
 8016a3e:	3b01      	subs	r3, #1
 8016a40:	b2da      	uxtb	r2, r3
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	60fb      	str	r3, [r7, #12]
 8016a50:	e008      	b.n	8016a64 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016a5c:	68b9      	ldr	r1, [r7, #8]
 8016a5e:	6878      	ldr	r0, [r7, #4]
 8016a60:	f000 f80a 	bl	8016a78 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d1e3      	bne.n	8016a32 <ip_reass_tmr+0x12>
    }
  }
}
 8016a6a:	bf00      	nop
 8016a6c:	bf00      	nop
 8016a6e:	3710      	adds	r7, #16
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}
 8016a74:	20077a8c 	.word	0x20077a8c

08016a78 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b088      	sub	sp, #32
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
 8016a80:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016a82:	2300      	movs	r3, #0
 8016a84:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016a86:	683a      	ldr	r2, [r7, #0]
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	429a      	cmp	r2, r3
 8016a8c:	d105      	bne.n	8016a9a <ip_reass_free_complete_datagram+0x22>
 8016a8e:	4b45      	ldr	r3, [pc, #276]	; (8016ba4 <ip_reass_free_complete_datagram+0x12c>)
 8016a90:	22ab      	movs	r2, #171	; 0xab
 8016a92:	4945      	ldr	r1, [pc, #276]	; (8016ba8 <ip_reass_free_complete_datagram+0x130>)
 8016a94:	4845      	ldr	r0, [pc, #276]	; (8016bac <ip_reass_free_complete_datagram+0x134>)
 8016a96:	f002 f87b 	bl	8018b90 <iprintf>
  if (prev != NULL) {
 8016a9a:	683b      	ldr	r3, [r7, #0]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d00a      	beq.n	8016ab6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016aa0:	683b      	ldr	r3, [r7, #0]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	687a      	ldr	r2, [r7, #4]
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d005      	beq.n	8016ab6 <ip_reass_free_complete_datagram+0x3e>
 8016aaa:	4b3e      	ldr	r3, [pc, #248]	; (8016ba4 <ip_reass_free_complete_datagram+0x12c>)
 8016aac:	22ad      	movs	r2, #173	; 0xad
 8016aae:	4940      	ldr	r1, [pc, #256]	; (8016bb0 <ip_reass_free_complete_datagram+0x138>)
 8016ab0:	483e      	ldr	r0, [pc, #248]	; (8016bac <ip_reass_free_complete_datagram+0x134>)
 8016ab2:	f002 f86d 	bl	8018b90 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	685b      	ldr	r3, [r3, #4]
 8016aba:	685b      	ldr	r3, [r3, #4]
 8016abc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016abe:	697b      	ldr	r3, [r7, #20]
 8016ac0:	889b      	ldrh	r3, [r3, #4]
 8016ac2:	b29b      	uxth	r3, r3
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d12a      	bne.n	8016b1e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	685b      	ldr	r3, [r3, #4]
 8016acc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016ace:	697b      	ldr	r3, [r7, #20]
 8016ad0:	681a      	ldr	r2, [r3, #0]
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016ad6:	69bb      	ldr	r3, [r7, #24]
 8016ad8:	6858      	ldr	r0, [r3, #4]
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	3308      	adds	r3, #8
 8016ade:	2214      	movs	r2, #20
 8016ae0:	4619      	mov	r1, r3
 8016ae2:	f002 f9dc 	bl	8018e9e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016ae6:	2101      	movs	r1, #1
 8016ae8:	69b8      	ldr	r0, [r7, #24]
 8016aea:	f7ff fb1d 	bl	8016128 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016aee:	69b8      	ldr	r0, [r7, #24]
 8016af0:	f7f7 f964 	bl	800ddbc <pbuf_clen>
 8016af4:	4603      	mov	r3, r0
 8016af6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016af8:	8bfa      	ldrh	r2, [r7, #30]
 8016afa:	8a7b      	ldrh	r3, [r7, #18]
 8016afc:	4413      	add	r3, r2
 8016afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b02:	db05      	blt.n	8016b10 <ip_reass_free_complete_datagram+0x98>
 8016b04:	4b27      	ldr	r3, [pc, #156]	; (8016ba4 <ip_reass_free_complete_datagram+0x12c>)
 8016b06:	22bc      	movs	r2, #188	; 0xbc
 8016b08:	492a      	ldr	r1, [pc, #168]	; (8016bb4 <ip_reass_free_complete_datagram+0x13c>)
 8016b0a:	4828      	ldr	r0, [pc, #160]	; (8016bac <ip_reass_free_complete_datagram+0x134>)
 8016b0c:	f002 f840 	bl	8018b90 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016b10:	8bfa      	ldrh	r2, [r7, #30]
 8016b12:	8a7b      	ldrh	r3, [r7, #18]
 8016b14:	4413      	add	r3, r2
 8016b16:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016b18:	69b8      	ldr	r0, [r7, #24]
 8016b1a:	f7f7 f8c1 	bl	800dca0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	685b      	ldr	r3, [r3, #4]
 8016b22:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016b24:	e01f      	b.n	8016b66 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016b26:	69bb      	ldr	r3, [r7, #24]
 8016b28:	685b      	ldr	r3, [r3, #4]
 8016b2a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016b2c:	69bb      	ldr	r3, [r7, #24]
 8016b2e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016b36:	68f8      	ldr	r0, [r7, #12]
 8016b38:	f7f7 f940 	bl	800ddbc <pbuf_clen>
 8016b3c:	4603      	mov	r3, r0
 8016b3e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016b40:	8bfa      	ldrh	r2, [r7, #30]
 8016b42:	8a7b      	ldrh	r3, [r7, #18]
 8016b44:	4413      	add	r3, r2
 8016b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b4a:	db05      	blt.n	8016b58 <ip_reass_free_complete_datagram+0xe0>
 8016b4c:	4b15      	ldr	r3, [pc, #84]	; (8016ba4 <ip_reass_free_complete_datagram+0x12c>)
 8016b4e:	22cc      	movs	r2, #204	; 0xcc
 8016b50:	4918      	ldr	r1, [pc, #96]	; (8016bb4 <ip_reass_free_complete_datagram+0x13c>)
 8016b52:	4816      	ldr	r0, [pc, #88]	; (8016bac <ip_reass_free_complete_datagram+0x134>)
 8016b54:	f002 f81c 	bl	8018b90 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016b58:	8bfa      	ldrh	r2, [r7, #30]
 8016b5a:	8a7b      	ldrh	r3, [r7, #18]
 8016b5c:	4413      	add	r3, r2
 8016b5e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016b60:	68f8      	ldr	r0, [r7, #12]
 8016b62:	f7f7 f89d 	bl	800dca0 <pbuf_free>
  while (p != NULL) {
 8016b66:	69bb      	ldr	r3, [r7, #24]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d1dc      	bne.n	8016b26 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016b6c:	6839      	ldr	r1, [r7, #0]
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f000 f8c2 	bl	8016cf8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016b74:	4b10      	ldr	r3, [pc, #64]	; (8016bb8 <ip_reass_free_complete_datagram+0x140>)
 8016b76:	881b      	ldrh	r3, [r3, #0]
 8016b78:	8bfa      	ldrh	r2, [r7, #30]
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d905      	bls.n	8016b8a <ip_reass_free_complete_datagram+0x112>
 8016b7e:	4b09      	ldr	r3, [pc, #36]	; (8016ba4 <ip_reass_free_complete_datagram+0x12c>)
 8016b80:	22d2      	movs	r2, #210	; 0xd2
 8016b82:	490e      	ldr	r1, [pc, #56]	; (8016bbc <ip_reass_free_complete_datagram+0x144>)
 8016b84:	4809      	ldr	r0, [pc, #36]	; (8016bac <ip_reass_free_complete_datagram+0x134>)
 8016b86:	f002 f803 	bl	8018b90 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016b8a:	4b0b      	ldr	r3, [pc, #44]	; (8016bb8 <ip_reass_free_complete_datagram+0x140>)
 8016b8c:	881a      	ldrh	r2, [r3, #0]
 8016b8e:	8bfb      	ldrh	r3, [r7, #30]
 8016b90:	1ad3      	subs	r3, r2, r3
 8016b92:	b29a      	uxth	r2, r3
 8016b94:	4b08      	ldr	r3, [pc, #32]	; (8016bb8 <ip_reass_free_complete_datagram+0x140>)
 8016b96:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016b98:	8bfb      	ldrh	r3, [r7, #30]
}
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	3720      	adds	r7, #32
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}
 8016ba2:	bf00      	nop
 8016ba4:	0801ff20 	.word	0x0801ff20
 8016ba8:	0801ff5c 	.word	0x0801ff5c
 8016bac:	0801ff68 	.word	0x0801ff68
 8016bb0:	0801ff90 	.word	0x0801ff90
 8016bb4:	0801ffa4 	.word	0x0801ffa4
 8016bb8:	20077a90 	.word	0x20077a90
 8016bbc:	0801ffc4 	.word	0x0801ffc4

08016bc0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b08a      	sub	sp, #40	; 0x28
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
 8016bc8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016bce:	2300      	movs	r3, #0
 8016bd0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016bde:	4b28      	ldr	r3, [pc, #160]	; (8016c80 <ip_reass_remove_oldest_datagram+0xc0>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016be4:	e030      	b.n	8016c48 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016be8:	695a      	ldr	r2, [r3, #20]
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	68db      	ldr	r3, [r3, #12]
 8016bee:	429a      	cmp	r2, r3
 8016bf0:	d10c      	bne.n	8016c0c <ip_reass_remove_oldest_datagram+0x4c>
 8016bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf4:	699a      	ldr	r2, [r3, #24]
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	691b      	ldr	r3, [r3, #16]
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	d106      	bne.n	8016c0c <ip_reass_remove_oldest_datagram+0x4c>
 8016bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c00:	899a      	ldrh	r2, [r3, #12]
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	889b      	ldrh	r3, [r3, #4]
 8016c06:	b29b      	uxth	r3, r3
 8016c08:	429a      	cmp	r2, r3
 8016c0a:	d014      	beq.n	8016c36 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016c0c:	693b      	ldr	r3, [r7, #16]
 8016c0e:	3301      	adds	r3, #1
 8016c10:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016c12:	6a3b      	ldr	r3, [r7, #32]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d104      	bne.n	8016c22 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c1a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016c1c:	69fb      	ldr	r3, [r7, #28]
 8016c1e:	61bb      	str	r3, [r7, #24]
 8016c20:	e009      	b.n	8016c36 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c24:	7fda      	ldrb	r2, [r3, #31]
 8016c26:	6a3b      	ldr	r3, [r7, #32]
 8016c28:	7fdb      	ldrb	r3, [r3, #31]
 8016c2a:	429a      	cmp	r2, r3
 8016c2c:	d803      	bhi.n	8016c36 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c30:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016c32:	69fb      	ldr	r3, [r7, #28]
 8016c34:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d001      	beq.n	8016c42 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c40:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d1cb      	bne.n	8016be6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016c4e:	6a3b      	ldr	r3, [r7, #32]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d008      	beq.n	8016c66 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016c54:	69b9      	ldr	r1, [r7, #24]
 8016c56:	6a38      	ldr	r0, [r7, #32]
 8016c58:	f7ff ff0e 	bl	8016a78 <ip_reass_free_complete_datagram>
 8016c5c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016c5e:	697a      	ldr	r2, [r7, #20]
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	4413      	add	r3, r2
 8016c64:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016c66:	697a      	ldr	r2, [r7, #20]
 8016c68:	683b      	ldr	r3, [r7, #0]
 8016c6a:	429a      	cmp	r2, r3
 8016c6c:	da02      	bge.n	8016c74 <ip_reass_remove_oldest_datagram+0xb4>
 8016c6e:	693b      	ldr	r3, [r7, #16]
 8016c70:	2b01      	cmp	r3, #1
 8016c72:	dcac      	bgt.n	8016bce <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016c74:	697b      	ldr	r3, [r7, #20]
}
 8016c76:	4618      	mov	r0, r3
 8016c78:	3728      	adds	r7, #40	; 0x28
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}
 8016c7e:	bf00      	nop
 8016c80:	20077a8c 	.word	0x20077a8c

08016c84 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b084      	sub	sp, #16
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016c8e:	2004      	movs	r0, #4
 8016c90:	f7f6 f8ec 	bl	800ce6c <memp_malloc>
 8016c94:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d110      	bne.n	8016cbe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016c9c:	6839      	ldr	r1, [r7, #0]
 8016c9e:	6878      	ldr	r0, [r7, #4]
 8016ca0:	f7ff ff8e 	bl	8016bc0 <ip_reass_remove_oldest_datagram>
 8016ca4:	4602      	mov	r2, r0
 8016ca6:	683b      	ldr	r3, [r7, #0]
 8016ca8:	4293      	cmp	r3, r2
 8016caa:	dc03      	bgt.n	8016cb4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016cac:	2004      	movs	r0, #4
 8016cae:	f7f6 f8dd 	bl	800ce6c <memp_malloc>
 8016cb2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d101      	bne.n	8016cbe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016cba:	2300      	movs	r3, #0
 8016cbc:	e016      	b.n	8016cec <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016cbe:	2220      	movs	r2, #32
 8016cc0:	2100      	movs	r1, #0
 8016cc2:	68f8      	ldr	r0, [r7, #12]
 8016cc4:	f002 f803 	bl	8018cce <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	220f      	movs	r2, #15
 8016ccc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016cce:	4b09      	ldr	r3, [pc, #36]	; (8016cf4 <ip_reass_enqueue_new_datagram+0x70>)
 8016cd0:	681a      	ldr	r2, [r3, #0]
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016cd6:	4a07      	ldr	r2, [pc, #28]	; (8016cf4 <ip_reass_enqueue_new_datagram+0x70>)
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	3308      	adds	r3, #8
 8016ce0:	2214      	movs	r2, #20
 8016ce2:	6879      	ldr	r1, [r7, #4]
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f002 f8da 	bl	8018e9e <memcpy>
  return ipr;
 8016cea:	68fb      	ldr	r3, [r7, #12]
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3710      	adds	r7, #16
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}
 8016cf4:	20077a8c 	.word	0x20077a8c

08016cf8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b082      	sub	sp, #8
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
 8016d00:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016d02:	4b10      	ldr	r3, [pc, #64]	; (8016d44 <ip_reass_dequeue_datagram+0x4c>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	687a      	ldr	r2, [r7, #4]
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	d104      	bne.n	8016d16 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	4a0c      	ldr	r2, [pc, #48]	; (8016d44 <ip_reass_dequeue_datagram+0x4c>)
 8016d12:	6013      	str	r3, [r2, #0]
 8016d14:	e00d      	b.n	8016d32 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d106      	bne.n	8016d2a <ip_reass_dequeue_datagram+0x32>
 8016d1c:	4b0a      	ldr	r3, [pc, #40]	; (8016d48 <ip_reass_dequeue_datagram+0x50>)
 8016d1e:	f240 1245 	movw	r2, #325	; 0x145
 8016d22:	490a      	ldr	r1, [pc, #40]	; (8016d4c <ip_reass_dequeue_datagram+0x54>)
 8016d24:	480a      	ldr	r0, [pc, #40]	; (8016d50 <ip_reass_dequeue_datagram+0x58>)
 8016d26:	f001 ff33 	bl	8018b90 <iprintf>
    prev->next = ipr->next;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681a      	ldr	r2, [r3, #0]
 8016d2e:	683b      	ldr	r3, [r7, #0]
 8016d30:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016d32:	6879      	ldr	r1, [r7, #4]
 8016d34:	2004      	movs	r0, #4
 8016d36:	f7f6 f90f 	bl	800cf58 <memp_free>
}
 8016d3a:	bf00      	nop
 8016d3c:	3708      	adds	r7, #8
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	bd80      	pop	{r7, pc}
 8016d42:	bf00      	nop
 8016d44:	20077a8c 	.word	0x20077a8c
 8016d48:	0801ff20 	.word	0x0801ff20
 8016d4c:	0801ffe8 	.word	0x0801ffe8
 8016d50:	0801ff68 	.word	0x0801ff68

08016d54 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b08c      	sub	sp, #48	; 0x30
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	60f8      	str	r0, [r7, #12]
 8016d5c:	60b9      	str	r1, [r7, #8]
 8016d5e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016d60:	2300      	movs	r3, #0
 8016d62:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016d64:	2301      	movs	r3, #1
 8016d66:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016d68:	68bb      	ldr	r3, [r7, #8]
 8016d6a:	685b      	ldr	r3, [r3, #4]
 8016d6c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016d6e:	69fb      	ldr	r3, [r7, #28]
 8016d70:	885b      	ldrh	r3, [r3, #2]
 8016d72:	b29b      	uxth	r3, r3
 8016d74:	4618      	mov	r0, r3
 8016d76:	f7f5 fba1 	bl	800c4bc <lwip_htons>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016d7e:	69fb      	ldr	r3, [r7, #28]
 8016d80:	781b      	ldrb	r3, [r3, #0]
 8016d82:	f003 030f 	and.w	r3, r3, #15
 8016d86:	b2db      	uxtb	r3, r3
 8016d88:	009b      	lsls	r3, r3, #2
 8016d8a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016d8c:	7e7b      	ldrb	r3, [r7, #25]
 8016d8e:	b29b      	uxth	r3, r3
 8016d90:	8b7a      	ldrh	r2, [r7, #26]
 8016d92:	429a      	cmp	r2, r3
 8016d94:	d202      	bcs.n	8016d9c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d96:	f04f 33ff 	mov.w	r3, #4294967295
 8016d9a:	e135      	b.n	8017008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016d9c:	7e7b      	ldrb	r3, [r7, #25]
 8016d9e:	b29b      	uxth	r3, r3
 8016da0:	8b7a      	ldrh	r2, [r7, #26]
 8016da2:	1ad3      	subs	r3, r2, r3
 8016da4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016da6:	69fb      	ldr	r3, [r7, #28]
 8016da8:	88db      	ldrh	r3, [r3, #6]
 8016daa:	b29b      	uxth	r3, r3
 8016dac:	4618      	mov	r0, r3
 8016dae:	f7f5 fb85 	bl	800c4bc <lwip_htons>
 8016db2:	4603      	mov	r3, r0
 8016db4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016db8:	b29b      	uxth	r3, r3
 8016dba:	00db      	lsls	r3, r3, #3
 8016dbc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016dbe:	68bb      	ldr	r3, [r7, #8]
 8016dc0:	685b      	ldr	r3, [r3, #4]
 8016dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	701a      	strb	r2, [r3, #0]
 8016dca:	2200      	movs	r2, #0
 8016dcc:	705a      	strb	r2, [r3, #1]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	709a      	strb	r2, [r3, #2]
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dd8:	8afa      	ldrh	r2, [r7, #22]
 8016dda:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016ddc:	8afa      	ldrh	r2, [r7, #22]
 8016dde:	8b7b      	ldrh	r3, [r7, #26]
 8016de0:	4413      	add	r3, r2
 8016de2:	b29a      	uxth	r2, r3
 8016de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016de6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dea:	88db      	ldrh	r3, [r3, #6]
 8016dec:	b29b      	uxth	r3, r3
 8016dee:	8afa      	ldrh	r2, [r7, #22]
 8016df0:	429a      	cmp	r2, r3
 8016df2:	d902      	bls.n	8016dfa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016df4:	f04f 33ff 	mov.w	r3, #4294967295
 8016df8:	e106      	b.n	8017008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	685b      	ldr	r3, [r3, #4]
 8016dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8016e00:	e068      	b.n	8016ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e04:	685b      	ldr	r3, [r3, #4]
 8016e06:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e0a:	889b      	ldrh	r3, [r3, #4]
 8016e0c:	b29a      	uxth	r2, r3
 8016e0e:	693b      	ldr	r3, [r7, #16]
 8016e10:	889b      	ldrh	r3, [r3, #4]
 8016e12:	b29b      	uxth	r3, r3
 8016e14:	429a      	cmp	r2, r3
 8016e16:	d235      	bcs.n	8016e84 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e1c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d020      	beq.n	8016e66 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e26:	889b      	ldrh	r3, [r3, #4]
 8016e28:	b29a      	uxth	r2, r3
 8016e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e2c:	88db      	ldrh	r3, [r3, #6]
 8016e2e:	b29b      	uxth	r3, r3
 8016e30:	429a      	cmp	r2, r3
 8016e32:	d307      	bcc.n	8016e44 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e36:	88db      	ldrh	r3, [r3, #6]
 8016e38:	b29a      	uxth	r2, r3
 8016e3a:	693b      	ldr	r3, [r7, #16]
 8016e3c:	889b      	ldrh	r3, [r3, #4]
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	429a      	cmp	r2, r3
 8016e42:	d902      	bls.n	8016e4a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e44:	f04f 33ff 	mov.w	r3, #4294967295
 8016e48:	e0de      	b.n	8017008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e4c:	68ba      	ldr	r2, [r7, #8]
 8016e4e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e52:	88db      	ldrh	r3, [r3, #6]
 8016e54:	b29a      	uxth	r2, r3
 8016e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e58:	889b      	ldrh	r3, [r3, #4]
 8016e5a:	b29b      	uxth	r3, r3
 8016e5c:	429a      	cmp	r2, r3
 8016e5e:	d03d      	beq.n	8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016e60:	2300      	movs	r3, #0
 8016e62:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016e64:	e03a      	b.n	8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e68:	88db      	ldrh	r3, [r3, #6]
 8016e6a:	b29a      	uxth	r2, r3
 8016e6c:	693b      	ldr	r3, [r7, #16]
 8016e6e:	889b      	ldrh	r3, [r3, #4]
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	429a      	cmp	r2, r3
 8016e74:	d902      	bls.n	8016e7c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e76:	f04f 33ff 	mov.w	r3, #4294967295
 8016e7a:	e0c5      	b.n	8017008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	68ba      	ldr	r2, [r7, #8]
 8016e80:	605a      	str	r2, [r3, #4]
      break;
 8016e82:	e02b      	b.n	8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e86:	889b      	ldrh	r3, [r3, #4]
 8016e88:	b29a      	uxth	r2, r3
 8016e8a:	693b      	ldr	r3, [r7, #16]
 8016e8c:	889b      	ldrh	r3, [r3, #4]
 8016e8e:	b29b      	uxth	r3, r3
 8016e90:	429a      	cmp	r2, r3
 8016e92:	d102      	bne.n	8016e9a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e94:	f04f 33ff 	mov.w	r3, #4294967295
 8016e98:	e0b6      	b.n	8017008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e9c:	889b      	ldrh	r3, [r3, #4]
 8016e9e:	b29a      	uxth	r2, r3
 8016ea0:	693b      	ldr	r3, [r7, #16]
 8016ea2:	88db      	ldrh	r3, [r3, #6]
 8016ea4:	b29b      	uxth	r3, r3
 8016ea6:	429a      	cmp	r2, r3
 8016ea8:	d202      	bcs.n	8016eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8016eae:	e0ab      	b.n	8017008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d009      	beq.n	8016eca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eb8:	88db      	ldrh	r3, [r3, #6]
 8016eba:	b29a      	uxth	r2, r3
 8016ebc:	693b      	ldr	r3, [r7, #16]
 8016ebe:	889b      	ldrh	r3, [r3, #4]
 8016ec0:	b29b      	uxth	r3, r3
 8016ec2:	429a      	cmp	r2, r3
 8016ec4:	d001      	beq.n	8016eca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016eca:	693b      	ldr	r3, [r7, #16]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d193      	bne.n	8016e02 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016eda:	e000      	b.n	8016ede <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016edc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d12d      	bne.n	8016f40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d01c      	beq.n	8016f24 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eec:	88db      	ldrh	r3, [r3, #6]
 8016eee:	b29a      	uxth	r2, r3
 8016ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef2:	889b      	ldrh	r3, [r3, #4]
 8016ef4:	b29b      	uxth	r3, r3
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d906      	bls.n	8016f08 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016efa:	4b45      	ldr	r3, [pc, #276]	; (8017010 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016efc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016f00:	4944      	ldr	r1, [pc, #272]	; (8017014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016f02:	4845      	ldr	r0, [pc, #276]	; (8017018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f04:	f001 fe44 	bl	8018b90 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f0a:	68ba      	ldr	r2, [r7, #8]
 8016f0c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f10:	88db      	ldrh	r3, [r3, #6]
 8016f12:	b29a      	uxth	r2, r3
 8016f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f16:	889b      	ldrh	r3, [r3, #4]
 8016f18:	b29b      	uxth	r3, r3
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	d010      	beq.n	8016f40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016f1e:	2300      	movs	r3, #0
 8016f20:	623b      	str	r3, [r7, #32]
 8016f22:	e00d      	b.n	8016f40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	685b      	ldr	r3, [r3, #4]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d006      	beq.n	8016f3a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016f2c:	4b38      	ldr	r3, [pc, #224]	; (8017010 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f2e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016f32:	493a      	ldr	r1, [pc, #232]	; (801701c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016f34:	4838      	ldr	r0, [pc, #224]	; (8017018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f36:	f001 fe2b 	bl	8018b90 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	68ba      	ldr	r2, [r7, #8]
 8016f3e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d105      	bne.n	8016f52 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	7f9b      	ldrb	r3, [r3, #30]
 8016f4a:	f003 0301 	and.w	r3, r3, #1
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d059      	beq.n	8017006 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016f52:	6a3b      	ldr	r3, [r7, #32]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d04f      	beq.n	8016ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	685b      	ldr	r3, [r3, #4]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d006      	beq.n	8016f6e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	685b      	ldr	r3, [r3, #4]
 8016f64:	685b      	ldr	r3, [r3, #4]
 8016f66:	889b      	ldrh	r3, [r3, #4]
 8016f68:	b29b      	uxth	r3, r3
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d002      	beq.n	8016f74 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	623b      	str	r3, [r7, #32]
 8016f72:	e041      	b.n	8016ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f76:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016f7e:	e012      	b.n	8016fa6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f82:	685b      	ldr	r3, [r3, #4]
 8016f84:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f88:	88db      	ldrh	r3, [r3, #6]
 8016f8a:	b29a      	uxth	r2, r3
 8016f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f8e:	889b      	ldrh	r3, [r3, #4]
 8016f90:	b29b      	uxth	r3, r3
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d002      	beq.n	8016f9c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016f96:	2300      	movs	r3, #0
 8016f98:	623b      	str	r3, [r7, #32]
            break;
 8016f9a:	e007      	b.n	8016fac <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f9e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d1e9      	bne.n	8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016fac:	6a3b      	ldr	r3, [r7, #32]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d022      	beq.n	8016ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	685b      	ldr	r3, [r3, #4]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d106      	bne.n	8016fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016fba:	4b15      	ldr	r3, [pc, #84]	; (8017010 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016fbc:	f240 12df 	movw	r2, #479	; 0x1df
 8016fc0:	4917      	ldr	r1, [pc, #92]	; (8017020 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016fc2:	4815      	ldr	r0, [pc, #84]	; (8017018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016fc4:	f001 fde4 	bl	8018b90 <iprintf>
          LWIP_ASSERT("sanity check",
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	685b      	ldr	r3, [r3, #4]
 8016fcc:	685b      	ldr	r3, [r3, #4]
 8016fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016fd0:	429a      	cmp	r2, r3
 8016fd2:	d106      	bne.n	8016fe2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016fd4:	4b0e      	ldr	r3, [pc, #56]	; (8017010 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016fd6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016fda:	4911      	ldr	r1, [pc, #68]	; (8017020 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016fdc:	480e      	ldr	r0, [pc, #56]	; (8017018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016fde:	f001 fdd7 	bl	8018b90 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d006      	beq.n	8016ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016fea:	4b09      	ldr	r3, [pc, #36]	; (8017010 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016fec:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016ff0:	490c      	ldr	r1, [pc, #48]	; (8017024 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016ff2:	4809      	ldr	r0, [pc, #36]	; (8017018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ff4:	f001 fdcc 	bl	8018b90 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016ff8:	6a3b      	ldr	r3, [r7, #32]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	bf14      	ite	ne
 8016ffe:	2301      	movne	r3, #1
 8017000:	2300      	moveq	r3, #0
 8017002:	b2db      	uxtb	r3, r3
 8017004:	e000      	b.n	8017008 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017006:	2300      	movs	r3, #0
}
 8017008:	4618      	mov	r0, r3
 801700a:	3730      	adds	r7, #48	; 0x30
 801700c:	46bd      	mov	sp, r7
 801700e:	bd80      	pop	{r7, pc}
 8017010:	0801ff20 	.word	0x0801ff20
 8017014:	08020004 	.word	0x08020004
 8017018:	0801ff68 	.word	0x0801ff68
 801701c:	08020024 	.word	0x08020024
 8017020:	0802005c 	.word	0x0802005c
 8017024:	0802006c 	.word	0x0802006c

08017028 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b08e      	sub	sp, #56	; 0x38
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	685b      	ldr	r3, [r3, #4]
 8017034:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	f003 030f 	and.w	r3, r3, #15
 801703e:	b2db      	uxtb	r3, r3
 8017040:	009b      	lsls	r3, r3, #2
 8017042:	b2db      	uxtb	r3, r3
 8017044:	2b14      	cmp	r3, #20
 8017046:	f040 8171 	bne.w	801732c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801704c:	88db      	ldrh	r3, [r3, #6]
 801704e:	b29b      	uxth	r3, r3
 8017050:	4618      	mov	r0, r3
 8017052:	f7f5 fa33 	bl	800c4bc <lwip_htons>
 8017056:	4603      	mov	r3, r0
 8017058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801705c:	b29b      	uxth	r3, r3
 801705e:	00db      	lsls	r3, r3, #3
 8017060:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017064:	885b      	ldrh	r3, [r3, #2]
 8017066:	b29b      	uxth	r3, r3
 8017068:	4618      	mov	r0, r3
 801706a:	f7f5 fa27 	bl	800c4bc <lwip_htons>
 801706e:	4603      	mov	r3, r0
 8017070:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	f003 030f 	and.w	r3, r3, #15
 801707a:	b2db      	uxtb	r3, r3
 801707c:	009b      	lsls	r3, r3, #2
 801707e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017082:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017086:	b29b      	uxth	r3, r3
 8017088:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801708a:	429a      	cmp	r2, r3
 801708c:	f0c0 8150 	bcc.w	8017330 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017094:	b29b      	uxth	r3, r3
 8017096:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017098:	1ad3      	subs	r3, r2, r3
 801709a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f7f6 fe8d 	bl	800ddbc <pbuf_clen>
 80170a2:	4603      	mov	r3, r0
 80170a4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80170a6:	4b8c      	ldr	r3, [pc, #560]	; (80172d8 <ip4_reass+0x2b0>)
 80170a8:	881b      	ldrh	r3, [r3, #0]
 80170aa:	461a      	mov	r2, r3
 80170ac:	8c3b      	ldrh	r3, [r7, #32]
 80170ae:	4413      	add	r3, r2
 80170b0:	2b0a      	cmp	r3, #10
 80170b2:	dd10      	ble.n	80170d6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80170b4:	8c3b      	ldrh	r3, [r7, #32]
 80170b6:	4619      	mov	r1, r3
 80170b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170ba:	f7ff fd81 	bl	8016bc0 <ip_reass_remove_oldest_datagram>
 80170be:	4603      	mov	r3, r0
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	f000 8137 	beq.w	8017334 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80170c6:	4b84      	ldr	r3, [pc, #528]	; (80172d8 <ip4_reass+0x2b0>)
 80170c8:	881b      	ldrh	r3, [r3, #0]
 80170ca:	461a      	mov	r2, r3
 80170cc:	8c3b      	ldrh	r3, [r7, #32]
 80170ce:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80170d0:	2b0a      	cmp	r3, #10
 80170d2:	f300 812f 	bgt.w	8017334 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80170d6:	4b81      	ldr	r3, [pc, #516]	; (80172dc <ip4_reass+0x2b4>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	633b      	str	r3, [r7, #48]	; 0x30
 80170dc:	e015      	b.n	801710a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80170de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170e0:	695a      	ldr	r2, [r3, #20]
 80170e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e4:	68db      	ldr	r3, [r3, #12]
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d10c      	bne.n	8017104 <ip4_reass+0xdc>
 80170ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ec:	699a      	ldr	r2, [r3, #24]
 80170ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f0:	691b      	ldr	r3, [r3, #16]
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d106      	bne.n	8017104 <ip4_reass+0xdc>
 80170f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170f8:	899a      	ldrh	r2, [r3, #12]
 80170fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170fc:	889b      	ldrh	r3, [r3, #4]
 80170fe:	b29b      	uxth	r3, r3
 8017100:	429a      	cmp	r2, r3
 8017102:	d006      	beq.n	8017112 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	633b      	str	r3, [r7, #48]	; 0x30
 801710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801710c:	2b00      	cmp	r3, #0
 801710e:	d1e6      	bne.n	80170de <ip4_reass+0xb6>
 8017110:	e000      	b.n	8017114 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017112:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017116:	2b00      	cmp	r3, #0
 8017118:	d109      	bne.n	801712e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801711a:	8c3b      	ldrh	r3, [r7, #32]
 801711c:	4619      	mov	r1, r3
 801711e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017120:	f7ff fdb0 	bl	8016c84 <ip_reass_enqueue_new_datagram>
 8017124:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017128:	2b00      	cmp	r3, #0
 801712a:	d11c      	bne.n	8017166 <ip4_reass+0x13e>
      goto nullreturn;
 801712c:	e105      	b.n	801733a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017130:	88db      	ldrh	r3, [r3, #6]
 8017132:	b29b      	uxth	r3, r3
 8017134:	4618      	mov	r0, r3
 8017136:	f7f5 f9c1 	bl	800c4bc <lwip_htons>
 801713a:	4603      	mov	r3, r0
 801713c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017140:	2b00      	cmp	r3, #0
 8017142:	d110      	bne.n	8017166 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017146:	89db      	ldrh	r3, [r3, #14]
 8017148:	4618      	mov	r0, r3
 801714a:	f7f5 f9b7 	bl	800c4bc <lwip_htons>
 801714e:	4603      	mov	r3, r0
 8017150:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017154:	2b00      	cmp	r3, #0
 8017156:	d006      	beq.n	8017166 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801715a:	3308      	adds	r3, #8
 801715c:	2214      	movs	r2, #20
 801715e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017160:	4618      	mov	r0, r3
 8017162:	f001 fe9c 	bl	8018e9e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017168:	88db      	ldrh	r3, [r3, #6]
 801716a:	b29b      	uxth	r3, r3
 801716c:	f003 0320 	and.w	r3, r3, #32
 8017170:	2b00      	cmp	r3, #0
 8017172:	bf0c      	ite	eq
 8017174:	2301      	moveq	r3, #1
 8017176:	2300      	movne	r3, #0
 8017178:	b2db      	uxtb	r3, r3
 801717a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801717c:	69fb      	ldr	r3, [r7, #28]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d00e      	beq.n	80171a0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017182:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017186:	4413      	add	r3, r2
 8017188:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801718a:	8b7a      	ldrh	r2, [r7, #26]
 801718c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801718e:	429a      	cmp	r2, r3
 8017190:	f0c0 80a0 	bcc.w	80172d4 <ip4_reass+0x2ac>
 8017194:	8b7b      	ldrh	r3, [r7, #26]
 8017196:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801719a:	4293      	cmp	r3, r2
 801719c:	f200 809a 	bhi.w	80172d4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80171a0:	69fa      	ldr	r2, [r7, #28]
 80171a2:	6879      	ldr	r1, [r7, #4]
 80171a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80171a6:	f7ff fdd5 	bl	8016d54 <ip_reass_chain_frag_into_datagram_and_validate>
 80171aa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80171ac:	697b      	ldr	r3, [r7, #20]
 80171ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171b2:	f000 809b 	beq.w	80172ec <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80171b6:	4b48      	ldr	r3, [pc, #288]	; (80172d8 <ip4_reass+0x2b0>)
 80171b8:	881a      	ldrh	r2, [r3, #0]
 80171ba:	8c3b      	ldrh	r3, [r7, #32]
 80171bc:	4413      	add	r3, r2
 80171be:	b29a      	uxth	r2, r3
 80171c0:	4b45      	ldr	r3, [pc, #276]	; (80172d8 <ip4_reass+0x2b0>)
 80171c2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80171c4:	69fb      	ldr	r3, [r7, #28]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d00d      	beq.n	80171e6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80171ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80171cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80171ce:	4413      	add	r3, r2
 80171d0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80171d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d4:	8a7a      	ldrh	r2, [r7, #18]
 80171d6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80171d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171da:	7f9b      	ldrb	r3, [r3, #30]
 80171dc:	f043 0301 	orr.w	r3, r3, #1
 80171e0:	b2da      	uxtb	r2, r3
 80171e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171e4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80171e6:	697b      	ldr	r3, [r7, #20]
 80171e8:	2b01      	cmp	r3, #1
 80171ea:	d171      	bne.n	80172d0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80171ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ee:	8b9b      	ldrh	r3, [r3, #28]
 80171f0:	3314      	adds	r3, #20
 80171f2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80171f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171f6:	685b      	ldr	r3, [r3, #4]
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80171fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017200:	685b      	ldr	r3, [r3, #4]
 8017202:	685b      	ldr	r3, [r3, #4]
 8017204:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017208:	3308      	adds	r3, #8
 801720a:	2214      	movs	r2, #20
 801720c:	4619      	mov	r1, r3
 801720e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017210:	f001 fe45 	bl	8018e9e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017214:	8a3b      	ldrh	r3, [r7, #16]
 8017216:	4618      	mov	r0, r3
 8017218:	f7f5 f950 	bl	800c4bc <lwip_htons>
 801721c:	4603      	mov	r3, r0
 801721e:	461a      	mov	r2, r3
 8017220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017222:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017226:	2200      	movs	r2, #0
 8017228:	719a      	strb	r2, [r3, #6]
 801722a:	2200      	movs	r2, #0
 801722c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017230:	2200      	movs	r2, #0
 8017232:	729a      	strb	r2, [r3, #10]
 8017234:	2200      	movs	r2, #0
 8017236:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801723a:	685b      	ldr	r3, [r3, #4]
 801723c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801723e:	e00d      	b.n	801725c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017242:	685b      	ldr	r3, [r3, #4]
 8017244:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017246:	2114      	movs	r1, #20
 8017248:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801724a:	f7f6 fca3 	bl	800db94 <pbuf_remove_header>
      pbuf_cat(p, r);
 801724e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017250:	6878      	ldr	r0, [r7, #4]
 8017252:	f7f6 fdf3 	bl	800de3c <pbuf_cat>
      r = iprh->next_pbuf;
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801725c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801725e:	2b00      	cmp	r3, #0
 8017260:	d1ee      	bne.n	8017240 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017262:	4b1e      	ldr	r3, [pc, #120]	; (80172dc <ip4_reass+0x2b4>)
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017268:	429a      	cmp	r2, r3
 801726a:	d102      	bne.n	8017272 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801726c:	2300      	movs	r3, #0
 801726e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017270:	e010      	b.n	8017294 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017272:	4b1a      	ldr	r3, [pc, #104]	; (80172dc <ip4_reass+0x2b4>)
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017278:	e007      	b.n	801728a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017280:	429a      	cmp	r2, r3
 8017282:	d006      	beq.n	8017292 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	62fb      	str	r3, [r7, #44]	; 0x2c
 801728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801728c:	2b00      	cmp	r3, #0
 801728e:	d1f4      	bne.n	801727a <ip4_reass+0x252>
 8017290:	e000      	b.n	8017294 <ip4_reass+0x26c>
          break;
 8017292:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017298:	f7ff fd2e 	bl	8016cf8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f7f6 fd8d 	bl	800ddbc <pbuf_clen>
 80172a2:	4603      	mov	r3, r0
 80172a4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80172a6:	4b0c      	ldr	r3, [pc, #48]	; (80172d8 <ip4_reass+0x2b0>)
 80172a8:	881b      	ldrh	r3, [r3, #0]
 80172aa:	8c3a      	ldrh	r2, [r7, #32]
 80172ac:	429a      	cmp	r2, r3
 80172ae:	d906      	bls.n	80172be <ip4_reass+0x296>
 80172b0:	4b0b      	ldr	r3, [pc, #44]	; (80172e0 <ip4_reass+0x2b8>)
 80172b2:	f240 229b 	movw	r2, #667	; 0x29b
 80172b6:	490b      	ldr	r1, [pc, #44]	; (80172e4 <ip4_reass+0x2bc>)
 80172b8:	480b      	ldr	r0, [pc, #44]	; (80172e8 <ip4_reass+0x2c0>)
 80172ba:	f001 fc69 	bl	8018b90 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80172be:	4b06      	ldr	r3, [pc, #24]	; (80172d8 <ip4_reass+0x2b0>)
 80172c0:	881a      	ldrh	r2, [r3, #0]
 80172c2:	8c3b      	ldrh	r3, [r7, #32]
 80172c4:	1ad3      	subs	r3, r2, r3
 80172c6:	b29a      	uxth	r2, r3
 80172c8:	4b03      	ldr	r3, [pc, #12]	; (80172d8 <ip4_reass+0x2b0>)
 80172ca:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	e038      	b.n	8017342 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80172d0:	2300      	movs	r3, #0
 80172d2:	e036      	b.n	8017342 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80172d4:	bf00      	nop
 80172d6:	e00a      	b.n	80172ee <ip4_reass+0x2c6>
 80172d8:	20077a90 	.word	0x20077a90
 80172dc:	20077a8c 	.word	0x20077a8c
 80172e0:	0801ff20 	.word	0x0801ff20
 80172e4:	08020090 	.word	0x08020090
 80172e8:	0801ff68 	.word	0x0801ff68
    goto nullreturn_ipr;
 80172ec:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80172ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d106      	bne.n	8017302 <ip4_reass+0x2da>
 80172f4:	4b15      	ldr	r3, [pc, #84]	; (801734c <ip4_reass+0x324>)
 80172f6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80172fa:	4915      	ldr	r1, [pc, #84]	; (8017350 <ip4_reass+0x328>)
 80172fc:	4815      	ldr	r0, [pc, #84]	; (8017354 <ip4_reass+0x32c>)
 80172fe:	f001 fc47 	bl	8018b90 <iprintf>
  if (ipr->p == NULL) {
 8017302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017304:	685b      	ldr	r3, [r3, #4]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d116      	bne.n	8017338 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801730a:	4b13      	ldr	r3, [pc, #76]	; (8017358 <ip4_reass+0x330>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017310:	429a      	cmp	r2, r3
 8017312:	d006      	beq.n	8017322 <ip4_reass+0x2fa>
 8017314:	4b0d      	ldr	r3, [pc, #52]	; (801734c <ip4_reass+0x324>)
 8017316:	f240 22ab 	movw	r2, #683	; 0x2ab
 801731a:	4910      	ldr	r1, [pc, #64]	; (801735c <ip4_reass+0x334>)
 801731c:	480d      	ldr	r0, [pc, #52]	; (8017354 <ip4_reass+0x32c>)
 801731e:	f001 fc37 	bl	8018b90 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017322:	2100      	movs	r1, #0
 8017324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017326:	f7ff fce7 	bl	8016cf8 <ip_reass_dequeue_datagram>
 801732a:	e006      	b.n	801733a <ip4_reass+0x312>
    goto nullreturn;
 801732c:	bf00      	nop
 801732e:	e004      	b.n	801733a <ip4_reass+0x312>
    goto nullreturn;
 8017330:	bf00      	nop
 8017332:	e002      	b.n	801733a <ip4_reass+0x312>
      goto nullreturn;
 8017334:	bf00      	nop
 8017336:	e000      	b.n	801733a <ip4_reass+0x312>
  }

nullreturn:
 8017338:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	f7f6 fcb0 	bl	800dca0 <pbuf_free>
  return NULL;
 8017340:	2300      	movs	r3, #0
}
 8017342:	4618      	mov	r0, r3
 8017344:	3738      	adds	r7, #56	; 0x38
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}
 801734a:	bf00      	nop
 801734c:	0801ff20 	.word	0x0801ff20
 8017350:	080200ac 	.word	0x080200ac
 8017354:	0801ff68 	.word	0x0801ff68
 8017358:	20077a8c 	.word	0x20077a8c
 801735c:	080200b8 	.word	0x080200b8

08017360 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017360:	b580      	push	{r7, lr}
 8017362:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017364:	2005      	movs	r0, #5
 8017366:	f7f5 fd81 	bl	800ce6c <memp_malloc>
 801736a:	4603      	mov	r3, r0
}
 801736c:	4618      	mov	r0, r3
 801736e:	bd80      	pop	{r7, pc}

08017370 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b082      	sub	sp, #8
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d106      	bne.n	801738c <ip_frag_free_pbuf_custom_ref+0x1c>
 801737e:	4b07      	ldr	r3, [pc, #28]	; (801739c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017380:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017384:	4906      	ldr	r1, [pc, #24]	; (80173a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017386:	4807      	ldr	r0, [pc, #28]	; (80173a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017388:	f001 fc02 	bl	8018b90 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801738c:	6879      	ldr	r1, [r7, #4]
 801738e:	2005      	movs	r0, #5
 8017390:	f7f5 fde2 	bl	800cf58 <memp_free>
}
 8017394:	bf00      	nop
 8017396:	3708      	adds	r7, #8
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}
 801739c:	0801ff20 	.word	0x0801ff20
 80173a0:	080200d8 	.word	0x080200d8
 80173a4:	0801ff68 	.word	0x0801ff68

080173a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b084      	sub	sp, #16
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d106      	bne.n	80173c8 <ipfrag_free_pbuf_custom+0x20>
 80173ba:	4b11      	ldr	r3, [pc, #68]	; (8017400 <ipfrag_free_pbuf_custom+0x58>)
 80173bc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80173c0:	4910      	ldr	r1, [pc, #64]	; (8017404 <ipfrag_free_pbuf_custom+0x5c>)
 80173c2:	4811      	ldr	r0, [pc, #68]	; (8017408 <ipfrag_free_pbuf_custom+0x60>)
 80173c4:	f001 fbe4 	bl	8018b90 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80173c8:	68fa      	ldr	r2, [r7, #12]
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	429a      	cmp	r2, r3
 80173ce:	d006      	beq.n	80173de <ipfrag_free_pbuf_custom+0x36>
 80173d0:	4b0b      	ldr	r3, [pc, #44]	; (8017400 <ipfrag_free_pbuf_custom+0x58>)
 80173d2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80173d6:	490d      	ldr	r1, [pc, #52]	; (801740c <ipfrag_free_pbuf_custom+0x64>)
 80173d8:	480b      	ldr	r0, [pc, #44]	; (8017408 <ipfrag_free_pbuf_custom+0x60>)
 80173da:	f001 fbd9 	bl	8018b90 <iprintf>
  if (pcr->original != NULL) {
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	695b      	ldr	r3, [r3, #20]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d004      	beq.n	80173f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	695b      	ldr	r3, [r3, #20]
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7f6 fc58 	bl	800dca0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80173f0:	68f8      	ldr	r0, [r7, #12]
 80173f2:	f7ff ffbd 	bl	8017370 <ip_frag_free_pbuf_custom_ref>
}
 80173f6:	bf00      	nop
 80173f8:	3710      	adds	r7, #16
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}
 80173fe:	bf00      	nop
 8017400:	0801ff20 	.word	0x0801ff20
 8017404:	080200e4 	.word	0x080200e4
 8017408:	0801ff68 	.word	0x0801ff68
 801740c:	080200f0 	.word	0x080200f0

08017410 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b094      	sub	sp, #80	; 0x50
 8017414:	af02      	add	r7, sp, #8
 8017416:	60f8      	str	r0, [r7, #12]
 8017418:	60b9      	str	r1, [r7, #8]
 801741a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801741c:	2300      	movs	r3, #0
 801741e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017426:	3b14      	subs	r3, #20
 8017428:	2b00      	cmp	r3, #0
 801742a:	da00      	bge.n	801742e <ip4_frag+0x1e>
 801742c:	3307      	adds	r3, #7
 801742e:	10db      	asrs	r3, r3, #3
 8017430:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017432:	2314      	movs	r3, #20
 8017434:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	685b      	ldr	r3, [r3, #4]
 801743a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801743c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801743e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017442:	781b      	ldrb	r3, [r3, #0]
 8017444:	f003 030f 	and.w	r3, r3, #15
 8017448:	b2db      	uxtb	r3, r3
 801744a:	009b      	lsls	r3, r3, #2
 801744c:	b2db      	uxtb	r3, r3
 801744e:	2b14      	cmp	r3, #20
 8017450:	d002      	beq.n	8017458 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017452:	f06f 0305 	mvn.w	r3, #5
 8017456:	e110      	b.n	801767a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	895b      	ldrh	r3, [r3, #10]
 801745c:	2b13      	cmp	r3, #19
 801745e:	d809      	bhi.n	8017474 <ip4_frag+0x64>
 8017460:	4b88      	ldr	r3, [pc, #544]	; (8017684 <ip4_frag+0x274>)
 8017462:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017466:	4988      	ldr	r1, [pc, #544]	; (8017688 <ip4_frag+0x278>)
 8017468:	4888      	ldr	r0, [pc, #544]	; (801768c <ip4_frag+0x27c>)
 801746a:	f001 fb91 	bl	8018b90 <iprintf>
 801746e:	f06f 0305 	mvn.w	r3, #5
 8017472:	e102      	b.n	801767a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017476:	88db      	ldrh	r3, [r3, #6]
 8017478:	b29b      	uxth	r3, r3
 801747a:	4618      	mov	r0, r3
 801747c:	f7f5 f81e 	bl	800c4bc <lwip_htons>
 8017480:	4603      	mov	r3, r0
 8017482:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017484:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017486:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801748a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801748e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017494:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	891b      	ldrh	r3, [r3, #8]
 801749a:	3b14      	subs	r3, #20
 801749c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80174a0:	e0e1      	b.n	8017666 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80174a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80174a4:	00db      	lsls	r3, r3, #3
 80174a6:	b29b      	uxth	r3, r3
 80174a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80174ac:	4293      	cmp	r3, r2
 80174ae:	bf28      	it	cs
 80174b0:	4613      	movcs	r3, r2
 80174b2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80174b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80174b8:	2114      	movs	r1, #20
 80174ba:	200e      	movs	r0, #14
 80174bc:	f7f6 f90c 	bl	800d6d8 <pbuf_alloc>
 80174c0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80174c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	f000 80d5 	beq.w	8017674 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80174ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174cc:	895b      	ldrh	r3, [r3, #10]
 80174ce:	2b13      	cmp	r3, #19
 80174d0:	d806      	bhi.n	80174e0 <ip4_frag+0xd0>
 80174d2:	4b6c      	ldr	r3, [pc, #432]	; (8017684 <ip4_frag+0x274>)
 80174d4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80174d8:	496d      	ldr	r1, [pc, #436]	; (8017690 <ip4_frag+0x280>)
 80174da:	486c      	ldr	r0, [pc, #432]	; (801768c <ip4_frag+0x27c>)
 80174dc:	f001 fb58 	bl	8018b90 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80174e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174e2:	685b      	ldr	r3, [r3, #4]
 80174e4:	2214      	movs	r2, #20
 80174e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80174e8:	4618      	mov	r0, r3
 80174ea:	f001 fcd8 	bl	8018e9e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80174ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174f0:	685b      	ldr	r3, [r3, #4]
 80174f2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80174f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80174f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80174fa:	e064      	b.n	80175c6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	895a      	ldrh	r2, [r3, #10]
 8017500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017502:	1ad3      	subs	r3, r2, r3
 8017504:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	895b      	ldrh	r3, [r3, #10]
 801750a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801750c:	429a      	cmp	r2, r3
 801750e:	d906      	bls.n	801751e <ip4_frag+0x10e>
 8017510:	4b5c      	ldr	r3, [pc, #368]	; (8017684 <ip4_frag+0x274>)
 8017512:	f240 322d 	movw	r2, #813	; 0x32d
 8017516:	495f      	ldr	r1, [pc, #380]	; (8017694 <ip4_frag+0x284>)
 8017518:	485c      	ldr	r0, [pc, #368]	; (801768c <ip4_frag+0x27c>)
 801751a:	f001 fb39 	bl	8018b90 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801751e:	8bfa      	ldrh	r2, [r7, #30]
 8017520:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017524:	4293      	cmp	r3, r2
 8017526:	bf28      	it	cs
 8017528:	4613      	movcs	r3, r2
 801752a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801752e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017532:	2b00      	cmp	r3, #0
 8017534:	d105      	bne.n	8017542 <ip4_frag+0x132>
        poff = 0;
 8017536:	2300      	movs	r3, #0
 8017538:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	60fb      	str	r3, [r7, #12]
        continue;
 8017540:	e041      	b.n	80175c6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017542:	f7ff ff0d 	bl	8017360 <ip_frag_alloc_pbuf_custom_ref>
 8017546:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017548:	69bb      	ldr	r3, [r7, #24]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d103      	bne.n	8017556 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801754e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017550:	f7f6 fba6 	bl	800dca0 <pbuf_free>
        goto memerr;
 8017554:	e08f      	b.n	8017676 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017556:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801755c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801755e:	4413      	add	r3, r2
 8017560:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017564:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017568:	9201      	str	r2, [sp, #4]
 801756a:	9300      	str	r3, [sp, #0]
 801756c:	4603      	mov	r3, r0
 801756e:	2241      	movs	r2, #65	; 0x41
 8017570:	2000      	movs	r0, #0
 8017572:	f7f6 f9db 	bl	800d92c <pbuf_alloced_custom>
 8017576:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017578:	697b      	ldr	r3, [r7, #20]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d106      	bne.n	801758c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801757e:	69b8      	ldr	r0, [r7, #24]
 8017580:	f7ff fef6 	bl	8017370 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017586:	f7f6 fb8b 	bl	800dca0 <pbuf_free>
        goto memerr;
 801758a:	e074      	b.n	8017676 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801758c:	68f8      	ldr	r0, [r7, #12]
 801758e:	f7f6 fc2d 	bl	800ddec <pbuf_ref>
      pcr->original = p;
 8017592:	69bb      	ldr	r3, [r7, #24]
 8017594:	68fa      	ldr	r2, [r7, #12]
 8017596:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017598:	69bb      	ldr	r3, [r7, #24]
 801759a:	4a3f      	ldr	r2, [pc, #252]	; (8017698 <ip4_frag+0x288>)
 801759c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801759e:	6979      	ldr	r1, [r7, #20]
 80175a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80175a2:	f7f6 fc4b 	bl	800de3c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80175a6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80175aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80175ae:	1ad3      	subs	r3, r2, r3
 80175b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80175b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d004      	beq.n	80175c6 <ip4_frag+0x1b6>
        poff = 0;
 80175bc:	2300      	movs	r3, #0
 80175be:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80175c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d196      	bne.n	80174fc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80175ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80175d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80175d4:	4413      	add	r3, r2
 80175d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80175d8:	68bb      	ldr	r3, [r7, #8]
 80175da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80175dc:	f1a3 0213 	sub.w	r2, r3, #19
 80175e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80175e4:	429a      	cmp	r2, r3
 80175e6:	bfcc      	ite	gt
 80175e8:	2301      	movgt	r3, #1
 80175ea:	2300      	movle	r3, #0
 80175ec:	b2db      	uxtb	r3, r3
 80175ee:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80175f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80175f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80175f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80175fa:	6a3b      	ldr	r3, [r7, #32]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d002      	beq.n	8017606 <ip4_frag+0x1f6>
 8017600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017602:	2b00      	cmp	r3, #0
 8017604:	d003      	beq.n	801760e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017606:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017608:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801760c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801760e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017610:	4618      	mov	r0, r3
 8017612:	f7f4 ff53 	bl	800c4bc <lwip_htons>
 8017616:	4603      	mov	r3, r0
 8017618:	461a      	mov	r2, r3
 801761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801761c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801761e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017620:	3314      	adds	r3, #20
 8017622:	b29b      	uxth	r3, r3
 8017624:	4618      	mov	r0, r3
 8017626:	f7f4 ff49 	bl	800c4bc <lwip_htons>
 801762a:	4603      	mov	r3, r0
 801762c:	461a      	mov	r2, r3
 801762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017630:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017634:	2200      	movs	r2, #0
 8017636:	729a      	strb	r2, [r3, #10]
 8017638:	2200      	movs	r2, #0
 801763a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801763c:	68bb      	ldr	r3, [r7, #8]
 801763e:	695b      	ldr	r3, [r3, #20]
 8017640:	687a      	ldr	r2, [r7, #4]
 8017642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017644:	68b8      	ldr	r0, [r7, #8]
 8017646:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801764a:	f7f6 fb29 	bl	800dca0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801764e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017652:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017654:	1ad3      	subs	r3, r2, r3
 8017656:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801765a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801765e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017660:	4413      	add	r3, r2
 8017662:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801766a:	2b00      	cmp	r3, #0
 801766c:	f47f af19 	bne.w	80174a2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017670:	2300      	movs	r3, #0
 8017672:	e002      	b.n	801767a <ip4_frag+0x26a>
      goto memerr;
 8017674:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017676:	f04f 33ff 	mov.w	r3, #4294967295
}
 801767a:	4618      	mov	r0, r3
 801767c:	3748      	adds	r7, #72	; 0x48
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}
 8017682:	bf00      	nop
 8017684:	0801ff20 	.word	0x0801ff20
 8017688:	080200fc 	.word	0x080200fc
 801768c:	0801ff68 	.word	0x0801ff68
 8017690:	08020118 	.word	0x08020118
 8017694:	08020138 	.word	0x08020138
 8017698:	080173a9 	.word	0x080173a9

0801769c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b086      	sub	sp, #24
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
 80176a4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80176a6:	230e      	movs	r3, #14
 80176a8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	895b      	ldrh	r3, [r3, #10]
 80176ae:	2b0e      	cmp	r3, #14
 80176b0:	d96e      	bls.n	8017790 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	7bdb      	ldrb	r3, [r3, #15]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d106      	bne.n	80176c8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80176c0:	3301      	adds	r3, #1
 80176c2:	b2da      	uxtb	r2, r3
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	685b      	ldr	r3, [r3, #4]
 80176cc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80176ce:	693b      	ldr	r3, [r7, #16]
 80176d0:	7b1a      	ldrb	r2, [r3, #12]
 80176d2:	7b5b      	ldrb	r3, [r3, #13]
 80176d4:	021b      	lsls	r3, r3, #8
 80176d6:	4313      	orrs	r3, r2
 80176d8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80176da:	693b      	ldr	r3, [r7, #16]
 80176dc:	781b      	ldrb	r3, [r3, #0]
 80176de:	f003 0301 	and.w	r3, r3, #1
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d023      	beq.n	801772e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80176e6:	693b      	ldr	r3, [r7, #16]
 80176e8:	781b      	ldrb	r3, [r3, #0]
 80176ea:	2b01      	cmp	r3, #1
 80176ec:	d10f      	bne.n	801770e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80176ee:	693b      	ldr	r3, [r7, #16]
 80176f0:	785b      	ldrb	r3, [r3, #1]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d11b      	bne.n	801772e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80176f6:	693b      	ldr	r3, [r7, #16]
 80176f8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80176fa:	2b5e      	cmp	r3, #94	; 0x5e
 80176fc:	d117      	bne.n	801772e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	7b5b      	ldrb	r3, [r3, #13]
 8017702:	f043 0310 	orr.w	r3, r3, #16
 8017706:	b2da      	uxtb	r2, r3
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	735a      	strb	r2, [r3, #13]
 801770c:	e00f      	b.n	801772e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801770e:	693b      	ldr	r3, [r7, #16]
 8017710:	2206      	movs	r2, #6
 8017712:	4928      	ldr	r1, [pc, #160]	; (80177b4 <ethernet_input+0x118>)
 8017714:	4618      	mov	r0, r3
 8017716:	f001 fab0 	bl	8018c7a <memcmp>
 801771a:	4603      	mov	r3, r0
 801771c:	2b00      	cmp	r3, #0
 801771e:	d106      	bne.n	801772e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	7b5b      	ldrb	r3, [r3, #13]
 8017724:	f043 0308 	orr.w	r3, r3, #8
 8017728:	b2da      	uxtb	r2, r3
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801772e:	89fb      	ldrh	r3, [r7, #14]
 8017730:	2b08      	cmp	r3, #8
 8017732:	d003      	beq.n	801773c <ethernet_input+0xa0>
 8017734:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017738:	d014      	beq.n	8017764 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801773a:	e032      	b.n	80177a2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017742:	f003 0308 	and.w	r3, r3, #8
 8017746:	2b00      	cmp	r3, #0
 8017748:	d024      	beq.n	8017794 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801774a:	8afb      	ldrh	r3, [r7, #22]
 801774c:	4619      	mov	r1, r3
 801774e:	6878      	ldr	r0, [r7, #4]
 8017750:	f7f6 fa20 	bl	800db94 <pbuf_remove_header>
 8017754:	4603      	mov	r3, r0
 8017756:	2b00      	cmp	r3, #0
 8017758:	d11e      	bne.n	8017798 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801775a:	6839      	ldr	r1, [r7, #0]
 801775c:	6878      	ldr	r0, [r7, #4]
 801775e:	f7fe fdf7 	bl	8016350 <ip4_input>
      break;
 8017762:	e013      	b.n	801778c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017764:	683b      	ldr	r3, [r7, #0]
 8017766:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801776a:	f003 0308 	and.w	r3, r3, #8
 801776e:	2b00      	cmp	r3, #0
 8017770:	d014      	beq.n	801779c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017772:	8afb      	ldrh	r3, [r7, #22]
 8017774:	4619      	mov	r1, r3
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f7f6 fa0c 	bl	800db94 <pbuf_remove_header>
 801777c:	4603      	mov	r3, r0
 801777e:	2b00      	cmp	r3, #0
 8017780:	d10e      	bne.n	80177a0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017782:	6839      	ldr	r1, [r7, #0]
 8017784:	6878      	ldr	r0, [r7, #4]
 8017786:	f7fd ff97 	bl	80156b8 <etharp_input>
      break;
 801778a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801778c:	2300      	movs	r3, #0
 801778e:	e00c      	b.n	80177aa <ethernet_input+0x10e>
    goto free_and_return;
 8017790:	bf00      	nop
 8017792:	e006      	b.n	80177a2 <ethernet_input+0x106>
        goto free_and_return;
 8017794:	bf00      	nop
 8017796:	e004      	b.n	80177a2 <ethernet_input+0x106>
        goto free_and_return;
 8017798:	bf00      	nop
 801779a:	e002      	b.n	80177a2 <ethernet_input+0x106>
        goto free_and_return;
 801779c:	bf00      	nop
 801779e:	e000      	b.n	80177a2 <ethernet_input+0x106>
        goto free_and_return;
 80177a0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f7f6 fa7c 	bl	800dca0 <pbuf_free>
  return ERR_OK;
 80177a8:	2300      	movs	r3, #0
}
 80177aa:	4618      	mov	r0, r3
 80177ac:	3718      	adds	r7, #24
 80177ae:	46bd      	mov	sp, r7
 80177b0:	bd80      	pop	{r7, pc}
 80177b2:	bf00      	nop
 80177b4:	0802035c 	.word	0x0802035c

080177b8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b086      	sub	sp, #24
 80177bc:	af00      	add	r7, sp, #0
 80177be:	60f8      	str	r0, [r7, #12]
 80177c0:	60b9      	str	r1, [r7, #8]
 80177c2:	607a      	str	r2, [r7, #4]
 80177c4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80177c6:	8c3b      	ldrh	r3, [r7, #32]
 80177c8:	4618      	mov	r0, r3
 80177ca:	f7f4 fe77 	bl	800c4bc <lwip_htons>
 80177ce:	4603      	mov	r3, r0
 80177d0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80177d2:	210e      	movs	r1, #14
 80177d4:	68b8      	ldr	r0, [r7, #8]
 80177d6:	f7f6 f9cd 	bl	800db74 <pbuf_add_header>
 80177da:	4603      	mov	r3, r0
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d125      	bne.n	801782c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80177e0:	68bb      	ldr	r3, [r7, #8]
 80177e2:	685b      	ldr	r3, [r3, #4]
 80177e4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80177e6:	693b      	ldr	r3, [r7, #16]
 80177e8:	8afa      	ldrh	r2, [r7, #22]
 80177ea:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80177ec:	693b      	ldr	r3, [r7, #16]
 80177ee:	2206      	movs	r2, #6
 80177f0:	6839      	ldr	r1, [r7, #0]
 80177f2:	4618      	mov	r0, r3
 80177f4:	f001 fb53 	bl	8018e9e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80177f8:	693b      	ldr	r3, [r7, #16]
 80177fa:	3306      	adds	r3, #6
 80177fc:	2206      	movs	r2, #6
 80177fe:	6879      	ldr	r1, [r7, #4]
 8017800:	4618      	mov	r0, r3
 8017802:	f001 fb4c 	bl	8018e9e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801780c:	2b06      	cmp	r3, #6
 801780e:	d006      	beq.n	801781e <ethernet_output+0x66>
 8017810:	4b0a      	ldr	r3, [pc, #40]	; (801783c <ethernet_output+0x84>)
 8017812:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017816:	490a      	ldr	r1, [pc, #40]	; (8017840 <ethernet_output+0x88>)
 8017818:	480a      	ldr	r0, [pc, #40]	; (8017844 <ethernet_output+0x8c>)
 801781a:	f001 f9b9 	bl	8018b90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	699b      	ldr	r3, [r3, #24]
 8017822:	68b9      	ldr	r1, [r7, #8]
 8017824:	68f8      	ldr	r0, [r7, #12]
 8017826:	4798      	blx	r3
 8017828:	4603      	mov	r3, r0
 801782a:	e002      	b.n	8017832 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801782c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801782e:	f06f 0301 	mvn.w	r3, #1
}
 8017832:	4618      	mov	r0, r3
 8017834:	3718      	adds	r7, #24
 8017836:	46bd      	mov	sp, r7
 8017838:	bd80      	pop	{r7, pc}
 801783a:	bf00      	nop
 801783c:	08020148 	.word	0x08020148
 8017840:	08020180 	.word	0x08020180
 8017844:	080201b4 	.word	0x080201b4

08017848 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017848:	b580      	push	{r7, lr}
 801784a:	b086      	sub	sp, #24
 801784c:	af00      	add	r7, sp, #0
 801784e:	6078      	str	r0, [r7, #4]
 8017850:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017852:	683b      	ldr	r3, [r7, #0]
 8017854:	60bb      	str	r3, [r7, #8]
 8017856:	2304      	movs	r3, #4
 8017858:	60fb      	str	r3, [r7, #12]
 801785a:	2300      	movs	r3, #0
 801785c:	613b      	str	r3, [r7, #16]
 801785e:	2300      	movs	r3, #0
 8017860:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017862:	f107 0308 	add.w	r3, r7, #8
 8017866:	2100      	movs	r1, #0
 8017868:	4618      	mov	r0, r3
 801786a:	f7ef fad6 	bl	8006e1a <osMessageCreate>
 801786e:	4602      	mov	r2, r0
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d102      	bne.n	8017882 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801787c:	f04f 33ff 	mov.w	r3, #4294967295
 8017880:	e000      	b.n	8017884 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017882:	2300      	movs	r3, #0
}
 8017884:	4618      	mov	r0, r3
 8017886:	3718      	adds	r7, #24
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}

0801788c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b082      	sub	sp, #8
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	4618      	mov	r0, r3
 801789a:	f7ef fb9b 	bl	8006fd4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	4618      	mov	r0, r3
 80178a4:	f7ef fbac 	bl	8007000 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80178a8:	bf00      	nop
 80178aa:	3708      	adds	r7, #8
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}

080178b0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b084      	sub	sp, #16
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
 80178b8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	6839      	ldr	r1, [r7, #0]
 80178c0:	2200      	movs	r2, #0
 80178c2:	4618      	mov	r0, r3
 80178c4:	f7ef fad2 	bl	8006e6c <osMessagePut>
 80178c8:	4603      	mov	r3, r0
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d102      	bne.n	80178d4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80178ce:	2300      	movs	r3, #0
 80178d0:	73fb      	strb	r3, [r7, #15]
 80178d2:	e001      	b.n	80178d8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80178d4:	23ff      	movs	r3, #255	; 0xff
 80178d6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80178d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178dc:	4618      	mov	r0, r3
 80178de:	3710      	adds	r7, #16
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}

080178e4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b08c      	sub	sp, #48	; 0x30
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	61f8      	str	r0, [r7, #28]
 80178ec:	61b9      	str	r1, [r7, #24]
 80178ee:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80178f0:	f7ef f8be 	bl	8006a70 <osKernelSysTick>
 80178f4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80178f6:	697b      	ldr	r3, [r7, #20]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d017      	beq.n	801792c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80178fc:	69fb      	ldr	r3, [r7, #28]
 80178fe:	6819      	ldr	r1, [r3, #0]
 8017900:	f107 0320 	add.w	r3, r7, #32
 8017904:	697a      	ldr	r2, [r7, #20]
 8017906:	4618      	mov	r0, r3
 8017908:	f7ef faf0 	bl	8006eec <osMessageGet>

    if(event.status == osEventMessage)
 801790c:	6a3b      	ldr	r3, [r7, #32]
 801790e:	2b10      	cmp	r3, #16
 8017910:	d109      	bne.n	8017926 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017914:	461a      	mov	r2, r3
 8017916:	69bb      	ldr	r3, [r7, #24]
 8017918:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801791a:	f7ef f8a9 	bl	8006a70 <osKernelSysTick>
 801791e:	4602      	mov	r2, r0
 8017920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017922:	1ad3      	subs	r3, r2, r3
 8017924:	e019      	b.n	801795a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017926:	f04f 33ff 	mov.w	r3, #4294967295
 801792a:	e016      	b.n	801795a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801792c:	69fb      	ldr	r3, [r7, #28]
 801792e:	6819      	ldr	r1, [r3, #0]
 8017930:	463b      	mov	r3, r7
 8017932:	f04f 32ff 	mov.w	r2, #4294967295
 8017936:	4618      	mov	r0, r3
 8017938:	f7ef fad8 	bl	8006eec <osMessageGet>
 801793c:	f107 0320 	add.w	r3, r7, #32
 8017940:	463a      	mov	r2, r7
 8017942:	ca07      	ldmia	r2, {r0, r1, r2}
 8017944:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801794a:	461a      	mov	r2, r3
 801794c:	69bb      	ldr	r3, [r7, #24]
 801794e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017950:	f7ef f88e 	bl	8006a70 <osKernelSysTick>
 8017954:	4602      	mov	r2, r0
 8017956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017958:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801795a:	4618      	mov	r0, r3
 801795c:	3730      	adds	r7, #48	; 0x30
 801795e:	46bd      	mov	sp, r7
 8017960:	bd80      	pop	{r7, pc}

08017962 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017962:	b580      	push	{r7, lr}
 8017964:	b086      	sub	sp, #24
 8017966:	af00      	add	r7, sp, #0
 8017968:	6078      	str	r0, [r7, #4]
 801796a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	6819      	ldr	r1, [r3, #0]
 8017970:	f107 030c 	add.w	r3, r7, #12
 8017974:	2200      	movs	r2, #0
 8017976:	4618      	mov	r0, r3
 8017978:	f7ef fab8 	bl	8006eec <osMessageGet>

  if(event.status == osEventMessage)
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	2b10      	cmp	r3, #16
 8017980:	d105      	bne.n	801798e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017982:	693b      	ldr	r3, [r7, #16]
 8017984:	461a      	mov	r2, r3
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801798a:	2300      	movs	r3, #0
 801798c:	e001      	b.n	8017992 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801798e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017992:	4618      	mov	r0, r3
 8017994:	3718      	adds	r7, #24
 8017996:	46bd      	mov	sp, r7
 8017998:	bd80      	pop	{r7, pc}

0801799a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801799a:	b480      	push	{r7}
 801799c:	b083      	sub	sp, #12
 801799e:	af00      	add	r7, sp, #0
 80179a0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d101      	bne.n	80179ae <sys_mbox_valid+0x14>
    return 0;
 80179aa:	2300      	movs	r3, #0
 80179ac:	e000      	b.n	80179b0 <sys_mbox_valid+0x16>
  else
    return 1;
 80179ae:	2301      	movs	r3, #1
}
 80179b0:	4618      	mov	r0, r3
 80179b2:	370c      	adds	r7, #12
 80179b4:	46bd      	mov	sp, r7
 80179b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ba:	4770      	bx	lr

080179bc <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80179bc:	b480      	push	{r7}
 80179be:	b083      	sub	sp, #12
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	2200      	movs	r2, #0
 80179c8:	601a      	str	r2, [r3, #0]
}
 80179ca:	bf00      	nop
 80179cc:	370c      	adds	r7, #12
 80179ce:	46bd      	mov	sp, r7
 80179d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d4:	4770      	bx	lr

080179d6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80179d6:	b580      	push	{r7, lr}
 80179d8:	b084      	sub	sp, #16
 80179da:	af00      	add	r7, sp, #0
 80179dc:	6078      	str	r0, [r7, #4]
 80179de:	460b      	mov	r3, r1
 80179e0:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80179e2:	2300      	movs	r3, #0
 80179e4:	60bb      	str	r3, [r7, #8]
 80179e6:	2300      	movs	r3, #0
 80179e8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80179ea:	f107 0308 	add.w	r3, r7, #8
 80179ee:	2101      	movs	r1, #1
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7ef f949 	bl	8006c88 <osSemaphoreCreate>
 80179f6:	4602      	mov	r2, r0
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d102      	bne.n	8017a0a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017a04:	f04f 33ff 	mov.w	r3, #4294967295
 8017a08:	e009      	b.n	8017a1e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017a0a:	78fb      	ldrb	r3, [r7, #3]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d105      	bne.n	8017a1c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	2100      	movs	r1, #0
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7ef f968 	bl	8006cec <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017a1c:	2300      	movs	r3, #0
}
 8017a1e:	4618      	mov	r0, r3
 8017a20:	3710      	adds	r7, #16
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}

08017a26 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017a26:	b580      	push	{r7, lr}
 8017a28:	b084      	sub	sp, #16
 8017a2a:	af00      	add	r7, sp, #0
 8017a2c:	6078      	str	r0, [r7, #4]
 8017a2e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017a30:	f7ef f81e 	bl	8006a70 <osKernelSysTick>
 8017a34:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017a36:	683b      	ldr	r3, [r7, #0]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d011      	beq.n	8017a60 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	6839      	ldr	r1, [r7, #0]
 8017a42:	4618      	mov	r0, r3
 8017a44:	f7ef f952 	bl	8006cec <osSemaphoreWait>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d105      	bne.n	8017a5a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017a4e:	f7ef f80f 	bl	8006a70 <osKernelSysTick>
 8017a52:	4602      	mov	r2, r0
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	1ad3      	subs	r3, r2, r3
 8017a58:	e012      	b.n	8017a80 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8017a5e:	e00f      	b.n	8017a80 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017a60:	bf00      	nop
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	f04f 31ff 	mov.w	r1, #4294967295
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f7ef f93e 	bl	8006cec <osSemaphoreWait>
 8017a70:	4603      	mov	r3, r0
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d1f5      	bne.n	8017a62 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017a76:	f7ee fffb 	bl	8006a70 <osKernelSysTick>
 8017a7a:	4602      	mov	r2, r0
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	3710      	adds	r7, #16
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}

08017a88 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b082      	sub	sp, #8
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	4618      	mov	r0, r3
 8017a96:	f7ef f977 	bl	8006d88 <osSemaphoreRelease>
}
 8017a9a:	bf00      	nop
 8017a9c:	3708      	adds	r7, #8
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	bd80      	pop	{r7, pc}

08017aa2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017aa2:	b580      	push	{r7, lr}
 8017aa4:	b082      	sub	sp, #8
 8017aa6:	af00      	add	r7, sp, #0
 8017aa8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	4618      	mov	r0, r3
 8017ab0:	f7ef f9a0 	bl	8006df4 <osSemaphoreDelete>
}
 8017ab4:	bf00      	nop
 8017ab6:	3708      	adds	r7, #8
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	bd80      	pop	{r7, pc}

08017abc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017abc:	b480      	push	{r7}
 8017abe:	b083      	sub	sp, #12
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d101      	bne.n	8017ad0 <sys_sem_valid+0x14>
    return 0;
 8017acc:	2300      	movs	r3, #0
 8017ace:	e000      	b.n	8017ad2 <sys_sem_valid+0x16>
  else
    return 1;
 8017ad0:	2301      	movs	r3, #1
}
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	370c      	adds	r7, #12
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017adc:	4770      	bx	lr

08017ade <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017ade:	b480      	push	{r7}
 8017ae0:	b083      	sub	sp, #12
 8017ae2:	af00      	add	r7, sp, #0
 8017ae4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	2200      	movs	r2, #0
 8017aea:	601a      	str	r2, [r3, #0]
}
 8017aec:	bf00      	nop
 8017aee:	370c      	adds	r7, #12
 8017af0:	46bd      	mov	sp, r7
 8017af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af6:	4770      	bx	lr

08017af8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017afc:	4803      	ldr	r0, [pc, #12]	; (8017b0c <sys_init+0x14>)
 8017afe:	f7ef f827 	bl	8006b50 <osMutexCreate>
 8017b02:	4603      	mov	r3, r0
 8017b04:	4a02      	ldr	r2, [pc, #8]	; (8017b10 <sys_init+0x18>)
 8017b06:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017b08:	bf00      	nop
 8017b0a:	bd80      	pop	{r7, pc}
 8017b0c:	0802036c 	.word	0x0802036c
 8017b10:	20077a94 	.word	0x20077a94

08017b14 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b084      	sub	sp, #16
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	60bb      	str	r3, [r7, #8]
 8017b20:	2300      	movs	r3, #0
 8017b22:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017b24:	f107 0308 	add.w	r3, r7, #8
 8017b28:	4618      	mov	r0, r3
 8017b2a:	f7ef f811 	bl	8006b50 <osMutexCreate>
 8017b2e:	4602      	mov	r2, r0
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d102      	bne.n	8017b42 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b40:	e000      	b.n	8017b44 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017b42:	2300      	movs	r3, #0
}
 8017b44:	4618      	mov	r0, r3
 8017b46:	3710      	adds	r7, #16
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	bd80      	pop	{r7, pc}

08017b4c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b082      	sub	sp, #8
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	f04f 31ff 	mov.w	r1, #4294967295
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f7ef f80f 	bl	8006b80 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017b62:	bf00      	nop
 8017b64:	3708      	adds	r7, #8
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}

08017b6a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017b6a:	b580      	push	{r7, lr}
 8017b6c:	b082      	sub	sp, #8
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	4618      	mov	r0, r3
 8017b78:	f7ef f850 	bl	8006c1c <osMutexRelease>
}
 8017b7c:	bf00      	nop
 8017b7e:	3708      	adds	r7, #8
 8017b80:	46bd      	mov	sp, r7
 8017b82:	bd80      	pop	{r7, pc}

08017b84 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b08c      	sub	sp, #48	; 0x30
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	60f8      	str	r0, [r7, #12]
 8017b8c:	60b9      	str	r1, [r7, #8]
 8017b8e:	607a      	str	r2, [r7, #4]
 8017b90:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017b92:	f107 0314 	add.w	r3, r7, #20
 8017b96:	2200      	movs	r2, #0
 8017b98:	601a      	str	r2, [r3, #0]
 8017b9a:	605a      	str	r2, [r3, #4]
 8017b9c:	609a      	str	r2, [r3, #8]
 8017b9e:	60da      	str	r2, [r3, #12]
 8017ba0:	611a      	str	r2, [r3, #16]
 8017ba2:	615a      	str	r2, [r3, #20]
 8017ba4:	619a      	str	r2, [r3, #24]
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	617b      	str	r3, [r7, #20]
 8017baa:	68bb      	ldr	r3, [r7, #8]
 8017bac:	61bb      	str	r3, [r7, #24]
 8017bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bb0:	b21b      	sxth	r3, r3
 8017bb2:	83bb      	strh	r3, [r7, #28]
 8017bb4:	683b      	ldr	r3, [r7, #0]
 8017bb6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017bb8:	f107 0314 	add.w	r3, r7, #20
 8017bbc:	6879      	ldr	r1, [r7, #4]
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f7ee ff66 	bl	8006a90 <osThreadCreate>
 8017bc4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	3730      	adds	r7, #48	; 0x30
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}
	...

08017bd0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017bd4:	4b04      	ldr	r3, [pc, #16]	; (8017be8 <sys_arch_protect+0x18>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f7ee ffcf 	bl	8006b80 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017be2:	2301      	movs	r3, #1
}
 8017be4:	4618      	mov	r0, r3
 8017be6:	bd80      	pop	{r7, pc}
 8017be8:	20077a94 	.word	0x20077a94

08017bec <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b082      	sub	sp, #8
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017bf4:	4b04      	ldr	r3, [pc, #16]	; (8017c08 <sys_arch_unprotect+0x1c>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f7ef f80f 	bl	8006c1c <osMutexRelease>
}
 8017bfe:	bf00      	nop
 8017c00:	3708      	adds	r7, #8
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}
 8017c06:	bf00      	nop
 8017c08:	20077a94 	.word	0x20077a94

08017c0c <rand>:
 8017c0c:	4b16      	ldr	r3, [pc, #88]	; (8017c68 <rand+0x5c>)
 8017c0e:	b510      	push	{r4, lr}
 8017c10:	681c      	ldr	r4, [r3, #0]
 8017c12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c14:	b9b3      	cbnz	r3, 8017c44 <rand+0x38>
 8017c16:	2018      	movs	r0, #24
 8017c18:	f001 ffb6 	bl	8019b88 <malloc>
 8017c1c:	4602      	mov	r2, r0
 8017c1e:	6320      	str	r0, [r4, #48]	; 0x30
 8017c20:	b920      	cbnz	r0, 8017c2c <rand+0x20>
 8017c22:	4b12      	ldr	r3, [pc, #72]	; (8017c6c <rand+0x60>)
 8017c24:	4812      	ldr	r0, [pc, #72]	; (8017c70 <rand+0x64>)
 8017c26:	2152      	movs	r1, #82	; 0x52
 8017c28:	f001 f94e 	bl	8018ec8 <__assert_func>
 8017c2c:	4911      	ldr	r1, [pc, #68]	; (8017c74 <rand+0x68>)
 8017c2e:	4b12      	ldr	r3, [pc, #72]	; (8017c78 <rand+0x6c>)
 8017c30:	e9c0 1300 	strd	r1, r3, [r0]
 8017c34:	4b11      	ldr	r3, [pc, #68]	; (8017c7c <rand+0x70>)
 8017c36:	6083      	str	r3, [r0, #8]
 8017c38:	230b      	movs	r3, #11
 8017c3a:	8183      	strh	r3, [r0, #12]
 8017c3c:	2100      	movs	r1, #0
 8017c3e:	2001      	movs	r0, #1
 8017c40:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017c44:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017c46:	480e      	ldr	r0, [pc, #56]	; (8017c80 <rand+0x74>)
 8017c48:	690b      	ldr	r3, [r1, #16]
 8017c4a:	694c      	ldr	r4, [r1, #20]
 8017c4c:	4a0d      	ldr	r2, [pc, #52]	; (8017c84 <rand+0x78>)
 8017c4e:	4358      	muls	r0, r3
 8017c50:	fb02 0004 	mla	r0, r2, r4, r0
 8017c54:	fba3 3202 	umull	r3, r2, r3, r2
 8017c58:	3301      	adds	r3, #1
 8017c5a:	eb40 0002 	adc.w	r0, r0, r2
 8017c5e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017c62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017c66:	bd10      	pop	{r4, pc}
 8017c68:	20000088 	.word	0x20000088
 8017c6c:	08020374 	.word	0x08020374
 8017c70:	0802038b 	.word	0x0802038b
 8017c74:	abcd330e 	.word	0xabcd330e
 8017c78:	e66d1234 	.word	0xe66d1234
 8017c7c:	0005deec 	.word	0x0005deec
 8017c80:	5851f42d 	.word	0x5851f42d
 8017c84:	4c957f2d 	.word	0x4c957f2d

08017c88 <_strtol_l.constprop.0>:
 8017c88:	2b01      	cmp	r3, #1
 8017c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c8e:	d001      	beq.n	8017c94 <_strtol_l.constprop.0+0xc>
 8017c90:	2b24      	cmp	r3, #36	; 0x24
 8017c92:	d906      	bls.n	8017ca2 <_strtol_l.constprop.0+0x1a>
 8017c94:	f001 f8d6 	bl	8018e44 <__errno>
 8017c98:	2316      	movs	r3, #22
 8017c9a:	6003      	str	r3, [r0, #0]
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ca2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017d88 <_strtol_l.constprop.0+0x100>
 8017ca6:	460d      	mov	r5, r1
 8017ca8:	462e      	mov	r6, r5
 8017caa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017cae:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017cb2:	f017 0708 	ands.w	r7, r7, #8
 8017cb6:	d1f7      	bne.n	8017ca8 <_strtol_l.constprop.0+0x20>
 8017cb8:	2c2d      	cmp	r4, #45	; 0x2d
 8017cba:	d132      	bne.n	8017d22 <_strtol_l.constprop.0+0x9a>
 8017cbc:	782c      	ldrb	r4, [r5, #0]
 8017cbe:	2701      	movs	r7, #1
 8017cc0:	1cb5      	adds	r5, r6, #2
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d05b      	beq.n	8017d7e <_strtol_l.constprop.0+0xf6>
 8017cc6:	2b10      	cmp	r3, #16
 8017cc8:	d109      	bne.n	8017cde <_strtol_l.constprop.0+0x56>
 8017cca:	2c30      	cmp	r4, #48	; 0x30
 8017ccc:	d107      	bne.n	8017cde <_strtol_l.constprop.0+0x56>
 8017cce:	782c      	ldrb	r4, [r5, #0]
 8017cd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017cd4:	2c58      	cmp	r4, #88	; 0x58
 8017cd6:	d14d      	bne.n	8017d74 <_strtol_l.constprop.0+0xec>
 8017cd8:	786c      	ldrb	r4, [r5, #1]
 8017cda:	2310      	movs	r3, #16
 8017cdc:	3502      	adds	r5, #2
 8017cde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017ce2:	f108 38ff 	add.w	r8, r8, #4294967295
 8017ce6:	f04f 0e00 	mov.w	lr, #0
 8017cea:	fbb8 f9f3 	udiv	r9, r8, r3
 8017cee:	4676      	mov	r6, lr
 8017cf0:	fb03 8a19 	mls	sl, r3, r9, r8
 8017cf4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017cf8:	f1bc 0f09 	cmp.w	ip, #9
 8017cfc:	d816      	bhi.n	8017d2c <_strtol_l.constprop.0+0xa4>
 8017cfe:	4664      	mov	r4, ip
 8017d00:	42a3      	cmp	r3, r4
 8017d02:	dd24      	ble.n	8017d4e <_strtol_l.constprop.0+0xc6>
 8017d04:	f1be 3fff 	cmp.w	lr, #4294967295
 8017d08:	d008      	beq.n	8017d1c <_strtol_l.constprop.0+0x94>
 8017d0a:	45b1      	cmp	r9, r6
 8017d0c:	d31c      	bcc.n	8017d48 <_strtol_l.constprop.0+0xc0>
 8017d0e:	d101      	bne.n	8017d14 <_strtol_l.constprop.0+0x8c>
 8017d10:	45a2      	cmp	sl, r4
 8017d12:	db19      	blt.n	8017d48 <_strtol_l.constprop.0+0xc0>
 8017d14:	fb06 4603 	mla	r6, r6, r3, r4
 8017d18:	f04f 0e01 	mov.w	lr, #1
 8017d1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d20:	e7e8      	b.n	8017cf4 <_strtol_l.constprop.0+0x6c>
 8017d22:	2c2b      	cmp	r4, #43	; 0x2b
 8017d24:	bf04      	itt	eq
 8017d26:	782c      	ldrbeq	r4, [r5, #0]
 8017d28:	1cb5      	addeq	r5, r6, #2
 8017d2a:	e7ca      	b.n	8017cc2 <_strtol_l.constprop.0+0x3a>
 8017d2c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017d30:	f1bc 0f19 	cmp.w	ip, #25
 8017d34:	d801      	bhi.n	8017d3a <_strtol_l.constprop.0+0xb2>
 8017d36:	3c37      	subs	r4, #55	; 0x37
 8017d38:	e7e2      	b.n	8017d00 <_strtol_l.constprop.0+0x78>
 8017d3a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017d3e:	f1bc 0f19 	cmp.w	ip, #25
 8017d42:	d804      	bhi.n	8017d4e <_strtol_l.constprop.0+0xc6>
 8017d44:	3c57      	subs	r4, #87	; 0x57
 8017d46:	e7db      	b.n	8017d00 <_strtol_l.constprop.0+0x78>
 8017d48:	f04f 3eff 	mov.w	lr, #4294967295
 8017d4c:	e7e6      	b.n	8017d1c <_strtol_l.constprop.0+0x94>
 8017d4e:	f1be 3fff 	cmp.w	lr, #4294967295
 8017d52:	d105      	bne.n	8017d60 <_strtol_l.constprop.0+0xd8>
 8017d54:	2322      	movs	r3, #34	; 0x22
 8017d56:	6003      	str	r3, [r0, #0]
 8017d58:	4646      	mov	r6, r8
 8017d5a:	b942      	cbnz	r2, 8017d6e <_strtol_l.constprop.0+0xe6>
 8017d5c:	4630      	mov	r0, r6
 8017d5e:	e79e      	b.n	8017c9e <_strtol_l.constprop.0+0x16>
 8017d60:	b107      	cbz	r7, 8017d64 <_strtol_l.constprop.0+0xdc>
 8017d62:	4276      	negs	r6, r6
 8017d64:	2a00      	cmp	r2, #0
 8017d66:	d0f9      	beq.n	8017d5c <_strtol_l.constprop.0+0xd4>
 8017d68:	f1be 0f00 	cmp.w	lr, #0
 8017d6c:	d000      	beq.n	8017d70 <_strtol_l.constprop.0+0xe8>
 8017d6e:	1e69      	subs	r1, r5, #1
 8017d70:	6011      	str	r1, [r2, #0]
 8017d72:	e7f3      	b.n	8017d5c <_strtol_l.constprop.0+0xd4>
 8017d74:	2430      	movs	r4, #48	; 0x30
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d1b1      	bne.n	8017cde <_strtol_l.constprop.0+0x56>
 8017d7a:	2308      	movs	r3, #8
 8017d7c:	e7af      	b.n	8017cde <_strtol_l.constprop.0+0x56>
 8017d7e:	2c30      	cmp	r4, #48	; 0x30
 8017d80:	d0a5      	beq.n	8017cce <_strtol_l.constprop.0+0x46>
 8017d82:	230a      	movs	r3, #10
 8017d84:	e7ab      	b.n	8017cde <_strtol_l.constprop.0+0x56>
 8017d86:	bf00      	nop
 8017d88:	080203e4 	.word	0x080203e4

08017d8c <_strtol_r>:
 8017d8c:	f7ff bf7c 	b.w	8017c88 <_strtol_l.constprop.0>

08017d90 <__cvt>:
 8017d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d92:	ed2d 8b02 	vpush	{d8}
 8017d96:	eeb0 8b40 	vmov.f64	d8, d0
 8017d9a:	b085      	sub	sp, #20
 8017d9c:	4617      	mov	r7, r2
 8017d9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017da0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017da2:	ee18 2a90 	vmov	r2, s17
 8017da6:	f025 0520 	bic.w	r5, r5, #32
 8017daa:	2a00      	cmp	r2, #0
 8017dac:	bfb6      	itet	lt
 8017dae:	222d      	movlt	r2, #45	; 0x2d
 8017db0:	2200      	movge	r2, #0
 8017db2:	eeb1 8b40 	vneglt.f64	d8, d0
 8017db6:	2d46      	cmp	r5, #70	; 0x46
 8017db8:	460c      	mov	r4, r1
 8017dba:	701a      	strb	r2, [r3, #0]
 8017dbc:	d004      	beq.n	8017dc8 <__cvt+0x38>
 8017dbe:	2d45      	cmp	r5, #69	; 0x45
 8017dc0:	d100      	bne.n	8017dc4 <__cvt+0x34>
 8017dc2:	3401      	adds	r4, #1
 8017dc4:	2102      	movs	r1, #2
 8017dc6:	e000      	b.n	8017dca <__cvt+0x3a>
 8017dc8:	2103      	movs	r1, #3
 8017dca:	ab03      	add	r3, sp, #12
 8017dcc:	9301      	str	r3, [sp, #4]
 8017dce:	ab02      	add	r3, sp, #8
 8017dd0:	9300      	str	r3, [sp, #0]
 8017dd2:	4622      	mov	r2, r4
 8017dd4:	4633      	mov	r3, r6
 8017dd6:	eeb0 0b48 	vmov.f64	d0, d8
 8017dda:	f001 f91d 	bl	8019018 <_dtoa_r>
 8017dde:	2d47      	cmp	r5, #71	; 0x47
 8017de0:	d101      	bne.n	8017de6 <__cvt+0x56>
 8017de2:	07fb      	lsls	r3, r7, #31
 8017de4:	d51a      	bpl.n	8017e1c <__cvt+0x8c>
 8017de6:	2d46      	cmp	r5, #70	; 0x46
 8017de8:	eb00 0204 	add.w	r2, r0, r4
 8017dec:	d10c      	bne.n	8017e08 <__cvt+0x78>
 8017dee:	7803      	ldrb	r3, [r0, #0]
 8017df0:	2b30      	cmp	r3, #48	; 0x30
 8017df2:	d107      	bne.n	8017e04 <__cvt+0x74>
 8017df4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dfc:	bf1c      	itt	ne
 8017dfe:	f1c4 0401 	rsbne	r4, r4, #1
 8017e02:	6034      	strne	r4, [r6, #0]
 8017e04:	6833      	ldr	r3, [r6, #0]
 8017e06:	441a      	add	r2, r3
 8017e08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e10:	bf08      	it	eq
 8017e12:	9203      	streq	r2, [sp, #12]
 8017e14:	2130      	movs	r1, #48	; 0x30
 8017e16:	9b03      	ldr	r3, [sp, #12]
 8017e18:	4293      	cmp	r3, r2
 8017e1a:	d307      	bcc.n	8017e2c <__cvt+0x9c>
 8017e1c:	9b03      	ldr	r3, [sp, #12]
 8017e1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017e20:	1a1b      	subs	r3, r3, r0
 8017e22:	6013      	str	r3, [r2, #0]
 8017e24:	b005      	add	sp, #20
 8017e26:	ecbd 8b02 	vpop	{d8}
 8017e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e2c:	1c5c      	adds	r4, r3, #1
 8017e2e:	9403      	str	r4, [sp, #12]
 8017e30:	7019      	strb	r1, [r3, #0]
 8017e32:	e7f0      	b.n	8017e16 <__cvt+0x86>

08017e34 <__exponent>:
 8017e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e36:	4603      	mov	r3, r0
 8017e38:	2900      	cmp	r1, #0
 8017e3a:	bfb8      	it	lt
 8017e3c:	4249      	neglt	r1, r1
 8017e3e:	f803 2b02 	strb.w	r2, [r3], #2
 8017e42:	bfb4      	ite	lt
 8017e44:	222d      	movlt	r2, #45	; 0x2d
 8017e46:	222b      	movge	r2, #43	; 0x2b
 8017e48:	2909      	cmp	r1, #9
 8017e4a:	7042      	strb	r2, [r0, #1]
 8017e4c:	dd2a      	ble.n	8017ea4 <__exponent+0x70>
 8017e4e:	f10d 0207 	add.w	r2, sp, #7
 8017e52:	4617      	mov	r7, r2
 8017e54:	260a      	movs	r6, #10
 8017e56:	4694      	mov	ip, r2
 8017e58:	fb91 f5f6 	sdiv	r5, r1, r6
 8017e5c:	fb06 1415 	mls	r4, r6, r5, r1
 8017e60:	3430      	adds	r4, #48	; 0x30
 8017e62:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8017e66:	460c      	mov	r4, r1
 8017e68:	2c63      	cmp	r4, #99	; 0x63
 8017e6a:	f102 32ff 	add.w	r2, r2, #4294967295
 8017e6e:	4629      	mov	r1, r5
 8017e70:	dcf1      	bgt.n	8017e56 <__exponent+0x22>
 8017e72:	3130      	adds	r1, #48	; 0x30
 8017e74:	f1ac 0402 	sub.w	r4, ip, #2
 8017e78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8017e7c:	1c41      	adds	r1, r0, #1
 8017e7e:	4622      	mov	r2, r4
 8017e80:	42ba      	cmp	r2, r7
 8017e82:	d30a      	bcc.n	8017e9a <__exponent+0x66>
 8017e84:	f10d 0209 	add.w	r2, sp, #9
 8017e88:	eba2 020c 	sub.w	r2, r2, ip
 8017e8c:	42bc      	cmp	r4, r7
 8017e8e:	bf88      	it	hi
 8017e90:	2200      	movhi	r2, #0
 8017e92:	4413      	add	r3, r2
 8017e94:	1a18      	subs	r0, r3, r0
 8017e96:	b003      	add	sp, #12
 8017e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e9a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017e9e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8017ea2:	e7ed      	b.n	8017e80 <__exponent+0x4c>
 8017ea4:	2330      	movs	r3, #48	; 0x30
 8017ea6:	3130      	adds	r1, #48	; 0x30
 8017ea8:	7083      	strb	r3, [r0, #2]
 8017eaa:	70c1      	strb	r1, [r0, #3]
 8017eac:	1d03      	adds	r3, r0, #4
 8017eae:	e7f1      	b.n	8017e94 <__exponent+0x60>

08017eb0 <_printf_float>:
 8017eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb4:	b08b      	sub	sp, #44	; 0x2c
 8017eb6:	460c      	mov	r4, r1
 8017eb8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8017ebc:	4616      	mov	r6, r2
 8017ebe:	461f      	mov	r7, r3
 8017ec0:	4605      	mov	r5, r0
 8017ec2:	f000 ff1f 	bl	8018d04 <_localeconv_r>
 8017ec6:	f8d0 b000 	ldr.w	fp, [r0]
 8017eca:	4658      	mov	r0, fp
 8017ecc:	f7e8 fa08 	bl	80002e0 <strlen>
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	9308      	str	r3, [sp, #32]
 8017ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8017ed8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017edc:	6822      	ldr	r2, [r4, #0]
 8017ede:	3307      	adds	r3, #7
 8017ee0:	f023 0307 	bic.w	r3, r3, #7
 8017ee4:	f103 0108 	add.w	r1, r3, #8
 8017ee8:	f8c8 1000 	str.w	r1, [r8]
 8017eec:	ed93 0b00 	vldr	d0, [r3]
 8017ef0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8018150 <_printf_float+0x2a0>
 8017ef4:	eeb0 7bc0 	vabs.f64	d7, d0
 8017ef8:	eeb4 7b46 	vcmp.f64	d7, d6
 8017efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f00:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8017f04:	4682      	mov	sl, r0
 8017f06:	dd24      	ble.n	8017f52 <_printf_float+0xa2>
 8017f08:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f10:	d502      	bpl.n	8017f18 <_printf_float+0x68>
 8017f12:	232d      	movs	r3, #45	; 0x2d
 8017f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f18:	498f      	ldr	r1, [pc, #572]	; (8018158 <_printf_float+0x2a8>)
 8017f1a:	4b90      	ldr	r3, [pc, #576]	; (801815c <_printf_float+0x2ac>)
 8017f1c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017f20:	bf94      	ite	ls
 8017f22:	4688      	movls	r8, r1
 8017f24:	4698      	movhi	r8, r3
 8017f26:	2303      	movs	r3, #3
 8017f28:	6123      	str	r3, [r4, #16]
 8017f2a:	f022 0204 	bic.w	r2, r2, #4
 8017f2e:	2300      	movs	r3, #0
 8017f30:	6022      	str	r2, [r4, #0]
 8017f32:	9304      	str	r3, [sp, #16]
 8017f34:	9700      	str	r7, [sp, #0]
 8017f36:	4633      	mov	r3, r6
 8017f38:	aa09      	add	r2, sp, #36	; 0x24
 8017f3a:	4621      	mov	r1, r4
 8017f3c:	4628      	mov	r0, r5
 8017f3e:	f000 f9d1 	bl	80182e4 <_printf_common>
 8017f42:	3001      	adds	r0, #1
 8017f44:	f040 808a 	bne.w	801805c <_printf_float+0x1ac>
 8017f48:	f04f 30ff 	mov.w	r0, #4294967295
 8017f4c:	b00b      	add	sp, #44	; 0x2c
 8017f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f52:	eeb4 0b40 	vcmp.f64	d0, d0
 8017f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f5a:	d709      	bvc.n	8017f70 <_printf_float+0xc0>
 8017f5c:	ee10 3a90 	vmov	r3, s1
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	bfbc      	itt	lt
 8017f64:	232d      	movlt	r3, #45	; 0x2d
 8017f66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017f6a:	497d      	ldr	r1, [pc, #500]	; (8018160 <_printf_float+0x2b0>)
 8017f6c:	4b7d      	ldr	r3, [pc, #500]	; (8018164 <_printf_float+0x2b4>)
 8017f6e:	e7d5      	b.n	8017f1c <_printf_float+0x6c>
 8017f70:	6863      	ldr	r3, [r4, #4]
 8017f72:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8017f76:	9104      	str	r1, [sp, #16]
 8017f78:	1c59      	adds	r1, r3, #1
 8017f7a:	d13c      	bne.n	8017ff6 <_printf_float+0x146>
 8017f7c:	2306      	movs	r3, #6
 8017f7e:	6063      	str	r3, [r4, #4]
 8017f80:	2300      	movs	r3, #0
 8017f82:	9303      	str	r3, [sp, #12]
 8017f84:	ab08      	add	r3, sp, #32
 8017f86:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017f8e:	ab07      	add	r3, sp, #28
 8017f90:	6861      	ldr	r1, [r4, #4]
 8017f92:	9300      	str	r3, [sp, #0]
 8017f94:	6022      	str	r2, [r4, #0]
 8017f96:	f10d 031b 	add.w	r3, sp, #27
 8017f9a:	4628      	mov	r0, r5
 8017f9c:	f7ff fef8 	bl	8017d90 <__cvt>
 8017fa0:	9b04      	ldr	r3, [sp, #16]
 8017fa2:	9907      	ldr	r1, [sp, #28]
 8017fa4:	2b47      	cmp	r3, #71	; 0x47
 8017fa6:	4680      	mov	r8, r0
 8017fa8:	d108      	bne.n	8017fbc <_printf_float+0x10c>
 8017faa:	1cc8      	adds	r0, r1, #3
 8017fac:	db02      	blt.n	8017fb4 <_printf_float+0x104>
 8017fae:	6863      	ldr	r3, [r4, #4]
 8017fb0:	4299      	cmp	r1, r3
 8017fb2:	dd41      	ble.n	8018038 <_printf_float+0x188>
 8017fb4:	f1a9 0902 	sub.w	r9, r9, #2
 8017fb8:	fa5f f989 	uxtb.w	r9, r9
 8017fbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017fc0:	d820      	bhi.n	8018004 <_printf_float+0x154>
 8017fc2:	3901      	subs	r1, #1
 8017fc4:	464a      	mov	r2, r9
 8017fc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017fca:	9107      	str	r1, [sp, #28]
 8017fcc:	f7ff ff32 	bl	8017e34 <__exponent>
 8017fd0:	9a08      	ldr	r2, [sp, #32]
 8017fd2:	9004      	str	r0, [sp, #16]
 8017fd4:	1813      	adds	r3, r2, r0
 8017fd6:	2a01      	cmp	r2, #1
 8017fd8:	6123      	str	r3, [r4, #16]
 8017fda:	dc02      	bgt.n	8017fe2 <_printf_float+0x132>
 8017fdc:	6822      	ldr	r2, [r4, #0]
 8017fde:	07d2      	lsls	r2, r2, #31
 8017fe0:	d501      	bpl.n	8017fe6 <_printf_float+0x136>
 8017fe2:	3301      	adds	r3, #1
 8017fe4:	6123      	str	r3, [r4, #16]
 8017fe6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d0a2      	beq.n	8017f34 <_printf_float+0x84>
 8017fee:	232d      	movs	r3, #45	; 0x2d
 8017ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ff4:	e79e      	b.n	8017f34 <_printf_float+0x84>
 8017ff6:	9904      	ldr	r1, [sp, #16]
 8017ff8:	2947      	cmp	r1, #71	; 0x47
 8017ffa:	d1c1      	bne.n	8017f80 <_printf_float+0xd0>
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d1bf      	bne.n	8017f80 <_printf_float+0xd0>
 8018000:	2301      	movs	r3, #1
 8018002:	e7bc      	b.n	8017f7e <_printf_float+0xce>
 8018004:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8018008:	d118      	bne.n	801803c <_printf_float+0x18c>
 801800a:	2900      	cmp	r1, #0
 801800c:	6863      	ldr	r3, [r4, #4]
 801800e:	dd0b      	ble.n	8018028 <_printf_float+0x178>
 8018010:	6121      	str	r1, [r4, #16]
 8018012:	b913      	cbnz	r3, 801801a <_printf_float+0x16a>
 8018014:	6822      	ldr	r2, [r4, #0]
 8018016:	07d0      	lsls	r0, r2, #31
 8018018:	d502      	bpl.n	8018020 <_printf_float+0x170>
 801801a:	3301      	adds	r3, #1
 801801c:	440b      	add	r3, r1
 801801e:	6123      	str	r3, [r4, #16]
 8018020:	2300      	movs	r3, #0
 8018022:	65a1      	str	r1, [r4, #88]	; 0x58
 8018024:	9304      	str	r3, [sp, #16]
 8018026:	e7de      	b.n	8017fe6 <_printf_float+0x136>
 8018028:	b913      	cbnz	r3, 8018030 <_printf_float+0x180>
 801802a:	6822      	ldr	r2, [r4, #0]
 801802c:	07d2      	lsls	r2, r2, #31
 801802e:	d501      	bpl.n	8018034 <_printf_float+0x184>
 8018030:	3302      	adds	r3, #2
 8018032:	e7f4      	b.n	801801e <_printf_float+0x16e>
 8018034:	2301      	movs	r3, #1
 8018036:	e7f2      	b.n	801801e <_printf_float+0x16e>
 8018038:	f04f 0967 	mov.w	r9, #103	; 0x67
 801803c:	9b08      	ldr	r3, [sp, #32]
 801803e:	4299      	cmp	r1, r3
 8018040:	db05      	blt.n	801804e <_printf_float+0x19e>
 8018042:	6823      	ldr	r3, [r4, #0]
 8018044:	6121      	str	r1, [r4, #16]
 8018046:	07d8      	lsls	r0, r3, #31
 8018048:	d5ea      	bpl.n	8018020 <_printf_float+0x170>
 801804a:	1c4b      	adds	r3, r1, #1
 801804c:	e7e7      	b.n	801801e <_printf_float+0x16e>
 801804e:	2900      	cmp	r1, #0
 8018050:	bfd4      	ite	le
 8018052:	f1c1 0202 	rsble	r2, r1, #2
 8018056:	2201      	movgt	r2, #1
 8018058:	4413      	add	r3, r2
 801805a:	e7e0      	b.n	801801e <_printf_float+0x16e>
 801805c:	6823      	ldr	r3, [r4, #0]
 801805e:	055a      	lsls	r2, r3, #21
 8018060:	d407      	bmi.n	8018072 <_printf_float+0x1c2>
 8018062:	6923      	ldr	r3, [r4, #16]
 8018064:	4642      	mov	r2, r8
 8018066:	4631      	mov	r1, r6
 8018068:	4628      	mov	r0, r5
 801806a:	47b8      	blx	r7
 801806c:	3001      	adds	r0, #1
 801806e:	d12a      	bne.n	80180c6 <_printf_float+0x216>
 8018070:	e76a      	b.n	8017f48 <_printf_float+0x98>
 8018072:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8018076:	f240 80e0 	bls.w	801823a <_printf_float+0x38a>
 801807a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801807e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018086:	d133      	bne.n	80180f0 <_printf_float+0x240>
 8018088:	4a37      	ldr	r2, [pc, #220]	; (8018168 <_printf_float+0x2b8>)
 801808a:	2301      	movs	r3, #1
 801808c:	4631      	mov	r1, r6
 801808e:	4628      	mov	r0, r5
 8018090:	47b8      	blx	r7
 8018092:	3001      	adds	r0, #1
 8018094:	f43f af58 	beq.w	8017f48 <_printf_float+0x98>
 8018098:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801809c:	429a      	cmp	r2, r3
 801809e:	db02      	blt.n	80180a6 <_printf_float+0x1f6>
 80180a0:	6823      	ldr	r3, [r4, #0]
 80180a2:	07d8      	lsls	r0, r3, #31
 80180a4:	d50f      	bpl.n	80180c6 <_printf_float+0x216>
 80180a6:	4653      	mov	r3, sl
 80180a8:	465a      	mov	r2, fp
 80180aa:	4631      	mov	r1, r6
 80180ac:	4628      	mov	r0, r5
 80180ae:	47b8      	blx	r7
 80180b0:	3001      	adds	r0, #1
 80180b2:	f43f af49 	beq.w	8017f48 <_printf_float+0x98>
 80180b6:	f04f 0800 	mov.w	r8, #0
 80180ba:	f104 091a 	add.w	r9, r4, #26
 80180be:	9b08      	ldr	r3, [sp, #32]
 80180c0:	3b01      	subs	r3, #1
 80180c2:	4543      	cmp	r3, r8
 80180c4:	dc09      	bgt.n	80180da <_printf_float+0x22a>
 80180c6:	6823      	ldr	r3, [r4, #0]
 80180c8:	079b      	lsls	r3, r3, #30
 80180ca:	f100 8106 	bmi.w	80182da <_printf_float+0x42a>
 80180ce:	68e0      	ldr	r0, [r4, #12]
 80180d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180d2:	4298      	cmp	r0, r3
 80180d4:	bfb8      	it	lt
 80180d6:	4618      	movlt	r0, r3
 80180d8:	e738      	b.n	8017f4c <_printf_float+0x9c>
 80180da:	2301      	movs	r3, #1
 80180dc:	464a      	mov	r2, r9
 80180de:	4631      	mov	r1, r6
 80180e0:	4628      	mov	r0, r5
 80180e2:	47b8      	blx	r7
 80180e4:	3001      	adds	r0, #1
 80180e6:	f43f af2f 	beq.w	8017f48 <_printf_float+0x98>
 80180ea:	f108 0801 	add.w	r8, r8, #1
 80180ee:	e7e6      	b.n	80180be <_printf_float+0x20e>
 80180f0:	9b07      	ldr	r3, [sp, #28]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	dc3a      	bgt.n	801816c <_printf_float+0x2bc>
 80180f6:	4a1c      	ldr	r2, [pc, #112]	; (8018168 <_printf_float+0x2b8>)
 80180f8:	2301      	movs	r3, #1
 80180fa:	4631      	mov	r1, r6
 80180fc:	4628      	mov	r0, r5
 80180fe:	47b8      	blx	r7
 8018100:	3001      	adds	r0, #1
 8018102:	f43f af21 	beq.w	8017f48 <_printf_float+0x98>
 8018106:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801810a:	4313      	orrs	r3, r2
 801810c:	d102      	bne.n	8018114 <_printf_float+0x264>
 801810e:	6823      	ldr	r3, [r4, #0]
 8018110:	07d9      	lsls	r1, r3, #31
 8018112:	d5d8      	bpl.n	80180c6 <_printf_float+0x216>
 8018114:	4653      	mov	r3, sl
 8018116:	465a      	mov	r2, fp
 8018118:	4631      	mov	r1, r6
 801811a:	4628      	mov	r0, r5
 801811c:	47b8      	blx	r7
 801811e:	3001      	adds	r0, #1
 8018120:	f43f af12 	beq.w	8017f48 <_printf_float+0x98>
 8018124:	f04f 0900 	mov.w	r9, #0
 8018128:	f104 0a1a 	add.w	sl, r4, #26
 801812c:	9b07      	ldr	r3, [sp, #28]
 801812e:	425b      	negs	r3, r3
 8018130:	454b      	cmp	r3, r9
 8018132:	dc01      	bgt.n	8018138 <_printf_float+0x288>
 8018134:	9b08      	ldr	r3, [sp, #32]
 8018136:	e795      	b.n	8018064 <_printf_float+0x1b4>
 8018138:	2301      	movs	r3, #1
 801813a:	4652      	mov	r2, sl
 801813c:	4631      	mov	r1, r6
 801813e:	4628      	mov	r0, r5
 8018140:	47b8      	blx	r7
 8018142:	3001      	adds	r0, #1
 8018144:	f43f af00 	beq.w	8017f48 <_printf_float+0x98>
 8018148:	f109 0901 	add.w	r9, r9, #1
 801814c:	e7ee      	b.n	801812c <_printf_float+0x27c>
 801814e:	bf00      	nop
 8018150:	ffffffff 	.word	0xffffffff
 8018154:	7fefffff 	.word	0x7fefffff
 8018158:	080204e4 	.word	0x080204e4
 801815c:	080204e8 	.word	0x080204e8
 8018160:	080204ec 	.word	0x080204ec
 8018164:	080204f0 	.word	0x080204f0
 8018168:	080204f4 	.word	0x080204f4
 801816c:	9a08      	ldr	r2, [sp, #32]
 801816e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018170:	429a      	cmp	r2, r3
 8018172:	bfa8      	it	ge
 8018174:	461a      	movge	r2, r3
 8018176:	2a00      	cmp	r2, #0
 8018178:	4691      	mov	r9, r2
 801817a:	dc38      	bgt.n	80181ee <_printf_float+0x33e>
 801817c:	2300      	movs	r3, #0
 801817e:	9305      	str	r3, [sp, #20]
 8018180:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018184:	f104 021a 	add.w	r2, r4, #26
 8018188:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801818a:	9905      	ldr	r1, [sp, #20]
 801818c:	9304      	str	r3, [sp, #16]
 801818e:	eba3 0309 	sub.w	r3, r3, r9
 8018192:	428b      	cmp	r3, r1
 8018194:	dc33      	bgt.n	80181fe <_printf_float+0x34e>
 8018196:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801819a:	429a      	cmp	r2, r3
 801819c:	db3c      	blt.n	8018218 <_printf_float+0x368>
 801819e:	6823      	ldr	r3, [r4, #0]
 80181a0:	07da      	lsls	r2, r3, #31
 80181a2:	d439      	bmi.n	8018218 <_printf_float+0x368>
 80181a4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80181a8:	eba2 0903 	sub.w	r9, r2, r3
 80181ac:	9b04      	ldr	r3, [sp, #16]
 80181ae:	1ad2      	subs	r2, r2, r3
 80181b0:	4591      	cmp	r9, r2
 80181b2:	bfa8      	it	ge
 80181b4:	4691      	movge	r9, r2
 80181b6:	f1b9 0f00 	cmp.w	r9, #0
 80181ba:	dc35      	bgt.n	8018228 <_printf_float+0x378>
 80181bc:	f04f 0800 	mov.w	r8, #0
 80181c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80181c4:	f104 0a1a 	add.w	sl, r4, #26
 80181c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80181cc:	1a9b      	subs	r3, r3, r2
 80181ce:	eba3 0309 	sub.w	r3, r3, r9
 80181d2:	4543      	cmp	r3, r8
 80181d4:	f77f af77 	ble.w	80180c6 <_printf_float+0x216>
 80181d8:	2301      	movs	r3, #1
 80181da:	4652      	mov	r2, sl
 80181dc:	4631      	mov	r1, r6
 80181de:	4628      	mov	r0, r5
 80181e0:	47b8      	blx	r7
 80181e2:	3001      	adds	r0, #1
 80181e4:	f43f aeb0 	beq.w	8017f48 <_printf_float+0x98>
 80181e8:	f108 0801 	add.w	r8, r8, #1
 80181ec:	e7ec      	b.n	80181c8 <_printf_float+0x318>
 80181ee:	4613      	mov	r3, r2
 80181f0:	4631      	mov	r1, r6
 80181f2:	4642      	mov	r2, r8
 80181f4:	4628      	mov	r0, r5
 80181f6:	47b8      	blx	r7
 80181f8:	3001      	adds	r0, #1
 80181fa:	d1bf      	bne.n	801817c <_printf_float+0x2cc>
 80181fc:	e6a4      	b.n	8017f48 <_printf_float+0x98>
 80181fe:	2301      	movs	r3, #1
 8018200:	4631      	mov	r1, r6
 8018202:	4628      	mov	r0, r5
 8018204:	9204      	str	r2, [sp, #16]
 8018206:	47b8      	blx	r7
 8018208:	3001      	adds	r0, #1
 801820a:	f43f ae9d 	beq.w	8017f48 <_printf_float+0x98>
 801820e:	9b05      	ldr	r3, [sp, #20]
 8018210:	9a04      	ldr	r2, [sp, #16]
 8018212:	3301      	adds	r3, #1
 8018214:	9305      	str	r3, [sp, #20]
 8018216:	e7b7      	b.n	8018188 <_printf_float+0x2d8>
 8018218:	4653      	mov	r3, sl
 801821a:	465a      	mov	r2, fp
 801821c:	4631      	mov	r1, r6
 801821e:	4628      	mov	r0, r5
 8018220:	47b8      	blx	r7
 8018222:	3001      	adds	r0, #1
 8018224:	d1be      	bne.n	80181a4 <_printf_float+0x2f4>
 8018226:	e68f      	b.n	8017f48 <_printf_float+0x98>
 8018228:	9a04      	ldr	r2, [sp, #16]
 801822a:	464b      	mov	r3, r9
 801822c:	4442      	add	r2, r8
 801822e:	4631      	mov	r1, r6
 8018230:	4628      	mov	r0, r5
 8018232:	47b8      	blx	r7
 8018234:	3001      	adds	r0, #1
 8018236:	d1c1      	bne.n	80181bc <_printf_float+0x30c>
 8018238:	e686      	b.n	8017f48 <_printf_float+0x98>
 801823a:	9a08      	ldr	r2, [sp, #32]
 801823c:	2a01      	cmp	r2, #1
 801823e:	dc01      	bgt.n	8018244 <_printf_float+0x394>
 8018240:	07db      	lsls	r3, r3, #31
 8018242:	d537      	bpl.n	80182b4 <_printf_float+0x404>
 8018244:	2301      	movs	r3, #1
 8018246:	4642      	mov	r2, r8
 8018248:	4631      	mov	r1, r6
 801824a:	4628      	mov	r0, r5
 801824c:	47b8      	blx	r7
 801824e:	3001      	adds	r0, #1
 8018250:	f43f ae7a 	beq.w	8017f48 <_printf_float+0x98>
 8018254:	4653      	mov	r3, sl
 8018256:	465a      	mov	r2, fp
 8018258:	4631      	mov	r1, r6
 801825a:	4628      	mov	r0, r5
 801825c:	47b8      	blx	r7
 801825e:	3001      	adds	r0, #1
 8018260:	f43f ae72 	beq.w	8017f48 <_printf_float+0x98>
 8018264:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018268:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801826c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018270:	9b08      	ldr	r3, [sp, #32]
 8018272:	d01a      	beq.n	80182aa <_printf_float+0x3fa>
 8018274:	3b01      	subs	r3, #1
 8018276:	f108 0201 	add.w	r2, r8, #1
 801827a:	4631      	mov	r1, r6
 801827c:	4628      	mov	r0, r5
 801827e:	47b8      	blx	r7
 8018280:	3001      	adds	r0, #1
 8018282:	d10e      	bne.n	80182a2 <_printf_float+0x3f2>
 8018284:	e660      	b.n	8017f48 <_printf_float+0x98>
 8018286:	2301      	movs	r3, #1
 8018288:	464a      	mov	r2, r9
 801828a:	4631      	mov	r1, r6
 801828c:	4628      	mov	r0, r5
 801828e:	47b8      	blx	r7
 8018290:	3001      	adds	r0, #1
 8018292:	f43f ae59 	beq.w	8017f48 <_printf_float+0x98>
 8018296:	f108 0801 	add.w	r8, r8, #1
 801829a:	9b08      	ldr	r3, [sp, #32]
 801829c:	3b01      	subs	r3, #1
 801829e:	4543      	cmp	r3, r8
 80182a0:	dcf1      	bgt.n	8018286 <_printf_float+0x3d6>
 80182a2:	9b04      	ldr	r3, [sp, #16]
 80182a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80182a8:	e6dd      	b.n	8018066 <_printf_float+0x1b6>
 80182aa:	f04f 0800 	mov.w	r8, #0
 80182ae:	f104 091a 	add.w	r9, r4, #26
 80182b2:	e7f2      	b.n	801829a <_printf_float+0x3ea>
 80182b4:	2301      	movs	r3, #1
 80182b6:	4642      	mov	r2, r8
 80182b8:	e7df      	b.n	801827a <_printf_float+0x3ca>
 80182ba:	2301      	movs	r3, #1
 80182bc:	464a      	mov	r2, r9
 80182be:	4631      	mov	r1, r6
 80182c0:	4628      	mov	r0, r5
 80182c2:	47b8      	blx	r7
 80182c4:	3001      	adds	r0, #1
 80182c6:	f43f ae3f 	beq.w	8017f48 <_printf_float+0x98>
 80182ca:	f108 0801 	add.w	r8, r8, #1
 80182ce:	68e3      	ldr	r3, [r4, #12]
 80182d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80182d2:	1a5b      	subs	r3, r3, r1
 80182d4:	4543      	cmp	r3, r8
 80182d6:	dcf0      	bgt.n	80182ba <_printf_float+0x40a>
 80182d8:	e6f9      	b.n	80180ce <_printf_float+0x21e>
 80182da:	f04f 0800 	mov.w	r8, #0
 80182de:	f104 0919 	add.w	r9, r4, #25
 80182e2:	e7f4      	b.n	80182ce <_printf_float+0x41e>

080182e4 <_printf_common>:
 80182e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182e8:	4616      	mov	r6, r2
 80182ea:	4699      	mov	r9, r3
 80182ec:	688a      	ldr	r2, [r1, #8]
 80182ee:	690b      	ldr	r3, [r1, #16]
 80182f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80182f4:	4293      	cmp	r3, r2
 80182f6:	bfb8      	it	lt
 80182f8:	4613      	movlt	r3, r2
 80182fa:	6033      	str	r3, [r6, #0]
 80182fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018300:	4607      	mov	r7, r0
 8018302:	460c      	mov	r4, r1
 8018304:	b10a      	cbz	r2, 801830a <_printf_common+0x26>
 8018306:	3301      	adds	r3, #1
 8018308:	6033      	str	r3, [r6, #0]
 801830a:	6823      	ldr	r3, [r4, #0]
 801830c:	0699      	lsls	r1, r3, #26
 801830e:	bf42      	ittt	mi
 8018310:	6833      	ldrmi	r3, [r6, #0]
 8018312:	3302      	addmi	r3, #2
 8018314:	6033      	strmi	r3, [r6, #0]
 8018316:	6825      	ldr	r5, [r4, #0]
 8018318:	f015 0506 	ands.w	r5, r5, #6
 801831c:	d106      	bne.n	801832c <_printf_common+0x48>
 801831e:	f104 0a19 	add.w	sl, r4, #25
 8018322:	68e3      	ldr	r3, [r4, #12]
 8018324:	6832      	ldr	r2, [r6, #0]
 8018326:	1a9b      	subs	r3, r3, r2
 8018328:	42ab      	cmp	r3, r5
 801832a:	dc26      	bgt.n	801837a <_printf_common+0x96>
 801832c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018330:	1e13      	subs	r3, r2, #0
 8018332:	6822      	ldr	r2, [r4, #0]
 8018334:	bf18      	it	ne
 8018336:	2301      	movne	r3, #1
 8018338:	0692      	lsls	r2, r2, #26
 801833a:	d42b      	bmi.n	8018394 <_printf_common+0xb0>
 801833c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018340:	4649      	mov	r1, r9
 8018342:	4638      	mov	r0, r7
 8018344:	47c0      	blx	r8
 8018346:	3001      	adds	r0, #1
 8018348:	d01e      	beq.n	8018388 <_printf_common+0xa4>
 801834a:	6823      	ldr	r3, [r4, #0]
 801834c:	6922      	ldr	r2, [r4, #16]
 801834e:	f003 0306 	and.w	r3, r3, #6
 8018352:	2b04      	cmp	r3, #4
 8018354:	bf02      	ittt	eq
 8018356:	68e5      	ldreq	r5, [r4, #12]
 8018358:	6833      	ldreq	r3, [r6, #0]
 801835a:	1aed      	subeq	r5, r5, r3
 801835c:	68a3      	ldr	r3, [r4, #8]
 801835e:	bf0c      	ite	eq
 8018360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018364:	2500      	movne	r5, #0
 8018366:	4293      	cmp	r3, r2
 8018368:	bfc4      	itt	gt
 801836a:	1a9b      	subgt	r3, r3, r2
 801836c:	18ed      	addgt	r5, r5, r3
 801836e:	2600      	movs	r6, #0
 8018370:	341a      	adds	r4, #26
 8018372:	42b5      	cmp	r5, r6
 8018374:	d11a      	bne.n	80183ac <_printf_common+0xc8>
 8018376:	2000      	movs	r0, #0
 8018378:	e008      	b.n	801838c <_printf_common+0xa8>
 801837a:	2301      	movs	r3, #1
 801837c:	4652      	mov	r2, sl
 801837e:	4649      	mov	r1, r9
 8018380:	4638      	mov	r0, r7
 8018382:	47c0      	blx	r8
 8018384:	3001      	adds	r0, #1
 8018386:	d103      	bne.n	8018390 <_printf_common+0xac>
 8018388:	f04f 30ff 	mov.w	r0, #4294967295
 801838c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018390:	3501      	adds	r5, #1
 8018392:	e7c6      	b.n	8018322 <_printf_common+0x3e>
 8018394:	18e1      	adds	r1, r4, r3
 8018396:	1c5a      	adds	r2, r3, #1
 8018398:	2030      	movs	r0, #48	; 0x30
 801839a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801839e:	4422      	add	r2, r4
 80183a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80183a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80183a8:	3302      	adds	r3, #2
 80183aa:	e7c7      	b.n	801833c <_printf_common+0x58>
 80183ac:	2301      	movs	r3, #1
 80183ae:	4622      	mov	r2, r4
 80183b0:	4649      	mov	r1, r9
 80183b2:	4638      	mov	r0, r7
 80183b4:	47c0      	blx	r8
 80183b6:	3001      	adds	r0, #1
 80183b8:	d0e6      	beq.n	8018388 <_printf_common+0xa4>
 80183ba:	3601      	adds	r6, #1
 80183bc:	e7d9      	b.n	8018372 <_printf_common+0x8e>
	...

080183c0 <_printf_i>:
 80183c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80183c4:	7e0f      	ldrb	r7, [r1, #24]
 80183c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80183c8:	2f78      	cmp	r7, #120	; 0x78
 80183ca:	4691      	mov	r9, r2
 80183cc:	4680      	mov	r8, r0
 80183ce:	460c      	mov	r4, r1
 80183d0:	469a      	mov	sl, r3
 80183d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80183d6:	d807      	bhi.n	80183e8 <_printf_i+0x28>
 80183d8:	2f62      	cmp	r7, #98	; 0x62
 80183da:	d80a      	bhi.n	80183f2 <_printf_i+0x32>
 80183dc:	2f00      	cmp	r7, #0
 80183de:	f000 80d4 	beq.w	801858a <_printf_i+0x1ca>
 80183e2:	2f58      	cmp	r7, #88	; 0x58
 80183e4:	f000 80c0 	beq.w	8018568 <_printf_i+0x1a8>
 80183e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80183ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80183f0:	e03a      	b.n	8018468 <_printf_i+0xa8>
 80183f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80183f6:	2b15      	cmp	r3, #21
 80183f8:	d8f6      	bhi.n	80183e8 <_printf_i+0x28>
 80183fa:	a101      	add	r1, pc, #4	; (adr r1, 8018400 <_printf_i+0x40>)
 80183fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018400:	08018459 	.word	0x08018459
 8018404:	0801846d 	.word	0x0801846d
 8018408:	080183e9 	.word	0x080183e9
 801840c:	080183e9 	.word	0x080183e9
 8018410:	080183e9 	.word	0x080183e9
 8018414:	080183e9 	.word	0x080183e9
 8018418:	0801846d 	.word	0x0801846d
 801841c:	080183e9 	.word	0x080183e9
 8018420:	080183e9 	.word	0x080183e9
 8018424:	080183e9 	.word	0x080183e9
 8018428:	080183e9 	.word	0x080183e9
 801842c:	08018571 	.word	0x08018571
 8018430:	08018499 	.word	0x08018499
 8018434:	0801852b 	.word	0x0801852b
 8018438:	080183e9 	.word	0x080183e9
 801843c:	080183e9 	.word	0x080183e9
 8018440:	08018593 	.word	0x08018593
 8018444:	080183e9 	.word	0x080183e9
 8018448:	08018499 	.word	0x08018499
 801844c:	080183e9 	.word	0x080183e9
 8018450:	080183e9 	.word	0x080183e9
 8018454:	08018533 	.word	0x08018533
 8018458:	682b      	ldr	r3, [r5, #0]
 801845a:	1d1a      	adds	r2, r3, #4
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	602a      	str	r2, [r5, #0]
 8018460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018468:	2301      	movs	r3, #1
 801846a:	e09f      	b.n	80185ac <_printf_i+0x1ec>
 801846c:	6820      	ldr	r0, [r4, #0]
 801846e:	682b      	ldr	r3, [r5, #0]
 8018470:	0607      	lsls	r7, r0, #24
 8018472:	f103 0104 	add.w	r1, r3, #4
 8018476:	6029      	str	r1, [r5, #0]
 8018478:	d501      	bpl.n	801847e <_printf_i+0xbe>
 801847a:	681e      	ldr	r6, [r3, #0]
 801847c:	e003      	b.n	8018486 <_printf_i+0xc6>
 801847e:	0646      	lsls	r6, r0, #25
 8018480:	d5fb      	bpl.n	801847a <_printf_i+0xba>
 8018482:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018486:	2e00      	cmp	r6, #0
 8018488:	da03      	bge.n	8018492 <_printf_i+0xd2>
 801848a:	232d      	movs	r3, #45	; 0x2d
 801848c:	4276      	negs	r6, r6
 801848e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018492:	485a      	ldr	r0, [pc, #360]	; (80185fc <_printf_i+0x23c>)
 8018494:	230a      	movs	r3, #10
 8018496:	e012      	b.n	80184be <_printf_i+0xfe>
 8018498:	682b      	ldr	r3, [r5, #0]
 801849a:	6820      	ldr	r0, [r4, #0]
 801849c:	1d19      	adds	r1, r3, #4
 801849e:	6029      	str	r1, [r5, #0]
 80184a0:	0605      	lsls	r5, r0, #24
 80184a2:	d501      	bpl.n	80184a8 <_printf_i+0xe8>
 80184a4:	681e      	ldr	r6, [r3, #0]
 80184a6:	e002      	b.n	80184ae <_printf_i+0xee>
 80184a8:	0641      	lsls	r1, r0, #25
 80184aa:	d5fb      	bpl.n	80184a4 <_printf_i+0xe4>
 80184ac:	881e      	ldrh	r6, [r3, #0]
 80184ae:	4853      	ldr	r0, [pc, #332]	; (80185fc <_printf_i+0x23c>)
 80184b0:	2f6f      	cmp	r7, #111	; 0x6f
 80184b2:	bf0c      	ite	eq
 80184b4:	2308      	moveq	r3, #8
 80184b6:	230a      	movne	r3, #10
 80184b8:	2100      	movs	r1, #0
 80184ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80184be:	6865      	ldr	r5, [r4, #4]
 80184c0:	60a5      	str	r5, [r4, #8]
 80184c2:	2d00      	cmp	r5, #0
 80184c4:	bfa2      	ittt	ge
 80184c6:	6821      	ldrge	r1, [r4, #0]
 80184c8:	f021 0104 	bicge.w	r1, r1, #4
 80184cc:	6021      	strge	r1, [r4, #0]
 80184ce:	b90e      	cbnz	r6, 80184d4 <_printf_i+0x114>
 80184d0:	2d00      	cmp	r5, #0
 80184d2:	d04b      	beq.n	801856c <_printf_i+0x1ac>
 80184d4:	4615      	mov	r5, r2
 80184d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80184da:	fb03 6711 	mls	r7, r3, r1, r6
 80184de:	5dc7      	ldrb	r7, [r0, r7]
 80184e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80184e4:	4637      	mov	r7, r6
 80184e6:	42bb      	cmp	r3, r7
 80184e8:	460e      	mov	r6, r1
 80184ea:	d9f4      	bls.n	80184d6 <_printf_i+0x116>
 80184ec:	2b08      	cmp	r3, #8
 80184ee:	d10b      	bne.n	8018508 <_printf_i+0x148>
 80184f0:	6823      	ldr	r3, [r4, #0]
 80184f2:	07de      	lsls	r6, r3, #31
 80184f4:	d508      	bpl.n	8018508 <_printf_i+0x148>
 80184f6:	6923      	ldr	r3, [r4, #16]
 80184f8:	6861      	ldr	r1, [r4, #4]
 80184fa:	4299      	cmp	r1, r3
 80184fc:	bfde      	ittt	le
 80184fe:	2330      	movle	r3, #48	; 0x30
 8018500:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018504:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018508:	1b52      	subs	r2, r2, r5
 801850a:	6122      	str	r2, [r4, #16]
 801850c:	f8cd a000 	str.w	sl, [sp]
 8018510:	464b      	mov	r3, r9
 8018512:	aa03      	add	r2, sp, #12
 8018514:	4621      	mov	r1, r4
 8018516:	4640      	mov	r0, r8
 8018518:	f7ff fee4 	bl	80182e4 <_printf_common>
 801851c:	3001      	adds	r0, #1
 801851e:	d14a      	bne.n	80185b6 <_printf_i+0x1f6>
 8018520:	f04f 30ff 	mov.w	r0, #4294967295
 8018524:	b004      	add	sp, #16
 8018526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801852a:	6823      	ldr	r3, [r4, #0]
 801852c:	f043 0320 	orr.w	r3, r3, #32
 8018530:	6023      	str	r3, [r4, #0]
 8018532:	4833      	ldr	r0, [pc, #204]	; (8018600 <_printf_i+0x240>)
 8018534:	2778      	movs	r7, #120	; 0x78
 8018536:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801853a:	6823      	ldr	r3, [r4, #0]
 801853c:	6829      	ldr	r1, [r5, #0]
 801853e:	061f      	lsls	r7, r3, #24
 8018540:	f851 6b04 	ldr.w	r6, [r1], #4
 8018544:	d402      	bmi.n	801854c <_printf_i+0x18c>
 8018546:	065f      	lsls	r7, r3, #25
 8018548:	bf48      	it	mi
 801854a:	b2b6      	uxthmi	r6, r6
 801854c:	07df      	lsls	r7, r3, #31
 801854e:	bf48      	it	mi
 8018550:	f043 0320 	orrmi.w	r3, r3, #32
 8018554:	6029      	str	r1, [r5, #0]
 8018556:	bf48      	it	mi
 8018558:	6023      	strmi	r3, [r4, #0]
 801855a:	b91e      	cbnz	r6, 8018564 <_printf_i+0x1a4>
 801855c:	6823      	ldr	r3, [r4, #0]
 801855e:	f023 0320 	bic.w	r3, r3, #32
 8018562:	6023      	str	r3, [r4, #0]
 8018564:	2310      	movs	r3, #16
 8018566:	e7a7      	b.n	80184b8 <_printf_i+0xf8>
 8018568:	4824      	ldr	r0, [pc, #144]	; (80185fc <_printf_i+0x23c>)
 801856a:	e7e4      	b.n	8018536 <_printf_i+0x176>
 801856c:	4615      	mov	r5, r2
 801856e:	e7bd      	b.n	80184ec <_printf_i+0x12c>
 8018570:	682b      	ldr	r3, [r5, #0]
 8018572:	6826      	ldr	r6, [r4, #0]
 8018574:	6961      	ldr	r1, [r4, #20]
 8018576:	1d18      	adds	r0, r3, #4
 8018578:	6028      	str	r0, [r5, #0]
 801857a:	0635      	lsls	r5, r6, #24
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	d501      	bpl.n	8018584 <_printf_i+0x1c4>
 8018580:	6019      	str	r1, [r3, #0]
 8018582:	e002      	b.n	801858a <_printf_i+0x1ca>
 8018584:	0670      	lsls	r0, r6, #25
 8018586:	d5fb      	bpl.n	8018580 <_printf_i+0x1c0>
 8018588:	8019      	strh	r1, [r3, #0]
 801858a:	2300      	movs	r3, #0
 801858c:	6123      	str	r3, [r4, #16]
 801858e:	4615      	mov	r5, r2
 8018590:	e7bc      	b.n	801850c <_printf_i+0x14c>
 8018592:	682b      	ldr	r3, [r5, #0]
 8018594:	1d1a      	adds	r2, r3, #4
 8018596:	602a      	str	r2, [r5, #0]
 8018598:	681d      	ldr	r5, [r3, #0]
 801859a:	6862      	ldr	r2, [r4, #4]
 801859c:	2100      	movs	r1, #0
 801859e:	4628      	mov	r0, r5
 80185a0:	f7e7 fe4e 	bl	8000240 <memchr>
 80185a4:	b108      	cbz	r0, 80185aa <_printf_i+0x1ea>
 80185a6:	1b40      	subs	r0, r0, r5
 80185a8:	6060      	str	r0, [r4, #4]
 80185aa:	6863      	ldr	r3, [r4, #4]
 80185ac:	6123      	str	r3, [r4, #16]
 80185ae:	2300      	movs	r3, #0
 80185b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80185b4:	e7aa      	b.n	801850c <_printf_i+0x14c>
 80185b6:	6923      	ldr	r3, [r4, #16]
 80185b8:	462a      	mov	r2, r5
 80185ba:	4649      	mov	r1, r9
 80185bc:	4640      	mov	r0, r8
 80185be:	47d0      	blx	sl
 80185c0:	3001      	adds	r0, #1
 80185c2:	d0ad      	beq.n	8018520 <_printf_i+0x160>
 80185c4:	6823      	ldr	r3, [r4, #0]
 80185c6:	079b      	lsls	r3, r3, #30
 80185c8:	d413      	bmi.n	80185f2 <_printf_i+0x232>
 80185ca:	68e0      	ldr	r0, [r4, #12]
 80185cc:	9b03      	ldr	r3, [sp, #12]
 80185ce:	4298      	cmp	r0, r3
 80185d0:	bfb8      	it	lt
 80185d2:	4618      	movlt	r0, r3
 80185d4:	e7a6      	b.n	8018524 <_printf_i+0x164>
 80185d6:	2301      	movs	r3, #1
 80185d8:	4632      	mov	r2, r6
 80185da:	4649      	mov	r1, r9
 80185dc:	4640      	mov	r0, r8
 80185de:	47d0      	blx	sl
 80185e0:	3001      	adds	r0, #1
 80185e2:	d09d      	beq.n	8018520 <_printf_i+0x160>
 80185e4:	3501      	adds	r5, #1
 80185e6:	68e3      	ldr	r3, [r4, #12]
 80185e8:	9903      	ldr	r1, [sp, #12]
 80185ea:	1a5b      	subs	r3, r3, r1
 80185ec:	42ab      	cmp	r3, r5
 80185ee:	dcf2      	bgt.n	80185d6 <_printf_i+0x216>
 80185f0:	e7eb      	b.n	80185ca <_printf_i+0x20a>
 80185f2:	2500      	movs	r5, #0
 80185f4:	f104 0619 	add.w	r6, r4, #25
 80185f8:	e7f5      	b.n	80185e6 <_printf_i+0x226>
 80185fa:	bf00      	nop
 80185fc:	080204f6 	.word	0x080204f6
 8018600:	08020507 	.word	0x08020507

08018604 <_scanf_float>:
 8018604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018608:	b087      	sub	sp, #28
 801860a:	4617      	mov	r7, r2
 801860c:	9303      	str	r3, [sp, #12]
 801860e:	688b      	ldr	r3, [r1, #8]
 8018610:	1e5a      	subs	r2, r3, #1
 8018612:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018616:	bf83      	ittte	hi
 8018618:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801861c:	195b      	addhi	r3, r3, r5
 801861e:	9302      	strhi	r3, [sp, #8]
 8018620:	2300      	movls	r3, #0
 8018622:	bf86      	itte	hi
 8018624:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018628:	608b      	strhi	r3, [r1, #8]
 801862a:	9302      	strls	r3, [sp, #8]
 801862c:	680b      	ldr	r3, [r1, #0]
 801862e:	468b      	mov	fp, r1
 8018630:	2500      	movs	r5, #0
 8018632:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8018636:	f84b 3b1c 	str.w	r3, [fp], #28
 801863a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801863e:	4680      	mov	r8, r0
 8018640:	460c      	mov	r4, r1
 8018642:	465e      	mov	r6, fp
 8018644:	46aa      	mov	sl, r5
 8018646:	46a9      	mov	r9, r5
 8018648:	9501      	str	r5, [sp, #4]
 801864a:	68a2      	ldr	r2, [r4, #8]
 801864c:	b152      	cbz	r2, 8018664 <_scanf_float+0x60>
 801864e:	683b      	ldr	r3, [r7, #0]
 8018650:	781b      	ldrb	r3, [r3, #0]
 8018652:	2b4e      	cmp	r3, #78	; 0x4e
 8018654:	d864      	bhi.n	8018720 <_scanf_float+0x11c>
 8018656:	2b40      	cmp	r3, #64	; 0x40
 8018658:	d83c      	bhi.n	80186d4 <_scanf_float+0xd0>
 801865a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801865e:	b2c8      	uxtb	r0, r1
 8018660:	280e      	cmp	r0, #14
 8018662:	d93a      	bls.n	80186da <_scanf_float+0xd6>
 8018664:	f1b9 0f00 	cmp.w	r9, #0
 8018668:	d003      	beq.n	8018672 <_scanf_float+0x6e>
 801866a:	6823      	ldr	r3, [r4, #0]
 801866c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018670:	6023      	str	r3, [r4, #0]
 8018672:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018676:	f1ba 0f01 	cmp.w	sl, #1
 801867a:	f200 8113 	bhi.w	80188a4 <_scanf_float+0x2a0>
 801867e:	455e      	cmp	r6, fp
 8018680:	f200 8105 	bhi.w	801888e <_scanf_float+0x28a>
 8018684:	2501      	movs	r5, #1
 8018686:	4628      	mov	r0, r5
 8018688:	b007      	add	sp, #28
 801868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801868e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018692:	2a0d      	cmp	r2, #13
 8018694:	d8e6      	bhi.n	8018664 <_scanf_float+0x60>
 8018696:	a101      	add	r1, pc, #4	; (adr r1, 801869c <_scanf_float+0x98>)
 8018698:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801869c:	080187db 	.word	0x080187db
 80186a0:	08018665 	.word	0x08018665
 80186a4:	08018665 	.word	0x08018665
 80186a8:	08018665 	.word	0x08018665
 80186ac:	0801883b 	.word	0x0801883b
 80186b0:	08018813 	.word	0x08018813
 80186b4:	08018665 	.word	0x08018665
 80186b8:	08018665 	.word	0x08018665
 80186bc:	080187e9 	.word	0x080187e9
 80186c0:	08018665 	.word	0x08018665
 80186c4:	08018665 	.word	0x08018665
 80186c8:	08018665 	.word	0x08018665
 80186cc:	08018665 	.word	0x08018665
 80186d0:	080187a1 	.word	0x080187a1
 80186d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80186d8:	e7db      	b.n	8018692 <_scanf_float+0x8e>
 80186da:	290e      	cmp	r1, #14
 80186dc:	d8c2      	bhi.n	8018664 <_scanf_float+0x60>
 80186de:	a001      	add	r0, pc, #4	; (adr r0, 80186e4 <_scanf_float+0xe0>)
 80186e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80186e4:	08018793 	.word	0x08018793
 80186e8:	08018665 	.word	0x08018665
 80186ec:	08018793 	.word	0x08018793
 80186f0:	08018827 	.word	0x08018827
 80186f4:	08018665 	.word	0x08018665
 80186f8:	08018741 	.word	0x08018741
 80186fc:	0801877d 	.word	0x0801877d
 8018700:	0801877d 	.word	0x0801877d
 8018704:	0801877d 	.word	0x0801877d
 8018708:	0801877d 	.word	0x0801877d
 801870c:	0801877d 	.word	0x0801877d
 8018710:	0801877d 	.word	0x0801877d
 8018714:	0801877d 	.word	0x0801877d
 8018718:	0801877d 	.word	0x0801877d
 801871c:	0801877d 	.word	0x0801877d
 8018720:	2b6e      	cmp	r3, #110	; 0x6e
 8018722:	d809      	bhi.n	8018738 <_scanf_float+0x134>
 8018724:	2b60      	cmp	r3, #96	; 0x60
 8018726:	d8b2      	bhi.n	801868e <_scanf_float+0x8a>
 8018728:	2b54      	cmp	r3, #84	; 0x54
 801872a:	d077      	beq.n	801881c <_scanf_float+0x218>
 801872c:	2b59      	cmp	r3, #89	; 0x59
 801872e:	d199      	bne.n	8018664 <_scanf_float+0x60>
 8018730:	2d07      	cmp	r5, #7
 8018732:	d197      	bne.n	8018664 <_scanf_float+0x60>
 8018734:	2508      	movs	r5, #8
 8018736:	e029      	b.n	801878c <_scanf_float+0x188>
 8018738:	2b74      	cmp	r3, #116	; 0x74
 801873a:	d06f      	beq.n	801881c <_scanf_float+0x218>
 801873c:	2b79      	cmp	r3, #121	; 0x79
 801873e:	e7f6      	b.n	801872e <_scanf_float+0x12a>
 8018740:	6821      	ldr	r1, [r4, #0]
 8018742:	05c8      	lsls	r0, r1, #23
 8018744:	d51a      	bpl.n	801877c <_scanf_float+0x178>
 8018746:	9b02      	ldr	r3, [sp, #8]
 8018748:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801874c:	6021      	str	r1, [r4, #0]
 801874e:	f109 0901 	add.w	r9, r9, #1
 8018752:	b11b      	cbz	r3, 801875c <_scanf_float+0x158>
 8018754:	3b01      	subs	r3, #1
 8018756:	3201      	adds	r2, #1
 8018758:	9302      	str	r3, [sp, #8]
 801875a:	60a2      	str	r2, [r4, #8]
 801875c:	68a3      	ldr	r3, [r4, #8]
 801875e:	3b01      	subs	r3, #1
 8018760:	60a3      	str	r3, [r4, #8]
 8018762:	6923      	ldr	r3, [r4, #16]
 8018764:	3301      	adds	r3, #1
 8018766:	6123      	str	r3, [r4, #16]
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	3b01      	subs	r3, #1
 801876c:	2b00      	cmp	r3, #0
 801876e:	607b      	str	r3, [r7, #4]
 8018770:	f340 8084 	ble.w	801887c <_scanf_float+0x278>
 8018774:	683b      	ldr	r3, [r7, #0]
 8018776:	3301      	adds	r3, #1
 8018778:	603b      	str	r3, [r7, #0]
 801877a:	e766      	b.n	801864a <_scanf_float+0x46>
 801877c:	eb1a 0f05 	cmn.w	sl, r5
 8018780:	f47f af70 	bne.w	8018664 <_scanf_float+0x60>
 8018784:	6822      	ldr	r2, [r4, #0]
 8018786:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801878a:	6022      	str	r2, [r4, #0]
 801878c:	f806 3b01 	strb.w	r3, [r6], #1
 8018790:	e7e4      	b.n	801875c <_scanf_float+0x158>
 8018792:	6822      	ldr	r2, [r4, #0]
 8018794:	0610      	lsls	r0, r2, #24
 8018796:	f57f af65 	bpl.w	8018664 <_scanf_float+0x60>
 801879a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801879e:	e7f4      	b.n	801878a <_scanf_float+0x186>
 80187a0:	f1ba 0f00 	cmp.w	sl, #0
 80187a4:	d10e      	bne.n	80187c4 <_scanf_float+0x1c0>
 80187a6:	f1b9 0f00 	cmp.w	r9, #0
 80187aa:	d10e      	bne.n	80187ca <_scanf_float+0x1c6>
 80187ac:	6822      	ldr	r2, [r4, #0]
 80187ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80187b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80187b6:	d108      	bne.n	80187ca <_scanf_float+0x1c6>
 80187b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80187bc:	6022      	str	r2, [r4, #0]
 80187be:	f04f 0a01 	mov.w	sl, #1
 80187c2:	e7e3      	b.n	801878c <_scanf_float+0x188>
 80187c4:	f1ba 0f02 	cmp.w	sl, #2
 80187c8:	d055      	beq.n	8018876 <_scanf_float+0x272>
 80187ca:	2d01      	cmp	r5, #1
 80187cc:	d002      	beq.n	80187d4 <_scanf_float+0x1d0>
 80187ce:	2d04      	cmp	r5, #4
 80187d0:	f47f af48 	bne.w	8018664 <_scanf_float+0x60>
 80187d4:	3501      	adds	r5, #1
 80187d6:	b2ed      	uxtb	r5, r5
 80187d8:	e7d8      	b.n	801878c <_scanf_float+0x188>
 80187da:	f1ba 0f01 	cmp.w	sl, #1
 80187de:	f47f af41 	bne.w	8018664 <_scanf_float+0x60>
 80187e2:	f04f 0a02 	mov.w	sl, #2
 80187e6:	e7d1      	b.n	801878c <_scanf_float+0x188>
 80187e8:	b97d      	cbnz	r5, 801880a <_scanf_float+0x206>
 80187ea:	f1b9 0f00 	cmp.w	r9, #0
 80187ee:	f47f af3c 	bne.w	801866a <_scanf_float+0x66>
 80187f2:	6822      	ldr	r2, [r4, #0]
 80187f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80187f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80187fc:	f47f af39 	bne.w	8018672 <_scanf_float+0x6e>
 8018800:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018804:	6022      	str	r2, [r4, #0]
 8018806:	2501      	movs	r5, #1
 8018808:	e7c0      	b.n	801878c <_scanf_float+0x188>
 801880a:	2d03      	cmp	r5, #3
 801880c:	d0e2      	beq.n	80187d4 <_scanf_float+0x1d0>
 801880e:	2d05      	cmp	r5, #5
 8018810:	e7de      	b.n	80187d0 <_scanf_float+0x1cc>
 8018812:	2d02      	cmp	r5, #2
 8018814:	f47f af26 	bne.w	8018664 <_scanf_float+0x60>
 8018818:	2503      	movs	r5, #3
 801881a:	e7b7      	b.n	801878c <_scanf_float+0x188>
 801881c:	2d06      	cmp	r5, #6
 801881e:	f47f af21 	bne.w	8018664 <_scanf_float+0x60>
 8018822:	2507      	movs	r5, #7
 8018824:	e7b2      	b.n	801878c <_scanf_float+0x188>
 8018826:	6822      	ldr	r2, [r4, #0]
 8018828:	0591      	lsls	r1, r2, #22
 801882a:	f57f af1b 	bpl.w	8018664 <_scanf_float+0x60>
 801882e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8018832:	6022      	str	r2, [r4, #0]
 8018834:	f8cd 9004 	str.w	r9, [sp, #4]
 8018838:	e7a8      	b.n	801878c <_scanf_float+0x188>
 801883a:	6822      	ldr	r2, [r4, #0]
 801883c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8018840:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8018844:	d006      	beq.n	8018854 <_scanf_float+0x250>
 8018846:	0550      	lsls	r0, r2, #21
 8018848:	f57f af0c 	bpl.w	8018664 <_scanf_float+0x60>
 801884c:	f1b9 0f00 	cmp.w	r9, #0
 8018850:	f43f af0f 	beq.w	8018672 <_scanf_float+0x6e>
 8018854:	0591      	lsls	r1, r2, #22
 8018856:	bf58      	it	pl
 8018858:	9901      	ldrpl	r1, [sp, #4]
 801885a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801885e:	bf58      	it	pl
 8018860:	eba9 0101 	subpl.w	r1, r9, r1
 8018864:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8018868:	bf58      	it	pl
 801886a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801886e:	6022      	str	r2, [r4, #0]
 8018870:	f04f 0900 	mov.w	r9, #0
 8018874:	e78a      	b.n	801878c <_scanf_float+0x188>
 8018876:	f04f 0a03 	mov.w	sl, #3
 801887a:	e787      	b.n	801878c <_scanf_float+0x188>
 801887c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018880:	4639      	mov	r1, r7
 8018882:	4640      	mov	r0, r8
 8018884:	4798      	blx	r3
 8018886:	2800      	cmp	r0, #0
 8018888:	f43f aedf 	beq.w	801864a <_scanf_float+0x46>
 801888c:	e6ea      	b.n	8018664 <_scanf_float+0x60>
 801888e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018896:	463a      	mov	r2, r7
 8018898:	4640      	mov	r0, r8
 801889a:	4798      	blx	r3
 801889c:	6923      	ldr	r3, [r4, #16]
 801889e:	3b01      	subs	r3, #1
 80188a0:	6123      	str	r3, [r4, #16]
 80188a2:	e6ec      	b.n	801867e <_scanf_float+0x7a>
 80188a4:	1e6b      	subs	r3, r5, #1
 80188a6:	2b06      	cmp	r3, #6
 80188a8:	d825      	bhi.n	80188f6 <_scanf_float+0x2f2>
 80188aa:	2d02      	cmp	r5, #2
 80188ac:	d836      	bhi.n	801891c <_scanf_float+0x318>
 80188ae:	455e      	cmp	r6, fp
 80188b0:	f67f aee8 	bls.w	8018684 <_scanf_float+0x80>
 80188b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80188b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80188bc:	463a      	mov	r2, r7
 80188be:	4640      	mov	r0, r8
 80188c0:	4798      	blx	r3
 80188c2:	6923      	ldr	r3, [r4, #16]
 80188c4:	3b01      	subs	r3, #1
 80188c6:	6123      	str	r3, [r4, #16]
 80188c8:	e7f1      	b.n	80188ae <_scanf_float+0x2aa>
 80188ca:	9802      	ldr	r0, [sp, #8]
 80188cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80188d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80188d4:	9002      	str	r0, [sp, #8]
 80188d6:	463a      	mov	r2, r7
 80188d8:	4640      	mov	r0, r8
 80188da:	4798      	blx	r3
 80188dc:	6923      	ldr	r3, [r4, #16]
 80188de:	3b01      	subs	r3, #1
 80188e0:	6123      	str	r3, [r4, #16]
 80188e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80188e6:	fa5f fa8a 	uxtb.w	sl, sl
 80188ea:	f1ba 0f02 	cmp.w	sl, #2
 80188ee:	d1ec      	bne.n	80188ca <_scanf_float+0x2c6>
 80188f0:	3d03      	subs	r5, #3
 80188f2:	b2ed      	uxtb	r5, r5
 80188f4:	1b76      	subs	r6, r6, r5
 80188f6:	6823      	ldr	r3, [r4, #0]
 80188f8:	05da      	lsls	r2, r3, #23
 80188fa:	d52f      	bpl.n	801895c <_scanf_float+0x358>
 80188fc:	055b      	lsls	r3, r3, #21
 80188fe:	d510      	bpl.n	8018922 <_scanf_float+0x31e>
 8018900:	455e      	cmp	r6, fp
 8018902:	f67f aebf 	bls.w	8018684 <_scanf_float+0x80>
 8018906:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801890a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801890e:	463a      	mov	r2, r7
 8018910:	4640      	mov	r0, r8
 8018912:	4798      	blx	r3
 8018914:	6923      	ldr	r3, [r4, #16]
 8018916:	3b01      	subs	r3, #1
 8018918:	6123      	str	r3, [r4, #16]
 801891a:	e7f1      	b.n	8018900 <_scanf_float+0x2fc>
 801891c:	46aa      	mov	sl, r5
 801891e:	9602      	str	r6, [sp, #8]
 8018920:	e7df      	b.n	80188e2 <_scanf_float+0x2de>
 8018922:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8018926:	6923      	ldr	r3, [r4, #16]
 8018928:	2965      	cmp	r1, #101	; 0x65
 801892a:	f103 33ff 	add.w	r3, r3, #4294967295
 801892e:	f106 35ff 	add.w	r5, r6, #4294967295
 8018932:	6123      	str	r3, [r4, #16]
 8018934:	d00c      	beq.n	8018950 <_scanf_float+0x34c>
 8018936:	2945      	cmp	r1, #69	; 0x45
 8018938:	d00a      	beq.n	8018950 <_scanf_float+0x34c>
 801893a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801893e:	463a      	mov	r2, r7
 8018940:	4640      	mov	r0, r8
 8018942:	4798      	blx	r3
 8018944:	6923      	ldr	r3, [r4, #16]
 8018946:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801894a:	3b01      	subs	r3, #1
 801894c:	1eb5      	subs	r5, r6, #2
 801894e:	6123      	str	r3, [r4, #16]
 8018950:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018954:	463a      	mov	r2, r7
 8018956:	4640      	mov	r0, r8
 8018958:	4798      	blx	r3
 801895a:	462e      	mov	r6, r5
 801895c:	6825      	ldr	r5, [r4, #0]
 801895e:	f015 0510 	ands.w	r5, r5, #16
 8018962:	d14d      	bne.n	8018a00 <_scanf_float+0x3fc>
 8018964:	7035      	strb	r5, [r6, #0]
 8018966:	6823      	ldr	r3, [r4, #0]
 8018968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801896c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018970:	d11a      	bne.n	80189a8 <_scanf_float+0x3a4>
 8018972:	9b01      	ldr	r3, [sp, #4]
 8018974:	454b      	cmp	r3, r9
 8018976:	eba3 0209 	sub.w	r2, r3, r9
 801897a:	d122      	bne.n	80189c2 <_scanf_float+0x3be>
 801897c:	2200      	movs	r2, #0
 801897e:	4659      	mov	r1, fp
 8018980:	4640      	mov	r0, r8
 8018982:	f002 fc2b 	bl	801b1dc <_strtod_r>
 8018986:	9b03      	ldr	r3, [sp, #12]
 8018988:	6821      	ldr	r1, [r4, #0]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	f011 0f02 	tst.w	r1, #2
 8018990:	f103 0204 	add.w	r2, r3, #4
 8018994:	d020      	beq.n	80189d8 <_scanf_float+0x3d4>
 8018996:	9903      	ldr	r1, [sp, #12]
 8018998:	600a      	str	r2, [r1, #0]
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	ed83 0b00 	vstr	d0, [r3]
 80189a0:	68e3      	ldr	r3, [r4, #12]
 80189a2:	3301      	adds	r3, #1
 80189a4:	60e3      	str	r3, [r4, #12]
 80189a6:	e66e      	b.n	8018686 <_scanf_float+0x82>
 80189a8:	9b04      	ldr	r3, [sp, #16]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d0e6      	beq.n	801897c <_scanf_float+0x378>
 80189ae:	9905      	ldr	r1, [sp, #20]
 80189b0:	230a      	movs	r3, #10
 80189b2:	462a      	mov	r2, r5
 80189b4:	3101      	adds	r1, #1
 80189b6:	4640      	mov	r0, r8
 80189b8:	f7ff f9e8 	bl	8017d8c <_strtol_r>
 80189bc:	9b04      	ldr	r3, [sp, #16]
 80189be:	9e05      	ldr	r6, [sp, #20]
 80189c0:	1ac2      	subs	r2, r0, r3
 80189c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80189c6:	429e      	cmp	r6, r3
 80189c8:	bf28      	it	cs
 80189ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80189ce:	490d      	ldr	r1, [pc, #52]	; (8018a04 <_scanf_float+0x400>)
 80189d0:	4630      	mov	r0, r6
 80189d2:	f000 f8ef 	bl	8018bb4 <siprintf>
 80189d6:	e7d1      	b.n	801897c <_scanf_float+0x378>
 80189d8:	f011 0f04 	tst.w	r1, #4
 80189dc:	9903      	ldr	r1, [sp, #12]
 80189de:	600a      	str	r2, [r1, #0]
 80189e0:	d1db      	bne.n	801899a <_scanf_float+0x396>
 80189e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80189e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ea:	681e      	ldr	r6, [r3, #0]
 80189ec:	d705      	bvc.n	80189fa <_scanf_float+0x3f6>
 80189ee:	4806      	ldr	r0, [pc, #24]	; (8018a08 <_scanf_float+0x404>)
 80189f0:	f000 fa64 	bl	8018ebc <nanf>
 80189f4:	ed86 0a00 	vstr	s0, [r6]
 80189f8:	e7d2      	b.n	80189a0 <_scanf_float+0x39c>
 80189fa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80189fe:	e7f9      	b.n	80189f4 <_scanf_float+0x3f0>
 8018a00:	2500      	movs	r5, #0
 8018a02:	e640      	b.n	8018686 <_scanf_float+0x82>
 8018a04:	08020518 	.word	0x08020518
 8018a08:	08020558 	.word	0x08020558

08018a0c <std>:
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	b510      	push	{r4, lr}
 8018a10:	4604      	mov	r4, r0
 8018a12:	e9c0 3300 	strd	r3, r3, [r0]
 8018a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018a1a:	6083      	str	r3, [r0, #8]
 8018a1c:	8181      	strh	r1, [r0, #12]
 8018a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8018a20:	81c2      	strh	r2, [r0, #14]
 8018a22:	6183      	str	r3, [r0, #24]
 8018a24:	4619      	mov	r1, r3
 8018a26:	2208      	movs	r2, #8
 8018a28:	305c      	adds	r0, #92	; 0x5c
 8018a2a:	f000 f950 	bl	8018cce <memset>
 8018a2e:	4b0d      	ldr	r3, [pc, #52]	; (8018a64 <std+0x58>)
 8018a30:	6263      	str	r3, [r4, #36]	; 0x24
 8018a32:	4b0d      	ldr	r3, [pc, #52]	; (8018a68 <std+0x5c>)
 8018a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8018a36:	4b0d      	ldr	r3, [pc, #52]	; (8018a6c <std+0x60>)
 8018a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018a3a:	4b0d      	ldr	r3, [pc, #52]	; (8018a70 <std+0x64>)
 8018a3c:	6323      	str	r3, [r4, #48]	; 0x30
 8018a3e:	4b0d      	ldr	r3, [pc, #52]	; (8018a74 <std+0x68>)
 8018a40:	6224      	str	r4, [r4, #32]
 8018a42:	429c      	cmp	r4, r3
 8018a44:	d006      	beq.n	8018a54 <std+0x48>
 8018a46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8018a4a:	4294      	cmp	r4, r2
 8018a4c:	d002      	beq.n	8018a54 <std+0x48>
 8018a4e:	33d0      	adds	r3, #208	; 0xd0
 8018a50:	429c      	cmp	r4, r3
 8018a52:	d105      	bne.n	8018a60 <std+0x54>
 8018a54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a5c:	f000 ba1c 	b.w	8018e98 <__retarget_lock_init_recursive>
 8018a60:	bd10      	pop	{r4, pc}
 8018a62:	bf00      	nop
 8018a64:	08018bf5 	.word	0x08018bf5
 8018a68:	08018c17 	.word	0x08018c17
 8018a6c:	08018c4f 	.word	0x08018c4f
 8018a70:	08018c73 	.word	0x08018c73
 8018a74:	20077a98 	.word	0x20077a98

08018a78 <stdio_exit_handler>:
 8018a78:	4a02      	ldr	r2, [pc, #8]	; (8018a84 <stdio_exit_handler+0xc>)
 8018a7a:	4903      	ldr	r1, [pc, #12]	; (8018a88 <stdio_exit_handler+0x10>)
 8018a7c:	4803      	ldr	r0, [pc, #12]	; (8018a8c <stdio_exit_handler+0x14>)
 8018a7e:	f000 b869 	b.w	8018b54 <_fwalk_sglue>
 8018a82:	bf00      	nop
 8018a84:	20000030 	.word	0x20000030
 8018a88:	0801b82d 	.word	0x0801b82d
 8018a8c:	2000003c 	.word	0x2000003c

08018a90 <cleanup_stdio>:
 8018a90:	6841      	ldr	r1, [r0, #4]
 8018a92:	4b0c      	ldr	r3, [pc, #48]	; (8018ac4 <cleanup_stdio+0x34>)
 8018a94:	4299      	cmp	r1, r3
 8018a96:	b510      	push	{r4, lr}
 8018a98:	4604      	mov	r4, r0
 8018a9a:	d001      	beq.n	8018aa0 <cleanup_stdio+0x10>
 8018a9c:	f002 fec6 	bl	801b82c <_fflush_r>
 8018aa0:	68a1      	ldr	r1, [r4, #8]
 8018aa2:	4b09      	ldr	r3, [pc, #36]	; (8018ac8 <cleanup_stdio+0x38>)
 8018aa4:	4299      	cmp	r1, r3
 8018aa6:	d002      	beq.n	8018aae <cleanup_stdio+0x1e>
 8018aa8:	4620      	mov	r0, r4
 8018aaa:	f002 febf 	bl	801b82c <_fflush_r>
 8018aae:	68e1      	ldr	r1, [r4, #12]
 8018ab0:	4b06      	ldr	r3, [pc, #24]	; (8018acc <cleanup_stdio+0x3c>)
 8018ab2:	4299      	cmp	r1, r3
 8018ab4:	d004      	beq.n	8018ac0 <cleanup_stdio+0x30>
 8018ab6:	4620      	mov	r0, r4
 8018ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018abc:	f002 beb6 	b.w	801b82c <_fflush_r>
 8018ac0:	bd10      	pop	{r4, pc}
 8018ac2:	bf00      	nop
 8018ac4:	20077a98 	.word	0x20077a98
 8018ac8:	20077b00 	.word	0x20077b00
 8018acc:	20077b68 	.word	0x20077b68

08018ad0 <global_stdio_init.part.0>:
 8018ad0:	b510      	push	{r4, lr}
 8018ad2:	4b0b      	ldr	r3, [pc, #44]	; (8018b00 <global_stdio_init.part.0+0x30>)
 8018ad4:	4c0b      	ldr	r4, [pc, #44]	; (8018b04 <global_stdio_init.part.0+0x34>)
 8018ad6:	4a0c      	ldr	r2, [pc, #48]	; (8018b08 <global_stdio_init.part.0+0x38>)
 8018ad8:	601a      	str	r2, [r3, #0]
 8018ada:	4620      	mov	r0, r4
 8018adc:	2200      	movs	r2, #0
 8018ade:	2104      	movs	r1, #4
 8018ae0:	f7ff ff94 	bl	8018a0c <std>
 8018ae4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018ae8:	2201      	movs	r2, #1
 8018aea:	2109      	movs	r1, #9
 8018aec:	f7ff ff8e 	bl	8018a0c <std>
 8018af0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018af4:	2202      	movs	r2, #2
 8018af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018afa:	2112      	movs	r1, #18
 8018afc:	f7ff bf86 	b.w	8018a0c <std>
 8018b00:	20077bd0 	.word	0x20077bd0
 8018b04:	20077a98 	.word	0x20077a98
 8018b08:	08018a79 	.word	0x08018a79

08018b0c <__sfp_lock_acquire>:
 8018b0c:	4801      	ldr	r0, [pc, #4]	; (8018b14 <__sfp_lock_acquire+0x8>)
 8018b0e:	f000 b9c4 	b.w	8018e9a <__retarget_lock_acquire_recursive>
 8018b12:	bf00      	nop
 8018b14:	20077bd9 	.word	0x20077bd9

08018b18 <__sfp_lock_release>:
 8018b18:	4801      	ldr	r0, [pc, #4]	; (8018b20 <__sfp_lock_release+0x8>)
 8018b1a:	f000 b9bf 	b.w	8018e9c <__retarget_lock_release_recursive>
 8018b1e:	bf00      	nop
 8018b20:	20077bd9 	.word	0x20077bd9

08018b24 <__sinit>:
 8018b24:	b510      	push	{r4, lr}
 8018b26:	4604      	mov	r4, r0
 8018b28:	f7ff fff0 	bl	8018b0c <__sfp_lock_acquire>
 8018b2c:	6a23      	ldr	r3, [r4, #32]
 8018b2e:	b11b      	cbz	r3, 8018b38 <__sinit+0x14>
 8018b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b34:	f7ff bff0 	b.w	8018b18 <__sfp_lock_release>
 8018b38:	4b04      	ldr	r3, [pc, #16]	; (8018b4c <__sinit+0x28>)
 8018b3a:	6223      	str	r3, [r4, #32]
 8018b3c:	4b04      	ldr	r3, [pc, #16]	; (8018b50 <__sinit+0x2c>)
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d1f5      	bne.n	8018b30 <__sinit+0xc>
 8018b44:	f7ff ffc4 	bl	8018ad0 <global_stdio_init.part.0>
 8018b48:	e7f2      	b.n	8018b30 <__sinit+0xc>
 8018b4a:	bf00      	nop
 8018b4c:	08018a91 	.word	0x08018a91
 8018b50:	20077bd0 	.word	0x20077bd0

08018b54 <_fwalk_sglue>:
 8018b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b58:	4607      	mov	r7, r0
 8018b5a:	4688      	mov	r8, r1
 8018b5c:	4614      	mov	r4, r2
 8018b5e:	2600      	movs	r6, #0
 8018b60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018b64:	f1b9 0901 	subs.w	r9, r9, #1
 8018b68:	d505      	bpl.n	8018b76 <_fwalk_sglue+0x22>
 8018b6a:	6824      	ldr	r4, [r4, #0]
 8018b6c:	2c00      	cmp	r4, #0
 8018b6e:	d1f7      	bne.n	8018b60 <_fwalk_sglue+0xc>
 8018b70:	4630      	mov	r0, r6
 8018b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b76:	89ab      	ldrh	r3, [r5, #12]
 8018b78:	2b01      	cmp	r3, #1
 8018b7a:	d907      	bls.n	8018b8c <_fwalk_sglue+0x38>
 8018b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018b80:	3301      	adds	r3, #1
 8018b82:	d003      	beq.n	8018b8c <_fwalk_sglue+0x38>
 8018b84:	4629      	mov	r1, r5
 8018b86:	4638      	mov	r0, r7
 8018b88:	47c0      	blx	r8
 8018b8a:	4306      	orrs	r6, r0
 8018b8c:	3568      	adds	r5, #104	; 0x68
 8018b8e:	e7e9      	b.n	8018b64 <_fwalk_sglue+0x10>

08018b90 <iprintf>:
 8018b90:	b40f      	push	{r0, r1, r2, r3}
 8018b92:	b507      	push	{r0, r1, r2, lr}
 8018b94:	4906      	ldr	r1, [pc, #24]	; (8018bb0 <iprintf+0x20>)
 8018b96:	ab04      	add	r3, sp, #16
 8018b98:	6808      	ldr	r0, [r1, #0]
 8018b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b9e:	6881      	ldr	r1, [r0, #8]
 8018ba0:	9301      	str	r3, [sp, #4]
 8018ba2:	f002 fca3 	bl	801b4ec <_vfiprintf_r>
 8018ba6:	b003      	add	sp, #12
 8018ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018bac:	b004      	add	sp, #16
 8018bae:	4770      	bx	lr
 8018bb0:	20000088 	.word	0x20000088

08018bb4 <siprintf>:
 8018bb4:	b40e      	push	{r1, r2, r3}
 8018bb6:	b500      	push	{lr}
 8018bb8:	b09c      	sub	sp, #112	; 0x70
 8018bba:	ab1d      	add	r3, sp, #116	; 0x74
 8018bbc:	9002      	str	r0, [sp, #8]
 8018bbe:	9006      	str	r0, [sp, #24]
 8018bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018bc4:	4809      	ldr	r0, [pc, #36]	; (8018bec <siprintf+0x38>)
 8018bc6:	9107      	str	r1, [sp, #28]
 8018bc8:	9104      	str	r1, [sp, #16]
 8018bca:	4909      	ldr	r1, [pc, #36]	; (8018bf0 <siprintf+0x3c>)
 8018bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bd0:	9105      	str	r1, [sp, #20]
 8018bd2:	6800      	ldr	r0, [r0, #0]
 8018bd4:	9301      	str	r3, [sp, #4]
 8018bd6:	a902      	add	r1, sp, #8
 8018bd8:	f002 fb60 	bl	801b29c <_svfiprintf_r>
 8018bdc:	9b02      	ldr	r3, [sp, #8]
 8018bde:	2200      	movs	r2, #0
 8018be0:	701a      	strb	r2, [r3, #0]
 8018be2:	b01c      	add	sp, #112	; 0x70
 8018be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018be8:	b003      	add	sp, #12
 8018bea:	4770      	bx	lr
 8018bec:	20000088 	.word	0x20000088
 8018bf0:	ffff0208 	.word	0xffff0208

08018bf4 <__sread>:
 8018bf4:	b510      	push	{r4, lr}
 8018bf6:	460c      	mov	r4, r1
 8018bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bfc:	f000 f8fe 	bl	8018dfc <_read_r>
 8018c00:	2800      	cmp	r0, #0
 8018c02:	bfab      	itete	ge
 8018c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018c06:	89a3      	ldrhlt	r3, [r4, #12]
 8018c08:	181b      	addge	r3, r3, r0
 8018c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018c0e:	bfac      	ite	ge
 8018c10:	6563      	strge	r3, [r4, #84]	; 0x54
 8018c12:	81a3      	strhlt	r3, [r4, #12]
 8018c14:	bd10      	pop	{r4, pc}

08018c16 <__swrite>:
 8018c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c1a:	461f      	mov	r7, r3
 8018c1c:	898b      	ldrh	r3, [r1, #12]
 8018c1e:	05db      	lsls	r3, r3, #23
 8018c20:	4605      	mov	r5, r0
 8018c22:	460c      	mov	r4, r1
 8018c24:	4616      	mov	r6, r2
 8018c26:	d505      	bpl.n	8018c34 <__swrite+0x1e>
 8018c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c2c:	2302      	movs	r3, #2
 8018c2e:	2200      	movs	r2, #0
 8018c30:	f000 f8d2 	bl	8018dd8 <_lseek_r>
 8018c34:	89a3      	ldrh	r3, [r4, #12]
 8018c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018c3e:	81a3      	strh	r3, [r4, #12]
 8018c40:	4632      	mov	r2, r6
 8018c42:	463b      	mov	r3, r7
 8018c44:	4628      	mov	r0, r5
 8018c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c4a:	f000 b8e9 	b.w	8018e20 <_write_r>

08018c4e <__sseek>:
 8018c4e:	b510      	push	{r4, lr}
 8018c50:	460c      	mov	r4, r1
 8018c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c56:	f000 f8bf 	bl	8018dd8 <_lseek_r>
 8018c5a:	1c43      	adds	r3, r0, #1
 8018c5c:	89a3      	ldrh	r3, [r4, #12]
 8018c5e:	bf15      	itete	ne
 8018c60:	6560      	strne	r0, [r4, #84]	; 0x54
 8018c62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018c66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018c6a:	81a3      	strheq	r3, [r4, #12]
 8018c6c:	bf18      	it	ne
 8018c6e:	81a3      	strhne	r3, [r4, #12]
 8018c70:	bd10      	pop	{r4, pc}

08018c72 <__sclose>:
 8018c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c76:	f000 b849 	b.w	8018d0c <_close_r>

08018c7a <memcmp>:
 8018c7a:	b510      	push	{r4, lr}
 8018c7c:	3901      	subs	r1, #1
 8018c7e:	4402      	add	r2, r0
 8018c80:	4290      	cmp	r0, r2
 8018c82:	d101      	bne.n	8018c88 <memcmp+0xe>
 8018c84:	2000      	movs	r0, #0
 8018c86:	e005      	b.n	8018c94 <memcmp+0x1a>
 8018c88:	7803      	ldrb	r3, [r0, #0]
 8018c8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018c8e:	42a3      	cmp	r3, r4
 8018c90:	d001      	beq.n	8018c96 <memcmp+0x1c>
 8018c92:	1b18      	subs	r0, r3, r4
 8018c94:	bd10      	pop	{r4, pc}
 8018c96:	3001      	adds	r0, #1
 8018c98:	e7f2      	b.n	8018c80 <memcmp+0x6>

08018c9a <memmove>:
 8018c9a:	4288      	cmp	r0, r1
 8018c9c:	b510      	push	{r4, lr}
 8018c9e:	eb01 0402 	add.w	r4, r1, r2
 8018ca2:	d902      	bls.n	8018caa <memmove+0x10>
 8018ca4:	4284      	cmp	r4, r0
 8018ca6:	4623      	mov	r3, r4
 8018ca8:	d807      	bhi.n	8018cba <memmove+0x20>
 8018caa:	1e43      	subs	r3, r0, #1
 8018cac:	42a1      	cmp	r1, r4
 8018cae:	d008      	beq.n	8018cc2 <memmove+0x28>
 8018cb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018cb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018cb8:	e7f8      	b.n	8018cac <memmove+0x12>
 8018cba:	4402      	add	r2, r0
 8018cbc:	4601      	mov	r1, r0
 8018cbe:	428a      	cmp	r2, r1
 8018cc0:	d100      	bne.n	8018cc4 <memmove+0x2a>
 8018cc2:	bd10      	pop	{r4, pc}
 8018cc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018cc8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018ccc:	e7f7      	b.n	8018cbe <memmove+0x24>

08018cce <memset>:
 8018cce:	4402      	add	r2, r0
 8018cd0:	4603      	mov	r3, r0
 8018cd2:	4293      	cmp	r3, r2
 8018cd4:	d100      	bne.n	8018cd8 <memset+0xa>
 8018cd6:	4770      	bx	lr
 8018cd8:	f803 1b01 	strb.w	r1, [r3], #1
 8018cdc:	e7f9      	b.n	8018cd2 <memset+0x4>

08018cde <strncmp>:
 8018cde:	b510      	push	{r4, lr}
 8018ce0:	b16a      	cbz	r2, 8018cfe <strncmp+0x20>
 8018ce2:	3901      	subs	r1, #1
 8018ce4:	1884      	adds	r4, r0, r2
 8018ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018cea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018cee:	429a      	cmp	r2, r3
 8018cf0:	d103      	bne.n	8018cfa <strncmp+0x1c>
 8018cf2:	42a0      	cmp	r0, r4
 8018cf4:	d001      	beq.n	8018cfa <strncmp+0x1c>
 8018cf6:	2a00      	cmp	r2, #0
 8018cf8:	d1f5      	bne.n	8018ce6 <strncmp+0x8>
 8018cfa:	1ad0      	subs	r0, r2, r3
 8018cfc:	bd10      	pop	{r4, pc}
 8018cfe:	4610      	mov	r0, r2
 8018d00:	e7fc      	b.n	8018cfc <strncmp+0x1e>
	...

08018d04 <_localeconv_r>:
 8018d04:	4800      	ldr	r0, [pc, #0]	; (8018d08 <_localeconv_r+0x4>)
 8018d06:	4770      	bx	lr
 8018d08:	2000017c 	.word	0x2000017c

08018d0c <_close_r>:
 8018d0c:	b538      	push	{r3, r4, r5, lr}
 8018d0e:	4d06      	ldr	r5, [pc, #24]	; (8018d28 <_close_r+0x1c>)
 8018d10:	2300      	movs	r3, #0
 8018d12:	4604      	mov	r4, r0
 8018d14:	4608      	mov	r0, r1
 8018d16:	602b      	str	r3, [r5, #0]
 8018d18:	f7e8 fa8d 	bl	8001236 <_close>
 8018d1c:	1c43      	adds	r3, r0, #1
 8018d1e:	d102      	bne.n	8018d26 <_close_r+0x1a>
 8018d20:	682b      	ldr	r3, [r5, #0]
 8018d22:	b103      	cbz	r3, 8018d26 <_close_r+0x1a>
 8018d24:	6023      	str	r3, [r4, #0]
 8018d26:	bd38      	pop	{r3, r4, r5, pc}
 8018d28:	20077bd4 	.word	0x20077bd4

08018d2c <_reclaim_reent>:
 8018d2c:	4b29      	ldr	r3, [pc, #164]	; (8018dd4 <_reclaim_reent+0xa8>)
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	4283      	cmp	r3, r0
 8018d32:	b570      	push	{r4, r5, r6, lr}
 8018d34:	4604      	mov	r4, r0
 8018d36:	d04b      	beq.n	8018dd0 <_reclaim_reent+0xa4>
 8018d38:	69c3      	ldr	r3, [r0, #28]
 8018d3a:	b143      	cbz	r3, 8018d4e <_reclaim_reent+0x22>
 8018d3c:	68db      	ldr	r3, [r3, #12]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d144      	bne.n	8018dcc <_reclaim_reent+0xa0>
 8018d42:	69e3      	ldr	r3, [r4, #28]
 8018d44:	6819      	ldr	r1, [r3, #0]
 8018d46:	b111      	cbz	r1, 8018d4e <_reclaim_reent+0x22>
 8018d48:	4620      	mov	r0, r4
 8018d4a:	f000 fed1 	bl	8019af0 <_free_r>
 8018d4e:	6961      	ldr	r1, [r4, #20]
 8018d50:	b111      	cbz	r1, 8018d58 <_reclaim_reent+0x2c>
 8018d52:	4620      	mov	r0, r4
 8018d54:	f000 fecc 	bl	8019af0 <_free_r>
 8018d58:	69e1      	ldr	r1, [r4, #28]
 8018d5a:	b111      	cbz	r1, 8018d62 <_reclaim_reent+0x36>
 8018d5c:	4620      	mov	r0, r4
 8018d5e:	f000 fec7 	bl	8019af0 <_free_r>
 8018d62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018d64:	b111      	cbz	r1, 8018d6c <_reclaim_reent+0x40>
 8018d66:	4620      	mov	r0, r4
 8018d68:	f000 fec2 	bl	8019af0 <_free_r>
 8018d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d6e:	b111      	cbz	r1, 8018d76 <_reclaim_reent+0x4a>
 8018d70:	4620      	mov	r0, r4
 8018d72:	f000 febd 	bl	8019af0 <_free_r>
 8018d76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018d78:	b111      	cbz	r1, 8018d80 <_reclaim_reent+0x54>
 8018d7a:	4620      	mov	r0, r4
 8018d7c:	f000 feb8 	bl	8019af0 <_free_r>
 8018d80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018d82:	b111      	cbz	r1, 8018d8a <_reclaim_reent+0x5e>
 8018d84:	4620      	mov	r0, r4
 8018d86:	f000 feb3 	bl	8019af0 <_free_r>
 8018d8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018d8c:	b111      	cbz	r1, 8018d94 <_reclaim_reent+0x68>
 8018d8e:	4620      	mov	r0, r4
 8018d90:	f000 feae 	bl	8019af0 <_free_r>
 8018d94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018d96:	b111      	cbz	r1, 8018d9e <_reclaim_reent+0x72>
 8018d98:	4620      	mov	r0, r4
 8018d9a:	f000 fea9 	bl	8019af0 <_free_r>
 8018d9e:	6a23      	ldr	r3, [r4, #32]
 8018da0:	b1b3      	cbz	r3, 8018dd0 <_reclaim_reent+0xa4>
 8018da2:	4620      	mov	r0, r4
 8018da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018da8:	4718      	bx	r3
 8018daa:	5949      	ldr	r1, [r1, r5]
 8018dac:	b941      	cbnz	r1, 8018dc0 <_reclaim_reent+0x94>
 8018dae:	3504      	adds	r5, #4
 8018db0:	69e3      	ldr	r3, [r4, #28]
 8018db2:	2d80      	cmp	r5, #128	; 0x80
 8018db4:	68d9      	ldr	r1, [r3, #12]
 8018db6:	d1f8      	bne.n	8018daa <_reclaim_reent+0x7e>
 8018db8:	4620      	mov	r0, r4
 8018dba:	f000 fe99 	bl	8019af0 <_free_r>
 8018dbe:	e7c0      	b.n	8018d42 <_reclaim_reent+0x16>
 8018dc0:	680e      	ldr	r6, [r1, #0]
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	f000 fe94 	bl	8019af0 <_free_r>
 8018dc8:	4631      	mov	r1, r6
 8018dca:	e7ef      	b.n	8018dac <_reclaim_reent+0x80>
 8018dcc:	2500      	movs	r5, #0
 8018dce:	e7ef      	b.n	8018db0 <_reclaim_reent+0x84>
 8018dd0:	bd70      	pop	{r4, r5, r6, pc}
 8018dd2:	bf00      	nop
 8018dd4:	20000088 	.word	0x20000088

08018dd8 <_lseek_r>:
 8018dd8:	b538      	push	{r3, r4, r5, lr}
 8018dda:	4d07      	ldr	r5, [pc, #28]	; (8018df8 <_lseek_r+0x20>)
 8018ddc:	4604      	mov	r4, r0
 8018dde:	4608      	mov	r0, r1
 8018de0:	4611      	mov	r1, r2
 8018de2:	2200      	movs	r2, #0
 8018de4:	602a      	str	r2, [r5, #0]
 8018de6:	461a      	mov	r2, r3
 8018de8:	f7e8 fa4c 	bl	8001284 <_lseek>
 8018dec:	1c43      	adds	r3, r0, #1
 8018dee:	d102      	bne.n	8018df6 <_lseek_r+0x1e>
 8018df0:	682b      	ldr	r3, [r5, #0]
 8018df2:	b103      	cbz	r3, 8018df6 <_lseek_r+0x1e>
 8018df4:	6023      	str	r3, [r4, #0]
 8018df6:	bd38      	pop	{r3, r4, r5, pc}
 8018df8:	20077bd4 	.word	0x20077bd4

08018dfc <_read_r>:
 8018dfc:	b538      	push	{r3, r4, r5, lr}
 8018dfe:	4d07      	ldr	r5, [pc, #28]	; (8018e1c <_read_r+0x20>)
 8018e00:	4604      	mov	r4, r0
 8018e02:	4608      	mov	r0, r1
 8018e04:	4611      	mov	r1, r2
 8018e06:	2200      	movs	r2, #0
 8018e08:	602a      	str	r2, [r5, #0]
 8018e0a:	461a      	mov	r2, r3
 8018e0c:	f7e8 f9da 	bl	80011c4 <_read>
 8018e10:	1c43      	adds	r3, r0, #1
 8018e12:	d102      	bne.n	8018e1a <_read_r+0x1e>
 8018e14:	682b      	ldr	r3, [r5, #0]
 8018e16:	b103      	cbz	r3, 8018e1a <_read_r+0x1e>
 8018e18:	6023      	str	r3, [r4, #0]
 8018e1a:	bd38      	pop	{r3, r4, r5, pc}
 8018e1c:	20077bd4 	.word	0x20077bd4

08018e20 <_write_r>:
 8018e20:	b538      	push	{r3, r4, r5, lr}
 8018e22:	4d07      	ldr	r5, [pc, #28]	; (8018e40 <_write_r+0x20>)
 8018e24:	4604      	mov	r4, r0
 8018e26:	4608      	mov	r0, r1
 8018e28:	4611      	mov	r1, r2
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	602a      	str	r2, [r5, #0]
 8018e2e:	461a      	mov	r2, r3
 8018e30:	f7e8 f9e5 	bl	80011fe <_write>
 8018e34:	1c43      	adds	r3, r0, #1
 8018e36:	d102      	bne.n	8018e3e <_write_r+0x1e>
 8018e38:	682b      	ldr	r3, [r5, #0]
 8018e3a:	b103      	cbz	r3, 8018e3e <_write_r+0x1e>
 8018e3c:	6023      	str	r3, [r4, #0]
 8018e3e:	bd38      	pop	{r3, r4, r5, pc}
 8018e40:	20077bd4 	.word	0x20077bd4

08018e44 <__errno>:
 8018e44:	4b01      	ldr	r3, [pc, #4]	; (8018e4c <__errno+0x8>)
 8018e46:	6818      	ldr	r0, [r3, #0]
 8018e48:	4770      	bx	lr
 8018e4a:	bf00      	nop
 8018e4c:	20000088 	.word	0x20000088

08018e50 <__libc_init_array>:
 8018e50:	b570      	push	{r4, r5, r6, lr}
 8018e52:	4d0d      	ldr	r5, [pc, #52]	; (8018e88 <__libc_init_array+0x38>)
 8018e54:	4c0d      	ldr	r4, [pc, #52]	; (8018e8c <__libc_init_array+0x3c>)
 8018e56:	1b64      	subs	r4, r4, r5
 8018e58:	10a4      	asrs	r4, r4, #2
 8018e5a:	2600      	movs	r6, #0
 8018e5c:	42a6      	cmp	r6, r4
 8018e5e:	d109      	bne.n	8018e74 <__libc_init_array+0x24>
 8018e60:	4d0b      	ldr	r5, [pc, #44]	; (8018e90 <__libc_init_array+0x40>)
 8018e62:	4c0c      	ldr	r4, [pc, #48]	; (8018e94 <__libc_init_array+0x44>)
 8018e64:	f003 fa5e 	bl	801c324 <_init>
 8018e68:	1b64      	subs	r4, r4, r5
 8018e6a:	10a4      	asrs	r4, r4, #2
 8018e6c:	2600      	movs	r6, #0
 8018e6e:	42a6      	cmp	r6, r4
 8018e70:	d105      	bne.n	8018e7e <__libc_init_array+0x2e>
 8018e72:	bd70      	pop	{r4, r5, r6, pc}
 8018e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8018e78:	4798      	blx	r3
 8018e7a:	3601      	adds	r6, #1
 8018e7c:	e7ee      	b.n	8018e5c <__libc_init_array+0xc>
 8018e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018e82:	4798      	blx	r3
 8018e84:	3601      	adds	r6, #1
 8018e86:	e7f2      	b.n	8018e6e <__libc_init_array+0x1e>
 8018e88:	080207fc 	.word	0x080207fc
 8018e8c:	080207fc 	.word	0x080207fc
 8018e90:	080207fc 	.word	0x080207fc
 8018e94:	08020800 	.word	0x08020800

08018e98 <__retarget_lock_init_recursive>:
 8018e98:	4770      	bx	lr

08018e9a <__retarget_lock_acquire_recursive>:
 8018e9a:	4770      	bx	lr

08018e9c <__retarget_lock_release_recursive>:
 8018e9c:	4770      	bx	lr

08018e9e <memcpy>:
 8018e9e:	440a      	add	r2, r1
 8018ea0:	4291      	cmp	r1, r2
 8018ea2:	f100 33ff 	add.w	r3, r0, #4294967295
 8018ea6:	d100      	bne.n	8018eaa <memcpy+0xc>
 8018ea8:	4770      	bx	lr
 8018eaa:	b510      	push	{r4, lr}
 8018eac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018eb4:	4291      	cmp	r1, r2
 8018eb6:	d1f9      	bne.n	8018eac <memcpy+0xe>
 8018eb8:	bd10      	pop	{r4, pc}
	...

08018ebc <nanf>:
 8018ebc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018ec4 <nanf+0x8>
 8018ec0:	4770      	bx	lr
 8018ec2:	bf00      	nop
 8018ec4:	7fc00000 	.word	0x7fc00000

08018ec8 <__assert_func>:
 8018ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018eca:	4614      	mov	r4, r2
 8018ecc:	461a      	mov	r2, r3
 8018ece:	4b09      	ldr	r3, [pc, #36]	; (8018ef4 <__assert_func+0x2c>)
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	4605      	mov	r5, r0
 8018ed4:	68d8      	ldr	r0, [r3, #12]
 8018ed6:	b14c      	cbz	r4, 8018eec <__assert_func+0x24>
 8018ed8:	4b07      	ldr	r3, [pc, #28]	; (8018ef8 <__assert_func+0x30>)
 8018eda:	9100      	str	r1, [sp, #0]
 8018edc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018ee0:	4906      	ldr	r1, [pc, #24]	; (8018efc <__assert_func+0x34>)
 8018ee2:	462b      	mov	r3, r5
 8018ee4:	f002 fcca 	bl	801b87c <fiprintf>
 8018ee8:	f002 fd8a 	bl	801ba00 <abort>
 8018eec:	4b04      	ldr	r3, [pc, #16]	; (8018f00 <__assert_func+0x38>)
 8018eee:	461c      	mov	r4, r3
 8018ef0:	e7f3      	b.n	8018eda <__assert_func+0x12>
 8018ef2:	bf00      	nop
 8018ef4:	20000088 	.word	0x20000088
 8018ef8:	0802051d 	.word	0x0802051d
 8018efc:	0802052a 	.word	0x0802052a
 8018f00:	08020558 	.word	0x08020558

08018f04 <quorem>:
 8018f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f08:	6903      	ldr	r3, [r0, #16]
 8018f0a:	690c      	ldr	r4, [r1, #16]
 8018f0c:	42a3      	cmp	r3, r4
 8018f0e:	4607      	mov	r7, r0
 8018f10:	db7e      	blt.n	8019010 <quorem+0x10c>
 8018f12:	3c01      	subs	r4, #1
 8018f14:	f101 0814 	add.w	r8, r1, #20
 8018f18:	f100 0514 	add.w	r5, r0, #20
 8018f1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018f20:	9301      	str	r3, [sp, #4]
 8018f22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018f26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018f2a:	3301      	adds	r3, #1
 8018f2c:	429a      	cmp	r2, r3
 8018f2e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018f32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018f36:	fbb2 f6f3 	udiv	r6, r2, r3
 8018f3a:	d331      	bcc.n	8018fa0 <quorem+0x9c>
 8018f3c:	f04f 0e00 	mov.w	lr, #0
 8018f40:	4640      	mov	r0, r8
 8018f42:	46ac      	mov	ip, r5
 8018f44:	46f2      	mov	sl, lr
 8018f46:	f850 2b04 	ldr.w	r2, [r0], #4
 8018f4a:	b293      	uxth	r3, r2
 8018f4c:	fb06 e303 	mla	r3, r6, r3, lr
 8018f50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018f54:	0c1a      	lsrs	r2, r3, #16
 8018f56:	b29b      	uxth	r3, r3
 8018f58:	ebaa 0303 	sub.w	r3, sl, r3
 8018f5c:	f8dc a000 	ldr.w	sl, [ip]
 8018f60:	fa13 f38a 	uxtah	r3, r3, sl
 8018f64:	fb06 220e 	mla	r2, r6, lr, r2
 8018f68:	9300      	str	r3, [sp, #0]
 8018f6a:	9b00      	ldr	r3, [sp, #0]
 8018f6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018f70:	b292      	uxth	r2, r2
 8018f72:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8018f76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018f7a:	f8bd 3000 	ldrh.w	r3, [sp]
 8018f7e:	4581      	cmp	r9, r0
 8018f80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018f84:	f84c 3b04 	str.w	r3, [ip], #4
 8018f88:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018f8c:	d2db      	bcs.n	8018f46 <quorem+0x42>
 8018f8e:	f855 300b 	ldr.w	r3, [r5, fp]
 8018f92:	b92b      	cbnz	r3, 8018fa0 <quorem+0x9c>
 8018f94:	9b01      	ldr	r3, [sp, #4]
 8018f96:	3b04      	subs	r3, #4
 8018f98:	429d      	cmp	r5, r3
 8018f9a:	461a      	mov	r2, r3
 8018f9c:	d32c      	bcc.n	8018ff8 <quorem+0xf4>
 8018f9e:	613c      	str	r4, [r7, #16]
 8018fa0:	4638      	mov	r0, r7
 8018fa2:	f001 f96b 	bl	801a27c <__mcmp>
 8018fa6:	2800      	cmp	r0, #0
 8018fa8:	db22      	blt.n	8018ff0 <quorem+0xec>
 8018faa:	3601      	adds	r6, #1
 8018fac:	4629      	mov	r1, r5
 8018fae:	2000      	movs	r0, #0
 8018fb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8018fb4:	f8d1 c000 	ldr.w	ip, [r1]
 8018fb8:	b293      	uxth	r3, r2
 8018fba:	1ac3      	subs	r3, r0, r3
 8018fbc:	0c12      	lsrs	r2, r2, #16
 8018fbe:	fa13 f38c 	uxtah	r3, r3, ip
 8018fc2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8018fc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018fca:	b29b      	uxth	r3, r3
 8018fcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018fd0:	45c1      	cmp	r9, r8
 8018fd2:	f841 3b04 	str.w	r3, [r1], #4
 8018fd6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018fda:	d2e9      	bcs.n	8018fb0 <quorem+0xac>
 8018fdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018fe0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018fe4:	b922      	cbnz	r2, 8018ff0 <quorem+0xec>
 8018fe6:	3b04      	subs	r3, #4
 8018fe8:	429d      	cmp	r5, r3
 8018fea:	461a      	mov	r2, r3
 8018fec:	d30a      	bcc.n	8019004 <quorem+0x100>
 8018fee:	613c      	str	r4, [r7, #16]
 8018ff0:	4630      	mov	r0, r6
 8018ff2:	b003      	add	sp, #12
 8018ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ff8:	6812      	ldr	r2, [r2, #0]
 8018ffa:	3b04      	subs	r3, #4
 8018ffc:	2a00      	cmp	r2, #0
 8018ffe:	d1ce      	bne.n	8018f9e <quorem+0x9a>
 8019000:	3c01      	subs	r4, #1
 8019002:	e7c9      	b.n	8018f98 <quorem+0x94>
 8019004:	6812      	ldr	r2, [r2, #0]
 8019006:	3b04      	subs	r3, #4
 8019008:	2a00      	cmp	r2, #0
 801900a:	d1f0      	bne.n	8018fee <quorem+0xea>
 801900c:	3c01      	subs	r4, #1
 801900e:	e7eb      	b.n	8018fe8 <quorem+0xe4>
 8019010:	2000      	movs	r0, #0
 8019012:	e7ee      	b.n	8018ff2 <quorem+0xee>
 8019014:	0000      	movs	r0, r0
	...

08019018 <_dtoa_r>:
 8019018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801901c:	ed2d 8b02 	vpush	{d8}
 8019020:	69c5      	ldr	r5, [r0, #28]
 8019022:	b091      	sub	sp, #68	; 0x44
 8019024:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019028:	ec59 8b10 	vmov	r8, r9, d0
 801902c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801902e:	9106      	str	r1, [sp, #24]
 8019030:	4606      	mov	r6, r0
 8019032:	9208      	str	r2, [sp, #32]
 8019034:	930c      	str	r3, [sp, #48]	; 0x30
 8019036:	b975      	cbnz	r5, 8019056 <_dtoa_r+0x3e>
 8019038:	2010      	movs	r0, #16
 801903a:	f000 fda5 	bl	8019b88 <malloc>
 801903e:	4602      	mov	r2, r0
 8019040:	61f0      	str	r0, [r6, #28]
 8019042:	b920      	cbnz	r0, 801904e <_dtoa_r+0x36>
 8019044:	4ba6      	ldr	r3, [pc, #664]	; (80192e0 <_dtoa_r+0x2c8>)
 8019046:	21ef      	movs	r1, #239	; 0xef
 8019048:	48a6      	ldr	r0, [pc, #664]	; (80192e4 <_dtoa_r+0x2cc>)
 801904a:	f7ff ff3d 	bl	8018ec8 <__assert_func>
 801904e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019052:	6005      	str	r5, [r0, #0]
 8019054:	60c5      	str	r5, [r0, #12]
 8019056:	69f3      	ldr	r3, [r6, #28]
 8019058:	6819      	ldr	r1, [r3, #0]
 801905a:	b151      	cbz	r1, 8019072 <_dtoa_r+0x5a>
 801905c:	685a      	ldr	r2, [r3, #4]
 801905e:	604a      	str	r2, [r1, #4]
 8019060:	2301      	movs	r3, #1
 8019062:	4093      	lsls	r3, r2
 8019064:	608b      	str	r3, [r1, #8]
 8019066:	4630      	mov	r0, r6
 8019068:	f000 fe82 	bl	8019d70 <_Bfree>
 801906c:	69f3      	ldr	r3, [r6, #28]
 801906e:	2200      	movs	r2, #0
 8019070:	601a      	str	r2, [r3, #0]
 8019072:	f1b9 0300 	subs.w	r3, r9, #0
 8019076:	bfbb      	ittet	lt
 8019078:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801907c:	9303      	strlt	r3, [sp, #12]
 801907e:	2300      	movge	r3, #0
 8019080:	2201      	movlt	r2, #1
 8019082:	bfac      	ite	ge
 8019084:	6023      	strge	r3, [r4, #0]
 8019086:	6022      	strlt	r2, [r4, #0]
 8019088:	4b97      	ldr	r3, [pc, #604]	; (80192e8 <_dtoa_r+0x2d0>)
 801908a:	9c03      	ldr	r4, [sp, #12]
 801908c:	43a3      	bics	r3, r4
 801908e:	d11c      	bne.n	80190ca <_dtoa_r+0xb2>
 8019090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019092:	f242 730f 	movw	r3, #9999	; 0x270f
 8019096:	6013      	str	r3, [r2, #0]
 8019098:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801909c:	ea53 0308 	orrs.w	r3, r3, r8
 80190a0:	f000 84fb 	beq.w	8019a9a <_dtoa_r+0xa82>
 80190a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80190a6:	b963      	cbnz	r3, 80190c2 <_dtoa_r+0xaa>
 80190a8:	4b90      	ldr	r3, [pc, #576]	; (80192ec <_dtoa_r+0x2d4>)
 80190aa:	e020      	b.n	80190ee <_dtoa_r+0xd6>
 80190ac:	4b90      	ldr	r3, [pc, #576]	; (80192f0 <_dtoa_r+0x2d8>)
 80190ae:	9301      	str	r3, [sp, #4]
 80190b0:	3308      	adds	r3, #8
 80190b2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80190b4:	6013      	str	r3, [r2, #0]
 80190b6:	9801      	ldr	r0, [sp, #4]
 80190b8:	b011      	add	sp, #68	; 0x44
 80190ba:	ecbd 8b02 	vpop	{d8}
 80190be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190c2:	4b8a      	ldr	r3, [pc, #552]	; (80192ec <_dtoa_r+0x2d4>)
 80190c4:	9301      	str	r3, [sp, #4]
 80190c6:	3303      	adds	r3, #3
 80190c8:	e7f3      	b.n	80190b2 <_dtoa_r+0x9a>
 80190ca:	ed9d 8b02 	vldr	d8, [sp, #8]
 80190ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80190d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190d6:	d10c      	bne.n	80190f2 <_dtoa_r+0xda>
 80190d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80190da:	2301      	movs	r3, #1
 80190dc:	6013      	str	r3, [r2, #0]
 80190de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	f000 84d7 	beq.w	8019a94 <_dtoa_r+0xa7c>
 80190e6:	4b83      	ldr	r3, [pc, #524]	; (80192f4 <_dtoa_r+0x2dc>)
 80190e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80190ea:	6013      	str	r3, [r2, #0]
 80190ec:	3b01      	subs	r3, #1
 80190ee:	9301      	str	r3, [sp, #4]
 80190f0:	e7e1      	b.n	80190b6 <_dtoa_r+0x9e>
 80190f2:	aa0e      	add	r2, sp, #56	; 0x38
 80190f4:	a90f      	add	r1, sp, #60	; 0x3c
 80190f6:	4630      	mov	r0, r6
 80190f8:	eeb0 0b48 	vmov.f64	d0, d8
 80190fc:	f001 f9d4 	bl	801a4a8 <__d2b>
 8019100:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8019104:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019106:	4605      	mov	r5, r0
 8019108:	2b00      	cmp	r3, #0
 801910a:	d046      	beq.n	801919a <_dtoa_r+0x182>
 801910c:	eeb0 7b48 	vmov.f64	d7, d8
 8019110:	ee18 1a90 	vmov	r1, s17
 8019114:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019118:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801911c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8019120:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019124:	2000      	movs	r0, #0
 8019126:	ee07 1a90 	vmov	s15, r1
 801912a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801912e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80192c8 <_dtoa_r+0x2b0>
 8019132:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019136:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80192d0 <_dtoa_r+0x2b8>
 801913a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801913e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80192d8 <_dtoa_r+0x2c0>
 8019142:	ee07 3a90 	vmov	s15, r3
 8019146:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801914a:	eeb0 7b46 	vmov.f64	d7, d6
 801914e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019152:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019156:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801915a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801915e:	ee16 ba90 	vmov	fp, s13
 8019162:	9009      	str	r0, [sp, #36]	; 0x24
 8019164:	d508      	bpl.n	8019178 <_dtoa_r+0x160>
 8019166:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801916a:	eeb4 6b47 	vcmp.f64	d6, d7
 801916e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019172:	bf18      	it	ne
 8019174:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8019178:	f1bb 0f16 	cmp.w	fp, #22
 801917c:	d82b      	bhi.n	80191d6 <_dtoa_r+0x1be>
 801917e:	495e      	ldr	r1, [pc, #376]	; (80192f8 <_dtoa_r+0x2e0>)
 8019180:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8019184:	ed91 7b00 	vldr	d7, [r1]
 8019188:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801918c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019190:	d501      	bpl.n	8019196 <_dtoa_r+0x17e>
 8019192:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019196:	2100      	movs	r1, #0
 8019198:	e01e      	b.n	80191d8 <_dtoa_r+0x1c0>
 801919a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801919c:	4413      	add	r3, r2
 801919e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80191a2:	2920      	cmp	r1, #32
 80191a4:	bfc1      	itttt	gt
 80191a6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80191aa:	408c      	lslgt	r4, r1
 80191ac:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80191b0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80191b4:	bfd6      	itet	le
 80191b6:	f1c1 0120 	rsble	r1, r1, #32
 80191ba:	4321      	orrgt	r1, r4
 80191bc:	fa08 f101 	lslle.w	r1, r8, r1
 80191c0:	ee07 1a90 	vmov	s15, r1
 80191c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80191c8:	3b01      	subs	r3, #1
 80191ca:	ee17 1a90 	vmov	r1, s15
 80191ce:	2001      	movs	r0, #1
 80191d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80191d4:	e7a7      	b.n	8019126 <_dtoa_r+0x10e>
 80191d6:	2101      	movs	r1, #1
 80191d8:	1ad2      	subs	r2, r2, r3
 80191da:	1e53      	subs	r3, r2, #1
 80191dc:	9305      	str	r3, [sp, #20]
 80191de:	bf45      	ittet	mi
 80191e0:	f1c2 0301 	rsbmi	r3, r2, #1
 80191e4:	9304      	strmi	r3, [sp, #16]
 80191e6:	2300      	movpl	r3, #0
 80191e8:	2300      	movmi	r3, #0
 80191ea:	bf4c      	ite	mi
 80191ec:	9305      	strmi	r3, [sp, #20]
 80191ee:	9304      	strpl	r3, [sp, #16]
 80191f0:	f1bb 0f00 	cmp.w	fp, #0
 80191f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80191f6:	db18      	blt.n	801922a <_dtoa_r+0x212>
 80191f8:	9b05      	ldr	r3, [sp, #20]
 80191fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80191fe:	445b      	add	r3, fp
 8019200:	9305      	str	r3, [sp, #20]
 8019202:	2300      	movs	r3, #0
 8019204:	9a06      	ldr	r2, [sp, #24]
 8019206:	2a09      	cmp	r2, #9
 8019208:	d848      	bhi.n	801929c <_dtoa_r+0x284>
 801920a:	2a05      	cmp	r2, #5
 801920c:	bfc4      	itt	gt
 801920e:	3a04      	subgt	r2, #4
 8019210:	9206      	strgt	r2, [sp, #24]
 8019212:	9a06      	ldr	r2, [sp, #24]
 8019214:	f1a2 0202 	sub.w	r2, r2, #2
 8019218:	bfcc      	ite	gt
 801921a:	2400      	movgt	r4, #0
 801921c:	2401      	movle	r4, #1
 801921e:	2a03      	cmp	r2, #3
 8019220:	d847      	bhi.n	80192b2 <_dtoa_r+0x29a>
 8019222:	e8df f002 	tbb	[pc, r2]
 8019226:	2d0b      	.short	0x2d0b
 8019228:	392b      	.short	0x392b
 801922a:	9b04      	ldr	r3, [sp, #16]
 801922c:	2200      	movs	r2, #0
 801922e:	eba3 030b 	sub.w	r3, r3, fp
 8019232:	9304      	str	r3, [sp, #16]
 8019234:	920a      	str	r2, [sp, #40]	; 0x28
 8019236:	f1cb 0300 	rsb	r3, fp, #0
 801923a:	e7e3      	b.n	8019204 <_dtoa_r+0x1ec>
 801923c:	2200      	movs	r2, #0
 801923e:	9207      	str	r2, [sp, #28]
 8019240:	9a08      	ldr	r2, [sp, #32]
 8019242:	2a00      	cmp	r2, #0
 8019244:	dc38      	bgt.n	80192b8 <_dtoa_r+0x2a0>
 8019246:	f04f 0a01 	mov.w	sl, #1
 801924a:	46d1      	mov	r9, sl
 801924c:	4652      	mov	r2, sl
 801924e:	f8cd a020 	str.w	sl, [sp, #32]
 8019252:	69f7      	ldr	r7, [r6, #28]
 8019254:	2100      	movs	r1, #0
 8019256:	2004      	movs	r0, #4
 8019258:	f100 0c14 	add.w	ip, r0, #20
 801925c:	4594      	cmp	ip, r2
 801925e:	d930      	bls.n	80192c2 <_dtoa_r+0x2aa>
 8019260:	6079      	str	r1, [r7, #4]
 8019262:	4630      	mov	r0, r6
 8019264:	930d      	str	r3, [sp, #52]	; 0x34
 8019266:	f000 fd43 	bl	8019cf0 <_Balloc>
 801926a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801926c:	9001      	str	r0, [sp, #4]
 801926e:	4602      	mov	r2, r0
 8019270:	2800      	cmp	r0, #0
 8019272:	d145      	bne.n	8019300 <_dtoa_r+0x2e8>
 8019274:	4b21      	ldr	r3, [pc, #132]	; (80192fc <_dtoa_r+0x2e4>)
 8019276:	f240 11af 	movw	r1, #431	; 0x1af
 801927a:	e6e5      	b.n	8019048 <_dtoa_r+0x30>
 801927c:	2201      	movs	r2, #1
 801927e:	e7de      	b.n	801923e <_dtoa_r+0x226>
 8019280:	2200      	movs	r2, #0
 8019282:	9207      	str	r2, [sp, #28]
 8019284:	9a08      	ldr	r2, [sp, #32]
 8019286:	eb0b 0a02 	add.w	sl, fp, r2
 801928a:	f10a 0901 	add.w	r9, sl, #1
 801928e:	464a      	mov	r2, r9
 8019290:	2a01      	cmp	r2, #1
 8019292:	bfb8      	it	lt
 8019294:	2201      	movlt	r2, #1
 8019296:	e7dc      	b.n	8019252 <_dtoa_r+0x23a>
 8019298:	2201      	movs	r2, #1
 801929a:	e7f2      	b.n	8019282 <_dtoa_r+0x26a>
 801929c:	2401      	movs	r4, #1
 801929e:	2200      	movs	r2, #0
 80192a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80192a4:	f04f 3aff 	mov.w	sl, #4294967295
 80192a8:	2100      	movs	r1, #0
 80192aa:	46d1      	mov	r9, sl
 80192ac:	2212      	movs	r2, #18
 80192ae:	9108      	str	r1, [sp, #32]
 80192b0:	e7cf      	b.n	8019252 <_dtoa_r+0x23a>
 80192b2:	2201      	movs	r2, #1
 80192b4:	9207      	str	r2, [sp, #28]
 80192b6:	e7f5      	b.n	80192a4 <_dtoa_r+0x28c>
 80192b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80192bc:	46d1      	mov	r9, sl
 80192be:	4652      	mov	r2, sl
 80192c0:	e7c7      	b.n	8019252 <_dtoa_r+0x23a>
 80192c2:	3101      	adds	r1, #1
 80192c4:	0040      	lsls	r0, r0, #1
 80192c6:	e7c7      	b.n	8019258 <_dtoa_r+0x240>
 80192c8:	636f4361 	.word	0x636f4361
 80192cc:	3fd287a7 	.word	0x3fd287a7
 80192d0:	8b60c8b3 	.word	0x8b60c8b3
 80192d4:	3fc68a28 	.word	0x3fc68a28
 80192d8:	509f79fb 	.word	0x509f79fb
 80192dc:	3fd34413 	.word	0x3fd34413
 80192e0:	08020374 	.word	0x08020374
 80192e4:	08020566 	.word	0x08020566
 80192e8:	7ff00000 	.word	0x7ff00000
 80192ec:	08020562 	.word	0x08020562
 80192f0:	08020559 	.word	0x08020559
 80192f4:	080204f5 	.word	0x080204f5
 80192f8:	08020650 	.word	0x08020650
 80192fc:	080205be 	.word	0x080205be
 8019300:	69f2      	ldr	r2, [r6, #28]
 8019302:	9901      	ldr	r1, [sp, #4]
 8019304:	6011      	str	r1, [r2, #0]
 8019306:	f1b9 0f0e 	cmp.w	r9, #14
 801930a:	d86c      	bhi.n	80193e6 <_dtoa_r+0x3ce>
 801930c:	2c00      	cmp	r4, #0
 801930e:	d06a      	beq.n	80193e6 <_dtoa_r+0x3ce>
 8019310:	f1bb 0f00 	cmp.w	fp, #0
 8019314:	f340 80a0 	ble.w	8019458 <_dtoa_r+0x440>
 8019318:	4ac1      	ldr	r2, [pc, #772]	; (8019620 <_dtoa_r+0x608>)
 801931a:	f00b 010f 	and.w	r1, fp, #15
 801931e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019322:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8019326:	ed92 7b00 	vldr	d7, [r2]
 801932a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801932e:	f000 8087 	beq.w	8019440 <_dtoa_r+0x428>
 8019332:	49bc      	ldr	r1, [pc, #752]	; (8019624 <_dtoa_r+0x60c>)
 8019334:	ed91 6b08 	vldr	d6, [r1, #32]
 8019338:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801933c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019340:	f002 020f 	and.w	r2, r2, #15
 8019344:	2103      	movs	r1, #3
 8019346:	48b7      	ldr	r0, [pc, #732]	; (8019624 <_dtoa_r+0x60c>)
 8019348:	2a00      	cmp	r2, #0
 801934a:	d17b      	bne.n	8019444 <_dtoa_r+0x42c>
 801934c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019350:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019354:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019358:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801935a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801935e:	2a00      	cmp	r2, #0
 8019360:	f000 80a0 	beq.w	80194a4 <_dtoa_r+0x48c>
 8019364:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8019368:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801936c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019370:	f140 8098 	bpl.w	80194a4 <_dtoa_r+0x48c>
 8019374:	f1b9 0f00 	cmp.w	r9, #0
 8019378:	f000 8094 	beq.w	80194a4 <_dtoa_r+0x48c>
 801937c:	f1ba 0f00 	cmp.w	sl, #0
 8019380:	dd2f      	ble.n	80193e2 <_dtoa_r+0x3ca>
 8019382:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8019386:	ee27 7b06 	vmul.f64	d7, d7, d6
 801938a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801938e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019392:	3101      	adds	r1, #1
 8019394:	4654      	mov	r4, sl
 8019396:	ed9d 6b02 	vldr	d6, [sp, #8]
 801939a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801939e:	ee07 1a90 	vmov	s15, r1
 80193a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80193a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80193aa:	ee15 7a90 	vmov	r7, s11
 80193ae:	ec51 0b15 	vmov	r0, r1, d5
 80193b2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80193b6:	2c00      	cmp	r4, #0
 80193b8:	d177      	bne.n	80194aa <_dtoa_r+0x492>
 80193ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80193be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80193c2:	ec41 0b17 	vmov	d7, r0, r1
 80193c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80193ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193ce:	f300 826a 	bgt.w	80198a6 <_dtoa_r+0x88e>
 80193d2:	eeb1 7b47 	vneg.f64	d7, d7
 80193d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80193da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193de:	f100 8260 	bmi.w	80198a2 <_dtoa_r+0x88a>
 80193e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80193e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80193e8:	2a00      	cmp	r2, #0
 80193ea:	f2c0 811d 	blt.w	8019628 <_dtoa_r+0x610>
 80193ee:	f1bb 0f0e 	cmp.w	fp, #14
 80193f2:	f300 8119 	bgt.w	8019628 <_dtoa_r+0x610>
 80193f6:	4b8a      	ldr	r3, [pc, #552]	; (8019620 <_dtoa_r+0x608>)
 80193f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80193fc:	ed93 6b00 	vldr	d6, [r3]
 8019400:	9b08      	ldr	r3, [sp, #32]
 8019402:	2b00      	cmp	r3, #0
 8019404:	f280 80b7 	bge.w	8019576 <_dtoa_r+0x55e>
 8019408:	f1b9 0f00 	cmp.w	r9, #0
 801940c:	f300 80b3 	bgt.w	8019576 <_dtoa_r+0x55e>
 8019410:	f040 8246 	bne.w	80198a0 <_dtoa_r+0x888>
 8019414:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8019418:	ee26 6b07 	vmul.f64	d6, d6, d7
 801941c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019420:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019428:	464c      	mov	r4, r9
 801942a:	464f      	mov	r7, r9
 801942c:	f280 821c 	bge.w	8019868 <_dtoa_r+0x850>
 8019430:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019434:	2331      	movs	r3, #49	; 0x31
 8019436:	f808 3b01 	strb.w	r3, [r8], #1
 801943a:	f10b 0b01 	add.w	fp, fp, #1
 801943e:	e218      	b.n	8019872 <_dtoa_r+0x85a>
 8019440:	2102      	movs	r1, #2
 8019442:	e780      	b.n	8019346 <_dtoa_r+0x32e>
 8019444:	07d4      	lsls	r4, r2, #31
 8019446:	d504      	bpl.n	8019452 <_dtoa_r+0x43a>
 8019448:	ed90 6b00 	vldr	d6, [r0]
 801944c:	3101      	adds	r1, #1
 801944e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019452:	1052      	asrs	r2, r2, #1
 8019454:	3008      	adds	r0, #8
 8019456:	e777      	b.n	8019348 <_dtoa_r+0x330>
 8019458:	d022      	beq.n	80194a0 <_dtoa_r+0x488>
 801945a:	f1cb 0200 	rsb	r2, fp, #0
 801945e:	4970      	ldr	r1, [pc, #448]	; (8019620 <_dtoa_r+0x608>)
 8019460:	f002 000f 	and.w	r0, r2, #15
 8019464:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019468:	ed91 7b00 	vldr	d7, [r1]
 801946c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8019470:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019474:	486b      	ldr	r0, [pc, #428]	; (8019624 <_dtoa_r+0x60c>)
 8019476:	1112      	asrs	r2, r2, #4
 8019478:	2400      	movs	r4, #0
 801947a:	2102      	movs	r1, #2
 801947c:	b92a      	cbnz	r2, 801948a <_dtoa_r+0x472>
 801947e:	2c00      	cmp	r4, #0
 8019480:	f43f af6a 	beq.w	8019358 <_dtoa_r+0x340>
 8019484:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019488:	e766      	b.n	8019358 <_dtoa_r+0x340>
 801948a:	07d7      	lsls	r7, r2, #31
 801948c:	d505      	bpl.n	801949a <_dtoa_r+0x482>
 801948e:	ed90 6b00 	vldr	d6, [r0]
 8019492:	3101      	adds	r1, #1
 8019494:	2401      	movs	r4, #1
 8019496:	ee27 7b06 	vmul.f64	d7, d7, d6
 801949a:	1052      	asrs	r2, r2, #1
 801949c:	3008      	adds	r0, #8
 801949e:	e7ed      	b.n	801947c <_dtoa_r+0x464>
 80194a0:	2102      	movs	r1, #2
 80194a2:	e759      	b.n	8019358 <_dtoa_r+0x340>
 80194a4:	465a      	mov	r2, fp
 80194a6:	464c      	mov	r4, r9
 80194a8:	e775      	b.n	8019396 <_dtoa_r+0x37e>
 80194aa:	ec41 0b17 	vmov	d7, r0, r1
 80194ae:	495c      	ldr	r1, [pc, #368]	; (8019620 <_dtoa_r+0x608>)
 80194b0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80194b4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80194b8:	9901      	ldr	r1, [sp, #4]
 80194ba:	440c      	add	r4, r1
 80194bc:	9907      	ldr	r1, [sp, #28]
 80194be:	b351      	cbz	r1, 8019516 <_dtoa_r+0x4fe>
 80194c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80194c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80194c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80194cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80194d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80194d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80194d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80194dc:	ee14 1a90 	vmov	r1, s9
 80194e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80194e4:	3130      	adds	r1, #48	; 0x30
 80194e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80194ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80194ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194f2:	f808 1b01 	strb.w	r1, [r8], #1
 80194f6:	d439      	bmi.n	801956c <_dtoa_r+0x554>
 80194f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80194fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019504:	d472      	bmi.n	80195ec <_dtoa_r+0x5d4>
 8019506:	45a0      	cmp	r8, r4
 8019508:	f43f af6b 	beq.w	80193e2 <_dtoa_r+0x3ca>
 801950c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019510:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019514:	e7e0      	b.n	80194d8 <_dtoa_r+0x4c0>
 8019516:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801951a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801951e:	4620      	mov	r0, r4
 8019520:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019524:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019528:	ee14 1a90 	vmov	r1, s9
 801952c:	3130      	adds	r1, #48	; 0x30
 801952e:	f808 1b01 	strb.w	r1, [r8], #1
 8019532:	45a0      	cmp	r8, r4
 8019534:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019538:	ee36 6b45 	vsub.f64	d6, d6, d5
 801953c:	d118      	bne.n	8019570 <_dtoa_r+0x558>
 801953e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8019542:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019546:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801954a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801954e:	dc4d      	bgt.n	80195ec <_dtoa_r+0x5d4>
 8019550:	ee35 5b47 	vsub.f64	d5, d5, d7
 8019554:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801955c:	f57f af41 	bpl.w	80193e2 <_dtoa_r+0x3ca>
 8019560:	4680      	mov	r8, r0
 8019562:	3801      	subs	r0, #1
 8019564:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8019568:	2b30      	cmp	r3, #48	; 0x30
 801956a:	d0f9      	beq.n	8019560 <_dtoa_r+0x548>
 801956c:	4693      	mov	fp, r2
 801956e:	e02a      	b.n	80195c6 <_dtoa_r+0x5ae>
 8019570:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019574:	e7d6      	b.n	8019524 <_dtoa_r+0x50c>
 8019576:	ed9d 7b02 	vldr	d7, [sp, #8]
 801957a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801957e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019582:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019586:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801958a:	ee15 3a10 	vmov	r3, s10
 801958e:	3330      	adds	r3, #48	; 0x30
 8019590:	f808 3b01 	strb.w	r3, [r8], #1
 8019594:	9b01      	ldr	r3, [sp, #4]
 8019596:	eba8 0303 	sub.w	r3, r8, r3
 801959a:	4599      	cmp	r9, r3
 801959c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80195a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80195a4:	d133      	bne.n	801960e <_dtoa_r+0x5f6>
 80195a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80195aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80195ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195b2:	dc1a      	bgt.n	80195ea <_dtoa_r+0x5d2>
 80195b4:	eeb4 7b46 	vcmp.f64	d7, d6
 80195b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195bc:	d103      	bne.n	80195c6 <_dtoa_r+0x5ae>
 80195be:	ee15 3a10 	vmov	r3, s10
 80195c2:	07d9      	lsls	r1, r3, #31
 80195c4:	d411      	bmi.n	80195ea <_dtoa_r+0x5d2>
 80195c6:	4629      	mov	r1, r5
 80195c8:	4630      	mov	r0, r6
 80195ca:	f000 fbd1 	bl	8019d70 <_Bfree>
 80195ce:	2300      	movs	r3, #0
 80195d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80195d2:	f888 3000 	strb.w	r3, [r8]
 80195d6:	f10b 0301 	add.w	r3, fp, #1
 80195da:	6013      	str	r3, [r2, #0]
 80195dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80195de:	2b00      	cmp	r3, #0
 80195e0:	f43f ad69 	beq.w	80190b6 <_dtoa_r+0x9e>
 80195e4:	f8c3 8000 	str.w	r8, [r3]
 80195e8:	e565      	b.n	80190b6 <_dtoa_r+0x9e>
 80195ea:	465a      	mov	r2, fp
 80195ec:	4643      	mov	r3, r8
 80195ee:	4698      	mov	r8, r3
 80195f0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80195f4:	2939      	cmp	r1, #57	; 0x39
 80195f6:	d106      	bne.n	8019606 <_dtoa_r+0x5ee>
 80195f8:	9901      	ldr	r1, [sp, #4]
 80195fa:	4299      	cmp	r1, r3
 80195fc:	d1f7      	bne.n	80195ee <_dtoa_r+0x5d6>
 80195fe:	9801      	ldr	r0, [sp, #4]
 8019600:	2130      	movs	r1, #48	; 0x30
 8019602:	3201      	adds	r2, #1
 8019604:	7001      	strb	r1, [r0, #0]
 8019606:	7819      	ldrb	r1, [r3, #0]
 8019608:	3101      	adds	r1, #1
 801960a:	7019      	strb	r1, [r3, #0]
 801960c:	e7ae      	b.n	801956c <_dtoa_r+0x554>
 801960e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019612:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801961a:	d1b2      	bne.n	8019582 <_dtoa_r+0x56a>
 801961c:	e7d3      	b.n	80195c6 <_dtoa_r+0x5ae>
 801961e:	bf00      	nop
 8019620:	08020650 	.word	0x08020650
 8019624:	08020628 	.word	0x08020628
 8019628:	9907      	ldr	r1, [sp, #28]
 801962a:	2900      	cmp	r1, #0
 801962c:	f000 80d0 	beq.w	80197d0 <_dtoa_r+0x7b8>
 8019630:	9906      	ldr	r1, [sp, #24]
 8019632:	2901      	cmp	r1, #1
 8019634:	f300 80b4 	bgt.w	80197a0 <_dtoa_r+0x788>
 8019638:	9909      	ldr	r1, [sp, #36]	; 0x24
 801963a:	2900      	cmp	r1, #0
 801963c:	f000 80ac 	beq.w	8019798 <_dtoa_r+0x780>
 8019640:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019644:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019648:	461c      	mov	r4, r3
 801964a:	9309      	str	r3, [sp, #36]	; 0x24
 801964c:	9b04      	ldr	r3, [sp, #16]
 801964e:	4413      	add	r3, r2
 8019650:	9304      	str	r3, [sp, #16]
 8019652:	9b05      	ldr	r3, [sp, #20]
 8019654:	2101      	movs	r1, #1
 8019656:	4413      	add	r3, r2
 8019658:	4630      	mov	r0, r6
 801965a:	9305      	str	r3, [sp, #20]
 801965c:	f000 fc88 	bl	8019f70 <__i2b>
 8019660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019662:	4607      	mov	r7, r0
 8019664:	f1b8 0f00 	cmp.w	r8, #0
 8019668:	d00d      	beq.n	8019686 <_dtoa_r+0x66e>
 801966a:	9a05      	ldr	r2, [sp, #20]
 801966c:	2a00      	cmp	r2, #0
 801966e:	dd0a      	ble.n	8019686 <_dtoa_r+0x66e>
 8019670:	4542      	cmp	r2, r8
 8019672:	9904      	ldr	r1, [sp, #16]
 8019674:	bfa8      	it	ge
 8019676:	4642      	movge	r2, r8
 8019678:	1a89      	subs	r1, r1, r2
 801967a:	9104      	str	r1, [sp, #16]
 801967c:	9905      	ldr	r1, [sp, #20]
 801967e:	eba8 0802 	sub.w	r8, r8, r2
 8019682:	1a8a      	subs	r2, r1, r2
 8019684:	9205      	str	r2, [sp, #20]
 8019686:	b303      	cbz	r3, 80196ca <_dtoa_r+0x6b2>
 8019688:	9a07      	ldr	r2, [sp, #28]
 801968a:	2a00      	cmp	r2, #0
 801968c:	f000 80a5 	beq.w	80197da <_dtoa_r+0x7c2>
 8019690:	2c00      	cmp	r4, #0
 8019692:	dd13      	ble.n	80196bc <_dtoa_r+0x6a4>
 8019694:	4639      	mov	r1, r7
 8019696:	4622      	mov	r2, r4
 8019698:	4630      	mov	r0, r6
 801969a:	930d      	str	r3, [sp, #52]	; 0x34
 801969c:	f000 fd28 	bl	801a0f0 <__pow5mult>
 80196a0:	462a      	mov	r2, r5
 80196a2:	4601      	mov	r1, r0
 80196a4:	4607      	mov	r7, r0
 80196a6:	4630      	mov	r0, r6
 80196a8:	f000 fc78 	bl	8019f9c <__multiply>
 80196ac:	4629      	mov	r1, r5
 80196ae:	9009      	str	r0, [sp, #36]	; 0x24
 80196b0:	4630      	mov	r0, r6
 80196b2:	f000 fb5d 	bl	8019d70 <_Bfree>
 80196b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196ba:	4615      	mov	r5, r2
 80196bc:	1b1a      	subs	r2, r3, r4
 80196be:	d004      	beq.n	80196ca <_dtoa_r+0x6b2>
 80196c0:	4629      	mov	r1, r5
 80196c2:	4630      	mov	r0, r6
 80196c4:	f000 fd14 	bl	801a0f0 <__pow5mult>
 80196c8:	4605      	mov	r5, r0
 80196ca:	2101      	movs	r1, #1
 80196cc:	4630      	mov	r0, r6
 80196ce:	f000 fc4f 	bl	8019f70 <__i2b>
 80196d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	4604      	mov	r4, r0
 80196d8:	f340 8081 	ble.w	80197de <_dtoa_r+0x7c6>
 80196dc:	461a      	mov	r2, r3
 80196de:	4601      	mov	r1, r0
 80196e0:	4630      	mov	r0, r6
 80196e2:	f000 fd05 	bl	801a0f0 <__pow5mult>
 80196e6:	9b06      	ldr	r3, [sp, #24]
 80196e8:	2b01      	cmp	r3, #1
 80196ea:	4604      	mov	r4, r0
 80196ec:	dd7a      	ble.n	80197e4 <_dtoa_r+0x7cc>
 80196ee:	2300      	movs	r3, #0
 80196f0:	9309      	str	r3, [sp, #36]	; 0x24
 80196f2:	6922      	ldr	r2, [r4, #16]
 80196f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80196f8:	6910      	ldr	r0, [r2, #16]
 80196fa:	f000 fbeb 	bl	8019ed4 <__hi0bits>
 80196fe:	f1c0 0020 	rsb	r0, r0, #32
 8019702:	9b05      	ldr	r3, [sp, #20]
 8019704:	4418      	add	r0, r3
 8019706:	f010 001f 	ands.w	r0, r0, #31
 801970a:	f000 8093 	beq.w	8019834 <_dtoa_r+0x81c>
 801970e:	f1c0 0220 	rsb	r2, r0, #32
 8019712:	2a04      	cmp	r2, #4
 8019714:	f340 8085 	ble.w	8019822 <_dtoa_r+0x80a>
 8019718:	9b04      	ldr	r3, [sp, #16]
 801971a:	f1c0 001c 	rsb	r0, r0, #28
 801971e:	4403      	add	r3, r0
 8019720:	9304      	str	r3, [sp, #16]
 8019722:	9b05      	ldr	r3, [sp, #20]
 8019724:	4480      	add	r8, r0
 8019726:	4403      	add	r3, r0
 8019728:	9305      	str	r3, [sp, #20]
 801972a:	9b04      	ldr	r3, [sp, #16]
 801972c:	2b00      	cmp	r3, #0
 801972e:	dd05      	ble.n	801973c <_dtoa_r+0x724>
 8019730:	4629      	mov	r1, r5
 8019732:	461a      	mov	r2, r3
 8019734:	4630      	mov	r0, r6
 8019736:	f000 fd35 	bl	801a1a4 <__lshift>
 801973a:	4605      	mov	r5, r0
 801973c:	9b05      	ldr	r3, [sp, #20]
 801973e:	2b00      	cmp	r3, #0
 8019740:	dd05      	ble.n	801974e <_dtoa_r+0x736>
 8019742:	4621      	mov	r1, r4
 8019744:	461a      	mov	r2, r3
 8019746:	4630      	mov	r0, r6
 8019748:	f000 fd2c 	bl	801a1a4 <__lshift>
 801974c:	4604      	mov	r4, r0
 801974e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019750:	2b00      	cmp	r3, #0
 8019752:	d071      	beq.n	8019838 <_dtoa_r+0x820>
 8019754:	4621      	mov	r1, r4
 8019756:	4628      	mov	r0, r5
 8019758:	f000 fd90 	bl	801a27c <__mcmp>
 801975c:	2800      	cmp	r0, #0
 801975e:	da6b      	bge.n	8019838 <_dtoa_r+0x820>
 8019760:	2300      	movs	r3, #0
 8019762:	4629      	mov	r1, r5
 8019764:	220a      	movs	r2, #10
 8019766:	4630      	mov	r0, r6
 8019768:	f000 fb24 	bl	8019db4 <__multadd>
 801976c:	9b07      	ldr	r3, [sp, #28]
 801976e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019772:	4605      	mov	r5, r0
 8019774:	2b00      	cmp	r3, #0
 8019776:	f000 8197 	beq.w	8019aa8 <_dtoa_r+0xa90>
 801977a:	4639      	mov	r1, r7
 801977c:	2300      	movs	r3, #0
 801977e:	220a      	movs	r2, #10
 8019780:	4630      	mov	r0, r6
 8019782:	f000 fb17 	bl	8019db4 <__multadd>
 8019786:	f1ba 0f00 	cmp.w	sl, #0
 801978a:	4607      	mov	r7, r0
 801978c:	f300 8093 	bgt.w	80198b6 <_dtoa_r+0x89e>
 8019790:	9b06      	ldr	r3, [sp, #24]
 8019792:	2b02      	cmp	r3, #2
 8019794:	dc57      	bgt.n	8019846 <_dtoa_r+0x82e>
 8019796:	e08e      	b.n	80198b6 <_dtoa_r+0x89e>
 8019798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801979a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801979e:	e751      	b.n	8019644 <_dtoa_r+0x62c>
 80197a0:	f109 34ff 	add.w	r4, r9, #4294967295
 80197a4:	42a3      	cmp	r3, r4
 80197a6:	bfbf      	itttt	lt
 80197a8:	1ae2      	sublt	r2, r4, r3
 80197aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80197ac:	189b      	addlt	r3, r3, r2
 80197ae:	930a      	strlt	r3, [sp, #40]	; 0x28
 80197b0:	bfae      	itee	ge
 80197b2:	1b1c      	subge	r4, r3, r4
 80197b4:	4623      	movlt	r3, r4
 80197b6:	2400      	movlt	r4, #0
 80197b8:	f1b9 0f00 	cmp.w	r9, #0
 80197bc:	bfb5      	itete	lt
 80197be:	9a04      	ldrlt	r2, [sp, #16]
 80197c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80197c4:	eba2 0809 	sublt.w	r8, r2, r9
 80197c8:	464a      	movge	r2, r9
 80197ca:	bfb8      	it	lt
 80197cc:	2200      	movlt	r2, #0
 80197ce:	e73c      	b.n	801964a <_dtoa_r+0x632>
 80197d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80197d4:	9f07      	ldr	r7, [sp, #28]
 80197d6:	461c      	mov	r4, r3
 80197d8:	e744      	b.n	8019664 <_dtoa_r+0x64c>
 80197da:	461a      	mov	r2, r3
 80197dc:	e770      	b.n	80196c0 <_dtoa_r+0x6a8>
 80197de:	9b06      	ldr	r3, [sp, #24]
 80197e0:	2b01      	cmp	r3, #1
 80197e2:	dc18      	bgt.n	8019816 <_dtoa_r+0x7fe>
 80197e4:	9b02      	ldr	r3, [sp, #8]
 80197e6:	b9b3      	cbnz	r3, 8019816 <_dtoa_r+0x7fe>
 80197e8:	9b03      	ldr	r3, [sp, #12]
 80197ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80197ee:	b9a2      	cbnz	r2, 801981a <_dtoa_r+0x802>
 80197f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80197f4:	0d12      	lsrs	r2, r2, #20
 80197f6:	0512      	lsls	r2, r2, #20
 80197f8:	b18a      	cbz	r2, 801981e <_dtoa_r+0x806>
 80197fa:	9b04      	ldr	r3, [sp, #16]
 80197fc:	3301      	adds	r3, #1
 80197fe:	9304      	str	r3, [sp, #16]
 8019800:	9b05      	ldr	r3, [sp, #20]
 8019802:	3301      	adds	r3, #1
 8019804:	9305      	str	r3, [sp, #20]
 8019806:	2301      	movs	r3, #1
 8019808:	9309      	str	r3, [sp, #36]	; 0x24
 801980a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801980c:	2b00      	cmp	r3, #0
 801980e:	f47f af70 	bne.w	80196f2 <_dtoa_r+0x6da>
 8019812:	2001      	movs	r0, #1
 8019814:	e775      	b.n	8019702 <_dtoa_r+0x6ea>
 8019816:	2300      	movs	r3, #0
 8019818:	e7f6      	b.n	8019808 <_dtoa_r+0x7f0>
 801981a:	9b02      	ldr	r3, [sp, #8]
 801981c:	e7f4      	b.n	8019808 <_dtoa_r+0x7f0>
 801981e:	9209      	str	r2, [sp, #36]	; 0x24
 8019820:	e7f3      	b.n	801980a <_dtoa_r+0x7f2>
 8019822:	d082      	beq.n	801972a <_dtoa_r+0x712>
 8019824:	9b04      	ldr	r3, [sp, #16]
 8019826:	321c      	adds	r2, #28
 8019828:	4413      	add	r3, r2
 801982a:	9304      	str	r3, [sp, #16]
 801982c:	9b05      	ldr	r3, [sp, #20]
 801982e:	4490      	add	r8, r2
 8019830:	4413      	add	r3, r2
 8019832:	e779      	b.n	8019728 <_dtoa_r+0x710>
 8019834:	4602      	mov	r2, r0
 8019836:	e7f5      	b.n	8019824 <_dtoa_r+0x80c>
 8019838:	f1b9 0f00 	cmp.w	r9, #0
 801983c:	dc36      	bgt.n	80198ac <_dtoa_r+0x894>
 801983e:	9b06      	ldr	r3, [sp, #24]
 8019840:	2b02      	cmp	r3, #2
 8019842:	dd33      	ble.n	80198ac <_dtoa_r+0x894>
 8019844:	46ca      	mov	sl, r9
 8019846:	f1ba 0f00 	cmp.w	sl, #0
 801984a:	d10d      	bne.n	8019868 <_dtoa_r+0x850>
 801984c:	4621      	mov	r1, r4
 801984e:	4653      	mov	r3, sl
 8019850:	2205      	movs	r2, #5
 8019852:	4630      	mov	r0, r6
 8019854:	f000 faae 	bl	8019db4 <__multadd>
 8019858:	4601      	mov	r1, r0
 801985a:	4604      	mov	r4, r0
 801985c:	4628      	mov	r0, r5
 801985e:	f000 fd0d 	bl	801a27c <__mcmp>
 8019862:	2800      	cmp	r0, #0
 8019864:	f73f ade4 	bgt.w	8019430 <_dtoa_r+0x418>
 8019868:	9b08      	ldr	r3, [sp, #32]
 801986a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801986e:	ea6f 0b03 	mvn.w	fp, r3
 8019872:	f04f 0900 	mov.w	r9, #0
 8019876:	4621      	mov	r1, r4
 8019878:	4630      	mov	r0, r6
 801987a:	f000 fa79 	bl	8019d70 <_Bfree>
 801987e:	2f00      	cmp	r7, #0
 8019880:	f43f aea1 	beq.w	80195c6 <_dtoa_r+0x5ae>
 8019884:	f1b9 0f00 	cmp.w	r9, #0
 8019888:	d005      	beq.n	8019896 <_dtoa_r+0x87e>
 801988a:	45b9      	cmp	r9, r7
 801988c:	d003      	beq.n	8019896 <_dtoa_r+0x87e>
 801988e:	4649      	mov	r1, r9
 8019890:	4630      	mov	r0, r6
 8019892:	f000 fa6d 	bl	8019d70 <_Bfree>
 8019896:	4639      	mov	r1, r7
 8019898:	4630      	mov	r0, r6
 801989a:	f000 fa69 	bl	8019d70 <_Bfree>
 801989e:	e692      	b.n	80195c6 <_dtoa_r+0x5ae>
 80198a0:	2400      	movs	r4, #0
 80198a2:	4627      	mov	r7, r4
 80198a4:	e7e0      	b.n	8019868 <_dtoa_r+0x850>
 80198a6:	4693      	mov	fp, r2
 80198a8:	4627      	mov	r7, r4
 80198aa:	e5c1      	b.n	8019430 <_dtoa_r+0x418>
 80198ac:	9b07      	ldr	r3, [sp, #28]
 80198ae:	46ca      	mov	sl, r9
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	f000 8100 	beq.w	8019ab6 <_dtoa_r+0xa9e>
 80198b6:	f1b8 0f00 	cmp.w	r8, #0
 80198ba:	dd05      	ble.n	80198c8 <_dtoa_r+0x8b0>
 80198bc:	4639      	mov	r1, r7
 80198be:	4642      	mov	r2, r8
 80198c0:	4630      	mov	r0, r6
 80198c2:	f000 fc6f 	bl	801a1a4 <__lshift>
 80198c6:	4607      	mov	r7, r0
 80198c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d05d      	beq.n	801998a <_dtoa_r+0x972>
 80198ce:	6879      	ldr	r1, [r7, #4]
 80198d0:	4630      	mov	r0, r6
 80198d2:	f000 fa0d 	bl	8019cf0 <_Balloc>
 80198d6:	4680      	mov	r8, r0
 80198d8:	b928      	cbnz	r0, 80198e6 <_dtoa_r+0x8ce>
 80198da:	4b82      	ldr	r3, [pc, #520]	; (8019ae4 <_dtoa_r+0xacc>)
 80198dc:	4602      	mov	r2, r0
 80198de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80198e2:	f7ff bbb1 	b.w	8019048 <_dtoa_r+0x30>
 80198e6:	693a      	ldr	r2, [r7, #16]
 80198e8:	3202      	adds	r2, #2
 80198ea:	0092      	lsls	r2, r2, #2
 80198ec:	f107 010c 	add.w	r1, r7, #12
 80198f0:	300c      	adds	r0, #12
 80198f2:	f7ff fad4 	bl	8018e9e <memcpy>
 80198f6:	2201      	movs	r2, #1
 80198f8:	4641      	mov	r1, r8
 80198fa:	4630      	mov	r0, r6
 80198fc:	f000 fc52 	bl	801a1a4 <__lshift>
 8019900:	9b01      	ldr	r3, [sp, #4]
 8019902:	3301      	adds	r3, #1
 8019904:	9304      	str	r3, [sp, #16]
 8019906:	9b01      	ldr	r3, [sp, #4]
 8019908:	4453      	add	r3, sl
 801990a:	9308      	str	r3, [sp, #32]
 801990c:	9b02      	ldr	r3, [sp, #8]
 801990e:	f003 0301 	and.w	r3, r3, #1
 8019912:	46b9      	mov	r9, r7
 8019914:	9307      	str	r3, [sp, #28]
 8019916:	4607      	mov	r7, r0
 8019918:	9b04      	ldr	r3, [sp, #16]
 801991a:	4621      	mov	r1, r4
 801991c:	3b01      	subs	r3, #1
 801991e:	4628      	mov	r0, r5
 8019920:	9302      	str	r3, [sp, #8]
 8019922:	f7ff faef 	bl	8018f04 <quorem>
 8019926:	4603      	mov	r3, r0
 8019928:	3330      	adds	r3, #48	; 0x30
 801992a:	9005      	str	r0, [sp, #20]
 801992c:	4649      	mov	r1, r9
 801992e:	4628      	mov	r0, r5
 8019930:	9309      	str	r3, [sp, #36]	; 0x24
 8019932:	f000 fca3 	bl	801a27c <__mcmp>
 8019936:	463a      	mov	r2, r7
 8019938:	4682      	mov	sl, r0
 801993a:	4621      	mov	r1, r4
 801993c:	4630      	mov	r0, r6
 801993e:	f000 fcb9 	bl	801a2b4 <__mdiff>
 8019942:	68c2      	ldr	r2, [r0, #12]
 8019944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019946:	4680      	mov	r8, r0
 8019948:	bb0a      	cbnz	r2, 801998e <_dtoa_r+0x976>
 801994a:	4601      	mov	r1, r0
 801994c:	4628      	mov	r0, r5
 801994e:	f000 fc95 	bl	801a27c <__mcmp>
 8019952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019954:	4602      	mov	r2, r0
 8019956:	4641      	mov	r1, r8
 8019958:	4630      	mov	r0, r6
 801995a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801995e:	f000 fa07 	bl	8019d70 <_Bfree>
 8019962:	9b06      	ldr	r3, [sp, #24]
 8019964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019966:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801996a:	ea43 0102 	orr.w	r1, r3, r2
 801996e:	9b07      	ldr	r3, [sp, #28]
 8019970:	4319      	orrs	r1, r3
 8019972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019974:	d10d      	bne.n	8019992 <_dtoa_r+0x97a>
 8019976:	2b39      	cmp	r3, #57	; 0x39
 8019978:	d029      	beq.n	80199ce <_dtoa_r+0x9b6>
 801997a:	f1ba 0f00 	cmp.w	sl, #0
 801997e:	dd01      	ble.n	8019984 <_dtoa_r+0x96c>
 8019980:	9b05      	ldr	r3, [sp, #20]
 8019982:	3331      	adds	r3, #49	; 0x31
 8019984:	9a02      	ldr	r2, [sp, #8]
 8019986:	7013      	strb	r3, [r2, #0]
 8019988:	e775      	b.n	8019876 <_dtoa_r+0x85e>
 801998a:	4638      	mov	r0, r7
 801998c:	e7b8      	b.n	8019900 <_dtoa_r+0x8e8>
 801998e:	2201      	movs	r2, #1
 8019990:	e7e1      	b.n	8019956 <_dtoa_r+0x93e>
 8019992:	f1ba 0f00 	cmp.w	sl, #0
 8019996:	db06      	blt.n	80199a6 <_dtoa_r+0x98e>
 8019998:	9906      	ldr	r1, [sp, #24]
 801999a:	ea41 0a0a 	orr.w	sl, r1, sl
 801999e:	9907      	ldr	r1, [sp, #28]
 80199a0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80199a4:	d120      	bne.n	80199e8 <_dtoa_r+0x9d0>
 80199a6:	2a00      	cmp	r2, #0
 80199a8:	ddec      	ble.n	8019984 <_dtoa_r+0x96c>
 80199aa:	4629      	mov	r1, r5
 80199ac:	2201      	movs	r2, #1
 80199ae:	4630      	mov	r0, r6
 80199b0:	9304      	str	r3, [sp, #16]
 80199b2:	f000 fbf7 	bl	801a1a4 <__lshift>
 80199b6:	4621      	mov	r1, r4
 80199b8:	4605      	mov	r5, r0
 80199ba:	f000 fc5f 	bl	801a27c <__mcmp>
 80199be:	2800      	cmp	r0, #0
 80199c0:	9b04      	ldr	r3, [sp, #16]
 80199c2:	dc02      	bgt.n	80199ca <_dtoa_r+0x9b2>
 80199c4:	d1de      	bne.n	8019984 <_dtoa_r+0x96c>
 80199c6:	07da      	lsls	r2, r3, #31
 80199c8:	d5dc      	bpl.n	8019984 <_dtoa_r+0x96c>
 80199ca:	2b39      	cmp	r3, #57	; 0x39
 80199cc:	d1d8      	bne.n	8019980 <_dtoa_r+0x968>
 80199ce:	9a02      	ldr	r2, [sp, #8]
 80199d0:	2339      	movs	r3, #57	; 0x39
 80199d2:	7013      	strb	r3, [r2, #0]
 80199d4:	4643      	mov	r3, r8
 80199d6:	4698      	mov	r8, r3
 80199d8:	3b01      	subs	r3, #1
 80199da:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80199de:	2a39      	cmp	r2, #57	; 0x39
 80199e0:	d051      	beq.n	8019a86 <_dtoa_r+0xa6e>
 80199e2:	3201      	adds	r2, #1
 80199e4:	701a      	strb	r2, [r3, #0]
 80199e6:	e746      	b.n	8019876 <_dtoa_r+0x85e>
 80199e8:	2a00      	cmp	r2, #0
 80199ea:	dd03      	ble.n	80199f4 <_dtoa_r+0x9dc>
 80199ec:	2b39      	cmp	r3, #57	; 0x39
 80199ee:	d0ee      	beq.n	80199ce <_dtoa_r+0x9b6>
 80199f0:	3301      	adds	r3, #1
 80199f2:	e7c7      	b.n	8019984 <_dtoa_r+0x96c>
 80199f4:	9a04      	ldr	r2, [sp, #16]
 80199f6:	9908      	ldr	r1, [sp, #32]
 80199f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80199fc:	428a      	cmp	r2, r1
 80199fe:	d02b      	beq.n	8019a58 <_dtoa_r+0xa40>
 8019a00:	4629      	mov	r1, r5
 8019a02:	2300      	movs	r3, #0
 8019a04:	220a      	movs	r2, #10
 8019a06:	4630      	mov	r0, r6
 8019a08:	f000 f9d4 	bl	8019db4 <__multadd>
 8019a0c:	45b9      	cmp	r9, r7
 8019a0e:	4605      	mov	r5, r0
 8019a10:	f04f 0300 	mov.w	r3, #0
 8019a14:	f04f 020a 	mov.w	r2, #10
 8019a18:	4649      	mov	r1, r9
 8019a1a:	4630      	mov	r0, r6
 8019a1c:	d107      	bne.n	8019a2e <_dtoa_r+0xa16>
 8019a1e:	f000 f9c9 	bl	8019db4 <__multadd>
 8019a22:	4681      	mov	r9, r0
 8019a24:	4607      	mov	r7, r0
 8019a26:	9b04      	ldr	r3, [sp, #16]
 8019a28:	3301      	adds	r3, #1
 8019a2a:	9304      	str	r3, [sp, #16]
 8019a2c:	e774      	b.n	8019918 <_dtoa_r+0x900>
 8019a2e:	f000 f9c1 	bl	8019db4 <__multadd>
 8019a32:	4639      	mov	r1, r7
 8019a34:	4681      	mov	r9, r0
 8019a36:	2300      	movs	r3, #0
 8019a38:	220a      	movs	r2, #10
 8019a3a:	4630      	mov	r0, r6
 8019a3c:	f000 f9ba 	bl	8019db4 <__multadd>
 8019a40:	4607      	mov	r7, r0
 8019a42:	e7f0      	b.n	8019a26 <_dtoa_r+0xa0e>
 8019a44:	f1ba 0f00 	cmp.w	sl, #0
 8019a48:	9a01      	ldr	r2, [sp, #4]
 8019a4a:	bfcc      	ite	gt
 8019a4c:	46d0      	movgt	r8, sl
 8019a4e:	f04f 0801 	movle.w	r8, #1
 8019a52:	4490      	add	r8, r2
 8019a54:	f04f 0900 	mov.w	r9, #0
 8019a58:	4629      	mov	r1, r5
 8019a5a:	2201      	movs	r2, #1
 8019a5c:	4630      	mov	r0, r6
 8019a5e:	9302      	str	r3, [sp, #8]
 8019a60:	f000 fba0 	bl	801a1a4 <__lshift>
 8019a64:	4621      	mov	r1, r4
 8019a66:	4605      	mov	r5, r0
 8019a68:	f000 fc08 	bl	801a27c <__mcmp>
 8019a6c:	2800      	cmp	r0, #0
 8019a6e:	dcb1      	bgt.n	80199d4 <_dtoa_r+0x9bc>
 8019a70:	d102      	bne.n	8019a78 <_dtoa_r+0xa60>
 8019a72:	9b02      	ldr	r3, [sp, #8]
 8019a74:	07db      	lsls	r3, r3, #31
 8019a76:	d4ad      	bmi.n	80199d4 <_dtoa_r+0x9bc>
 8019a78:	4643      	mov	r3, r8
 8019a7a:	4698      	mov	r8, r3
 8019a7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019a80:	2a30      	cmp	r2, #48	; 0x30
 8019a82:	d0fa      	beq.n	8019a7a <_dtoa_r+0xa62>
 8019a84:	e6f7      	b.n	8019876 <_dtoa_r+0x85e>
 8019a86:	9a01      	ldr	r2, [sp, #4]
 8019a88:	429a      	cmp	r2, r3
 8019a8a:	d1a4      	bne.n	80199d6 <_dtoa_r+0x9be>
 8019a8c:	f10b 0b01 	add.w	fp, fp, #1
 8019a90:	2331      	movs	r3, #49	; 0x31
 8019a92:	e778      	b.n	8019986 <_dtoa_r+0x96e>
 8019a94:	4b14      	ldr	r3, [pc, #80]	; (8019ae8 <_dtoa_r+0xad0>)
 8019a96:	f7ff bb2a 	b.w	80190ee <_dtoa_r+0xd6>
 8019a9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	f47f ab05 	bne.w	80190ac <_dtoa_r+0x94>
 8019aa2:	4b12      	ldr	r3, [pc, #72]	; (8019aec <_dtoa_r+0xad4>)
 8019aa4:	f7ff bb23 	b.w	80190ee <_dtoa_r+0xd6>
 8019aa8:	f1ba 0f00 	cmp.w	sl, #0
 8019aac:	dc03      	bgt.n	8019ab6 <_dtoa_r+0xa9e>
 8019aae:	9b06      	ldr	r3, [sp, #24]
 8019ab0:	2b02      	cmp	r3, #2
 8019ab2:	f73f aec8 	bgt.w	8019846 <_dtoa_r+0x82e>
 8019ab6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019aba:	4621      	mov	r1, r4
 8019abc:	4628      	mov	r0, r5
 8019abe:	f7ff fa21 	bl	8018f04 <quorem>
 8019ac2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019ac6:	f808 3b01 	strb.w	r3, [r8], #1
 8019aca:	9a01      	ldr	r2, [sp, #4]
 8019acc:	eba8 0202 	sub.w	r2, r8, r2
 8019ad0:	4592      	cmp	sl, r2
 8019ad2:	ddb7      	ble.n	8019a44 <_dtoa_r+0xa2c>
 8019ad4:	4629      	mov	r1, r5
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	220a      	movs	r2, #10
 8019ada:	4630      	mov	r0, r6
 8019adc:	f000 f96a 	bl	8019db4 <__multadd>
 8019ae0:	4605      	mov	r5, r0
 8019ae2:	e7ea      	b.n	8019aba <_dtoa_r+0xaa2>
 8019ae4:	080205be 	.word	0x080205be
 8019ae8:	080204f4 	.word	0x080204f4
 8019aec:	08020559 	.word	0x08020559

08019af0 <_free_r>:
 8019af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019af2:	2900      	cmp	r1, #0
 8019af4:	d044      	beq.n	8019b80 <_free_r+0x90>
 8019af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019afa:	9001      	str	r0, [sp, #4]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	f1a1 0404 	sub.w	r4, r1, #4
 8019b02:	bfb8      	it	lt
 8019b04:	18e4      	addlt	r4, r4, r3
 8019b06:	f000 f8e7 	bl	8019cd8 <__malloc_lock>
 8019b0a:	4a1e      	ldr	r2, [pc, #120]	; (8019b84 <_free_r+0x94>)
 8019b0c:	9801      	ldr	r0, [sp, #4]
 8019b0e:	6813      	ldr	r3, [r2, #0]
 8019b10:	b933      	cbnz	r3, 8019b20 <_free_r+0x30>
 8019b12:	6063      	str	r3, [r4, #4]
 8019b14:	6014      	str	r4, [r2, #0]
 8019b16:	b003      	add	sp, #12
 8019b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b1c:	f000 b8e2 	b.w	8019ce4 <__malloc_unlock>
 8019b20:	42a3      	cmp	r3, r4
 8019b22:	d908      	bls.n	8019b36 <_free_r+0x46>
 8019b24:	6825      	ldr	r5, [r4, #0]
 8019b26:	1961      	adds	r1, r4, r5
 8019b28:	428b      	cmp	r3, r1
 8019b2a:	bf01      	itttt	eq
 8019b2c:	6819      	ldreq	r1, [r3, #0]
 8019b2e:	685b      	ldreq	r3, [r3, #4]
 8019b30:	1949      	addeq	r1, r1, r5
 8019b32:	6021      	streq	r1, [r4, #0]
 8019b34:	e7ed      	b.n	8019b12 <_free_r+0x22>
 8019b36:	461a      	mov	r2, r3
 8019b38:	685b      	ldr	r3, [r3, #4]
 8019b3a:	b10b      	cbz	r3, 8019b40 <_free_r+0x50>
 8019b3c:	42a3      	cmp	r3, r4
 8019b3e:	d9fa      	bls.n	8019b36 <_free_r+0x46>
 8019b40:	6811      	ldr	r1, [r2, #0]
 8019b42:	1855      	adds	r5, r2, r1
 8019b44:	42a5      	cmp	r5, r4
 8019b46:	d10b      	bne.n	8019b60 <_free_r+0x70>
 8019b48:	6824      	ldr	r4, [r4, #0]
 8019b4a:	4421      	add	r1, r4
 8019b4c:	1854      	adds	r4, r2, r1
 8019b4e:	42a3      	cmp	r3, r4
 8019b50:	6011      	str	r1, [r2, #0]
 8019b52:	d1e0      	bne.n	8019b16 <_free_r+0x26>
 8019b54:	681c      	ldr	r4, [r3, #0]
 8019b56:	685b      	ldr	r3, [r3, #4]
 8019b58:	6053      	str	r3, [r2, #4]
 8019b5a:	440c      	add	r4, r1
 8019b5c:	6014      	str	r4, [r2, #0]
 8019b5e:	e7da      	b.n	8019b16 <_free_r+0x26>
 8019b60:	d902      	bls.n	8019b68 <_free_r+0x78>
 8019b62:	230c      	movs	r3, #12
 8019b64:	6003      	str	r3, [r0, #0]
 8019b66:	e7d6      	b.n	8019b16 <_free_r+0x26>
 8019b68:	6825      	ldr	r5, [r4, #0]
 8019b6a:	1961      	adds	r1, r4, r5
 8019b6c:	428b      	cmp	r3, r1
 8019b6e:	bf04      	itt	eq
 8019b70:	6819      	ldreq	r1, [r3, #0]
 8019b72:	685b      	ldreq	r3, [r3, #4]
 8019b74:	6063      	str	r3, [r4, #4]
 8019b76:	bf04      	itt	eq
 8019b78:	1949      	addeq	r1, r1, r5
 8019b7a:	6021      	streq	r1, [r4, #0]
 8019b7c:	6054      	str	r4, [r2, #4]
 8019b7e:	e7ca      	b.n	8019b16 <_free_r+0x26>
 8019b80:	b003      	add	sp, #12
 8019b82:	bd30      	pop	{r4, r5, pc}
 8019b84:	20077bdc 	.word	0x20077bdc

08019b88 <malloc>:
 8019b88:	4b02      	ldr	r3, [pc, #8]	; (8019b94 <malloc+0xc>)
 8019b8a:	4601      	mov	r1, r0
 8019b8c:	6818      	ldr	r0, [r3, #0]
 8019b8e:	f000 b823 	b.w	8019bd8 <_malloc_r>
 8019b92:	bf00      	nop
 8019b94:	20000088 	.word	0x20000088

08019b98 <sbrk_aligned>:
 8019b98:	b570      	push	{r4, r5, r6, lr}
 8019b9a:	4e0e      	ldr	r6, [pc, #56]	; (8019bd4 <sbrk_aligned+0x3c>)
 8019b9c:	460c      	mov	r4, r1
 8019b9e:	6831      	ldr	r1, [r6, #0]
 8019ba0:	4605      	mov	r5, r0
 8019ba2:	b911      	cbnz	r1, 8019baa <sbrk_aligned+0x12>
 8019ba4:	f001 ff12 	bl	801b9cc <_sbrk_r>
 8019ba8:	6030      	str	r0, [r6, #0]
 8019baa:	4621      	mov	r1, r4
 8019bac:	4628      	mov	r0, r5
 8019bae:	f001 ff0d 	bl	801b9cc <_sbrk_r>
 8019bb2:	1c43      	adds	r3, r0, #1
 8019bb4:	d00a      	beq.n	8019bcc <sbrk_aligned+0x34>
 8019bb6:	1cc4      	adds	r4, r0, #3
 8019bb8:	f024 0403 	bic.w	r4, r4, #3
 8019bbc:	42a0      	cmp	r0, r4
 8019bbe:	d007      	beq.n	8019bd0 <sbrk_aligned+0x38>
 8019bc0:	1a21      	subs	r1, r4, r0
 8019bc2:	4628      	mov	r0, r5
 8019bc4:	f001 ff02 	bl	801b9cc <_sbrk_r>
 8019bc8:	3001      	adds	r0, #1
 8019bca:	d101      	bne.n	8019bd0 <sbrk_aligned+0x38>
 8019bcc:	f04f 34ff 	mov.w	r4, #4294967295
 8019bd0:	4620      	mov	r0, r4
 8019bd2:	bd70      	pop	{r4, r5, r6, pc}
 8019bd4:	20077be0 	.word	0x20077be0

08019bd8 <_malloc_r>:
 8019bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bdc:	1ccd      	adds	r5, r1, #3
 8019bde:	f025 0503 	bic.w	r5, r5, #3
 8019be2:	3508      	adds	r5, #8
 8019be4:	2d0c      	cmp	r5, #12
 8019be6:	bf38      	it	cc
 8019be8:	250c      	movcc	r5, #12
 8019bea:	2d00      	cmp	r5, #0
 8019bec:	4607      	mov	r7, r0
 8019bee:	db01      	blt.n	8019bf4 <_malloc_r+0x1c>
 8019bf0:	42a9      	cmp	r1, r5
 8019bf2:	d905      	bls.n	8019c00 <_malloc_r+0x28>
 8019bf4:	230c      	movs	r3, #12
 8019bf6:	603b      	str	r3, [r7, #0]
 8019bf8:	2600      	movs	r6, #0
 8019bfa:	4630      	mov	r0, r6
 8019bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019cd4 <_malloc_r+0xfc>
 8019c04:	f000 f868 	bl	8019cd8 <__malloc_lock>
 8019c08:	f8d8 3000 	ldr.w	r3, [r8]
 8019c0c:	461c      	mov	r4, r3
 8019c0e:	bb5c      	cbnz	r4, 8019c68 <_malloc_r+0x90>
 8019c10:	4629      	mov	r1, r5
 8019c12:	4638      	mov	r0, r7
 8019c14:	f7ff ffc0 	bl	8019b98 <sbrk_aligned>
 8019c18:	1c43      	adds	r3, r0, #1
 8019c1a:	4604      	mov	r4, r0
 8019c1c:	d155      	bne.n	8019cca <_malloc_r+0xf2>
 8019c1e:	f8d8 4000 	ldr.w	r4, [r8]
 8019c22:	4626      	mov	r6, r4
 8019c24:	2e00      	cmp	r6, #0
 8019c26:	d145      	bne.n	8019cb4 <_malloc_r+0xdc>
 8019c28:	2c00      	cmp	r4, #0
 8019c2a:	d048      	beq.n	8019cbe <_malloc_r+0xe6>
 8019c2c:	6823      	ldr	r3, [r4, #0]
 8019c2e:	4631      	mov	r1, r6
 8019c30:	4638      	mov	r0, r7
 8019c32:	eb04 0903 	add.w	r9, r4, r3
 8019c36:	f001 fec9 	bl	801b9cc <_sbrk_r>
 8019c3a:	4581      	cmp	r9, r0
 8019c3c:	d13f      	bne.n	8019cbe <_malloc_r+0xe6>
 8019c3e:	6821      	ldr	r1, [r4, #0]
 8019c40:	1a6d      	subs	r5, r5, r1
 8019c42:	4629      	mov	r1, r5
 8019c44:	4638      	mov	r0, r7
 8019c46:	f7ff ffa7 	bl	8019b98 <sbrk_aligned>
 8019c4a:	3001      	adds	r0, #1
 8019c4c:	d037      	beq.n	8019cbe <_malloc_r+0xe6>
 8019c4e:	6823      	ldr	r3, [r4, #0]
 8019c50:	442b      	add	r3, r5
 8019c52:	6023      	str	r3, [r4, #0]
 8019c54:	f8d8 3000 	ldr.w	r3, [r8]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d038      	beq.n	8019cce <_malloc_r+0xf6>
 8019c5c:	685a      	ldr	r2, [r3, #4]
 8019c5e:	42a2      	cmp	r2, r4
 8019c60:	d12b      	bne.n	8019cba <_malloc_r+0xe2>
 8019c62:	2200      	movs	r2, #0
 8019c64:	605a      	str	r2, [r3, #4]
 8019c66:	e00f      	b.n	8019c88 <_malloc_r+0xb0>
 8019c68:	6822      	ldr	r2, [r4, #0]
 8019c6a:	1b52      	subs	r2, r2, r5
 8019c6c:	d41f      	bmi.n	8019cae <_malloc_r+0xd6>
 8019c6e:	2a0b      	cmp	r2, #11
 8019c70:	d917      	bls.n	8019ca2 <_malloc_r+0xca>
 8019c72:	1961      	adds	r1, r4, r5
 8019c74:	42a3      	cmp	r3, r4
 8019c76:	6025      	str	r5, [r4, #0]
 8019c78:	bf18      	it	ne
 8019c7a:	6059      	strne	r1, [r3, #4]
 8019c7c:	6863      	ldr	r3, [r4, #4]
 8019c7e:	bf08      	it	eq
 8019c80:	f8c8 1000 	streq.w	r1, [r8]
 8019c84:	5162      	str	r2, [r4, r5]
 8019c86:	604b      	str	r3, [r1, #4]
 8019c88:	4638      	mov	r0, r7
 8019c8a:	f104 060b 	add.w	r6, r4, #11
 8019c8e:	f000 f829 	bl	8019ce4 <__malloc_unlock>
 8019c92:	f026 0607 	bic.w	r6, r6, #7
 8019c96:	1d23      	adds	r3, r4, #4
 8019c98:	1af2      	subs	r2, r6, r3
 8019c9a:	d0ae      	beq.n	8019bfa <_malloc_r+0x22>
 8019c9c:	1b9b      	subs	r3, r3, r6
 8019c9e:	50a3      	str	r3, [r4, r2]
 8019ca0:	e7ab      	b.n	8019bfa <_malloc_r+0x22>
 8019ca2:	42a3      	cmp	r3, r4
 8019ca4:	6862      	ldr	r2, [r4, #4]
 8019ca6:	d1dd      	bne.n	8019c64 <_malloc_r+0x8c>
 8019ca8:	f8c8 2000 	str.w	r2, [r8]
 8019cac:	e7ec      	b.n	8019c88 <_malloc_r+0xb0>
 8019cae:	4623      	mov	r3, r4
 8019cb0:	6864      	ldr	r4, [r4, #4]
 8019cb2:	e7ac      	b.n	8019c0e <_malloc_r+0x36>
 8019cb4:	4634      	mov	r4, r6
 8019cb6:	6876      	ldr	r6, [r6, #4]
 8019cb8:	e7b4      	b.n	8019c24 <_malloc_r+0x4c>
 8019cba:	4613      	mov	r3, r2
 8019cbc:	e7cc      	b.n	8019c58 <_malloc_r+0x80>
 8019cbe:	230c      	movs	r3, #12
 8019cc0:	603b      	str	r3, [r7, #0]
 8019cc2:	4638      	mov	r0, r7
 8019cc4:	f000 f80e 	bl	8019ce4 <__malloc_unlock>
 8019cc8:	e797      	b.n	8019bfa <_malloc_r+0x22>
 8019cca:	6025      	str	r5, [r4, #0]
 8019ccc:	e7dc      	b.n	8019c88 <_malloc_r+0xb0>
 8019cce:	605b      	str	r3, [r3, #4]
 8019cd0:	deff      	udf	#255	; 0xff
 8019cd2:	bf00      	nop
 8019cd4:	20077bdc 	.word	0x20077bdc

08019cd8 <__malloc_lock>:
 8019cd8:	4801      	ldr	r0, [pc, #4]	; (8019ce0 <__malloc_lock+0x8>)
 8019cda:	f7ff b8de 	b.w	8018e9a <__retarget_lock_acquire_recursive>
 8019cde:	bf00      	nop
 8019ce0:	20077bd8 	.word	0x20077bd8

08019ce4 <__malloc_unlock>:
 8019ce4:	4801      	ldr	r0, [pc, #4]	; (8019cec <__malloc_unlock+0x8>)
 8019ce6:	f7ff b8d9 	b.w	8018e9c <__retarget_lock_release_recursive>
 8019cea:	bf00      	nop
 8019cec:	20077bd8 	.word	0x20077bd8

08019cf0 <_Balloc>:
 8019cf0:	b570      	push	{r4, r5, r6, lr}
 8019cf2:	69c6      	ldr	r6, [r0, #28]
 8019cf4:	4604      	mov	r4, r0
 8019cf6:	460d      	mov	r5, r1
 8019cf8:	b976      	cbnz	r6, 8019d18 <_Balloc+0x28>
 8019cfa:	2010      	movs	r0, #16
 8019cfc:	f7ff ff44 	bl	8019b88 <malloc>
 8019d00:	4602      	mov	r2, r0
 8019d02:	61e0      	str	r0, [r4, #28]
 8019d04:	b920      	cbnz	r0, 8019d10 <_Balloc+0x20>
 8019d06:	4b18      	ldr	r3, [pc, #96]	; (8019d68 <_Balloc+0x78>)
 8019d08:	4818      	ldr	r0, [pc, #96]	; (8019d6c <_Balloc+0x7c>)
 8019d0a:	216b      	movs	r1, #107	; 0x6b
 8019d0c:	f7ff f8dc 	bl	8018ec8 <__assert_func>
 8019d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019d14:	6006      	str	r6, [r0, #0]
 8019d16:	60c6      	str	r6, [r0, #12]
 8019d18:	69e6      	ldr	r6, [r4, #28]
 8019d1a:	68f3      	ldr	r3, [r6, #12]
 8019d1c:	b183      	cbz	r3, 8019d40 <_Balloc+0x50>
 8019d1e:	69e3      	ldr	r3, [r4, #28]
 8019d20:	68db      	ldr	r3, [r3, #12]
 8019d22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019d26:	b9b8      	cbnz	r0, 8019d58 <_Balloc+0x68>
 8019d28:	2101      	movs	r1, #1
 8019d2a:	fa01 f605 	lsl.w	r6, r1, r5
 8019d2e:	1d72      	adds	r2, r6, #5
 8019d30:	0092      	lsls	r2, r2, #2
 8019d32:	4620      	mov	r0, r4
 8019d34:	f001 fe6b 	bl	801ba0e <_calloc_r>
 8019d38:	b160      	cbz	r0, 8019d54 <_Balloc+0x64>
 8019d3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019d3e:	e00e      	b.n	8019d5e <_Balloc+0x6e>
 8019d40:	2221      	movs	r2, #33	; 0x21
 8019d42:	2104      	movs	r1, #4
 8019d44:	4620      	mov	r0, r4
 8019d46:	f001 fe62 	bl	801ba0e <_calloc_r>
 8019d4a:	69e3      	ldr	r3, [r4, #28]
 8019d4c:	60f0      	str	r0, [r6, #12]
 8019d4e:	68db      	ldr	r3, [r3, #12]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d1e4      	bne.n	8019d1e <_Balloc+0x2e>
 8019d54:	2000      	movs	r0, #0
 8019d56:	bd70      	pop	{r4, r5, r6, pc}
 8019d58:	6802      	ldr	r2, [r0, #0]
 8019d5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019d5e:	2300      	movs	r3, #0
 8019d60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019d64:	e7f7      	b.n	8019d56 <_Balloc+0x66>
 8019d66:	bf00      	nop
 8019d68:	08020374 	.word	0x08020374
 8019d6c:	080205cf 	.word	0x080205cf

08019d70 <_Bfree>:
 8019d70:	b570      	push	{r4, r5, r6, lr}
 8019d72:	69c6      	ldr	r6, [r0, #28]
 8019d74:	4605      	mov	r5, r0
 8019d76:	460c      	mov	r4, r1
 8019d78:	b976      	cbnz	r6, 8019d98 <_Bfree+0x28>
 8019d7a:	2010      	movs	r0, #16
 8019d7c:	f7ff ff04 	bl	8019b88 <malloc>
 8019d80:	4602      	mov	r2, r0
 8019d82:	61e8      	str	r0, [r5, #28]
 8019d84:	b920      	cbnz	r0, 8019d90 <_Bfree+0x20>
 8019d86:	4b09      	ldr	r3, [pc, #36]	; (8019dac <_Bfree+0x3c>)
 8019d88:	4809      	ldr	r0, [pc, #36]	; (8019db0 <_Bfree+0x40>)
 8019d8a:	218f      	movs	r1, #143	; 0x8f
 8019d8c:	f7ff f89c 	bl	8018ec8 <__assert_func>
 8019d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019d94:	6006      	str	r6, [r0, #0]
 8019d96:	60c6      	str	r6, [r0, #12]
 8019d98:	b13c      	cbz	r4, 8019daa <_Bfree+0x3a>
 8019d9a:	69eb      	ldr	r3, [r5, #28]
 8019d9c:	6862      	ldr	r2, [r4, #4]
 8019d9e:	68db      	ldr	r3, [r3, #12]
 8019da0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019da4:	6021      	str	r1, [r4, #0]
 8019da6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019daa:	bd70      	pop	{r4, r5, r6, pc}
 8019dac:	08020374 	.word	0x08020374
 8019db0:	080205cf 	.word	0x080205cf

08019db4 <__multadd>:
 8019db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019db8:	690d      	ldr	r5, [r1, #16]
 8019dba:	4607      	mov	r7, r0
 8019dbc:	460c      	mov	r4, r1
 8019dbe:	461e      	mov	r6, r3
 8019dc0:	f101 0c14 	add.w	ip, r1, #20
 8019dc4:	2000      	movs	r0, #0
 8019dc6:	f8dc 3000 	ldr.w	r3, [ip]
 8019dca:	b299      	uxth	r1, r3
 8019dcc:	fb02 6101 	mla	r1, r2, r1, r6
 8019dd0:	0c1e      	lsrs	r6, r3, #16
 8019dd2:	0c0b      	lsrs	r3, r1, #16
 8019dd4:	fb02 3306 	mla	r3, r2, r6, r3
 8019dd8:	b289      	uxth	r1, r1
 8019dda:	3001      	adds	r0, #1
 8019ddc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019de0:	4285      	cmp	r5, r0
 8019de2:	f84c 1b04 	str.w	r1, [ip], #4
 8019de6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019dea:	dcec      	bgt.n	8019dc6 <__multadd+0x12>
 8019dec:	b30e      	cbz	r6, 8019e32 <__multadd+0x7e>
 8019dee:	68a3      	ldr	r3, [r4, #8]
 8019df0:	42ab      	cmp	r3, r5
 8019df2:	dc19      	bgt.n	8019e28 <__multadd+0x74>
 8019df4:	6861      	ldr	r1, [r4, #4]
 8019df6:	4638      	mov	r0, r7
 8019df8:	3101      	adds	r1, #1
 8019dfa:	f7ff ff79 	bl	8019cf0 <_Balloc>
 8019dfe:	4680      	mov	r8, r0
 8019e00:	b928      	cbnz	r0, 8019e0e <__multadd+0x5a>
 8019e02:	4602      	mov	r2, r0
 8019e04:	4b0c      	ldr	r3, [pc, #48]	; (8019e38 <__multadd+0x84>)
 8019e06:	480d      	ldr	r0, [pc, #52]	; (8019e3c <__multadd+0x88>)
 8019e08:	21ba      	movs	r1, #186	; 0xba
 8019e0a:	f7ff f85d 	bl	8018ec8 <__assert_func>
 8019e0e:	6922      	ldr	r2, [r4, #16]
 8019e10:	3202      	adds	r2, #2
 8019e12:	f104 010c 	add.w	r1, r4, #12
 8019e16:	0092      	lsls	r2, r2, #2
 8019e18:	300c      	adds	r0, #12
 8019e1a:	f7ff f840 	bl	8018e9e <memcpy>
 8019e1e:	4621      	mov	r1, r4
 8019e20:	4638      	mov	r0, r7
 8019e22:	f7ff ffa5 	bl	8019d70 <_Bfree>
 8019e26:	4644      	mov	r4, r8
 8019e28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019e2c:	3501      	adds	r5, #1
 8019e2e:	615e      	str	r6, [r3, #20]
 8019e30:	6125      	str	r5, [r4, #16]
 8019e32:	4620      	mov	r0, r4
 8019e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e38:	080205be 	.word	0x080205be
 8019e3c:	080205cf 	.word	0x080205cf

08019e40 <__s2b>:
 8019e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e44:	460c      	mov	r4, r1
 8019e46:	4615      	mov	r5, r2
 8019e48:	461f      	mov	r7, r3
 8019e4a:	2209      	movs	r2, #9
 8019e4c:	3308      	adds	r3, #8
 8019e4e:	4606      	mov	r6, r0
 8019e50:	fb93 f3f2 	sdiv	r3, r3, r2
 8019e54:	2100      	movs	r1, #0
 8019e56:	2201      	movs	r2, #1
 8019e58:	429a      	cmp	r2, r3
 8019e5a:	db09      	blt.n	8019e70 <__s2b+0x30>
 8019e5c:	4630      	mov	r0, r6
 8019e5e:	f7ff ff47 	bl	8019cf0 <_Balloc>
 8019e62:	b940      	cbnz	r0, 8019e76 <__s2b+0x36>
 8019e64:	4602      	mov	r2, r0
 8019e66:	4b19      	ldr	r3, [pc, #100]	; (8019ecc <__s2b+0x8c>)
 8019e68:	4819      	ldr	r0, [pc, #100]	; (8019ed0 <__s2b+0x90>)
 8019e6a:	21d3      	movs	r1, #211	; 0xd3
 8019e6c:	f7ff f82c 	bl	8018ec8 <__assert_func>
 8019e70:	0052      	lsls	r2, r2, #1
 8019e72:	3101      	adds	r1, #1
 8019e74:	e7f0      	b.n	8019e58 <__s2b+0x18>
 8019e76:	9b08      	ldr	r3, [sp, #32]
 8019e78:	6143      	str	r3, [r0, #20]
 8019e7a:	2d09      	cmp	r5, #9
 8019e7c:	f04f 0301 	mov.w	r3, #1
 8019e80:	6103      	str	r3, [r0, #16]
 8019e82:	dd16      	ble.n	8019eb2 <__s2b+0x72>
 8019e84:	f104 0909 	add.w	r9, r4, #9
 8019e88:	46c8      	mov	r8, r9
 8019e8a:	442c      	add	r4, r5
 8019e8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019e90:	4601      	mov	r1, r0
 8019e92:	3b30      	subs	r3, #48	; 0x30
 8019e94:	220a      	movs	r2, #10
 8019e96:	4630      	mov	r0, r6
 8019e98:	f7ff ff8c 	bl	8019db4 <__multadd>
 8019e9c:	45a0      	cmp	r8, r4
 8019e9e:	d1f5      	bne.n	8019e8c <__s2b+0x4c>
 8019ea0:	f1a5 0408 	sub.w	r4, r5, #8
 8019ea4:	444c      	add	r4, r9
 8019ea6:	1b2d      	subs	r5, r5, r4
 8019ea8:	1963      	adds	r3, r4, r5
 8019eaa:	42bb      	cmp	r3, r7
 8019eac:	db04      	blt.n	8019eb8 <__s2b+0x78>
 8019eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019eb2:	340a      	adds	r4, #10
 8019eb4:	2509      	movs	r5, #9
 8019eb6:	e7f6      	b.n	8019ea6 <__s2b+0x66>
 8019eb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019ebc:	4601      	mov	r1, r0
 8019ebe:	3b30      	subs	r3, #48	; 0x30
 8019ec0:	220a      	movs	r2, #10
 8019ec2:	4630      	mov	r0, r6
 8019ec4:	f7ff ff76 	bl	8019db4 <__multadd>
 8019ec8:	e7ee      	b.n	8019ea8 <__s2b+0x68>
 8019eca:	bf00      	nop
 8019ecc:	080205be 	.word	0x080205be
 8019ed0:	080205cf 	.word	0x080205cf

08019ed4 <__hi0bits>:
 8019ed4:	0c03      	lsrs	r3, r0, #16
 8019ed6:	041b      	lsls	r3, r3, #16
 8019ed8:	b9d3      	cbnz	r3, 8019f10 <__hi0bits+0x3c>
 8019eda:	0400      	lsls	r0, r0, #16
 8019edc:	2310      	movs	r3, #16
 8019ede:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019ee2:	bf04      	itt	eq
 8019ee4:	0200      	lsleq	r0, r0, #8
 8019ee6:	3308      	addeq	r3, #8
 8019ee8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019eec:	bf04      	itt	eq
 8019eee:	0100      	lsleq	r0, r0, #4
 8019ef0:	3304      	addeq	r3, #4
 8019ef2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019ef6:	bf04      	itt	eq
 8019ef8:	0080      	lsleq	r0, r0, #2
 8019efa:	3302      	addeq	r3, #2
 8019efc:	2800      	cmp	r0, #0
 8019efe:	db05      	blt.n	8019f0c <__hi0bits+0x38>
 8019f00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019f04:	f103 0301 	add.w	r3, r3, #1
 8019f08:	bf08      	it	eq
 8019f0a:	2320      	moveq	r3, #32
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	4770      	bx	lr
 8019f10:	2300      	movs	r3, #0
 8019f12:	e7e4      	b.n	8019ede <__hi0bits+0xa>

08019f14 <__lo0bits>:
 8019f14:	6803      	ldr	r3, [r0, #0]
 8019f16:	f013 0207 	ands.w	r2, r3, #7
 8019f1a:	d00c      	beq.n	8019f36 <__lo0bits+0x22>
 8019f1c:	07d9      	lsls	r1, r3, #31
 8019f1e:	d422      	bmi.n	8019f66 <__lo0bits+0x52>
 8019f20:	079a      	lsls	r2, r3, #30
 8019f22:	bf49      	itett	mi
 8019f24:	085b      	lsrmi	r3, r3, #1
 8019f26:	089b      	lsrpl	r3, r3, #2
 8019f28:	6003      	strmi	r3, [r0, #0]
 8019f2a:	2201      	movmi	r2, #1
 8019f2c:	bf5c      	itt	pl
 8019f2e:	6003      	strpl	r3, [r0, #0]
 8019f30:	2202      	movpl	r2, #2
 8019f32:	4610      	mov	r0, r2
 8019f34:	4770      	bx	lr
 8019f36:	b299      	uxth	r1, r3
 8019f38:	b909      	cbnz	r1, 8019f3e <__lo0bits+0x2a>
 8019f3a:	0c1b      	lsrs	r3, r3, #16
 8019f3c:	2210      	movs	r2, #16
 8019f3e:	b2d9      	uxtb	r1, r3
 8019f40:	b909      	cbnz	r1, 8019f46 <__lo0bits+0x32>
 8019f42:	3208      	adds	r2, #8
 8019f44:	0a1b      	lsrs	r3, r3, #8
 8019f46:	0719      	lsls	r1, r3, #28
 8019f48:	bf04      	itt	eq
 8019f4a:	091b      	lsreq	r3, r3, #4
 8019f4c:	3204      	addeq	r2, #4
 8019f4e:	0799      	lsls	r1, r3, #30
 8019f50:	bf04      	itt	eq
 8019f52:	089b      	lsreq	r3, r3, #2
 8019f54:	3202      	addeq	r2, #2
 8019f56:	07d9      	lsls	r1, r3, #31
 8019f58:	d403      	bmi.n	8019f62 <__lo0bits+0x4e>
 8019f5a:	085b      	lsrs	r3, r3, #1
 8019f5c:	f102 0201 	add.w	r2, r2, #1
 8019f60:	d003      	beq.n	8019f6a <__lo0bits+0x56>
 8019f62:	6003      	str	r3, [r0, #0]
 8019f64:	e7e5      	b.n	8019f32 <__lo0bits+0x1e>
 8019f66:	2200      	movs	r2, #0
 8019f68:	e7e3      	b.n	8019f32 <__lo0bits+0x1e>
 8019f6a:	2220      	movs	r2, #32
 8019f6c:	e7e1      	b.n	8019f32 <__lo0bits+0x1e>
	...

08019f70 <__i2b>:
 8019f70:	b510      	push	{r4, lr}
 8019f72:	460c      	mov	r4, r1
 8019f74:	2101      	movs	r1, #1
 8019f76:	f7ff febb 	bl	8019cf0 <_Balloc>
 8019f7a:	4602      	mov	r2, r0
 8019f7c:	b928      	cbnz	r0, 8019f8a <__i2b+0x1a>
 8019f7e:	4b05      	ldr	r3, [pc, #20]	; (8019f94 <__i2b+0x24>)
 8019f80:	4805      	ldr	r0, [pc, #20]	; (8019f98 <__i2b+0x28>)
 8019f82:	f240 1145 	movw	r1, #325	; 0x145
 8019f86:	f7fe ff9f 	bl	8018ec8 <__assert_func>
 8019f8a:	2301      	movs	r3, #1
 8019f8c:	6144      	str	r4, [r0, #20]
 8019f8e:	6103      	str	r3, [r0, #16]
 8019f90:	bd10      	pop	{r4, pc}
 8019f92:	bf00      	nop
 8019f94:	080205be 	.word	0x080205be
 8019f98:	080205cf 	.word	0x080205cf

08019f9c <__multiply>:
 8019f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fa0:	4691      	mov	r9, r2
 8019fa2:	690a      	ldr	r2, [r1, #16]
 8019fa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019fa8:	429a      	cmp	r2, r3
 8019faa:	bfb8      	it	lt
 8019fac:	460b      	movlt	r3, r1
 8019fae:	460c      	mov	r4, r1
 8019fb0:	bfbc      	itt	lt
 8019fb2:	464c      	movlt	r4, r9
 8019fb4:	4699      	movlt	r9, r3
 8019fb6:	6927      	ldr	r7, [r4, #16]
 8019fb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019fbc:	68a3      	ldr	r3, [r4, #8]
 8019fbe:	6861      	ldr	r1, [r4, #4]
 8019fc0:	eb07 060a 	add.w	r6, r7, sl
 8019fc4:	42b3      	cmp	r3, r6
 8019fc6:	b085      	sub	sp, #20
 8019fc8:	bfb8      	it	lt
 8019fca:	3101      	addlt	r1, #1
 8019fcc:	f7ff fe90 	bl	8019cf0 <_Balloc>
 8019fd0:	b930      	cbnz	r0, 8019fe0 <__multiply+0x44>
 8019fd2:	4602      	mov	r2, r0
 8019fd4:	4b44      	ldr	r3, [pc, #272]	; (801a0e8 <__multiply+0x14c>)
 8019fd6:	4845      	ldr	r0, [pc, #276]	; (801a0ec <__multiply+0x150>)
 8019fd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8019fdc:	f7fe ff74 	bl	8018ec8 <__assert_func>
 8019fe0:	f100 0514 	add.w	r5, r0, #20
 8019fe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019fe8:	462b      	mov	r3, r5
 8019fea:	2200      	movs	r2, #0
 8019fec:	4543      	cmp	r3, r8
 8019fee:	d321      	bcc.n	801a034 <__multiply+0x98>
 8019ff0:	f104 0314 	add.w	r3, r4, #20
 8019ff4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019ff8:	f109 0314 	add.w	r3, r9, #20
 8019ffc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a000:	9202      	str	r2, [sp, #8]
 801a002:	1b3a      	subs	r2, r7, r4
 801a004:	3a15      	subs	r2, #21
 801a006:	f022 0203 	bic.w	r2, r2, #3
 801a00a:	3204      	adds	r2, #4
 801a00c:	f104 0115 	add.w	r1, r4, #21
 801a010:	428f      	cmp	r7, r1
 801a012:	bf38      	it	cc
 801a014:	2204      	movcc	r2, #4
 801a016:	9201      	str	r2, [sp, #4]
 801a018:	9a02      	ldr	r2, [sp, #8]
 801a01a:	9303      	str	r3, [sp, #12]
 801a01c:	429a      	cmp	r2, r3
 801a01e:	d80c      	bhi.n	801a03a <__multiply+0x9e>
 801a020:	2e00      	cmp	r6, #0
 801a022:	dd03      	ble.n	801a02c <__multiply+0x90>
 801a024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d05b      	beq.n	801a0e4 <__multiply+0x148>
 801a02c:	6106      	str	r6, [r0, #16]
 801a02e:	b005      	add	sp, #20
 801a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a034:	f843 2b04 	str.w	r2, [r3], #4
 801a038:	e7d8      	b.n	8019fec <__multiply+0x50>
 801a03a:	f8b3 a000 	ldrh.w	sl, [r3]
 801a03e:	f1ba 0f00 	cmp.w	sl, #0
 801a042:	d024      	beq.n	801a08e <__multiply+0xf2>
 801a044:	f104 0e14 	add.w	lr, r4, #20
 801a048:	46a9      	mov	r9, r5
 801a04a:	f04f 0c00 	mov.w	ip, #0
 801a04e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a052:	f8d9 1000 	ldr.w	r1, [r9]
 801a056:	fa1f fb82 	uxth.w	fp, r2
 801a05a:	b289      	uxth	r1, r1
 801a05c:	fb0a 110b 	mla	r1, sl, fp, r1
 801a060:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a064:	f8d9 2000 	ldr.w	r2, [r9]
 801a068:	4461      	add	r1, ip
 801a06a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a06e:	fb0a c20b 	mla	r2, sl, fp, ip
 801a072:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a076:	b289      	uxth	r1, r1
 801a078:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a07c:	4577      	cmp	r7, lr
 801a07e:	f849 1b04 	str.w	r1, [r9], #4
 801a082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a086:	d8e2      	bhi.n	801a04e <__multiply+0xb2>
 801a088:	9a01      	ldr	r2, [sp, #4]
 801a08a:	f845 c002 	str.w	ip, [r5, r2]
 801a08e:	9a03      	ldr	r2, [sp, #12]
 801a090:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a094:	3304      	adds	r3, #4
 801a096:	f1b9 0f00 	cmp.w	r9, #0
 801a09a:	d021      	beq.n	801a0e0 <__multiply+0x144>
 801a09c:	6829      	ldr	r1, [r5, #0]
 801a09e:	f104 0c14 	add.w	ip, r4, #20
 801a0a2:	46ae      	mov	lr, r5
 801a0a4:	f04f 0a00 	mov.w	sl, #0
 801a0a8:	f8bc b000 	ldrh.w	fp, [ip]
 801a0ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a0b0:	fb09 220b 	mla	r2, r9, fp, r2
 801a0b4:	4452      	add	r2, sl
 801a0b6:	b289      	uxth	r1, r1
 801a0b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a0bc:	f84e 1b04 	str.w	r1, [lr], #4
 801a0c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a0c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a0c8:	f8be 1000 	ldrh.w	r1, [lr]
 801a0cc:	fb09 110a 	mla	r1, r9, sl, r1
 801a0d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801a0d4:	4567      	cmp	r7, ip
 801a0d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a0da:	d8e5      	bhi.n	801a0a8 <__multiply+0x10c>
 801a0dc:	9a01      	ldr	r2, [sp, #4]
 801a0de:	50a9      	str	r1, [r5, r2]
 801a0e0:	3504      	adds	r5, #4
 801a0e2:	e799      	b.n	801a018 <__multiply+0x7c>
 801a0e4:	3e01      	subs	r6, #1
 801a0e6:	e79b      	b.n	801a020 <__multiply+0x84>
 801a0e8:	080205be 	.word	0x080205be
 801a0ec:	080205cf 	.word	0x080205cf

0801a0f0 <__pow5mult>:
 801a0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0f4:	4615      	mov	r5, r2
 801a0f6:	f012 0203 	ands.w	r2, r2, #3
 801a0fa:	4606      	mov	r6, r0
 801a0fc:	460f      	mov	r7, r1
 801a0fe:	d007      	beq.n	801a110 <__pow5mult+0x20>
 801a100:	4c25      	ldr	r4, [pc, #148]	; (801a198 <__pow5mult+0xa8>)
 801a102:	3a01      	subs	r2, #1
 801a104:	2300      	movs	r3, #0
 801a106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a10a:	f7ff fe53 	bl	8019db4 <__multadd>
 801a10e:	4607      	mov	r7, r0
 801a110:	10ad      	asrs	r5, r5, #2
 801a112:	d03d      	beq.n	801a190 <__pow5mult+0xa0>
 801a114:	69f4      	ldr	r4, [r6, #28]
 801a116:	b97c      	cbnz	r4, 801a138 <__pow5mult+0x48>
 801a118:	2010      	movs	r0, #16
 801a11a:	f7ff fd35 	bl	8019b88 <malloc>
 801a11e:	4602      	mov	r2, r0
 801a120:	61f0      	str	r0, [r6, #28]
 801a122:	b928      	cbnz	r0, 801a130 <__pow5mult+0x40>
 801a124:	4b1d      	ldr	r3, [pc, #116]	; (801a19c <__pow5mult+0xac>)
 801a126:	481e      	ldr	r0, [pc, #120]	; (801a1a0 <__pow5mult+0xb0>)
 801a128:	f240 11b3 	movw	r1, #435	; 0x1b3
 801a12c:	f7fe fecc 	bl	8018ec8 <__assert_func>
 801a130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a134:	6004      	str	r4, [r0, #0]
 801a136:	60c4      	str	r4, [r0, #12]
 801a138:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801a13c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a140:	b94c      	cbnz	r4, 801a156 <__pow5mult+0x66>
 801a142:	f240 2171 	movw	r1, #625	; 0x271
 801a146:	4630      	mov	r0, r6
 801a148:	f7ff ff12 	bl	8019f70 <__i2b>
 801a14c:	2300      	movs	r3, #0
 801a14e:	f8c8 0008 	str.w	r0, [r8, #8]
 801a152:	4604      	mov	r4, r0
 801a154:	6003      	str	r3, [r0, #0]
 801a156:	f04f 0900 	mov.w	r9, #0
 801a15a:	07eb      	lsls	r3, r5, #31
 801a15c:	d50a      	bpl.n	801a174 <__pow5mult+0x84>
 801a15e:	4639      	mov	r1, r7
 801a160:	4622      	mov	r2, r4
 801a162:	4630      	mov	r0, r6
 801a164:	f7ff ff1a 	bl	8019f9c <__multiply>
 801a168:	4639      	mov	r1, r7
 801a16a:	4680      	mov	r8, r0
 801a16c:	4630      	mov	r0, r6
 801a16e:	f7ff fdff 	bl	8019d70 <_Bfree>
 801a172:	4647      	mov	r7, r8
 801a174:	106d      	asrs	r5, r5, #1
 801a176:	d00b      	beq.n	801a190 <__pow5mult+0xa0>
 801a178:	6820      	ldr	r0, [r4, #0]
 801a17a:	b938      	cbnz	r0, 801a18c <__pow5mult+0x9c>
 801a17c:	4622      	mov	r2, r4
 801a17e:	4621      	mov	r1, r4
 801a180:	4630      	mov	r0, r6
 801a182:	f7ff ff0b 	bl	8019f9c <__multiply>
 801a186:	6020      	str	r0, [r4, #0]
 801a188:	f8c0 9000 	str.w	r9, [r0]
 801a18c:	4604      	mov	r4, r0
 801a18e:	e7e4      	b.n	801a15a <__pow5mult+0x6a>
 801a190:	4638      	mov	r0, r7
 801a192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a196:	bf00      	nop
 801a198:	08020718 	.word	0x08020718
 801a19c:	08020374 	.word	0x08020374
 801a1a0:	080205cf 	.word	0x080205cf

0801a1a4 <__lshift>:
 801a1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1a8:	460c      	mov	r4, r1
 801a1aa:	6849      	ldr	r1, [r1, #4]
 801a1ac:	6923      	ldr	r3, [r4, #16]
 801a1ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a1b2:	68a3      	ldr	r3, [r4, #8]
 801a1b4:	4607      	mov	r7, r0
 801a1b6:	4691      	mov	r9, r2
 801a1b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a1bc:	f108 0601 	add.w	r6, r8, #1
 801a1c0:	42b3      	cmp	r3, r6
 801a1c2:	db0b      	blt.n	801a1dc <__lshift+0x38>
 801a1c4:	4638      	mov	r0, r7
 801a1c6:	f7ff fd93 	bl	8019cf0 <_Balloc>
 801a1ca:	4605      	mov	r5, r0
 801a1cc:	b948      	cbnz	r0, 801a1e2 <__lshift+0x3e>
 801a1ce:	4602      	mov	r2, r0
 801a1d0:	4b28      	ldr	r3, [pc, #160]	; (801a274 <__lshift+0xd0>)
 801a1d2:	4829      	ldr	r0, [pc, #164]	; (801a278 <__lshift+0xd4>)
 801a1d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801a1d8:	f7fe fe76 	bl	8018ec8 <__assert_func>
 801a1dc:	3101      	adds	r1, #1
 801a1de:	005b      	lsls	r3, r3, #1
 801a1e0:	e7ee      	b.n	801a1c0 <__lshift+0x1c>
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	f100 0114 	add.w	r1, r0, #20
 801a1e8:	f100 0210 	add.w	r2, r0, #16
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	4553      	cmp	r3, sl
 801a1f0:	db33      	blt.n	801a25a <__lshift+0xb6>
 801a1f2:	6920      	ldr	r0, [r4, #16]
 801a1f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a1f8:	f104 0314 	add.w	r3, r4, #20
 801a1fc:	f019 091f 	ands.w	r9, r9, #31
 801a200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a208:	d02b      	beq.n	801a262 <__lshift+0xbe>
 801a20a:	f1c9 0e20 	rsb	lr, r9, #32
 801a20e:	468a      	mov	sl, r1
 801a210:	2200      	movs	r2, #0
 801a212:	6818      	ldr	r0, [r3, #0]
 801a214:	fa00 f009 	lsl.w	r0, r0, r9
 801a218:	4310      	orrs	r0, r2
 801a21a:	f84a 0b04 	str.w	r0, [sl], #4
 801a21e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a222:	459c      	cmp	ip, r3
 801a224:	fa22 f20e 	lsr.w	r2, r2, lr
 801a228:	d8f3      	bhi.n	801a212 <__lshift+0x6e>
 801a22a:	ebac 0304 	sub.w	r3, ip, r4
 801a22e:	3b15      	subs	r3, #21
 801a230:	f023 0303 	bic.w	r3, r3, #3
 801a234:	3304      	adds	r3, #4
 801a236:	f104 0015 	add.w	r0, r4, #21
 801a23a:	4584      	cmp	ip, r0
 801a23c:	bf38      	it	cc
 801a23e:	2304      	movcc	r3, #4
 801a240:	50ca      	str	r2, [r1, r3]
 801a242:	b10a      	cbz	r2, 801a248 <__lshift+0xa4>
 801a244:	f108 0602 	add.w	r6, r8, #2
 801a248:	3e01      	subs	r6, #1
 801a24a:	4638      	mov	r0, r7
 801a24c:	612e      	str	r6, [r5, #16]
 801a24e:	4621      	mov	r1, r4
 801a250:	f7ff fd8e 	bl	8019d70 <_Bfree>
 801a254:	4628      	mov	r0, r5
 801a256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a25a:	f842 0f04 	str.w	r0, [r2, #4]!
 801a25e:	3301      	adds	r3, #1
 801a260:	e7c5      	b.n	801a1ee <__lshift+0x4a>
 801a262:	3904      	subs	r1, #4
 801a264:	f853 2b04 	ldr.w	r2, [r3], #4
 801a268:	f841 2f04 	str.w	r2, [r1, #4]!
 801a26c:	459c      	cmp	ip, r3
 801a26e:	d8f9      	bhi.n	801a264 <__lshift+0xc0>
 801a270:	e7ea      	b.n	801a248 <__lshift+0xa4>
 801a272:	bf00      	nop
 801a274:	080205be 	.word	0x080205be
 801a278:	080205cf 	.word	0x080205cf

0801a27c <__mcmp>:
 801a27c:	b530      	push	{r4, r5, lr}
 801a27e:	6902      	ldr	r2, [r0, #16]
 801a280:	690c      	ldr	r4, [r1, #16]
 801a282:	1b12      	subs	r2, r2, r4
 801a284:	d10e      	bne.n	801a2a4 <__mcmp+0x28>
 801a286:	f100 0314 	add.w	r3, r0, #20
 801a28a:	3114      	adds	r1, #20
 801a28c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a29c:	42a5      	cmp	r5, r4
 801a29e:	d003      	beq.n	801a2a8 <__mcmp+0x2c>
 801a2a0:	d305      	bcc.n	801a2ae <__mcmp+0x32>
 801a2a2:	2201      	movs	r2, #1
 801a2a4:	4610      	mov	r0, r2
 801a2a6:	bd30      	pop	{r4, r5, pc}
 801a2a8:	4283      	cmp	r3, r0
 801a2aa:	d3f3      	bcc.n	801a294 <__mcmp+0x18>
 801a2ac:	e7fa      	b.n	801a2a4 <__mcmp+0x28>
 801a2ae:	f04f 32ff 	mov.w	r2, #4294967295
 801a2b2:	e7f7      	b.n	801a2a4 <__mcmp+0x28>

0801a2b4 <__mdiff>:
 801a2b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2b8:	460c      	mov	r4, r1
 801a2ba:	4606      	mov	r6, r0
 801a2bc:	4611      	mov	r1, r2
 801a2be:	4620      	mov	r0, r4
 801a2c0:	4690      	mov	r8, r2
 801a2c2:	f7ff ffdb 	bl	801a27c <__mcmp>
 801a2c6:	1e05      	subs	r5, r0, #0
 801a2c8:	d110      	bne.n	801a2ec <__mdiff+0x38>
 801a2ca:	4629      	mov	r1, r5
 801a2cc:	4630      	mov	r0, r6
 801a2ce:	f7ff fd0f 	bl	8019cf0 <_Balloc>
 801a2d2:	b930      	cbnz	r0, 801a2e2 <__mdiff+0x2e>
 801a2d4:	4b3a      	ldr	r3, [pc, #232]	; (801a3c0 <__mdiff+0x10c>)
 801a2d6:	4602      	mov	r2, r0
 801a2d8:	f240 2137 	movw	r1, #567	; 0x237
 801a2dc:	4839      	ldr	r0, [pc, #228]	; (801a3c4 <__mdiff+0x110>)
 801a2de:	f7fe fdf3 	bl	8018ec8 <__assert_func>
 801a2e2:	2301      	movs	r3, #1
 801a2e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a2e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ec:	bfa4      	itt	ge
 801a2ee:	4643      	movge	r3, r8
 801a2f0:	46a0      	movge	r8, r4
 801a2f2:	4630      	mov	r0, r6
 801a2f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a2f8:	bfa6      	itte	ge
 801a2fa:	461c      	movge	r4, r3
 801a2fc:	2500      	movge	r5, #0
 801a2fe:	2501      	movlt	r5, #1
 801a300:	f7ff fcf6 	bl	8019cf0 <_Balloc>
 801a304:	b920      	cbnz	r0, 801a310 <__mdiff+0x5c>
 801a306:	4b2e      	ldr	r3, [pc, #184]	; (801a3c0 <__mdiff+0x10c>)
 801a308:	4602      	mov	r2, r0
 801a30a:	f240 2145 	movw	r1, #581	; 0x245
 801a30e:	e7e5      	b.n	801a2dc <__mdiff+0x28>
 801a310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a314:	6926      	ldr	r6, [r4, #16]
 801a316:	60c5      	str	r5, [r0, #12]
 801a318:	f104 0914 	add.w	r9, r4, #20
 801a31c:	f108 0514 	add.w	r5, r8, #20
 801a320:	f100 0e14 	add.w	lr, r0, #20
 801a324:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a328:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a32c:	f108 0210 	add.w	r2, r8, #16
 801a330:	46f2      	mov	sl, lr
 801a332:	2100      	movs	r1, #0
 801a334:	f859 3b04 	ldr.w	r3, [r9], #4
 801a338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a33c:	fa11 f88b 	uxtah	r8, r1, fp
 801a340:	b299      	uxth	r1, r3
 801a342:	0c1b      	lsrs	r3, r3, #16
 801a344:	eba8 0801 	sub.w	r8, r8, r1
 801a348:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a34c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a350:	fa1f f888 	uxth.w	r8, r8
 801a354:	1419      	asrs	r1, r3, #16
 801a356:	454e      	cmp	r6, r9
 801a358:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a35c:	f84a 3b04 	str.w	r3, [sl], #4
 801a360:	d8e8      	bhi.n	801a334 <__mdiff+0x80>
 801a362:	1b33      	subs	r3, r6, r4
 801a364:	3b15      	subs	r3, #21
 801a366:	f023 0303 	bic.w	r3, r3, #3
 801a36a:	3304      	adds	r3, #4
 801a36c:	3415      	adds	r4, #21
 801a36e:	42a6      	cmp	r6, r4
 801a370:	bf38      	it	cc
 801a372:	2304      	movcc	r3, #4
 801a374:	441d      	add	r5, r3
 801a376:	4473      	add	r3, lr
 801a378:	469e      	mov	lr, r3
 801a37a:	462e      	mov	r6, r5
 801a37c:	4566      	cmp	r6, ip
 801a37e:	d30e      	bcc.n	801a39e <__mdiff+0xea>
 801a380:	f10c 0203 	add.w	r2, ip, #3
 801a384:	1b52      	subs	r2, r2, r5
 801a386:	f022 0203 	bic.w	r2, r2, #3
 801a38a:	3d03      	subs	r5, #3
 801a38c:	45ac      	cmp	ip, r5
 801a38e:	bf38      	it	cc
 801a390:	2200      	movcc	r2, #0
 801a392:	4413      	add	r3, r2
 801a394:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a398:	b17a      	cbz	r2, 801a3ba <__mdiff+0x106>
 801a39a:	6107      	str	r7, [r0, #16]
 801a39c:	e7a4      	b.n	801a2e8 <__mdiff+0x34>
 801a39e:	f856 8b04 	ldr.w	r8, [r6], #4
 801a3a2:	fa11 f288 	uxtah	r2, r1, r8
 801a3a6:	1414      	asrs	r4, r2, #16
 801a3a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a3ac:	b292      	uxth	r2, r2
 801a3ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a3b2:	f84e 2b04 	str.w	r2, [lr], #4
 801a3b6:	1421      	asrs	r1, r4, #16
 801a3b8:	e7e0      	b.n	801a37c <__mdiff+0xc8>
 801a3ba:	3f01      	subs	r7, #1
 801a3bc:	e7ea      	b.n	801a394 <__mdiff+0xe0>
 801a3be:	bf00      	nop
 801a3c0:	080205be 	.word	0x080205be
 801a3c4:	080205cf 	.word	0x080205cf

0801a3c8 <__ulp>:
 801a3c8:	b082      	sub	sp, #8
 801a3ca:	ed8d 0b00 	vstr	d0, [sp]
 801a3ce:	9a01      	ldr	r2, [sp, #4]
 801a3d0:	4b0f      	ldr	r3, [pc, #60]	; (801a410 <__ulp+0x48>)
 801a3d2:	4013      	ands	r3, r2
 801a3d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	dc08      	bgt.n	801a3ee <__ulp+0x26>
 801a3dc:	425b      	negs	r3, r3
 801a3de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801a3e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a3e6:	da04      	bge.n	801a3f2 <__ulp+0x2a>
 801a3e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a3ec:	4113      	asrs	r3, r2
 801a3ee:	2200      	movs	r2, #0
 801a3f0:	e008      	b.n	801a404 <__ulp+0x3c>
 801a3f2:	f1a2 0314 	sub.w	r3, r2, #20
 801a3f6:	2b1e      	cmp	r3, #30
 801a3f8:	bfda      	itte	le
 801a3fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801a3fe:	40da      	lsrle	r2, r3
 801a400:	2201      	movgt	r2, #1
 801a402:	2300      	movs	r3, #0
 801a404:	4619      	mov	r1, r3
 801a406:	4610      	mov	r0, r2
 801a408:	ec41 0b10 	vmov	d0, r0, r1
 801a40c:	b002      	add	sp, #8
 801a40e:	4770      	bx	lr
 801a410:	7ff00000 	.word	0x7ff00000

0801a414 <__b2d>:
 801a414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a418:	6906      	ldr	r6, [r0, #16]
 801a41a:	f100 0814 	add.w	r8, r0, #20
 801a41e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a422:	1f37      	subs	r7, r6, #4
 801a424:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a428:	4610      	mov	r0, r2
 801a42a:	f7ff fd53 	bl	8019ed4 <__hi0bits>
 801a42e:	f1c0 0320 	rsb	r3, r0, #32
 801a432:	280a      	cmp	r0, #10
 801a434:	600b      	str	r3, [r1, #0]
 801a436:	491b      	ldr	r1, [pc, #108]	; (801a4a4 <__b2d+0x90>)
 801a438:	dc15      	bgt.n	801a466 <__b2d+0x52>
 801a43a:	f1c0 0c0b 	rsb	ip, r0, #11
 801a43e:	fa22 f30c 	lsr.w	r3, r2, ip
 801a442:	45b8      	cmp	r8, r7
 801a444:	ea43 0501 	orr.w	r5, r3, r1
 801a448:	bf34      	ite	cc
 801a44a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a44e:	2300      	movcs	r3, #0
 801a450:	3015      	adds	r0, #21
 801a452:	fa02 f000 	lsl.w	r0, r2, r0
 801a456:	fa23 f30c 	lsr.w	r3, r3, ip
 801a45a:	4303      	orrs	r3, r0
 801a45c:	461c      	mov	r4, r3
 801a45e:	ec45 4b10 	vmov	d0, r4, r5
 801a462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a466:	45b8      	cmp	r8, r7
 801a468:	bf3a      	itte	cc
 801a46a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a46e:	f1a6 0708 	subcc.w	r7, r6, #8
 801a472:	2300      	movcs	r3, #0
 801a474:	380b      	subs	r0, #11
 801a476:	d012      	beq.n	801a49e <__b2d+0x8a>
 801a478:	f1c0 0120 	rsb	r1, r0, #32
 801a47c:	fa23 f401 	lsr.w	r4, r3, r1
 801a480:	4082      	lsls	r2, r0
 801a482:	4322      	orrs	r2, r4
 801a484:	4547      	cmp	r7, r8
 801a486:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801a48a:	bf8c      	ite	hi
 801a48c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801a490:	2200      	movls	r2, #0
 801a492:	4083      	lsls	r3, r0
 801a494:	40ca      	lsrs	r2, r1
 801a496:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a49a:	4313      	orrs	r3, r2
 801a49c:	e7de      	b.n	801a45c <__b2d+0x48>
 801a49e:	ea42 0501 	orr.w	r5, r2, r1
 801a4a2:	e7db      	b.n	801a45c <__b2d+0x48>
 801a4a4:	3ff00000 	.word	0x3ff00000

0801a4a8 <__d2b>:
 801a4a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a4ac:	460f      	mov	r7, r1
 801a4ae:	2101      	movs	r1, #1
 801a4b0:	ec59 8b10 	vmov	r8, r9, d0
 801a4b4:	4616      	mov	r6, r2
 801a4b6:	f7ff fc1b 	bl	8019cf0 <_Balloc>
 801a4ba:	4604      	mov	r4, r0
 801a4bc:	b930      	cbnz	r0, 801a4cc <__d2b+0x24>
 801a4be:	4602      	mov	r2, r0
 801a4c0:	4b24      	ldr	r3, [pc, #144]	; (801a554 <__d2b+0xac>)
 801a4c2:	4825      	ldr	r0, [pc, #148]	; (801a558 <__d2b+0xb0>)
 801a4c4:	f240 310f 	movw	r1, #783	; 0x30f
 801a4c8:	f7fe fcfe 	bl	8018ec8 <__assert_func>
 801a4cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a4d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a4d4:	bb2d      	cbnz	r5, 801a522 <__d2b+0x7a>
 801a4d6:	9301      	str	r3, [sp, #4]
 801a4d8:	f1b8 0300 	subs.w	r3, r8, #0
 801a4dc:	d026      	beq.n	801a52c <__d2b+0x84>
 801a4de:	4668      	mov	r0, sp
 801a4e0:	9300      	str	r3, [sp, #0]
 801a4e2:	f7ff fd17 	bl	8019f14 <__lo0bits>
 801a4e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a4ea:	b1e8      	cbz	r0, 801a528 <__d2b+0x80>
 801a4ec:	f1c0 0320 	rsb	r3, r0, #32
 801a4f0:	fa02 f303 	lsl.w	r3, r2, r3
 801a4f4:	430b      	orrs	r3, r1
 801a4f6:	40c2      	lsrs	r2, r0
 801a4f8:	6163      	str	r3, [r4, #20]
 801a4fa:	9201      	str	r2, [sp, #4]
 801a4fc:	9b01      	ldr	r3, [sp, #4]
 801a4fe:	61a3      	str	r3, [r4, #24]
 801a500:	2b00      	cmp	r3, #0
 801a502:	bf14      	ite	ne
 801a504:	2202      	movne	r2, #2
 801a506:	2201      	moveq	r2, #1
 801a508:	6122      	str	r2, [r4, #16]
 801a50a:	b1bd      	cbz	r5, 801a53c <__d2b+0x94>
 801a50c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a510:	4405      	add	r5, r0
 801a512:	603d      	str	r5, [r7, #0]
 801a514:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a518:	6030      	str	r0, [r6, #0]
 801a51a:	4620      	mov	r0, r4
 801a51c:	b003      	add	sp, #12
 801a51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a526:	e7d6      	b.n	801a4d6 <__d2b+0x2e>
 801a528:	6161      	str	r1, [r4, #20]
 801a52a:	e7e7      	b.n	801a4fc <__d2b+0x54>
 801a52c:	a801      	add	r0, sp, #4
 801a52e:	f7ff fcf1 	bl	8019f14 <__lo0bits>
 801a532:	9b01      	ldr	r3, [sp, #4]
 801a534:	6163      	str	r3, [r4, #20]
 801a536:	3020      	adds	r0, #32
 801a538:	2201      	movs	r2, #1
 801a53a:	e7e5      	b.n	801a508 <__d2b+0x60>
 801a53c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a540:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a544:	6038      	str	r0, [r7, #0]
 801a546:	6918      	ldr	r0, [r3, #16]
 801a548:	f7ff fcc4 	bl	8019ed4 <__hi0bits>
 801a54c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a550:	e7e2      	b.n	801a518 <__d2b+0x70>
 801a552:	bf00      	nop
 801a554:	080205be 	.word	0x080205be
 801a558:	080205cf 	.word	0x080205cf

0801a55c <__ratio>:
 801a55c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a560:	4688      	mov	r8, r1
 801a562:	4669      	mov	r1, sp
 801a564:	4681      	mov	r9, r0
 801a566:	f7ff ff55 	bl	801a414 <__b2d>
 801a56a:	a901      	add	r1, sp, #4
 801a56c:	4640      	mov	r0, r8
 801a56e:	ec55 4b10 	vmov	r4, r5, d0
 801a572:	ee10 aa10 	vmov	sl, s0
 801a576:	f7ff ff4d 	bl	801a414 <__b2d>
 801a57a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a57e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801a582:	1ad2      	subs	r2, r2, r3
 801a584:	e9dd 3100 	ldrd	r3, r1, [sp]
 801a588:	1a5b      	subs	r3, r3, r1
 801a58a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801a58e:	ec57 6b10 	vmov	r6, r7, d0
 801a592:	2b00      	cmp	r3, #0
 801a594:	bfd6      	itet	le
 801a596:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a59a:	462a      	movgt	r2, r5
 801a59c:	463a      	movle	r2, r7
 801a59e:	46ab      	mov	fp, r5
 801a5a0:	bfd6      	itet	le
 801a5a2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801a5a6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801a5aa:	ee00 3a90 	vmovle	s1, r3
 801a5ae:	ec4b ab17 	vmov	d7, sl, fp
 801a5b2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801a5b6:	b003      	add	sp, #12
 801a5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a5bc <__copybits>:
 801a5bc:	3901      	subs	r1, #1
 801a5be:	b570      	push	{r4, r5, r6, lr}
 801a5c0:	1149      	asrs	r1, r1, #5
 801a5c2:	6914      	ldr	r4, [r2, #16]
 801a5c4:	3101      	adds	r1, #1
 801a5c6:	f102 0314 	add.w	r3, r2, #20
 801a5ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a5ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a5d2:	1f05      	subs	r5, r0, #4
 801a5d4:	42a3      	cmp	r3, r4
 801a5d6:	d30c      	bcc.n	801a5f2 <__copybits+0x36>
 801a5d8:	1aa3      	subs	r3, r4, r2
 801a5da:	3b11      	subs	r3, #17
 801a5dc:	f023 0303 	bic.w	r3, r3, #3
 801a5e0:	3211      	adds	r2, #17
 801a5e2:	42a2      	cmp	r2, r4
 801a5e4:	bf88      	it	hi
 801a5e6:	2300      	movhi	r3, #0
 801a5e8:	4418      	add	r0, r3
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	4288      	cmp	r0, r1
 801a5ee:	d305      	bcc.n	801a5fc <__copybits+0x40>
 801a5f0:	bd70      	pop	{r4, r5, r6, pc}
 801a5f2:	f853 6b04 	ldr.w	r6, [r3], #4
 801a5f6:	f845 6f04 	str.w	r6, [r5, #4]!
 801a5fa:	e7eb      	b.n	801a5d4 <__copybits+0x18>
 801a5fc:	f840 3b04 	str.w	r3, [r0], #4
 801a600:	e7f4      	b.n	801a5ec <__copybits+0x30>

0801a602 <__any_on>:
 801a602:	f100 0214 	add.w	r2, r0, #20
 801a606:	6900      	ldr	r0, [r0, #16]
 801a608:	114b      	asrs	r3, r1, #5
 801a60a:	4298      	cmp	r0, r3
 801a60c:	b510      	push	{r4, lr}
 801a60e:	db11      	blt.n	801a634 <__any_on+0x32>
 801a610:	dd0a      	ble.n	801a628 <__any_on+0x26>
 801a612:	f011 011f 	ands.w	r1, r1, #31
 801a616:	d007      	beq.n	801a628 <__any_on+0x26>
 801a618:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a61c:	fa24 f001 	lsr.w	r0, r4, r1
 801a620:	fa00 f101 	lsl.w	r1, r0, r1
 801a624:	428c      	cmp	r4, r1
 801a626:	d10b      	bne.n	801a640 <__any_on+0x3e>
 801a628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a62c:	4293      	cmp	r3, r2
 801a62e:	d803      	bhi.n	801a638 <__any_on+0x36>
 801a630:	2000      	movs	r0, #0
 801a632:	bd10      	pop	{r4, pc}
 801a634:	4603      	mov	r3, r0
 801a636:	e7f7      	b.n	801a628 <__any_on+0x26>
 801a638:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a63c:	2900      	cmp	r1, #0
 801a63e:	d0f5      	beq.n	801a62c <__any_on+0x2a>
 801a640:	2001      	movs	r0, #1
 801a642:	e7f6      	b.n	801a632 <__any_on+0x30>

0801a644 <sulp>:
 801a644:	b570      	push	{r4, r5, r6, lr}
 801a646:	4604      	mov	r4, r0
 801a648:	460d      	mov	r5, r1
 801a64a:	4616      	mov	r6, r2
 801a64c:	ec45 4b10 	vmov	d0, r4, r5
 801a650:	f7ff feba 	bl	801a3c8 <__ulp>
 801a654:	b17e      	cbz	r6, 801a676 <sulp+0x32>
 801a656:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a65a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a65e:	2b00      	cmp	r3, #0
 801a660:	dd09      	ble.n	801a676 <sulp+0x32>
 801a662:	051b      	lsls	r3, r3, #20
 801a664:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801a668:	2000      	movs	r0, #0
 801a66a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801a66e:	ec41 0b17 	vmov	d7, r0, r1
 801a672:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a676:	bd70      	pop	{r4, r5, r6, pc}

0801a678 <_strtod_l>:
 801a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a67c:	ed2d 8b0e 	vpush	{d8-d14}
 801a680:	b097      	sub	sp, #92	; 0x5c
 801a682:	4604      	mov	r4, r0
 801a684:	920d      	str	r2, [sp, #52]	; 0x34
 801a686:	2200      	movs	r2, #0
 801a688:	9212      	str	r2, [sp, #72]	; 0x48
 801a68a:	468a      	mov	sl, r1
 801a68c:	f04f 0800 	mov.w	r8, #0
 801a690:	f04f 0900 	mov.w	r9, #0
 801a694:	460a      	mov	r2, r1
 801a696:	9211      	str	r2, [sp, #68]	; 0x44
 801a698:	7811      	ldrb	r1, [r2, #0]
 801a69a:	292b      	cmp	r1, #43	; 0x2b
 801a69c:	d04c      	beq.n	801a738 <_strtod_l+0xc0>
 801a69e:	d839      	bhi.n	801a714 <_strtod_l+0x9c>
 801a6a0:	290d      	cmp	r1, #13
 801a6a2:	d833      	bhi.n	801a70c <_strtod_l+0x94>
 801a6a4:	2908      	cmp	r1, #8
 801a6a6:	d833      	bhi.n	801a710 <_strtod_l+0x98>
 801a6a8:	2900      	cmp	r1, #0
 801a6aa:	d03c      	beq.n	801a726 <_strtod_l+0xae>
 801a6ac:	2200      	movs	r2, #0
 801a6ae:	9208      	str	r2, [sp, #32]
 801a6b0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a6b2:	7832      	ldrb	r2, [r6, #0]
 801a6b4:	2a30      	cmp	r2, #48	; 0x30
 801a6b6:	f040 80b8 	bne.w	801a82a <_strtod_l+0x1b2>
 801a6ba:	7872      	ldrb	r2, [r6, #1]
 801a6bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801a6c0:	2a58      	cmp	r2, #88	; 0x58
 801a6c2:	d170      	bne.n	801a7a6 <_strtod_l+0x12e>
 801a6c4:	9302      	str	r3, [sp, #8]
 801a6c6:	9b08      	ldr	r3, [sp, #32]
 801a6c8:	9301      	str	r3, [sp, #4]
 801a6ca:	ab12      	add	r3, sp, #72	; 0x48
 801a6cc:	9300      	str	r3, [sp, #0]
 801a6ce:	4a91      	ldr	r2, [pc, #580]	; (801a914 <_strtod_l+0x29c>)
 801a6d0:	ab13      	add	r3, sp, #76	; 0x4c
 801a6d2:	a911      	add	r1, sp, #68	; 0x44
 801a6d4:	4620      	mov	r0, r4
 801a6d6:	f001 fa17 	bl	801bb08 <__gethex>
 801a6da:	f010 070f 	ands.w	r7, r0, #15
 801a6de:	4605      	mov	r5, r0
 801a6e0:	d005      	beq.n	801a6ee <_strtod_l+0x76>
 801a6e2:	2f06      	cmp	r7, #6
 801a6e4:	d12a      	bne.n	801a73c <_strtod_l+0xc4>
 801a6e6:	3601      	adds	r6, #1
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	9611      	str	r6, [sp, #68]	; 0x44
 801a6ec:	9308      	str	r3, [sp, #32]
 801a6ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	f040 8555 	bne.w	801b1a0 <_strtod_l+0xb28>
 801a6f6:	9b08      	ldr	r3, [sp, #32]
 801a6f8:	ec49 8b10 	vmov	d0, r8, r9
 801a6fc:	b1cb      	cbz	r3, 801a732 <_strtod_l+0xba>
 801a6fe:	eeb1 0b40 	vneg.f64	d0, d0
 801a702:	b017      	add	sp, #92	; 0x5c
 801a704:	ecbd 8b0e 	vpop	{d8-d14}
 801a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a70c:	2920      	cmp	r1, #32
 801a70e:	d1cd      	bne.n	801a6ac <_strtod_l+0x34>
 801a710:	3201      	adds	r2, #1
 801a712:	e7c0      	b.n	801a696 <_strtod_l+0x1e>
 801a714:	292d      	cmp	r1, #45	; 0x2d
 801a716:	d1c9      	bne.n	801a6ac <_strtod_l+0x34>
 801a718:	2101      	movs	r1, #1
 801a71a:	9108      	str	r1, [sp, #32]
 801a71c:	1c51      	adds	r1, r2, #1
 801a71e:	9111      	str	r1, [sp, #68]	; 0x44
 801a720:	7852      	ldrb	r2, [r2, #1]
 801a722:	2a00      	cmp	r2, #0
 801a724:	d1c4      	bne.n	801a6b0 <_strtod_l+0x38>
 801a726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a728:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	f040 8535 	bne.w	801b19c <_strtod_l+0xb24>
 801a732:	ec49 8b10 	vmov	d0, r8, r9
 801a736:	e7e4      	b.n	801a702 <_strtod_l+0x8a>
 801a738:	2100      	movs	r1, #0
 801a73a:	e7ee      	b.n	801a71a <_strtod_l+0xa2>
 801a73c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a73e:	b13a      	cbz	r2, 801a750 <_strtod_l+0xd8>
 801a740:	2135      	movs	r1, #53	; 0x35
 801a742:	a814      	add	r0, sp, #80	; 0x50
 801a744:	f7ff ff3a 	bl	801a5bc <__copybits>
 801a748:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a74a:	4620      	mov	r0, r4
 801a74c:	f7ff fb10 	bl	8019d70 <_Bfree>
 801a750:	1e7b      	subs	r3, r7, #1
 801a752:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a754:	2b04      	cmp	r3, #4
 801a756:	d806      	bhi.n	801a766 <_strtod_l+0xee>
 801a758:	e8df f003 	tbb	[pc, r3]
 801a75c:	201d0314 	.word	0x201d0314
 801a760:	14          	.byte	0x14
 801a761:	00          	.byte	0x00
 801a762:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801a766:	05eb      	lsls	r3, r5, #23
 801a768:	bf48      	it	mi
 801a76a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801a76e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a772:	0d1b      	lsrs	r3, r3, #20
 801a774:	051b      	lsls	r3, r3, #20
 801a776:	2b00      	cmp	r3, #0
 801a778:	d1b9      	bne.n	801a6ee <_strtod_l+0x76>
 801a77a:	f7fe fb63 	bl	8018e44 <__errno>
 801a77e:	2322      	movs	r3, #34	; 0x22
 801a780:	6003      	str	r3, [r0, #0]
 801a782:	e7b4      	b.n	801a6ee <_strtod_l+0x76>
 801a784:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801a788:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a78c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a790:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801a794:	e7e7      	b.n	801a766 <_strtod_l+0xee>
 801a796:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801a91c <_strtod_l+0x2a4>
 801a79a:	e7e4      	b.n	801a766 <_strtod_l+0xee>
 801a79c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801a7a0:	f04f 38ff 	mov.w	r8, #4294967295
 801a7a4:	e7df      	b.n	801a766 <_strtod_l+0xee>
 801a7a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a7a8:	1c5a      	adds	r2, r3, #1
 801a7aa:	9211      	str	r2, [sp, #68]	; 0x44
 801a7ac:	785b      	ldrb	r3, [r3, #1]
 801a7ae:	2b30      	cmp	r3, #48	; 0x30
 801a7b0:	d0f9      	beq.n	801a7a6 <_strtod_l+0x12e>
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d09b      	beq.n	801a6ee <_strtod_l+0x76>
 801a7b6:	2301      	movs	r3, #1
 801a7b8:	9306      	str	r3, [sp, #24]
 801a7ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a7bc:	9309      	str	r3, [sp, #36]	; 0x24
 801a7be:	2300      	movs	r3, #0
 801a7c0:	9305      	str	r3, [sp, #20]
 801a7c2:	9307      	str	r3, [sp, #28]
 801a7c4:	461e      	mov	r6, r3
 801a7c6:	220a      	movs	r2, #10
 801a7c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a7ca:	7805      	ldrb	r5, [r0, #0]
 801a7cc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801a7d0:	b2d9      	uxtb	r1, r3
 801a7d2:	2909      	cmp	r1, #9
 801a7d4:	d92b      	bls.n	801a82e <_strtod_l+0x1b6>
 801a7d6:	4950      	ldr	r1, [pc, #320]	; (801a918 <_strtod_l+0x2a0>)
 801a7d8:	2201      	movs	r2, #1
 801a7da:	f7fe fa80 	bl	8018cde <strncmp>
 801a7de:	2800      	cmp	r0, #0
 801a7e0:	d035      	beq.n	801a84e <_strtod_l+0x1d6>
 801a7e2:	2000      	movs	r0, #0
 801a7e4:	462a      	mov	r2, r5
 801a7e6:	4633      	mov	r3, r6
 801a7e8:	4683      	mov	fp, r0
 801a7ea:	4601      	mov	r1, r0
 801a7ec:	2a65      	cmp	r2, #101	; 0x65
 801a7ee:	d001      	beq.n	801a7f4 <_strtod_l+0x17c>
 801a7f0:	2a45      	cmp	r2, #69	; 0x45
 801a7f2:	d118      	bne.n	801a826 <_strtod_l+0x1ae>
 801a7f4:	b91b      	cbnz	r3, 801a7fe <_strtod_l+0x186>
 801a7f6:	9b06      	ldr	r3, [sp, #24]
 801a7f8:	4303      	orrs	r3, r0
 801a7fa:	d094      	beq.n	801a726 <_strtod_l+0xae>
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801a802:	f10a 0201 	add.w	r2, sl, #1
 801a806:	9211      	str	r2, [sp, #68]	; 0x44
 801a808:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801a80c:	2a2b      	cmp	r2, #43	; 0x2b
 801a80e:	d075      	beq.n	801a8fc <_strtod_l+0x284>
 801a810:	2a2d      	cmp	r2, #45	; 0x2d
 801a812:	d07b      	beq.n	801a90c <_strtod_l+0x294>
 801a814:	f04f 0e00 	mov.w	lr, #0
 801a818:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801a81c:	2d09      	cmp	r5, #9
 801a81e:	f240 8083 	bls.w	801a928 <_strtod_l+0x2b0>
 801a822:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801a826:	2500      	movs	r5, #0
 801a828:	e09e      	b.n	801a968 <_strtod_l+0x2f0>
 801a82a:	2300      	movs	r3, #0
 801a82c:	e7c4      	b.n	801a7b8 <_strtod_l+0x140>
 801a82e:	2e08      	cmp	r6, #8
 801a830:	bfd5      	itete	le
 801a832:	9907      	ldrle	r1, [sp, #28]
 801a834:	9905      	ldrgt	r1, [sp, #20]
 801a836:	fb02 3301 	mlale	r3, r2, r1, r3
 801a83a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801a83e:	f100 0001 	add.w	r0, r0, #1
 801a842:	bfd4      	ite	le
 801a844:	9307      	strle	r3, [sp, #28]
 801a846:	9305      	strgt	r3, [sp, #20]
 801a848:	3601      	adds	r6, #1
 801a84a:	9011      	str	r0, [sp, #68]	; 0x44
 801a84c:	e7bc      	b.n	801a7c8 <_strtod_l+0x150>
 801a84e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a850:	1c5a      	adds	r2, r3, #1
 801a852:	9211      	str	r2, [sp, #68]	; 0x44
 801a854:	785a      	ldrb	r2, [r3, #1]
 801a856:	b3ae      	cbz	r6, 801a8c4 <_strtod_l+0x24c>
 801a858:	4683      	mov	fp, r0
 801a85a:	4633      	mov	r3, r6
 801a85c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a860:	2909      	cmp	r1, #9
 801a862:	d912      	bls.n	801a88a <_strtod_l+0x212>
 801a864:	2101      	movs	r1, #1
 801a866:	e7c1      	b.n	801a7ec <_strtod_l+0x174>
 801a868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a86a:	1c5a      	adds	r2, r3, #1
 801a86c:	9211      	str	r2, [sp, #68]	; 0x44
 801a86e:	785a      	ldrb	r2, [r3, #1]
 801a870:	3001      	adds	r0, #1
 801a872:	2a30      	cmp	r2, #48	; 0x30
 801a874:	d0f8      	beq.n	801a868 <_strtod_l+0x1f0>
 801a876:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a87a:	2b08      	cmp	r3, #8
 801a87c:	f200 8495 	bhi.w	801b1aa <_strtod_l+0xb32>
 801a880:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a882:	9309      	str	r3, [sp, #36]	; 0x24
 801a884:	4683      	mov	fp, r0
 801a886:	2000      	movs	r0, #0
 801a888:	4603      	mov	r3, r0
 801a88a:	3a30      	subs	r2, #48	; 0x30
 801a88c:	f100 0101 	add.w	r1, r0, #1
 801a890:	d012      	beq.n	801a8b8 <_strtod_l+0x240>
 801a892:	448b      	add	fp, r1
 801a894:	eb00 0c03 	add.w	ip, r0, r3
 801a898:	4619      	mov	r1, r3
 801a89a:	250a      	movs	r5, #10
 801a89c:	4561      	cmp	r1, ip
 801a89e:	d113      	bne.n	801a8c8 <_strtod_l+0x250>
 801a8a0:	1819      	adds	r1, r3, r0
 801a8a2:	2908      	cmp	r1, #8
 801a8a4:	f103 0301 	add.w	r3, r3, #1
 801a8a8:	4403      	add	r3, r0
 801a8aa:	dc1b      	bgt.n	801a8e4 <_strtod_l+0x26c>
 801a8ac:	9807      	ldr	r0, [sp, #28]
 801a8ae:	210a      	movs	r1, #10
 801a8b0:	fb01 2200 	mla	r2, r1, r0, r2
 801a8b4:	9207      	str	r2, [sp, #28]
 801a8b6:	2100      	movs	r1, #0
 801a8b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a8ba:	1c50      	adds	r0, r2, #1
 801a8bc:	9011      	str	r0, [sp, #68]	; 0x44
 801a8be:	7852      	ldrb	r2, [r2, #1]
 801a8c0:	4608      	mov	r0, r1
 801a8c2:	e7cb      	b.n	801a85c <_strtod_l+0x1e4>
 801a8c4:	4630      	mov	r0, r6
 801a8c6:	e7d4      	b.n	801a872 <_strtod_l+0x1fa>
 801a8c8:	2908      	cmp	r1, #8
 801a8ca:	f101 0101 	add.w	r1, r1, #1
 801a8ce:	dc03      	bgt.n	801a8d8 <_strtod_l+0x260>
 801a8d0:	9f07      	ldr	r7, [sp, #28]
 801a8d2:	436f      	muls	r7, r5
 801a8d4:	9707      	str	r7, [sp, #28]
 801a8d6:	e7e1      	b.n	801a89c <_strtod_l+0x224>
 801a8d8:	2910      	cmp	r1, #16
 801a8da:	bfde      	ittt	le
 801a8dc:	9f05      	ldrle	r7, [sp, #20]
 801a8de:	436f      	mulle	r7, r5
 801a8e0:	9705      	strle	r7, [sp, #20]
 801a8e2:	e7db      	b.n	801a89c <_strtod_l+0x224>
 801a8e4:	2b10      	cmp	r3, #16
 801a8e6:	bfdf      	itttt	le
 801a8e8:	9805      	ldrle	r0, [sp, #20]
 801a8ea:	210a      	movle	r1, #10
 801a8ec:	fb01 2200 	mlale	r2, r1, r0, r2
 801a8f0:	9205      	strle	r2, [sp, #20]
 801a8f2:	e7e0      	b.n	801a8b6 <_strtod_l+0x23e>
 801a8f4:	f04f 0b00 	mov.w	fp, #0
 801a8f8:	2101      	movs	r1, #1
 801a8fa:	e77c      	b.n	801a7f6 <_strtod_l+0x17e>
 801a8fc:	f04f 0e00 	mov.w	lr, #0
 801a900:	f10a 0202 	add.w	r2, sl, #2
 801a904:	9211      	str	r2, [sp, #68]	; 0x44
 801a906:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801a90a:	e785      	b.n	801a818 <_strtod_l+0x1a0>
 801a90c:	f04f 0e01 	mov.w	lr, #1
 801a910:	e7f6      	b.n	801a900 <_strtod_l+0x288>
 801a912:	bf00      	nop
 801a914:	08020728 	.word	0x08020728
 801a918:	08020724 	.word	0x08020724
 801a91c:	7ff00000 	.word	0x7ff00000
 801a920:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a922:	1c55      	adds	r5, r2, #1
 801a924:	9511      	str	r5, [sp, #68]	; 0x44
 801a926:	7852      	ldrb	r2, [r2, #1]
 801a928:	2a30      	cmp	r2, #48	; 0x30
 801a92a:	d0f9      	beq.n	801a920 <_strtod_l+0x2a8>
 801a92c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801a930:	2d08      	cmp	r5, #8
 801a932:	f63f af78 	bhi.w	801a826 <_strtod_l+0x1ae>
 801a936:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801a93a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a93c:	920a      	str	r2, [sp, #40]	; 0x28
 801a93e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a940:	1c55      	adds	r5, r2, #1
 801a942:	9511      	str	r5, [sp, #68]	; 0x44
 801a944:	7852      	ldrb	r2, [r2, #1]
 801a946:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801a94a:	2f09      	cmp	r7, #9
 801a94c:	d937      	bls.n	801a9be <_strtod_l+0x346>
 801a94e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a950:	1bed      	subs	r5, r5, r7
 801a952:	2d08      	cmp	r5, #8
 801a954:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801a958:	dc02      	bgt.n	801a960 <_strtod_l+0x2e8>
 801a95a:	4565      	cmp	r5, ip
 801a95c:	bfa8      	it	ge
 801a95e:	4665      	movge	r5, ip
 801a960:	f1be 0f00 	cmp.w	lr, #0
 801a964:	d000      	beq.n	801a968 <_strtod_l+0x2f0>
 801a966:	426d      	negs	r5, r5
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d14d      	bne.n	801aa08 <_strtod_l+0x390>
 801a96c:	9b06      	ldr	r3, [sp, #24]
 801a96e:	4303      	orrs	r3, r0
 801a970:	f47f aebd 	bne.w	801a6ee <_strtod_l+0x76>
 801a974:	2900      	cmp	r1, #0
 801a976:	f47f aed6 	bne.w	801a726 <_strtod_l+0xae>
 801a97a:	2a69      	cmp	r2, #105	; 0x69
 801a97c:	d027      	beq.n	801a9ce <_strtod_l+0x356>
 801a97e:	dc24      	bgt.n	801a9ca <_strtod_l+0x352>
 801a980:	2a49      	cmp	r2, #73	; 0x49
 801a982:	d024      	beq.n	801a9ce <_strtod_l+0x356>
 801a984:	2a4e      	cmp	r2, #78	; 0x4e
 801a986:	f47f aece 	bne.w	801a726 <_strtod_l+0xae>
 801a98a:	4995      	ldr	r1, [pc, #596]	; (801abe0 <_strtod_l+0x568>)
 801a98c:	a811      	add	r0, sp, #68	; 0x44
 801a98e:	f001 fafb 	bl	801bf88 <__match>
 801a992:	2800      	cmp	r0, #0
 801a994:	f43f aec7 	beq.w	801a726 <_strtod_l+0xae>
 801a998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a99a:	781b      	ldrb	r3, [r3, #0]
 801a99c:	2b28      	cmp	r3, #40	; 0x28
 801a99e:	d12d      	bne.n	801a9fc <_strtod_l+0x384>
 801a9a0:	4990      	ldr	r1, [pc, #576]	; (801abe4 <_strtod_l+0x56c>)
 801a9a2:	aa14      	add	r2, sp, #80	; 0x50
 801a9a4:	a811      	add	r0, sp, #68	; 0x44
 801a9a6:	f001 fb03 	bl	801bfb0 <__hexnan>
 801a9aa:	2805      	cmp	r0, #5
 801a9ac:	d126      	bne.n	801a9fc <_strtod_l+0x384>
 801a9ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a9b0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801a9b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801a9b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801a9bc:	e697      	b.n	801a6ee <_strtod_l+0x76>
 801a9be:	250a      	movs	r5, #10
 801a9c0:	fb05 2c0c 	mla	ip, r5, ip, r2
 801a9c4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801a9c8:	e7b9      	b.n	801a93e <_strtod_l+0x2c6>
 801a9ca:	2a6e      	cmp	r2, #110	; 0x6e
 801a9cc:	e7db      	b.n	801a986 <_strtod_l+0x30e>
 801a9ce:	4986      	ldr	r1, [pc, #536]	; (801abe8 <_strtod_l+0x570>)
 801a9d0:	a811      	add	r0, sp, #68	; 0x44
 801a9d2:	f001 fad9 	bl	801bf88 <__match>
 801a9d6:	2800      	cmp	r0, #0
 801a9d8:	f43f aea5 	beq.w	801a726 <_strtod_l+0xae>
 801a9dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a9de:	4983      	ldr	r1, [pc, #524]	; (801abec <_strtod_l+0x574>)
 801a9e0:	3b01      	subs	r3, #1
 801a9e2:	a811      	add	r0, sp, #68	; 0x44
 801a9e4:	9311      	str	r3, [sp, #68]	; 0x44
 801a9e6:	f001 facf 	bl	801bf88 <__match>
 801a9ea:	b910      	cbnz	r0, 801a9f2 <_strtod_l+0x37a>
 801a9ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a9ee:	3301      	adds	r3, #1
 801a9f0:	9311      	str	r3, [sp, #68]	; 0x44
 801a9f2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801ac00 <_strtod_l+0x588>
 801a9f6:	f04f 0800 	mov.w	r8, #0
 801a9fa:	e678      	b.n	801a6ee <_strtod_l+0x76>
 801a9fc:	487c      	ldr	r0, [pc, #496]	; (801abf0 <_strtod_l+0x578>)
 801a9fe:	f000 fff7 	bl	801b9f0 <nan>
 801aa02:	ec59 8b10 	vmov	r8, r9, d0
 801aa06:	e672      	b.n	801a6ee <_strtod_l+0x76>
 801aa08:	eddd 7a07 	vldr	s15, [sp, #28]
 801aa0c:	eba5 020b 	sub.w	r2, r5, fp
 801aa10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801aa14:	2e00      	cmp	r6, #0
 801aa16:	bf08      	it	eq
 801aa18:	461e      	moveq	r6, r3
 801aa1a:	2b10      	cmp	r3, #16
 801aa1c:	9206      	str	r2, [sp, #24]
 801aa1e:	461a      	mov	r2, r3
 801aa20:	bfa8      	it	ge
 801aa22:	2210      	movge	r2, #16
 801aa24:	2b09      	cmp	r3, #9
 801aa26:	ec59 8b17 	vmov	r8, r9, d7
 801aa2a:	dd0c      	ble.n	801aa46 <_strtod_l+0x3ce>
 801aa2c:	4971      	ldr	r1, [pc, #452]	; (801abf4 <_strtod_l+0x57c>)
 801aa2e:	eddd 6a05 	vldr	s13, [sp, #20]
 801aa32:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801aa36:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801aa3a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801aa3e:	eea7 6b05 	vfma.f64	d6, d7, d5
 801aa42:	ec59 8b16 	vmov	r8, r9, d6
 801aa46:	2b0f      	cmp	r3, #15
 801aa48:	dc37      	bgt.n	801aaba <_strtod_l+0x442>
 801aa4a:	9906      	ldr	r1, [sp, #24]
 801aa4c:	2900      	cmp	r1, #0
 801aa4e:	f43f ae4e 	beq.w	801a6ee <_strtod_l+0x76>
 801aa52:	dd23      	ble.n	801aa9c <_strtod_l+0x424>
 801aa54:	2916      	cmp	r1, #22
 801aa56:	dc0b      	bgt.n	801aa70 <_strtod_l+0x3f8>
 801aa58:	4b66      	ldr	r3, [pc, #408]	; (801abf4 <_strtod_l+0x57c>)
 801aa5a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801aa5e:	ed93 7b00 	vldr	d7, [r3]
 801aa62:	ec49 8b16 	vmov	d6, r8, r9
 801aa66:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aa6a:	ec59 8b17 	vmov	r8, r9, d7
 801aa6e:	e63e      	b.n	801a6ee <_strtod_l+0x76>
 801aa70:	9806      	ldr	r0, [sp, #24]
 801aa72:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801aa76:	4281      	cmp	r1, r0
 801aa78:	db1f      	blt.n	801aaba <_strtod_l+0x442>
 801aa7a:	4a5e      	ldr	r2, [pc, #376]	; (801abf4 <_strtod_l+0x57c>)
 801aa7c:	f1c3 030f 	rsb	r3, r3, #15
 801aa80:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801aa84:	ed91 7b00 	vldr	d7, [r1]
 801aa88:	ec49 8b16 	vmov	d6, r8, r9
 801aa8c:	1ac3      	subs	r3, r0, r3
 801aa8e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801aa92:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aa96:	ed92 6b00 	vldr	d6, [r2]
 801aa9a:	e7e4      	b.n	801aa66 <_strtod_l+0x3ee>
 801aa9c:	9906      	ldr	r1, [sp, #24]
 801aa9e:	3116      	adds	r1, #22
 801aaa0:	db0b      	blt.n	801aaba <_strtod_l+0x442>
 801aaa2:	4b54      	ldr	r3, [pc, #336]	; (801abf4 <_strtod_l+0x57c>)
 801aaa4:	ebab 0505 	sub.w	r5, fp, r5
 801aaa8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801aaac:	ed95 7b00 	vldr	d7, [r5]
 801aab0:	ec49 8b16 	vmov	d6, r8, r9
 801aab4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801aab8:	e7d7      	b.n	801aa6a <_strtod_l+0x3f2>
 801aaba:	9906      	ldr	r1, [sp, #24]
 801aabc:	1a9a      	subs	r2, r3, r2
 801aabe:	440a      	add	r2, r1
 801aac0:	2a00      	cmp	r2, #0
 801aac2:	dd6e      	ble.n	801aba2 <_strtod_l+0x52a>
 801aac4:	f012 000f 	ands.w	r0, r2, #15
 801aac8:	d00a      	beq.n	801aae0 <_strtod_l+0x468>
 801aaca:	494a      	ldr	r1, [pc, #296]	; (801abf4 <_strtod_l+0x57c>)
 801aacc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801aad0:	ed91 7b00 	vldr	d7, [r1]
 801aad4:	ec49 8b16 	vmov	d6, r8, r9
 801aad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aadc:	ec59 8b17 	vmov	r8, r9, d7
 801aae0:	f032 020f 	bics.w	r2, r2, #15
 801aae4:	d04e      	beq.n	801ab84 <_strtod_l+0x50c>
 801aae6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801aaea:	dd22      	ble.n	801ab32 <_strtod_l+0x4ba>
 801aaec:	2500      	movs	r5, #0
 801aaee:	462e      	mov	r6, r5
 801aaf0:	9507      	str	r5, [sp, #28]
 801aaf2:	462f      	mov	r7, r5
 801aaf4:	2322      	movs	r3, #34	; 0x22
 801aaf6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801ac00 <_strtod_l+0x588>
 801aafa:	6023      	str	r3, [r4, #0]
 801aafc:	f04f 0800 	mov.w	r8, #0
 801ab00:	9b07      	ldr	r3, [sp, #28]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	f43f adf3 	beq.w	801a6ee <_strtod_l+0x76>
 801ab08:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ab0a:	4620      	mov	r0, r4
 801ab0c:	f7ff f930 	bl	8019d70 <_Bfree>
 801ab10:	4639      	mov	r1, r7
 801ab12:	4620      	mov	r0, r4
 801ab14:	f7ff f92c 	bl	8019d70 <_Bfree>
 801ab18:	4631      	mov	r1, r6
 801ab1a:	4620      	mov	r0, r4
 801ab1c:	f7ff f928 	bl	8019d70 <_Bfree>
 801ab20:	9907      	ldr	r1, [sp, #28]
 801ab22:	4620      	mov	r0, r4
 801ab24:	f7ff f924 	bl	8019d70 <_Bfree>
 801ab28:	4629      	mov	r1, r5
 801ab2a:	4620      	mov	r0, r4
 801ab2c:	f7ff f920 	bl	8019d70 <_Bfree>
 801ab30:	e5dd      	b.n	801a6ee <_strtod_l+0x76>
 801ab32:	2000      	movs	r0, #0
 801ab34:	ec49 8b17 	vmov	d7, r8, r9
 801ab38:	4f2f      	ldr	r7, [pc, #188]	; (801abf8 <_strtod_l+0x580>)
 801ab3a:	1112      	asrs	r2, r2, #4
 801ab3c:	4601      	mov	r1, r0
 801ab3e:	2a01      	cmp	r2, #1
 801ab40:	dc23      	bgt.n	801ab8a <_strtod_l+0x512>
 801ab42:	b108      	cbz	r0, 801ab48 <_strtod_l+0x4d0>
 801ab44:	ec59 8b17 	vmov	r8, r9, d7
 801ab48:	4a2b      	ldr	r2, [pc, #172]	; (801abf8 <_strtod_l+0x580>)
 801ab4a:	482c      	ldr	r0, [pc, #176]	; (801abfc <_strtod_l+0x584>)
 801ab4c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801ab50:	ed92 7b00 	vldr	d7, [r2]
 801ab54:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801ab58:	ec49 8b16 	vmov	d6, r8, r9
 801ab5c:	4a28      	ldr	r2, [pc, #160]	; (801ac00 <_strtod_l+0x588>)
 801ab5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ab62:	ee17 1a90 	vmov	r1, s15
 801ab66:	400a      	ands	r2, r1
 801ab68:	4282      	cmp	r2, r0
 801ab6a:	ec59 8b17 	vmov	r8, r9, d7
 801ab6e:	d8bd      	bhi.n	801aaec <_strtod_l+0x474>
 801ab70:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801ab74:	4282      	cmp	r2, r0
 801ab76:	bf86      	itte	hi
 801ab78:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801ac04 <_strtod_l+0x58c>
 801ab7c:	f04f 38ff 	movhi.w	r8, #4294967295
 801ab80:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801ab84:	2200      	movs	r2, #0
 801ab86:	9205      	str	r2, [sp, #20]
 801ab88:	e076      	b.n	801ac78 <_strtod_l+0x600>
 801ab8a:	f012 0f01 	tst.w	r2, #1
 801ab8e:	d004      	beq.n	801ab9a <_strtod_l+0x522>
 801ab90:	ed97 6b00 	vldr	d6, [r7]
 801ab94:	2001      	movs	r0, #1
 801ab96:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ab9a:	3101      	adds	r1, #1
 801ab9c:	1052      	asrs	r2, r2, #1
 801ab9e:	3708      	adds	r7, #8
 801aba0:	e7cd      	b.n	801ab3e <_strtod_l+0x4c6>
 801aba2:	d0ef      	beq.n	801ab84 <_strtod_l+0x50c>
 801aba4:	4252      	negs	r2, r2
 801aba6:	f012 000f 	ands.w	r0, r2, #15
 801abaa:	d00a      	beq.n	801abc2 <_strtod_l+0x54a>
 801abac:	4911      	ldr	r1, [pc, #68]	; (801abf4 <_strtod_l+0x57c>)
 801abae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801abb2:	ed91 7b00 	vldr	d7, [r1]
 801abb6:	ec49 8b16 	vmov	d6, r8, r9
 801abba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801abbe:	ec59 8b17 	vmov	r8, r9, d7
 801abc2:	1112      	asrs	r2, r2, #4
 801abc4:	d0de      	beq.n	801ab84 <_strtod_l+0x50c>
 801abc6:	2a1f      	cmp	r2, #31
 801abc8:	dd1e      	ble.n	801ac08 <_strtod_l+0x590>
 801abca:	2500      	movs	r5, #0
 801abcc:	462e      	mov	r6, r5
 801abce:	9507      	str	r5, [sp, #28]
 801abd0:	462f      	mov	r7, r5
 801abd2:	2322      	movs	r3, #34	; 0x22
 801abd4:	f04f 0800 	mov.w	r8, #0
 801abd8:	f04f 0900 	mov.w	r9, #0
 801abdc:	6023      	str	r3, [r4, #0]
 801abde:	e78f      	b.n	801ab00 <_strtod_l+0x488>
 801abe0:	080204f1 	.word	0x080204f1
 801abe4:	0802073c 	.word	0x0802073c
 801abe8:	080204e9 	.word	0x080204e9
 801abec:	0802055c 	.word	0x0802055c
 801abf0:	08020558 	.word	0x08020558
 801abf4:	08020650 	.word	0x08020650
 801abf8:	08020628 	.word	0x08020628
 801abfc:	7ca00000 	.word	0x7ca00000
 801ac00:	7ff00000 	.word	0x7ff00000
 801ac04:	7fefffff 	.word	0x7fefffff
 801ac08:	f012 0110 	ands.w	r1, r2, #16
 801ac0c:	bf18      	it	ne
 801ac0e:	216a      	movne	r1, #106	; 0x6a
 801ac10:	9105      	str	r1, [sp, #20]
 801ac12:	ec49 8b17 	vmov	d7, r8, r9
 801ac16:	49be      	ldr	r1, [pc, #760]	; (801af10 <_strtod_l+0x898>)
 801ac18:	2000      	movs	r0, #0
 801ac1a:	07d7      	lsls	r7, r2, #31
 801ac1c:	d504      	bpl.n	801ac28 <_strtod_l+0x5b0>
 801ac1e:	ed91 6b00 	vldr	d6, [r1]
 801ac22:	2001      	movs	r0, #1
 801ac24:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ac28:	1052      	asrs	r2, r2, #1
 801ac2a:	f101 0108 	add.w	r1, r1, #8
 801ac2e:	d1f4      	bne.n	801ac1a <_strtod_l+0x5a2>
 801ac30:	b108      	cbz	r0, 801ac36 <_strtod_l+0x5be>
 801ac32:	ec59 8b17 	vmov	r8, r9, d7
 801ac36:	9a05      	ldr	r2, [sp, #20]
 801ac38:	b1ba      	cbz	r2, 801ac6a <_strtod_l+0x5f2>
 801ac3a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801ac3e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801ac42:	2a00      	cmp	r2, #0
 801ac44:	4648      	mov	r0, r9
 801ac46:	dd10      	ble.n	801ac6a <_strtod_l+0x5f2>
 801ac48:	2a1f      	cmp	r2, #31
 801ac4a:	f340 812c 	ble.w	801aea6 <_strtod_l+0x82e>
 801ac4e:	2a34      	cmp	r2, #52	; 0x34
 801ac50:	bfde      	ittt	le
 801ac52:	f04f 32ff 	movle.w	r2, #4294967295
 801ac56:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801ac5a:	408a      	lslle	r2, r1
 801ac5c:	f04f 0800 	mov.w	r8, #0
 801ac60:	bfcc      	ite	gt
 801ac62:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801ac66:	ea02 0900 	andle.w	r9, r2, r0
 801ac6a:	ec49 8b17 	vmov	d7, r8, r9
 801ac6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ac72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac76:	d0a8      	beq.n	801abca <_strtod_l+0x552>
 801ac78:	9a07      	ldr	r2, [sp, #28]
 801ac7a:	9200      	str	r2, [sp, #0]
 801ac7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ac7e:	4632      	mov	r2, r6
 801ac80:	4620      	mov	r0, r4
 801ac82:	f7ff f8dd 	bl	8019e40 <__s2b>
 801ac86:	9007      	str	r0, [sp, #28]
 801ac88:	2800      	cmp	r0, #0
 801ac8a:	f43f af2f 	beq.w	801aaec <_strtod_l+0x474>
 801ac8e:	9a06      	ldr	r2, [sp, #24]
 801ac90:	2a00      	cmp	r2, #0
 801ac92:	ebab 0305 	sub.w	r3, fp, r5
 801ac96:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801aef0 <_strtod_l+0x878>
 801ac9a:	bfa8      	it	ge
 801ac9c:	2300      	movge	r3, #0
 801ac9e:	ed9f ab96 	vldr	d10, [pc, #600]	; 801aef8 <_strtod_l+0x880>
 801aca2:	ed9f bb97 	vldr	d11, [pc, #604]	; 801af00 <_strtod_l+0x888>
 801aca6:	9309      	str	r3, [sp, #36]	; 0x24
 801aca8:	2500      	movs	r5, #0
 801acaa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801acae:	930c      	str	r3, [sp, #48]	; 0x30
 801acb0:	462e      	mov	r6, r5
 801acb2:	9b07      	ldr	r3, [sp, #28]
 801acb4:	4620      	mov	r0, r4
 801acb6:	6859      	ldr	r1, [r3, #4]
 801acb8:	f7ff f81a 	bl	8019cf0 <_Balloc>
 801acbc:	4607      	mov	r7, r0
 801acbe:	2800      	cmp	r0, #0
 801acc0:	f43f af18 	beq.w	801aaf4 <_strtod_l+0x47c>
 801acc4:	9b07      	ldr	r3, [sp, #28]
 801acc6:	691a      	ldr	r2, [r3, #16]
 801acc8:	3202      	adds	r2, #2
 801acca:	f103 010c 	add.w	r1, r3, #12
 801acce:	0092      	lsls	r2, r2, #2
 801acd0:	300c      	adds	r0, #12
 801acd2:	f7fe f8e4 	bl	8018e9e <memcpy>
 801acd6:	ec49 8b10 	vmov	d0, r8, r9
 801acda:	aa14      	add	r2, sp, #80	; 0x50
 801acdc:	a913      	add	r1, sp, #76	; 0x4c
 801acde:	4620      	mov	r0, r4
 801ace0:	f7ff fbe2 	bl	801a4a8 <__d2b>
 801ace4:	ec49 8b18 	vmov	d8, r8, r9
 801ace8:	9012      	str	r0, [sp, #72]	; 0x48
 801acea:	2800      	cmp	r0, #0
 801acec:	f43f af02 	beq.w	801aaf4 <_strtod_l+0x47c>
 801acf0:	2101      	movs	r1, #1
 801acf2:	4620      	mov	r0, r4
 801acf4:	f7ff f93c 	bl	8019f70 <__i2b>
 801acf8:	4606      	mov	r6, r0
 801acfa:	2800      	cmp	r0, #0
 801acfc:	f43f aefa 	beq.w	801aaf4 <_strtod_l+0x47c>
 801ad00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ad02:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	bfab      	itete	ge
 801ad08:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801ad0a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801ad0c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801ad10:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801ad14:	bfac      	ite	ge
 801ad16:	eb03 0b02 	addge.w	fp, r3, r2
 801ad1a:	eba2 0a03 	sublt.w	sl, r2, r3
 801ad1e:	9a05      	ldr	r2, [sp, #20]
 801ad20:	1a9b      	subs	r3, r3, r2
 801ad22:	440b      	add	r3, r1
 801ad24:	4a7b      	ldr	r2, [pc, #492]	; (801af14 <_strtod_l+0x89c>)
 801ad26:	3b01      	subs	r3, #1
 801ad28:	4293      	cmp	r3, r2
 801ad2a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801ad2e:	f280 80cd 	bge.w	801aecc <_strtod_l+0x854>
 801ad32:	1ad2      	subs	r2, r2, r3
 801ad34:	2a1f      	cmp	r2, #31
 801ad36:	eba1 0102 	sub.w	r1, r1, r2
 801ad3a:	f04f 0001 	mov.w	r0, #1
 801ad3e:	f300 80b9 	bgt.w	801aeb4 <_strtod_l+0x83c>
 801ad42:	fa00 f302 	lsl.w	r3, r0, r2
 801ad46:	930b      	str	r3, [sp, #44]	; 0x2c
 801ad48:	2300      	movs	r3, #0
 801ad4a:	930a      	str	r3, [sp, #40]	; 0x28
 801ad4c:	eb0b 0301 	add.w	r3, fp, r1
 801ad50:	9a05      	ldr	r2, [sp, #20]
 801ad52:	459b      	cmp	fp, r3
 801ad54:	448a      	add	sl, r1
 801ad56:	4492      	add	sl, r2
 801ad58:	465a      	mov	r2, fp
 801ad5a:	bfa8      	it	ge
 801ad5c:	461a      	movge	r2, r3
 801ad5e:	4552      	cmp	r2, sl
 801ad60:	bfa8      	it	ge
 801ad62:	4652      	movge	r2, sl
 801ad64:	2a00      	cmp	r2, #0
 801ad66:	bfc2      	ittt	gt
 801ad68:	1a9b      	subgt	r3, r3, r2
 801ad6a:	ebaa 0a02 	subgt.w	sl, sl, r2
 801ad6e:	ebab 0b02 	subgt.w	fp, fp, r2
 801ad72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad74:	2a00      	cmp	r2, #0
 801ad76:	dd18      	ble.n	801adaa <_strtod_l+0x732>
 801ad78:	4631      	mov	r1, r6
 801ad7a:	4620      	mov	r0, r4
 801ad7c:	930f      	str	r3, [sp, #60]	; 0x3c
 801ad7e:	f7ff f9b7 	bl	801a0f0 <__pow5mult>
 801ad82:	4606      	mov	r6, r0
 801ad84:	2800      	cmp	r0, #0
 801ad86:	f43f aeb5 	beq.w	801aaf4 <_strtod_l+0x47c>
 801ad8a:	4601      	mov	r1, r0
 801ad8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ad8e:	4620      	mov	r0, r4
 801ad90:	f7ff f904 	bl	8019f9c <__multiply>
 801ad94:	900e      	str	r0, [sp, #56]	; 0x38
 801ad96:	2800      	cmp	r0, #0
 801ad98:	f43f aeac 	beq.w	801aaf4 <_strtod_l+0x47c>
 801ad9c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ad9e:	4620      	mov	r0, r4
 801ada0:	f7fe ffe6 	bl	8019d70 <_Bfree>
 801ada4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ada6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ada8:	9212      	str	r2, [sp, #72]	; 0x48
 801adaa:	2b00      	cmp	r3, #0
 801adac:	f300 8093 	bgt.w	801aed6 <_strtod_l+0x85e>
 801adb0:	9b06      	ldr	r3, [sp, #24]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	dd08      	ble.n	801adc8 <_strtod_l+0x750>
 801adb6:	4639      	mov	r1, r7
 801adb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801adba:	4620      	mov	r0, r4
 801adbc:	f7ff f998 	bl	801a0f0 <__pow5mult>
 801adc0:	4607      	mov	r7, r0
 801adc2:	2800      	cmp	r0, #0
 801adc4:	f43f ae96 	beq.w	801aaf4 <_strtod_l+0x47c>
 801adc8:	f1ba 0f00 	cmp.w	sl, #0
 801adcc:	dd08      	ble.n	801ade0 <_strtod_l+0x768>
 801adce:	4639      	mov	r1, r7
 801add0:	4652      	mov	r2, sl
 801add2:	4620      	mov	r0, r4
 801add4:	f7ff f9e6 	bl	801a1a4 <__lshift>
 801add8:	4607      	mov	r7, r0
 801adda:	2800      	cmp	r0, #0
 801addc:	f43f ae8a 	beq.w	801aaf4 <_strtod_l+0x47c>
 801ade0:	f1bb 0f00 	cmp.w	fp, #0
 801ade4:	dd08      	ble.n	801adf8 <_strtod_l+0x780>
 801ade6:	4631      	mov	r1, r6
 801ade8:	465a      	mov	r2, fp
 801adea:	4620      	mov	r0, r4
 801adec:	f7ff f9da 	bl	801a1a4 <__lshift>
 801adf0:	4606      	mov	r6, r0
 801adf2:	2800      	cmp	r0, #0
 801adf4:	f43f ae7e 	beq.w	801aaf4 <_strtod_l+0x47c>
 801adf8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801adfa:	463a      	mov	r2, r7
 801adfc:	4620      	mov	r0, r4
 801adfe:	f7ff fa59 	bl	801a2b4 <__mdiff>
 801ae02:	4605      	mov	r5, r0
 801ae04:	2800      	cmp	r0, #0
 801ae06:	f43f ae75 	beq.w	801aaf4 <_strtod_l+0x47c>
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801ae10:	60c3      	str	r3, [r0, #12]
 801ae12:	4631      	mov	r1, r6
 801ae14:	f7ff fa32 	bl	801a27c <__mcmp>
 801ae18:	2800      	cmp	r0, #0
 801ae1a:	da7f      	bge.n	801af1c <_strtod_l+0x8a4>
 801ae1c:	ea5a 0a08 	orrs.w	sl, sl, r8
 801ae20:	f040 80a5 	bne.w	801af6e <_strtod_l+0x8f6>
 801ae24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	f040 80a0 	bne.w	801af6e <_strtod_l+0x8f6>
 801ae2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ae32:	0d1b      	lsrs	r3, r3, #20
 801ae34:	051b      	lsls	r3, r3, #20
 801ae36:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ae3a:	f240 8098 	bls.w	801af6e <_strtod_l+0x8f6>
 801ae3e:	696b      	ldr	r3, [r5, #20]
 801ae40:	b91b      	cbnz	r3, 801ae4a <_strtod_l+0x7d2>
 801ae42:	692b      	ldr	r3, [r5, #16]
 801ae44:	2b01      	cmp	r3, #1
 801ae46:	f340 8092 	ble.w	801af6e <_strtod_l+0x8f6>
 801ae4a:	4629      	mov	r1, r5
 801ae4c:	2201      	movs	r2, #1
 801ae4e:	4620      	mov	r0, r4
 801ae50:	f7ff f9a8 	bl	801a1a4 <__lshift>
 801ae54:	4631      	mov	r1, r6
 801ae56:	4605      	mov	r5, r0
 801ae58:	f7ff fa10 	bl	801a27c <__mcmp>
 801ae5c:	2800      	cmp	r0, #0
 801ae5e:	f340 8086 	ble.w	801af6e <_strtod_l+0x8f6>
 801ae62:	9905      	ldr	r1, [sp, #20]
 801ae64:	4a2c      	ldr	r2, [pc, #176]	; (801af18 <_strtod_l+0x8a0>)
 801ae66:	464b      	mov	r3, r9
 801ae68:	2900      	cmp	r1, #0
 801ae6a:	f000 809f 	beq.w	801afac <_strtod_l+0x934>
 801ae6e:	ea02 0109 	and.w	r1, r2, r9
 801ae72:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ae76:	f300 8099 	bgt.w	801afac <_strtod_l+0x934>
 801ae7a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ae7e:	f77f aea8 	ble.w	801abd2 <_strtod_l+0x55a>
 801ae82:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801af08 <_strtod_l+0x890>
 801ae86:	ec49 8b16 	vmov	d6, r8, r9
 801ae8a:	4b23      	ldr	r3, [pc, #140]	; (801af18 <_strtod_l+0x8a0>)
 801ae8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ae90:	ee17 2a90 	vmov	r2, s15
 801ae94:	4013      	ands	r3, r2
 801ae96:	ec59 8b17 	vmov	r8, r9, d7
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	f47f ae34 	bne.w	801ab08 <_strtod_l+0x490>
 801aea0:	2322      	movs	r3, #34	; 0x22
 801aea2:	6023      	str	r3, [r4, #0]
 801aea4:	e630      	b.n	801ab08 <_strtod_l+0x490>
 801aea6:	f04f 31ff 	mov.w	r1, #4294967295
 801aeaa:	fa01 f202 	lsl.w	r2, r1, r2
 801aeae:	ea02 0808 	and.w	r8, r2, r8
 801aeb2:	e6da      	b.n	801ac6a <_strtod_l+0x5f2>
 801aeb4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801aeb8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801aebc:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801aec0:	33e2      	adds	r3, #226	; 0xe2
 801aec2:	fa00 f303 	lsl.w	r3, r0, r3
 801aec6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801aeca:	e73f      	b.n	801ad4c <_strtod_l+0x6d4>
 801aecc:	2200      	movs	r2, #0
 801aece:	2301      	movs	r3, #1
 801aed0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801aed4:	e73a      	b.n	801ad4c <_strtod_l+0x6d4>
 801aed6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801aed8:	461a      	mov	r2, r3
 801aeda:	4620      	mov	r0, r4
 801aedc:	f7ff f962 	bl	801a1a4 <__lshift>
 801aee0:	9012      	str	r0, [sp, #72]	; 0x48
 801aee2:	2800      	cmp	r0, #0
 801aee4:	f47f af64 	bne.w	801adb0 <_strtod_l+0x738>
 801aee8:	e604      	b.n	801aaf4 <_strtod_l+0x47c>
 801aeea:	bf00      	nop
 801aeec:	f3af 8000 	nop.w
 801aef0:	94a03595 	.word	0x94a03595
 801aef4:	3fcfffff 	.word	0x3fcfffff
 801aef8:	94a03595 	.word	0x94a03595
 801aefc:	3fdfffff 	.word	0x3fdfffff
 801af00:	35afe535 	.word	0x35afe535
 801af04:	3fe00000 	.word	0x3fe00000
 801af08:	00000000 	.word	0x00000000
 801af0c:	39500000 	.word	0x39500000
 801af10:	08020750 	.word	0x08020750
 801af14:	fffffc02 	.word	0xfffffc02
 801af18:	7ff00000 	.word	0x7ff00000
 801af1c:	46cb      	mov	fp, r9
 801af1e:	d15f      	bne.n	801afe0 <_strtod_l+0x968>
 801af20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801af24:	f1ba 0f00 	cmp.w	sl, #0
 801af28:	d02a      	beq.n	801af80 <_strtod_l+0x908>
 801af2a:	4aa7      	ldr	r2, [pc, #668]	; (801b1c8 <_strtod_l+0xb50>)
 801af2c:	4293      	cmp	r3, r2
 801af2e:	d12b      	bne.n	801af88 <_strtod_l+0x910>
 801af30:	9b05      	ldr	r3, [sp, #20]
 801af32:	4642      	mov	r2, r8
 801af34:	b1fb      	cbz	r3, 801af76 <_strtod_l+0x8fe>
 801af36:	4ba5      	ldr	r3, [pc, #660]	; (801b1cc <_strtod_l+0xb54>)
 801af38:	ea09 0303 	and.w	r3, r9, r3
 801af3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801af40:	f04f 31ff 	mov.w	r1, #4294967295
 801af44:	d81a      	bhi.n	801af7c <_strtod_l+0x904>
 801af46:	0d1b      	lsrs	r3, r3, #20
 801af48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801af4c:	fa01 f303 	lsl.w	r3, r1, r3
 801af50:	429a      	cmp	r2, r3
 801af52:	d119      	bne.n	801af88 <_strtod_l+0x910>
 801af54:	4b9e      	ldr	r3, [pc, #632]	; (801b1d0 <_strtod_l+0xb58>)
 801af56:	459b      	cmp	fp, r3
 801af58:	d102      	bne.n	801af60 <_strtod_l+0x8e8>
 801af5a:	3201      	adds	r2, #1
 801af5c:	f43f adca 	beq.w	801aaf4 <_strtod_l+0x47c>
 801af60:	4b9a      	ldr	r3, [pc, #616]	; (801b1cc <_strtod_l+0xb54>)
 801af62:	ea0b 0303 	and.w	r3, fp, r3
 801af66:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801af6a:	f04f 0800 	mov.w	r8, #0
 801af6e:	9b05      	ldr	r3, [sp, #20]
 801af70:	2b00      	cmp	r3, #0
 801af72:	d186      	bne.n	801ae82 <_strtod_l+0x80a>
 801af74:	e5c8      	b.n	801ab08 <_strtod_l+0x490>
 801af76:	f04f 33ff 	mov.w	r3, #4294967295
 801af7a:	e7e9      	b.n	801af50 <_strtod_l+0x8d8>
 801af7c:	460b      	mov	r3, r1
 801af7e:	e7e7      	b.n	801af50 <_strtod_l+0x8d8>
 801af80:	ea53 0308 	orrs.w	r3, r3, r8
 801af84:	f43f af6d 	beq.w	801ae62 <_strtod_l+0x7ea>
 801af88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af8a:	b1cb      	cbz	r3, 801afc0 <_strtod_l+0x948>
 801af8c:	ea13 0f0b 	tst.w	r3, fp
 801af90:	d0ed      	beq.n	801af6e <_strtod_l+0x8f6>
 801af92:	9a05      	ldr	r2, [sp, #20]
 801af94:	4640      	mov	r0, r8
 801af96:	4649      	mov	r1, r9
 801af98:	f1ba 0f00 	cmp.w	sl, #0
 801af9c:	d014      	beq.n	801afc8 <_strtod_l+0x950>
 801af9e:	f7ff fb51 	bl	801a644 <sulp>
 801afa2:	ee38 7b00 	vadd.f64	d7, d8, d0
 801afa6:	ec59 8b17 	vmov	r8, r9, d7
 801afaa:	e7e0      	b.n	801af6e <_strtod_l+0x8f6>
 801afac:	4013      	ands	r3, r2
 801afae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801afb2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801afb6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801afba:	f04f 38ff 	mov.w	r8, #4294967295
 801afbe:	e7d6      	b.n	801af6e <_strtod_l+0x8f6>
 801afc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801afc2:	ea13 0f08 	tst.w	r3, r8
 801afc6:	e7e3      	b.n	801af90 <_strtod_l+0x918>
 801afc8:	f7ff fb3c 	bl	801a644 <sulp>
 801afcc:	ee38 0b40 	vsub.f64	d0, d8, d0
 801afd0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801afd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afd8:	ec59 8b10 	vmov	r8, r9, d0
 801afdc:	d1c7      	bne.n	801af6e <_strtod_l+0x8f6>
 801afde:	e5f8      	b.n	801abd2 <_strtod_l+0x55a>
 801afe0:	4631      	mov	r1, r6
 801afe2:	4628      	mov	r0, r5
 801afe4:	f7ff faba 	bl	801a55c <__ratio>
 801afe8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801afec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801aff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aff4:	d85f      	bhi.n	801b0b6 <_strtod_l+0xa3e>
 801aff6:	f1ba 0f00 	cmp.w	sl, #0
 801affa:	d166      	bne.n	801b0ca <_strtod_l+0xa52>
 801affc:	f1b8 0f00 	cmp.w	r8, #0
 801b000:	d14d      	bne.n	801b09e <_strtod_l+0xa26>
 801b002:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b006:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d162      	bne.n	801b0d4 <_strtod_l+0xa5c>
 801b00e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801b012:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801b016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b01a:	d401      	bmi.n	801b020 <_strtod_l+0x9a8>
 801b01c:	ee20 db0d 	vmul.f64	d13, d0, d13
 801b020:	eeb1 cb4d 	vneg.f64	d12, d13
 801b024:	4869      	ldr	r0, [pc, #420]	; (801b1cc <_strtod_l+0xb54>)
 801b026:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801b1d8 <_strtod_l+0xb60>
 801b02a:	ea0b 0100 	and.w	r1, fp, r0
 801b02e:	4561      	cmp	r1, ip
 801b030:	ec53 2b1c 	vmov	r2, r3, d12
 801b034:	d17a      	bne.n	801b12c <_strtod_l+0xab4>
 801b036:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801b03a:	ec49 8b10 	vmov	d0, r8, r9
 801b03e:	910a      	str	r1, [sp, #40]	; 0x28
 801b040:	f7ff f9c2 	bl	801a3c8 <__ulp>
 801b044:	ec49 8b1e 	vmov	d14, r8, r9
 801b048:	4860      	ldr	r0, [pc, #384]	; (801b1cc <_strtod_l+0xb54>)
 801b04a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801b04e:	ee1e 3a90 	vmov	r3, s29
 801b052:	4a60      	ldr	r2, [pc, #384]	; (801b1d4 <_strtod_l+0xb5c>)
 801b054:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b056:	4018      	ands	r0, r3
 801b058:	4290      	cmp	r0, r2
 801b05a:	ec59 8b1e 	vmov	r8, r9, d14
 801b05e:	d93c      	bls.n	801b0da <_strtod_l+0xa62>
 801b060:	ee18 2a90 	vmov	r2, s17
 801b064:	4b5a      	ldr	r3, [pc, #360]	; (801b1d0 <_strtod_l+0xb58>)
 801b066:	429a      	cmp	r2, r3
 801b068:	d104      	bne.n	801b074 <_strtod_l+0x9fc>
 801b06a:	ee18 3a10 	vmov	r3, s16
 801b06e:	3301      	adds	r3, #1
 801b070:	f43f ad40 	beq.w	801aaf4 <_strtod_l+0x47c>
 801b074:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801b1d0 <_strtod_l+0xb58>
 801b078:	f04f 38ff 	mov.w	r8, #4294967295
 801b07c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b07e:	4620      	mov	r0, r4
 801b080:	f7fe fe76 	bl	8019d70 <_Bfree>
 801b084:	4639      	mov	r1, r7
 801b086:	4620      	mov	r0, r4
 801b088:	f7fe fe72 	bl	8019d70 <_Bfree>
 801b08c:	4631      	mov	r1, r6
 801b08e:	4620      	mov	r0, r4
 801b090:	f7fe fe6e 	bl	8019d70 <_Bfree>
 801b094:	4629      	mov	r1, r5
 801b096:	4620      	mov	r0, r4
 801b098:	f7fe fe6a 	bl	8019d70 <_Bfree>
 801b09c:	e609      	b.n	801acb2 <_strtod_l+0x63a>
 801b09e:	f1b8 0f01 	cmp.w	r8, #1
 801b0a2:	d103      	bne.n	801b0ac <_strtod_l+0xa34>
 801b0a4:	f1b9 0f00 	cmp.w	r9, #0
 801b0a8:	f43f ad93 	beq.w	801abd2 <_strtod_l+0x55a>
 801b0ac:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801b0b0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801b0b4:	e7b6      	b.n	801b024 <_strtod_l+0x9ac>
 801b0b6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801b0ba:	ee20 db0d 	vmul.f64	d13, d0, d13
 801b0be:	f1ba 0f00 	cmp.w	sl, #0
 801b0c2:	d0ad      	beq.n	801b020 <_strtod_l+0x9a8>
 801b0c4:	eeb0 cb4d 	vmov.f64	d12, d13
 801b0c8:	e7ac      	b.n	801b024 <_strtod_l+0x9ac>
 801b0ca:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801b0ce:	eeb0 db4c 	vmov.f64	d13, d12
 801b0d2:	e7a7      	b.n	801b024 <_strtod_l+0x9ac>
 801b0d4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801b0d8:	e7a4      	b.n	801b024 <_strtod_l+0x9ac>
 801b0da:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801b0de:	9b05      	ldr	r3, [sp, #20]
 801b0e0:	46cb      	mov	fp, r9
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d1ca      	bne.n	801b07c <_strtod_l+0xa04>
 801b0e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b0ea:	0d1b      	lsrs	r3, r3, #20
 801b0ec:	051b      	lsls	r3, r3, #20
 801b0ee:	4299      	cmp	r1, r3
 801b0f0:	d1c4      	bne.n	801b07c <_strtod_l+0xa04>
 801b0f2:	ec51 0b1d 	vmov	r0, r1, d13
 801b0f6:	f7e5 facf 	bl	8000698 <__aeabi_d2lz>
 801b0fa:	f7e5 fa87 	bl	800060c <__aeabi_l2d>
 801b0fe:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801b102:	ec41 0b17 	vmov	d7, r0, r1
 801b106:	ea4b 0b08 	orr.w	fp, fp, r8
 801b10a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801b10e:	ee3d db47 	vsub.f64	d13, d13, d7
 801b112:	d03c      	beq.n	801b18e <_strtod_l+0xb16>
 801b114:	eeb4 dbca 	vcmpe.f64	d13, d10
 801b118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b11c:	f53f acf4 	bmi.w	801ab08 <_strtod_l+0x490>
 801b120:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801b124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b128:	dda8      	ble.n	801b07c <_strtod_l+0xa04>
 801b12a:	e4ed      	b.n	801ab08 <_strtod_l+0x490>
 801b12c:	9805      	ldr	r0, [sp, #20]
 801b12e:	b1f0      	cbz	r0, 801b16e <_strtod_l+0xaf6>
 801b130:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801b134:	d81b      	bhi.n	801b16e <_strtod_l+0xaf6>
 801b136:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801b1c0 <_strtod_l+0xb48>
 801b13a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801b13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b142:	d811      	bhi.n	801b168 <_strtod_l+0xaf0>
 801b144:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801b148:	ee1d 3a10 	vmov	r3, s26
 801b14c:	2b01      	cmp	r3, #1
 801b14e:	bf38      	it	cc
 801b150:	2301      	movcc	r3, #1
 801b152:	ee0d 3a10 	vmov	s26, r3
 801b156:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801b15a:	f1ba 0f00 	cmp.w	sl, #0
 801b15e:	d113      	bne.n	801b188 <_strtod_l+0xb10>
 801b160:	eeb1 7b4d 	vneg.f64	d7, d13
 801b164:	ec53 2b17 	vmov	r2, r3, d7
 801b168:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801b16c:	1a43      	subs	r3, r0, r1
 801b16e:	eeb0 0b48 	vmov.f64	d0, d8
 801b172:	ec43 2b1c 	vmov	d12, r2, r3
 801b176:	910a      	str	r1, [sp, #40]	; 0x28
 801b178:	f7ff f926 	bl	801a3c8 <__ulp>
 801b17c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b17e:	eeac 8b00 	vfma.f64	d8, d12, d0
 801b182:	ec59 8b18 	vmov	r8, r9, d8
 801b186:	e7aa      	b.n	801b0de <_strtod_l+0xa66>
 801b188:	eeb0 7b4d 	vmov.f64	d7, d13
 801b18c:	e7ea      	b.n	801b164 <_strtod_l+0xaec>
 801b18e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801b192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b196:	f57f af71 	bpl.w	801b07c <_strtod_l+0xa04>
 801b19a:	e4b5      	b.n	801ab08 <_strtod_l+0x490>
 801b19c:	2300      	movs	r3, #0
 801b19e:	9308      	str	r3, [sp, #32]
 801b1a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b1a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b1a4:	6013      	str	r3, [r2, #0]
 801b1a6:	f7ff baa6 	b.w	801a6f6 <_strtod_l+0x7e>
 801b1aa:	2a65      	cmp	r2, #101	; 0x65
 801b1ac:	f43f aba2 	beq.w	801a8f4 <_strtod_l+0x27c>
 801b1b0:	2a45      	cmp	r2, #69	; 0x45
 801b1b2:	f43f ab9f 	beq.w	801a8f4 <_strtod_l+0x27c>
 801b1b6:	2101      	movs	r1, #1
 801b1b8:	f7ff bbd8 	b.w	801a96c <_strtod_l+0x2f4>
 801b1bc:	f3af 8000 	nop.w
 801b1c0:	ffc00000 	.word	0xffc00000
 801b1c4:	41dfffff 	.word	0x41dfffff
 801b1c8:	000fffff 	.word	0x000fffff
 801b1cc:	7ff00000 	.word	0x7ff00000
 801b1d0:	7fefffff 	.word	0x7fefffff
 801b1d4:	7c9fffff 	.word	0x7c9fffff
 801b1d8:	7fe00000 	.word	0x7fe00000

0801b1dc <_strtod_r>:
 801b1dc:	4b01      	ldr	r3, [pc, #4]	; (801b1e4 <_strtod_r+0x8>)
 801b1de:	f7ff ba4b 	b.w	801a678 <_strtod_l>
 801b1e2:	bf00      	nop
 801b1e4:	2000008c 	.word	0x2000008c

0801b1e8 <__ssputs_r>:
 801b1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1ec:	688e      	ldr	r6, [r1, #8]
 801b1ee:	461f      	mov	r7, r3
 801b1f0:	42be      	cmp	r6, r7
 801b1f2:	680b      	ldr	r3, [r1, #0]
 801b1f4:	4682      	mov	sl, r0
 801b1f6:	460c      	mov	r4, r1
 801b1f8:	4690      	mov	r8, r2
 801b1fa:	d82c      	bhi.n	801b256 <__ssputs_r+0x6e>
 801b1fc:	898a      	ldrh	r2, [r1, #12]
 801b1fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b202:	d026      	beq.n	801b252 <__ssputs_r+0x6a>
 801b204:	6965      	ldr	r5, [r4, #20]
 801b206:	6909      	ldr	r1, [r1, #16]
 801b208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b20c:	eba3 0901 	sub.w	r9, r3, r1
 801b210:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b214:	1c7b      	adds	r3, r7, #1
 801b216:	444b      	add	r3, r9
 801b218:	106d      	asrs	r5, r5, #1
 801b21a:	429d      	cmp	r5, r3
 801b21c:	bf38      	it	cc
 801b21e:	461d      	movcc	r5, r3
 801b220:	0553      	lsls	r3, r2, #21
 801b222:	d527      	bpl.n	801b274 <__ssputs_r+0x8c>
 801b224:	4629      	mov	r1, r5
 801b226:	f7fe fcd7 	bl	8019bd8 <_malloc_r>
 801b22a:	4606      	mov	r6, r0
 801b22c:	b360      	cbz	r0, 801b288 <__ssputs_r+0xa0>
 801b22e:	6921      	ldr	r1, [r4, #16]
 801b230:	464a      	mov	r2, r9
 801b232:	f7fd fe34 	bl	8018e9e <memcpy>
 801b236:	89a3      	ldrh	r3, [r4, #12]
 801b238:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b23c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b240:	81a3      	strh	r3, [r4, #12]
 801b242:	6126      	str	r6, [r4, #16]
 801b244:	6165      	str	r5, [r4, #20]
 801b246:	444e      	add	r6, r9
 801b248:	eba5 0509 	sub.w	r5, r5, r9
 801b24c:	6026      	str	r6, [r4, #0]
 801b24e:	60a5      	str	r5, [r4, #8]
 801b250:	463e      	mov	r6, r7
 801b252:	42be      	cmp	r6, r7
 801b254:	d900      	bls.n	801b258 <__ssputs_r+0x70>
 801b256:	463e      	mov	r6, r7
 801b258:	6820      	ldr	r0, [r4, #0]
 801b25a:	4632      	mov	r2, r6
 801b25c:	4641      	mov	r1, r8
 801b25e:	f7fd fd1c 	bl	8018c9a <memmove>
 801b262:	68a3      	ldr	r3, [r4, #8]
 801b264:	1b9b      	subs	r3, r3, r6
 801b266:	60a3      	str	r3, [r4, #8]
 801b268:	6823      	ldr	r3, [r4, #0]
 801b26a:	4433      	add	r3, r6
 801b26c:	6023      	str	r3, [r4, #0]
 801b26e:	2000      	movs	r0, #0
 801b270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b274:	462a      	mov	r2, r5
 801b276:	f000 ff48 	bl	801c10a <_realloc_r>
 801b27a:	4606      	mov	r6, r0
 801b27c:	2800      	cmp	r0, #0
 801b27e:	d1e0      	bne.n	801b242 <__ssputs_r+0x5a>
 801b280:	6921      	ldr	r1, [r4, #16]
 801b282:	4650      	mov	r0, sl
 801b284:	f7fe fc34 	bl	8019af0 <_free_r>
 801b288:	230c      	movs	r3, #12
 801b28a:	f8ca 3000 	str.w	r3, [sl]
 801b28e:	89a3      	ldrh	r3, [r4, #12]
 801b290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b294:	81a3      	strh	r3, [r4, #12]
 801b296:	f04f 30ff 	mov.w	r0, #4294967295
 801b29a:	e7e9      	b.n	801b270 <__ssputs_r+0x88>

0801b29c <_svfiprintf_r>:
 801b29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2a0:	4698      	mov	r8, r3
 801b2a2:	898b      	ldrh	r3, [r1, #12]
 801b2a4:	061b      	lsls	r3, r3, #24
 801b2a6:	b09d      	sub	sp, #116	; 0x74
 801b2a8:	4607      	mov	r7, r0
 801b2aa:	460d      	mov	r5, r1
 801b2ac:	4614      	mov	r4, r2
 801b2ae:	d50e      	bpl.n	801b2ce <_svfiprintf_r+0x32>
 801b2b0:	690b      	ldr	r3, [r1, #16]
 801b2b2:	b963      	cbnz	r3, 801b2ce <_svfiprintf_r+0x32>
 801b2b4:	2140      	movs	r1, #64	; 0x40
 801b2b6:	f7fe fc8f 	bl	8019bd8 <_malloc_r>
 801b2ba:	6028      	str	r0, [r5, #0]
 801b2bc:	6128      	str	r0, [r5, #16]
 801b2be:	b920      	cbnz	r0, 801b2ca <_svfiprintf_r+0x2e>
 801b2c0:	230c      	movs	r3, #12
 801b2c2:	603b      	str	r3, [r7, #0]
 801b2c4:	f04f 30ff 	mov.w	r0, #4294967295
 801b2c8:	e0d0      	b.n	801b46c <_svfiprintf_r+0x1d0>
 801b2ca:	2340      	movs	r3, #64	; 0x40
 801b2cc:	616b      	str	r3, [r5, #20]
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	9309      	str	r3, [sp, #36]	; 0x24
 801b2d2:	2320      	movs	r3, #32
 801b2d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b2d8:	f8cd 800c 	str.w	r8, [sp, #12]
 801b2dc:	2330      	movs	r3, #48	; 0x30
 801b2de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b484 <_svfiprintf_r+0x1e8>
 801b2e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b2e6:	f04f 0901 	mov.w	r9, #1
 801b2ea:	4623      	mov	r3, r4
 801b2ec:	469a      	mov	sl, r3
 801b2ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2f2:	b10a      	cbz	r2, 801b2f8 <_svfiprintf_r+0x5c>
 801b2f4:	2a25      	cmp	r2, #37	; 0x25
 801b2f6:	d1f9      	bne.n	801b2ec <_svfiprintf_r+0x50>
 801b2f8:	ebba 0b04 	subs.w	fp, sl, r4
 801b2fc:	d00b      	beq.n	801b316 <_svfiprintf_r+0x7a>
 801b2fe:	465b      	mov	r3, fp
 801b300:	4622      	mov	r2, r4
 801b302:	4629      	mov	r1, r5
 801b304:	4638      	mov	r0, r7
 801b306:	f7ff ff6f 	bl	801b1e8 <__ssputs_r>
 801b30a:	3001      	adds	r0, #1
 801b30c:	f000 80a9 	beq.w	801b462 <_svfiprintf_r+0x1c6>
 801b310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b312:	445a      	add	r2, fp
 801b314:	9209      	str	r2, [sp, #36]	; 0x24
 801b316:	f89a 3000 	ldrb.w	r3, [sl]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	f000 80a1 	beq.w	801b462 <_svfiprintf_r+0x1c6>
 801b320:	2300      	movs	r3, #0
 801b322:	f04f 32ff 	mov.w	r2, #4294967295
 801b326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b32a:	f10a 0a01 	add.w	sl, sl, #1
 801b32e:	9304      	str	r3, [sp, #16]
 801b330:	9307      	str	r3, [sp, #28]
 801b332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b336:	931a      	str	r3, [sp, #104]	; 0x68
 801b338:	4654      	mov	r4, sl
 801b33a:	2205      	movs	r2, #5
 801b33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b340:	4850      	ldr	r0, [pc, #320]	; (801b484 <_svfiprintf_r+0x1e8>)
 801b342:	f7e4 ff7d 	bl	8000240 <memchr>
 801b346:	9a04      	ldr	r2, [sp, #16]
 801b348:	b9d8      	cbnz	r0, 801b382 <_svfiprintf_r+0xe6>
 801b34a:	06d0      	lsls	r0, r2, #27
 801b34c:	bf44      	itt	mi
 801b34e:	2320      	movmi	r3, #32
 801b350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b354:	0711      	lsls	r1, r2, #28
 801b356:	bf44      	itt	mi
 801b358:	232b      	movmi	r3, #43	; 0x2b
 801b35a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b35e:	f89a 3000 	ldrb.w	r3, [sl]
 801b362:	2b2a      	cmp	r3, #42	; 0x2a
 801b364:	d015      	beq.n	801b392 <_svfiprintf_r+0xf6>
 801b366:	9a07      	ldr	r2, [sp, #28]
 801b368:	4654      	mov	r4, sl
 801b36a:	2000      	movs	r0, #0
 801b36c:	f04f 0c0a 	mov.w	ip, #10
 801b370:	4621      	mov	r1, r4
 801b372:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b376:	3b30      	subs	r3, #48	; 0x30
 801b378:	2b09      	cmp	r3, #9
 801b37a:	d94d      	bls.n	801b418 <_svfiprintf_r+0x17c>
 801b37c:	b1b0      	cbz	r0, 801b3ac <_svfiprintf_r+0x110>
 801b37e:	9207      	str	r2, [sp, #28]
 801b380:	e014      	b.n	801b3ac <_svfiprintf_r+0x110>
 801b382:	eba0 0308 	sub.w	r3, r0, r8
 801b386:	fa09 f303 	lsl.w	r3, r9, r3
 801b38a:	4313      	orrs	r3, r2
 801b38c:	9304      	str	r3, [sp, #16]
 801b38e:	46a2      	mov	sl, r4
 801b390:	e7d2      	b.n	801b338 <_svfiprintf_r+0x9c>
 801b392:	9b03      	ldr	r3, [sp, #12]
 801b394:	1d19      	adds	r1, r3, #4
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	9103      	str	r1, [sp, #12]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	bfbb      	ittet	lt
 801b39e:	425b      	neglt	r3, r3
 801b3a0:	f042 0202 	orrlt.w	r2, r2, #2
 801b3a4:	9307      	strge	r3, [sp, #28]
 801b3a6:	9307      	strlt	r3, [sp, #28]
 801b3a8:	bfb8      	it	lt
 801b3aa:	9204      	strlt	r2, [sp, #16]
 801b3ac:	7823      	ldrb	r3, [r4, #0]
 801b3ae:	2b2e      	cmp	r3, #46	; 0x2e
 801b3b0:	d10c      	bne.n	801b3cc <_svfiprintf_r+0x130>
 801b3b2:	7863      	ldrb	r3, [r4, #1]
 801b3b4:	2b2a      	cmp	r3, #42	; 0x2a
 801b3b6:	d134      	bne.n	801b422 <_svfiprintf_r+0x186>
 801b3b8:	9b03      	ldr	r3, [sp, #12]
 801b3ba:	1d1a      	adds	r2, r3, #4
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	9203      	str	r2, [sp, #12]
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	bfb8      	it	lt
 801b3c4:	f04f 33ff 	movlt.w	r3, #4294967295
 801b3c8:	3402      	adds	r4, #2
 801b3ca:	9305      	str	r3, [sp, #20]
 801b3cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b494 <_svfiprintf_r+0x1f8>
 801b3d0:	7821      	ldrb	r1, [r4, #0]
 801b3d2:	2203      	movs	r2, #3
 801b3d4:	4650      	mov	r0, sl
 801b3d6:	f7e4 ff33 	bl	8000240 <memchr>
 801b3da:	b138      	cbz	r0, 801b3ec <_svfiprintf_r+0x150>
 801b3dc:	9b04      	ldr	r3, [sp, #16]
 801b3de:	eba0 000a 	sub.w	r0, r0, sl
 801b3e2:	2240      	movs	r2, #64	; 0x40
 801b3e4:	4082      	lsls	r2, r0
 801b3e6:	4313      	orrs	r3, r2
 801b3e8:	3401      	adds	r4, #1
 801b3ea:	9304      	str	r3, [sp, #16]
 801b3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3f0:	4825      	ldr	r0, [pc, #148]	; (801b488 <_svfiprintf_r+0x1ec>)
 801b3f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b3f6:	2206      	movs	r2, #6
 801b3f8:	f7e4 ff22 	bl	8000240 <memchr>
 801b3fc:	2800      	cmp	r0, #0
 801b3fe:	d038      	beq.n	801b472 <_svfiprintf_r+0x1d6>
 801b400:	4b22      	ldr	r3, [pc, #136]	; (801b48c <_svfiprintf_r+0x1f0>)
 801b402:	bb1b      	cbnz	r3, 801b44c <_svfiprintf_r+0x1b0>
 801b404:	9b03      	ldr	r3, [sp, #12]
 801b406:	3307      	adds	r3, #7
 801b408:	f023 0307 	bic.w	r3, r3, #7
 801b40c:	3308      	adds	r3, #8
 801b40e:	9303      	str	r3, [sp, #12]
 801b410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b412:	4433      	add	r3, r6
 801b414:	9309      	str	r3, [sp, #36]	; 0x24
 801b416:	e768      	b.n	801b2ea <_svfiprintf_r+0x4e>
 801b418:	fb0c 3202 	mla	r2, ip, r2, r3
 801b41c:	460c      	mov	r4, r1
 801b41e:	2001      	movs	r0, #1
 801b420:	e7a6      	b.n	801b370 <_svfiprintf_r+0xd4>
 801b422:	2300      	movs	r3, #0
 801b424:	3401      	adds	r4, #1
 801b426:	9305      	str	r3, [sp, #20]
 801b428:	4619      	mov	r1, r3
 801b42a:	f04f 0c0a 	mov.w	ip, #10
 801b42e:	4620      	mov	r0, r4
 801b430:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b434:	3a30      	subs	r2, #48	; 0x30
 801b436:	2a09      	cmp	r2, #9
 801b438:	d903      	bls.n	801b442 <_svfiprintf_r+0x1a6>
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d0c6      	beq.n	801b3cc <_svfiprintf_r+0x130>
 801b43e:	9105      	str	r1, [sp, #20]
 801b440:	e7c4      	b.n	801b3cc <_svfiprintf_r+0x130>
 801b442:	fb0c 2101 	mla	r1, ip, r1, r2
 801b446:	4604      	mov	r4, r0
 801b448:	2301      	movs	r3, #1
 801b44a:	e7f0      	b.n	801b42e <_svfiprintf_r+0x192>
 801b44c:	ab03      	add	r3, sp, #12
 801b44e:	9300      	str	r3, [sp, #0]
 801b450:	462a      	mov	r2, r5
 801b452:	4b0f      	ldr	r3, [pc, #60]	; (801b490 <_svfiprintf_r+0x1f4>)
 801b454:	a904      	add	r1, sp, #16
 801b456:	4638      	mov	r0, r7
 801b458:	f7fc fd2a 	bl	8017eb0 <_printf_float>
 801b45c:	1c42      	adds	r2, r0, #1
 801b45e:	4606      	mov	r6, r0
 801b460:	d1d6      	bne.n	801b410 <_svfiprintf_r+0x174>
 801b462:	89ab      	ldrh	r3, [r5, #12]
 801b464:	065b      	lsls	r3, r3, #25
 801b466:	f53f af2d 	bmi.w	801b2c4 <_svfiprintf_r+0x28>
 801b46a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b46c:	b01d      	add	sp, #116	; 0x74
 801b46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b472:	ab03      	add	r3, sp, #12
 801b474:	9300      	str	r3, [sp, #0]
 801b476:	462a      	mov	r2, r5
 801b478:	4b05      	ldr	r3, [pc, #20]	; (801b490 <_svfiprintf_r+0x1f4>)
 801b47a:	a904      	add	r1, sp, #16
 801b47c:	4638      	mov	r0, r7
 801b47e:	f7fc ff9f 	bl	80183c0 <_printf_i>
 801b482:	e7eb      	b.n	801b45c <_svfiprintf_r+0x1c0>
 801b484:	08020778 	.word	0x08020778
 801b488:	08020782 	.word	0x08020782
 801b48c:	08017eb1 	.word	0x08017eb1
 801b490:	0801b1e9 	.word	0x0801b1e9
 801b494:	0802077e 	.word	0x0802077e

0801b498 <__sfputc_r>:
 801b498:	6893      	ldr	r3, [r2, #8]
 801b49a:	3b01      	subs	r3, #1
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	b410      	push	{r4}
 801b4a0:	6093      	str	r3, [r2, #8]
 801b4a2:	da08      	bge.n	801b4b6 <__sfputc_r+0x1e>
 801b4a4:	6994      	ldr	r4, [r2, #24]
 801b4a6:	42a3      	cmp	r3, r4
 801b4a8:	db01      	blt.n	801b4ae <__sfputc_r+0x16>
 801b4aa:	290a      	cmp	r1, #10
 801b4ac:	d103      	bne.n	801b4b6 <__sfputc_r+0x1e>
 801b4ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b4b2:	f000 b9f5 	b.w	801b8a0 <__swbuf_r>
 801b4b6:	6813      	ldr	r3, [r2, #0]
 801b4b8:	1c58      	adds	r0, r3, #1
 801b4ba:	6010      	str	r0, [r2, #0]
 801b4bc:	7019      	strb	r1, [r3, #0]
 801b4be:	4608      	mov	r0, r1
 801b4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b4c4:	4770      	bx	lr

0801b4c6 <__sfputs_r>:
 801b4c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4c8:	4606      	mov	r6, r0
 801b4ca:	460f      	mov	r7, r1
 801b4cc:	4614      	mov	r4, r2
 801b4ce:	18d5      	adds	r5, r2, r3
 801b4d0:	42ac      	cmp	r4, r5
 801b4d2:	d101      	bne.n	801b4d8 <__sfputs_r+0x12>
 801b4d4:	2000      	movs	r0, #0
 801b4d6:	e007      	b.n	801b4e8 <__sfputs_r+0x22>
 801b4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4dc:	463a      	mov	r2, r7
 801b4de:	4630      	mov	r0, r6
 801b4e0:	f7ff ffda 	bl	801b498 <__sfputc_r>
 801b4e4:	1c43      	adds	r3, r0, #1
 801b4e6:	d1f3      	bne.n	801b4d0 <__sfputs_r+0xa>
 801b4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b4ec <_vfiprintf_r>:
 801b4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4f0:	460d      	mov	r5, r1
 801b4f2:	b09d      	sub	sp, #116	; 0x74
 801b4f4:	4614      	mov	r4, r2
 801b4f6:	4698      	mov	r8, r3
 801b4f8:	4606      	mov	r6, r0
 801b4fa:	b118      	cbz	r0, 801b504 <_vfiprintf_r+0x18>
 801b4fc:	6a03      	ldr	r3, [r0, #32]
 801b4fe:	b90b      	cbnz	r3, 801b504 <_vfiprintf_r+0x18>
 801b500:	f7fd fb10 	bl	8018b24 <__sinit>
 801b504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b506:	07d9      	lsls	r1, r3, #31
 801b508:	d405      	bmi.n	801b516 <_vfiprintf_r+0x2a>
 801b50a:	89ab      	ldrh	r3, [r5, #12]
 801b50c:	059a      	lsls	r2, r3, #22
 801b50e:	d402      	bmi.n	801b516 <_vfiprintf_r+0x2a>
 801b510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b512:	f7fd fcc2 	bl	8018e9a <__retarget_lock_acquire_recursive>
 801b516:	89ab      	ldrh	r3, [r5, #12]
 801b518:	071b      	lsls	r3, r3, #28
 801b51a:	d501      	bpl.n	801b520 <_vfiprintf_r+0x34>
 801b51c:	692b      	ldr	r3, [r5, #16]
 801b51e:	b99b      	cbnz	r3, 801b548 <_vfiprintf_r+0x5c>
 801b520:	4629      	mov	r1, r5
 801b522:	4630      	mov	r0, r6
 801b524:	f000 f9fa 	bl	801b91c <__swsetup_r>
 801b528:	b170      	cbz	r0, 801b548 <_vfiprintf_r+0x5c>
 801b52a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b52c:	07dc      	lsls	r4, r3, #31
 801b52e:	d504      	bpl.n	801b53a <_vfiprintf_r+0x4e>
 801b530:	f04f 30ff 	mov.w	r0, #4294967295
 801b534:	b01d      	add	sp, #116	; 0x74
 801b536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b53a:	89ab      	ldrh	r3, [r5, #12]
 801b53c:	0598      	lsls	r0, r3, #22
 801b53e:	d4f7      	bmi.n	801b530 <_vfiprintf_r+0x44>
 801b540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b542:	f7fd fcab 	bl	8018e9c <__retarget_lock_release_recursive>
 801b546:	e7f3      	b.n	801b530 <_vfiprintf_r+0x44>
 801b548:	2300      	movs	r3, #0
 801b54a:	9309      	str	r3, [sp, #36]	; 0x24
 801b54c:	2320      	movs	r3, #32
 801b54e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b552:	f8cd 800c 	str.w	r8, [sp, #12]
 801b556:	2330      	movs	r3, #48	; 0x30
 801b558:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b70c <_vfiprintf_r+0x220>
 801b55c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b560:	f04f 0901 	mov.w	r9, #1
 801b564:	4623      	mov	r3, r4
 801b566:	469a      	mov	sl, r3
 801b568:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b56c:	b10a      	cbz	r2, 801b572 <_vfiprintf_r+0x86>
 801b56e:	2a25      	cmp	r2, #37	; 0x25
 801b570:	d1f9      	bne.n	801b566 <_vfiprintf_r+0x7a>
 801b572:	ebba 0b04 	subs.w	fp, sl, r4
 801b576:	d00b      	beq.n	801b590 <_vfiprintf_r+0xa4>
 801b578:	465b      	mov	r3, fp
 801b57a:	4622      	mov	r2, r4
 801b57c:	4629      	mov	r1, r5
 801b57e:	4630      	mov	r0, r6
 801b580:	f7ff ffa1 	bl	801b4c6 <__sfputs_r>
 801b584:	3001      	adds	r0, #1
 801b586:	f000 80a9 	beq.w	801b6dc <_vfiprintf_r+0x1f0>
 801b58a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b58c:	445a      	add	r2, fp
 801b58e:	9209      	str	r2, [sp, #36]	; 0x24
 801b590:	f89a 3000 	ldrb.w	r3, [sl]
 801b594:	2b00      	cmp	r3, #0
 801b596:	f000 80a1 	beq.w	801b6dc <_vfiprintf_r+0x1f0>
 801b59a:	2300      	movs	r3, #0
 801b59c:	f04f 32ff 	mov.w	r2, #4294967295
 801b5a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b5a4:	f10a 0a01 	add.w	sl, sl, #1
 801b5a8:	9304      	str	r3, [sp, #16]
 801b5aa:	9307      	str	r3, [sp, #28]
 801b5ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b5b0:	931a      	str	r3, [sp, #104]	; 0x68
 801b5b2:	4654      	mov	r4, sl
 801b5b4:	2205      	movs	r2, #5
 801b5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5ba:	4854      	ldr	r0, [pc, #336]	; (801b70c <_vfiprintf_r+0x220>)
 801b5bc:	f7e4 fe40 	bl	8000240 <memchr>
 801b5c0:	9a04      	ldr	r2, [sp, #16]
 801b5c2:	b9d8      	cbnz	r0, 801b5fc <_vfiprintf_r+0x110>
 801b5c4:	06d1      	lsls	r1, r2, #27
 801b5c6:	bf44      	itt	mi
 801b5c8:	2320      	movmi	r3, #32
 801b5ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b5ce:	0713      	lsls	r3, r2, #28
 801b5d0:	bf44      	itt	mi
 801b5d2:	232b      	movmi	r3, #43	; 0x2b
 801b5d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b5d8:	f89a 3000 	ldrb.w	r3, [sl]
 801b5dc:	2b2a      	cmp	r3, #42	; 0x2a
 801b5de:	d015      	beq.n	801b60c <_vfiprintf_r+0x120>
 801b5e0:	9a07      	ldr	r2, [sp, #28]
 801b5e2:	4654      	mov	r4, sl
 801b5e4:	2000      	movs	r0, #0
 801b5e6:	f04f 0c0a 	mov.w	ip, #10
 801b5ea:	4621      	mov	r1, r4
 801b5ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b5f0:	3b30      	subs	r3, #48	; 0x30
 801b5f2:	2b09      	cmp	r3, #9
 801b5f4:	d94d      	bls.n	801b692 <_vfiprintf_r+0x1a6>
 801b5f6:	b1b0      	cbz	r0, 801b626 <_vfiprintf_r+0x13a>
 801b5f8:	9207      	str	r2, [sp, #28]
 801b5fa:	e014      	b.n	801b626 <_vfiprintf_r+0x13a>
 801b5fc:	eba0 0308 	sub.w	r3, r0, r8
 801b600:	fa09 f303 	lsl.w	r3, r9, r3
 801b604:	4313      	orrs	r3, r2
 801b606:	9304      	str	r3, [sp, #16]
 801b608:	46a2      	mov	sl, r4
 801b60a:	e7d2      	b.n	801b5b2 <_vfiprintf_r+0xc6>
 801b60c:	9b03      	ldr	r3, [sp, #12]
 801b60e:	1d19      	adds	r1, r3, #4
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	9103      	str	r1, [sp, #12]
 801b614:	2b00      	cmp	r3, #0
 801b616:	bfbb      	ittet	lt
 801b618:	425b      	neglt	r3, r3
 801b61a:	f042 0202 	orrlt.w	r2, r2, #2
 801b61e:	9307      	strge	r3, [sp, #28]
 801b620:	9307      	strlt	r3, [sp, #28]
 801b622:	bfb8      	it	lt
 801b624:	9204      	strlt	r2, [sp, #16]
 801b626:	7823      	ldrb	r3, [r4, #0]
 801b628:	2b2e      	cmp	r3, #46	; 0x2e
 801b62a:	d10c      	bne.n	801b646 <_vfiprintf_r+0x15a>
 801b62c:	7863      	ldrb	r3, [r4, #1]
 801b62e:	2b2a      	cmp	r3, #42	; 0x2a
 801b630:	d134      	bne.n	801b69c <_vfiprintf_r+0x1b0>
 801b632:	9b03      	ldr	r3, [sp, #12]
 801b634:	1d1a      	adds	r2, r3, #4
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	9203      	str	r2, [sp, #12]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	bfb8      	it	lt
 801b63e:	f04f 33ff 	movlt.w	r3, #4294967295
 801b642:	3402      	adds	r4, #2
 801b644:	9305      	str	r3, [sp, #20]
 801b646:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b71c <_vfiprintf_r+0x230>
 801b64a:	7821      	ldrb	r1, [r4, #0]
 801b64c:	2203      	movs	r2, #3
 801b64e:	4650      	mov	r0, sl
 801b650:	f7e4 fdf6 	bl	8000240 <memchr>
 801b654:	b138      	cbz	r0, 801b666 <_vfiprintf_r+0x17a>
 801b656:	9b04      	ldr	r3, [sp, #16]
 801b658:	eba0 000a 	sub.w	r0, r0, sl
 801b65c:	2240      	movs	r2, #64	; 0x40
 801b65e:	4082      	lsls	r2, r0
 801b660:	4313      	orrs	r3, r2
 801b662:	3401      	adds	r4, #1
 801b664:	9304      	str	r3, [sp, #16]
 801b666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b66a:	4829      	ldr	r0, [pc, #164]	; (801b710 <_vfiprintf_r+0x224>)
 801b66c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b670:	2206      	movs	r2, #6
 801b672:	f7e4 fde5 	bl	8000240 <memchr>
 801b676:	2800      	cmp	r0, #0
 801b678:	d03f      	beq.n	801b6fa <_vfiprintf_r+0x20e>
 801b67a:	4b26      	ldr	r3, [pc, #152]	; (801b714 <_vfiprintf_r+0x228>)
 801b67c:	bb1b      	cbnz	r3, 801b6c6 <_vfiprintf_r+0x1da>
 801b67e:	9b03      	ldr	r3, [sp, #12]
 801b680:	3307      	adds	r3, #7
 801b682:	f023 0307 	bic.w	r3, r3, #7
 801b686:	3308      	adds	r3, #8
 801b688:	9303      	str	r3, [sp, #12]
 801b68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b68c:	443b      	add	r3, r7
 801b68e:	9309      	str	r3, [sp, #36]	; 0x24
 801b690:	e768      	b.n	801b564 <_vfiprintf_r+0x78>
 801b692:	fb0c 3202 	mla	r2, ip, r2, r3
 801b696:	460c      	mov	r4, r1
 801b698:	2001      	movs	r0, #1
 801b69a:	e7a6      	b.n	801b5ea <_vfiprintf_r+0xfe>
 801b69c:	2300      	movs	r3, #0
 801b69e:	3401      	adds	r4, #1
 801b6a0:	9305      	str	r3, [sp, #20]
 801b6a2:	4619      	mov	r1, r3
 801b6a4:	f04f 0c0a 	mov.w	ip, #10
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b6ae:	3a30      	subs	r2, #48	; 0x30
 801b6b0:	2a09      	cmp	r2, #9
 801b6b2:	d903      	bls.n	801b6bc <_vfiprintf_r+0x1d0>
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d0c6      	beq.n	801b646 <_vfiprintf_r+0x15a>
 801b6b8:	9105      	str	r1, [sp, #20]
 801b6ba:	e7c4      	b.n	801b646 <_vfiprintf_r+0x15a>
 801b6bc:	fb0c 2101 	mla	r1, ip, r1, r2
 801b6c0:	4604      	mov	r4, r0
 801b6c2:	2301      	movs	r3, #1
 801b6c4:	e7f0      	b.n	801b6a8 <_vfiprintf_r+0x1bc>
 801b6c6:	ab03      	add	r3, sp, #12
 801b6c8:	9300      	str	r3, [sp, #0]
 801b6ca:	462a      	mov	r2, r5
 801b6cc:	4b12      	ldr	r3, [pc, #72]	; (801b718 <_vfiprintf_r+0x22c>)
 801b6ce:	a904      	add	r1, sp, #16
 801b6d0:	4630      	mov	r0, r6
 801b6d2:	f7fc fbed 	bl	8017eb0 <_printf_float>
 801b6d6:	4607      	mov	r7, r0
 801b6d8:	1c78      	adds	r0, r7, #1
 801b6da:	d1d6      	bne.n	801b68a <_vfiprintf_r+0x19e>
 801b6dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b6de:	07d9      	lsls	r1, r3, #31
 801b6e0:	d405      	bmi.n	801b6ee <_vfiprintf_r+0x202>
 801b6e2:	89ab      	ldrh	r3, [r5, #12]
 801b6e4:	059a      	lsls	r2, r3, #22
 801b6e6:	d402      	bmi.n	801b6ee <_vfiprintf_r+0x202>
 801b6e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b6ea:	f7fd fbd7 	bl	8018e9c <__retarget_lock_release_recursive>
 801b6ee:	89ab      	ldrh	r3, [r5, #12]
 801b6f0:	065b      	lsls	r3, r3, #25
 801b6f2:	f53f af1d 	bmi.w	801b530 <_vfiprintf_r+0x44>
 801b6f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b6f8:	e71c      	b.n	801b534 <_vfiprintf_r+0x48>
 801b6fa:	ab03      	add	r3, sp, #12
 801b6fc:	9300      	str	r3, [sp, #0]
 801b6fe:	462a      	mov	r2, r5
 801b700:	4b05      	ldr	r3, [pc, #20]	; (801b718 <_vfiprintf_r+0x22c>)
 801b702:	a904      	add	r1, sp, #16
 801b704:	4630      	mov	r0, r6
 801b706:	f7fc fe5b 	bl	80183c0 <_printf_i>
 801b70a:	e7e4      	b.n	801b6d6 <_vfiprintf_r+0x1ea>
 801b70c:	08020778 	.word	0x08020778
 801b710:	08020782 	.word	0x08020782
 801b714:	08017eb1 	.word	0x08017eb1
 801b718:	0801b4c7 	.word	0x0801b4c7
 801b71c:	0802077e 	.word	0x0802077e

0801b720 <__sflush_r>:
 801b720:	898a      	ldrh	r2, [r1, #12]
 801b722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b726:	4605      	mov	r5, r0
 801b728:	0710      	lsls	r0, r2, #28
 801b72a:	460c      	mov	r4, r1
 801b72c:	d458      	bmi.n	801b7e0 <__sflush_r+0xc0>
 801b72e:	684b      	ldr	r3, [r1, #4]
 801b730:	2b00      	cmp	r3, #0
 801b732:	dc05      	bgt.n	801b740 <__sflush_r+0x20>
 801b734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b736:	2b00      	cmp	r3, #0
 801b738:	dc02      	bgt.n	801b740 <__sflush_r+0x20>
 801b73a:	2000      	movs	r0, #0
 801b73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b742:	2e00      	cmp	r6, #0
 801b744:	d0f9      	beq.n	801b73a <__sflush_r+0x1a>
 801b746:	2300      	movs	r3, #0
 801b748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b74c:	682f      	ldr	r7, [r5, #0]
 801b74e:	6a21      	ldr	r1, [r4, #32]
 801b750:	602b      	str	r3, [r5, #0]
 801b752:	d032      	beq.n	801b7ba <__sflush_r+0x9a>
 801b754:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b756:	89a3      	ldrh	r3, [r4, #12]
 801b758:	075a      	lsls	r2, r3, #29
 801b75a:	d505      	bpl.n	801b768 <__sflush_r+0x48>
 801b75c:	6863      	ldr	r3, [r4, #4]
 801b75e:	1ac0      	subs	r0, r0, r3
 801b760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b762:	b10b      	cbz	r3, 801b768 <__sflush_r+0x48>
 801b764:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b766:	1ac0      	subs	r0, r0, r3
 801b768:	2300      	movs	r3, #0
 801b76a:	4602      	mov	r2, r0
 801b76c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b76e:	6a21      	ldr	r1, [r4, #32]
 801b770:	4628      	mov	r0, r5
 801b772:	47b0      	blx	r6
 801b774:	1c43      	adds	r3, r0, #1
 801b776:	89a3      	ldrh	r3, [r4, #12]
 801b778:	d106      	bne.n	801b788 <__sflush_r+0x68>
 801b77a:	6829      	ldr	r1, [r5, #0]
 801b77c:	291d      	cmp	r1, #29
 801b77e:	d82b      	bhi.n	801b7d8 <__sflush_r+0xb8>
 801b780:	4a29      	ldr	r2, [pc, #164]	; (801b828 <__sflush_r+0x108>)
 801b782:	410a      	asrs	r2, r1
 801b784:	07d6      	lsls	r6, r2, #31
 801b786:	d427      	bmi.n	801b7d8 <__sflush_r+0xb8>
 801b788:	2200      	movs	r2, #0
 801b78a:	6062      	str	r2, [r4, #4]
 801b78c:	04d9      	lsls	r1, r3, #19
 801b78e:	6922      	ldr	r2, [r4, #16]
 801b790:	6022      	str	r2, [r4, #0]
 801b792:	d504      	bpl.n	801b79e <__sflush_r+0x7e>
 801b794:	1c42      	adds	r2, r0, #1
 801b796:	d101      	bne.n	801b79c <__sflush_r+0x7c>
 801b798:	682b      	ldr	r3, [r5, #0]
 801b79a:	b903      	cbnz	r3, 801b79e <__sflush_r+0x7e>
 801b79c:	6560      	str	r0, [r4, #84]	; 0x54
 801b79e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b7a0:	602f      	str	r7, [r5, #0]
 801b7a2:	2900      	cmp	r1, #0
 801b7a4:	d0c9      	beq.n	801b73a <__sflush_r+0x1a>
 801b7a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b7aa:	4299      	cmp	r1, r3
 801b7ac:	d002      	beq.n	801b7b4 <__sflush_r+0x94>
 801b7ae:	4628      	mov	r0, r5
 801b7b0:	f7fe f99e 	bl	8019af0 <_free_r>
 801b7b4:	2000      	movs	r0, #0
 801b7b6:	6360      	str	r0, [r4, #52]	; 0x34
 801b7b8:	e7c0      	b.n	801b73c <__sflush_r+0x1c>
 801b7ba:	2301      	movs	r3, #1
 801b7bc:	4628      	mov	r0, r5
 801b7be:	47b0      	blx	r6
 801b7c0:	1c41      	adds	r1, r0, #1
 801b7c2:	d1c8      	bne.n	801b756 <__sflush_r+0x36>
 801b7c4:	682b      	ldr	r3, [r5, #0]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d0c5      	beq.n	801b756 <__sflush_r+0x36>
 801b7ca:	2b1d      	cmp	r3, #29
 801b7cc:	d001      	beq.n	801b7d2 <__sflush_r+0xb2>
 801b7ce:	2b16      	cmp	r3, #22
 801b7d0:	d101      	bne.n	801b7d6 <__sflush_r+0xb6>
 801b7d2:	602f      	str	r7, [r5, #0]
 801b7d4:	e7b1      	b.n	801b73a <__sflush_r+0x1a>
 801b7d6:	89a3      	ldrh	r3, [r4, #12]
 801b7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b7dc:	81a3      	strh	r3, [r4, #12]
 801b7de:	e7ad      	b.n	801b73c <__sflush_r+0x1c>
 801b7e0:	690f      	ldr	r7, [r1, #16]
 801b7e2:	2f00      	cmp	r7, #0
 801b7e4:	d0a9      	beq.n	801b73a <__sflush_r+0x1a>
 801b7e6:	0793      	lsls	r3, r2, #30
 801b7e8:	680e      	ldr	r6, [r1, #0]
 801b7ea:	bf08      	it	eq
 801b7ec:	694b      	ldreq	r3, [r1, #20]
 801b7ee:	600f      	str	r7, [r1, #0]
 801b7f0:	bf18      	it	ne
 801b7f2:	2300      	movne	r3, #0
 801b7f4:	eba6 0807 	sub.w	r8, r6, r7
 801b7f8:	608b      	str	r3, [r1, #8]
 801b7fa:	f1b8 0f00 	cmp.w	r8, #0
 801b7fe:	dd9c      	ble.n	801b73a <__sflush_r+0x1a>
 801b800:	6a21      	ldr	r1, [r4, #32]
 801b802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b804:	4643      	mov	r3, r8
 801b806:	463a      	mov	r2, r7
 801b808:	4628      	mov	r0, r5
 801b80a:	47b0      	blx	r6
 801b80c:	2800      	cmp	r0, #0
 801b80e:	dc06      	bgt.n	801b81e <__sflush_r+0xfe>
 801b810:	89a3      	ldrh	r3, [r4, #12]
 801b812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b816:	81a3      	strh	r3, [r4, #12]
 801b818:	f04f 30ff 	mov.w	r0, #4294967295
 801b81c:	e78e      	b.n	801b73c <__sflush_r+0x1c>
 801b81e:	4407      	add	r7, r0
 801b820:	eba8 0800 	sub.w	r8, r8, r0
 801b824:	e7e9      	b.n	801b7fa <__sflush_r+0xda>
 801b826:	bf00      	nop
 801b828:	dfbffffe 	.word	0xdfbffffe

0801b82c <_fflush_r>:
 801b82c:	b538      	push	{r3, r4, r5, lr}
 801b82e:	690b      	ldr	r3, [r1, #16]
 801b830:	4605      	mov	r5, r0
 801b832:	460c      	mov	r4, r1
 801b834:	b913      	cbnz	r3, 801b83c <_fflush_r+0x10>
 801b836:	2500      	movs	r5, #0
 801b838:	4628      	mov	r0, r5
 801b83a:	bd38      	pop	{r3, r4, r5, pc}
 801b83c:	b118      	cbz	r0, 801b846 <_fflush_r+0x1a>
 801b83e:	6a03      	ldr	r3, [r0, #32]
 801b840:	b90b      	cbnz	r3, 801b846 <_fflush_r+0x1a>
 801b842:	f7fd f96f 	bl	8018b24 <__sinit>
 801b846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d0f3      	beq.n	801b836 <_fflush_r+0xa>
 801b84e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b850:	07d0      	lsls	r0, r2, #31
 801b852:	d404      	bmi.n	801b85e <_fflush_r+0x32>
 801b854:	0599      	lsls	r1, r3, #22
 801b856:	d402      	bmi.n	801b85e <_fflush_r+0x32>
 801b858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b85a:	f7fd fb1e 	bl	8018e9a <__retarget_lock_acquire_recursive>
 801b85e:	4628      	mov	r0, r5
 801b860:	4621      	mov	r1, r4
 801b862:	f7ff ff5d 	bl	801b720 <__sflush_r>
 801b866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b868:	07da      	lsls	r2, r3, #31
 801b86a:	4605      	mov	r5, r0
 801b86c:	d4e4      	bmi.n	801b838 <_fflush_r+0xc>
 801b86e:	89a3      	ldrh	r3, [r4, #12]
 801b870:	059b      	lsls	r3, r3, #22
 801b872:	d4e1      	bmi.n	801b838 <_fflush_r+0xc>
 801b874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b876:	f7fd fb11 	bl	8018e9c <__retarget_lock_release_recursive>
 801b87a:	e7dd      	b.n	801b838 <_fflush_r+0xc>

0801b87c <fiprintf>:
 801b87c:	b40e      	push	{r1, r2, r3}
 801b87e:	b503      	push	{r0, r1, lr}
 801b880:	4601      	mov	r1, r0
 801b882:	ab03      	add	r3, sp, #12
 801b884:	4805      	ldr	r0, [pc, #20]	; (801b89c <fiprintf+0x20>)
 801b886:	f853 2b04 	ldr.w	r2, [r3], #4
 801b88a:	6800      	ldr	r0, [r0, #0]
 801b88c:	9301      	str	r3, [sp, #4]
 801b88e:	f7ff fe2d 	bl	801b4ec <_vfiprintf_r>
 801b892:	b002      	add	sp, #8
 801b894:	f85d eb04 	ldr.w	lr, [sp], #4
 801b898:	b003      	add	sp, #12
 801b89a:	4770      	bx	lr
 801b89c:	20000088 	.word	0x20000088

0801b8a0 <__swbuf_r>:
 801b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8a2:	460e      	mov	r6, r1
 801b8a4:	4614      	mov	r4, r2
 801b8a6:	4605      	mov	r5, r0
 801b8a8:	b118      	cbz	r0, 801b8b2 <__swbuf_r+0x12>
 801b8aa:	6a03      	ldr	r3, [r0, #32]
 801b8ac:	b90b      	cbnz	r3, 801b8b2 <__swbuf_r+0x12>
 801b8ae:	f7fd f939 	bl	8018b24 <__sinit>
 801b8b2:	69a3      	ldr	r3, [r4, #24]
 801b8b4:	60a3      	str	r3, [r4, #8]
 801b8b6:	89a3      	ldrh	r3, [r4, #12]
 801b8b8:	071a      	lsls	r2, r3, #28
 801b8ba:	d525      	bpl.n	801b908 <__swbuf_r+0x68>
 801b8bc:	6923      	ldr	r3, [r4, #16]
 801b8be:	b31b      	cbz	r3, 801b908 <__swbuf_r+0x68>
 801b8c0:	6823      	ldr	r3, [r4, #0]
 801b8c2:	6922      	ldr	r2, [r4, #16]
 801b8c4:	1a98      	subs	r0, r3, r2
 801b8c6:	6963      	ldr	r3, [r4, #20]
 801b8c8:	b2f6      	uxtb	r6, r6
 801b8ca:	4283      	cmp	r3, r0
 801b8cc:	4637      	mov	r7, r6
 801b8ce:	dc04      	bgt.n	801b8da <__swbuf_r+0x3a>
 801b8d0:	4621      	mov	r1, r4
 801b8d2:	4628      	mov	r0, r5
 801b8d4:	f7ff ffaa 	bl	801b82c <_fflush_r>
 801b8d8:	b9e0      	cbnz	r0, 801b914 <__swbuf_r+0x74>
 801b8da:	68a3      	ldr	r3, [r4, #8]
 801b8dc:	3b01      	subs	r3, #1
 801b8de:	60a3      	str	r3, [r4, #8]
 801b8e0:	6823      	ldr	r3, [r4, #0]
 801b8e2:	1c5a      	adds	r2, r3, #1
 801b8e4:	6022      	str	r2, [r4, #0]
 801b8e6:	701e      	strb	r6, [r3, #0]
 801b8e8:	6962      	ldr	r2, [r4, #20]
 801b8ea:	1c43      	adds	r3, r0, #1
 801b8ec:	429a      	cmp	r2, r3
 801b8ee:	d004      	beq.n	801b8fa <__swbuf_r+0x5a>
 801b8f0:	89a3      	ldrh	r3, [r4, #12]
 801b8f2:	07db      	lsls	r3, r3, #31
 801b8f4:	d506      	bpl.n	801b904 <__swbuf_r+0x64>
 801b8f6:	2e0a      	cmp	r6, #10
 801b8f8:	d104      	bne.n	801b904 <__swbuf_r+0x64>
 801b8fa:	4621      	mov	r1, r4
 801b8fc:	4628      	mov	r0, r5
 801b8fe:	f7ff ff95 	bl	801b82c <_fflush_r>
 801b902:	b938      	cbnz	r0, 801b914 <__swbuf_r+0x74>
 801b904:	4638      	mov	r0, r7
 801b906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b908:	4621      	mov	r1, r4
 801b90a:	4628      	mov	r0, r5
 801b90c:	f000 f806 	bl	801b91c <__swsetup_r>
 801b910:	2800      	cmp	r0, #0
 801b912:	d0d5      	beq.n	801b8c0 <__swbuf_r+0x20>
 801b914:	f04f 37ff 	mov.w	r7, #4294967295
 801b918:	e7f4      	b.n	801b904 <__swbuf_r+0x64>
	...

0801b91c <__swsetup_r>:
 801b91c:	b538      	push	{r3, r4, r5, lr}
 801b91e:	4b2a      	ldr	r3, [pc, #168]	; (801b9c8 <__swsetup_r+0xac>)
 801b920:	4605      	mov	r5, r0
 801b922:	6818      	ldr	r0, [r3, #0]
 801b924:	460c      	mov	r4, r1
 801b926:	b118      	cbz	r0, 801b930 <__swsetup_r+0x14>
 801b928:	6a03      	ldr	r3, [r0, #32]
 801b92a:	b90b      	cbnz	r3, 801b930 <__swsetup_r+0x14>
 801b92c:	f7fd f8fa 	bl	8018b24 <__sinit>
 801b930:	89a3      	ldrh	r3, [r4, #12]
 801b932:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b936:	0718      	lsls	r0, r3, #28
 801b938:	d422      	bmi.n	801b980 <__swsetup_r+0x64>
 801b93a:	06d9      	lsls	r1, r3, #27
 801b93c:	d407      	bmi.n	801b94e <__swsetup_r+0x32>
 801b93e:	2309      	movs	r3, #9
 801b940:	602b      	str	r3, [r5, #0]
 801b942:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b946:	81a3      	strh	r3, [r4, #12]
 801b948:	f04f 30ff 	mov.w	r0, #4294967295
 801b94c:	e034      	b.n	801b9b8 <__swsetup_r+0x9c>
 801b94e:	0758      	lsls	r0, r3, #29
 801b950:	d512      	bpl.n	801b978 <__swsetup_r+0x5c>
 801b952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b954:	b141      	cbz	r1, 801b968 <__swsetup_r+0x4c>
 801b956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b95a:	4299      	cmp	r1, r3
 801b95c:	d002      	beq.n	801b964 <__swsetup_r+0x48>
 801b95e:	4628      	mov	r0, r5
 801b960:	f7fe f8c6 	bl	8019af0 <_free_r>
 801b964:	2300      	movs	r3, #0
 801b966:	6363      	str	r3, [r4, #52]	; 0x34
 801b968:	89a3      	ldrh	r3, [r4, #12]
 801b96a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b96e:	81a3      	strh	r3, [r4, #12]
 801b970:	2300      	movs	r3, #0
 801b972:	6063      	str	r3, [r4, #4]
 801b974:	6923      	ldr	r3, [r4, #16]
 801b976:	6023      	str	r3, [r4, #0]
 801b978:	89a3      	ldrh	r3, [r4, #12]
 801b97a:	f043 0308 	orr.w	r3, r3, #8
 801b97e:	81a3      	strh	r3, [r4, #12]
 801b980:	6923      	ldr	r3, [r4, #16]
 801b982:	b94b      	cbnz	r3, 801b998 <__swsetup_r+0x7c>
 801b984:	89a3      	ldrh	r3, [r4, #12]
 801b986:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b98a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b98e:	d003      	beq.n	801b998 <__swsetup_r+0x7c>
 801b990:	4621      	mov	r1, r4
 801b992:	4628      	mov	r0, r5
 801b994:	f000 fc1b 	bl	801c1ce <__smakebuf_r>
 801b998:	89a0      	ldrh	r0, [r4, #12]
 801b99a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b99e:	f010 0301 	ands.w	r3, r0, #1
 801b9a2:	d00a      	beq.n	801b9ba <__swsetup_r+0x9e>
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	60a3      	str	r3, [r4, #8]
 801b9a8:	6963      	ldr	r3, [r4, #20]
 801b9aa:	425b      	negs	r3, r3
 801b9ac:	61a3      	str	r3, [r4, #24]
 801b9ae:	6923      	ldr	r3, [r4, #16]
 801b9b0:	b943      	cbnz	r3, 801b9c4 <__swsetup_r+0xa8>
 801b9b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b9b6:	d1c4      	bne.n	801b942 <__swsetup_r+0x26>
 801b9b8:	bd38      	pop	{r3, r4, r5, pc}
 801b9ba:	0781      	lsls	r1, r0, #30
 801b9bc:	bf58      	it	pl
 801b9be:	6963      	ldrpl	r3, [r4, #20]
 801b9c0:	60a3      	str	r3, [r4, #8]
 801b9c2:	e7f4      	b.n	801b9ae <__swsetup_r+0x92>
 801b9c4:	2000      	movs	r0, #0
 801b9c6:	e7f7      	b.n	801b9b8 <__swsetup_r+0x9c>
 801b9c8:	20000088 	.word	0x20000088

0801b9cc <_sbrk_r>:
 801b9cc:	b538      	push	{r3, r4, r5, lr}
 801b9ce:	4d06      	ldr	r5, [pc, #24]	; (801b9e8 <_sbrk_r+0x1c>)
 801b9d0:	2300      	movs	r3, #0
 801b9d2:	4604      	mov	r4, r0
 801b9d4:	4608      	mov	r0, r1
 801b9d6:	602b      	str	r3, [r5, #0]
 801b9d8:	f7e5 fc62 	bl	80012a0 <_sbrk>
 801b9dc:	1c43      	adds	r3, r0, #1
 801b9de:	d102      	bne.n	801b9e6 <_sbrk_r+0x1a>
 801b9e0:	682b      	ldr	r3, [r5, #0]
 801b9e2:	b103      	cbz	r3, 801b9e6 <_sbrk_r+0x1a>
 801b9e4:	6023      	str	r3, [r4, #0]
 801b9e6:	bd38      	pop	{r3, r4, r5, pc}
 801b9e8:	20077bd4 	.word	0x20077bd4
 801b9ec:	00000000 	.word	0x00000000

0801b9f0 <nan>:
 801b9f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b9f8 <nan+0x8>
 801b9f4:	4770      	bx	lr
 801b9f6:	bf00      	nop
 801b9f8:	00000000 	.word	0x00000000
 801b9fc:	7ff80000 	.word	0x7ff80000

0801ba00 <abort>:
 801ba00:	b508      	push	{r3, lr}
 801ba02:	2006      	movs	r0, #6
 801ba04:	f000 fc48 	bl	801c298 <raise>
 801ba08:	2001      	movs	r0, #1
 801ba0a:	f7e5 fbd1 	bl	80011b0 <_exit>

0801ba0e <_calloc_r>:
 801ba0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba10:	fba1 2402 	umull	r2, r4, r1, r2
 801ba14:	b94c      	cbnz	r4, 801ba2a <_calloc_r+0x1c>
 801ba16:	4611      	mov	r1, r2
 801ba18:	9201      	str	r2, [sp, #4]
 801ba1a:	f7fe f8dd 	bl	8019bd8 <_malloc_r>
 801ba1e:	9a01      	ldr	r2, [sp, #4]
 801ba20:	4605      	mov	r5, r0
 801ba22:	b930      	cbnz	r0, 801ba32 <_calloc_r+0x24>
 801ba24:	4628      	mov	r0, r5
 801ba26:	b003      	add	sp, #12
 801ba28:	bd30      	pop	{r4, r5, pc}
 801ba2a:	220c      	movs	r2, #12
 801ba2c:	6002      	str	r2, [r0, #0]
 801ba2e:	2500      	movs	r5, #0
 801ba30:	e7f8      	b.n	801ba24 <_calloc_r+0x16>
 801ba32:	4621      	mov	r1, r4
 801ba34:	f7fd f94b 	bl	8018cce <memset>
 801ba38:	e7f4      	b.n	801ba24 <_calloc_r+0x16>

0801ba3a <rshift>:
 801ba3a:	6903      	ldr	r3, [r0, #16]
 801ba3c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ba40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba44:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ba48:	f100 0414 	add.w	r4, r0, #20
 801ba4c:	dd45      	ble.n	801bada <rshift+0xa0>
 801ba4e:	f011 011f 	ands.w	r1, r1, #31
 801ba52:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ba56:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ba5a:	d10c      	bne.n	801ba76 <rshift+0x3c>
 801ba5c:	f100 0710 	add.w	r7, r0, #16
 801ba60:	4629      	mov	r1, r5
 801ba62:	42b1      	cmp	r1, r6
 801ba64:	d334      	bcc.n	801bad0 <rshift+0x96>
 801ba66:	1a9b      	subs	r3, r3, r2
 801ba68:	009b      	lsls	r3, r3, #2
 801ba6a:	1eea      	subs	r2, r5, #3
 801ba6c:	4296      	cmp	r6, r2
 801ba6e:	bf38      	it	cc
 801ba70:	2300      	movcc	r3, #0
 801ba72:	4423      	add	r3, r4
 801ba74:	e015      	b.n	801baa2 <rshift+0x68>
 801ba76:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ba7a:	f1c1 0820 	rsb	r8, r1, #32
 801ba7e:	40cf      	lsrs	r7, r1
 801ba80:	f105 0e04 	add.w	lr, r5, #4
 801ba84:	46a1      	mov	r9, r4
 801ba86:	4576      	cmp	r6, lr
 801ba88:	46f4      	mov	ip, lr
 801ba8a:	d815      	bhi.n	801bab8 <rshift+0x7e>
 801ba8c:	1a9a      	subs	r2, r3, r2
 801ba8e:	0092      	lsls	r2, r2, #2
 801ba90:	3a04      	subs	r2, #4
 801ba92:	3501      	adds	r5, #1
 801ba94:	42ae      	cmp	r6, r5
 801ba96:	bf38      	it	cc
 801ba98:	2200      	movcc	r2, #0
 801ba9a:	18a3      	adds	r3, r4, r2
 801ba9c:	50a7      	str	r7, [r4, r2]
 801ba9e:	b107      	cbz	r7, 801baa2 <rshift+0x68>
 801baa0:	3304      	adds	r3, #4
 801baa2:	1b1a      	subs	r2, r3, r4
 801baa4:	42a3      	cmp	r3, r4
 801baa6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801baaa:	bf08      	it	eq
 801baac:	2300      	moveq	r3, #0
 801baae:	6102      	str	r2, [r0, #16]
 801bab0:	bf08      	it	eq
 801bab2:	6143      	streq	r3, [r0, #20]
 801bab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bab8:	f8dc c000 	ldr.w	ip, [ip]
 801babc:	fa0c fc08 	lsl.w	ip, ip, r8
 801bac0:	ea4c 0707 	orr.w	r7, ip, r7
 801bac4:	f849 7b04 	str.w	r7, [r9], #4
 801bac8:	f85e 7b04 	ldr.w	r7, [lr], #4
 801bacc:	40cf      	lsrs	r7, r1
 801bace:	e7da      	b.n	801ba86 <rshift+0x4c>
 801bad0:	f851 cb04 	ldr.w	ip, [r1], #4
 801bad4:	f847 cf04 	str.w	ip, [r7, #4]!
 801bad8:	e7c3      	b.n	801ba62 <rshift+0x28>
 801bada:	4623      	mov	r3, r4
 801badc:	e7e1      	b.n	801baa2 <rshift+0x68>

0801bade <__hexdig_fun>:
 801bade:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801bae2:	2b09      	cmp	r3, #9
 801bae4:	d802      	bhi.n	801baec <__hexdig_fun+0xe>
 801bae6:	3820      	subs	r0, #32
 801bae8:	b2c0      	uxtb	r0, r0
 801baea:	4770      	bx	lr
 801baec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801baf0:	2b05      	cmp	r3, #5
 801baf2:	d801      	bhi.n	801baf8 <__hexdig_fun+0x1a>
 801baf4:	3847      	subs	r0, #71	; 0x47
 801baf6:	e7f7      	b.n	801bae8 <__hexdig_fun+0xa>
 801baf8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801bafc:	2b05      	cmp	r3, #5
 801bafe:	d801      	bhi.n	801bb04 <__hexdig_fun+0x26>
 801bb00:	3827      	subs	r0, #39	; 0x27
 801bb02:	e7f1      	b.n	801bae8 <__hexdig_fun+0xa>
 801bb04:	2000      	movs	r0, #0
 801bb06:	4770      	bx	lr

0801bb08 <__gethex>:
 801bb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb0c:	4617      	mov	r7, r2
 801bb0e:	680a      	ldr	r2, [r1, #0]
 801bb10:	b085      	sub	sp, #20
 801bb12:	f102 0b02 	add.w	fp, r2, #2
 801bb16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801bb1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801bb1e:	4681      	mov	r9, r0
 801bb20:	468a      	mov	sl, r1
 801bb22:	9302      	str	r3, [sp, #8]
 801bb24:	32fe      	adds	r2, #254	; 0xfe
 801bb26:	eb02 030b 	add.w	r3, r2, fp
 801bb2a:	46d8      	mov	r8, fp
 801bb2c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801bb30:	9301      	str	r3, [sp, #4]
 801bb32:	2830      	cmp	r0, #48	; 0x30
 801bb34:	d0f7      	beq.n	801bb26 <__gethex+0x1e>
 801bb36:	f7ff ffd2 	bl	801bade <__hexdig_fun>
 801bb3a:	4604      	mov	r4, r0
 801bb3c:	2800      	cmp	r0, #0
 801bb3e:	d138      	bne.n	801bbb2 <__gethex+0xaa>
 801bb40:	49a7      	ldr	r1, [pc, #668]	; (801bde0 <__gethex+0x2d8>)
 801bb42:	2201      	movs	r2, #1
 801bb44:	4640      	mov	r0, r8
 801bb46:	f7fd f8ca 	bl	8018cde <strncmp>
 801bb4a:	4606      	mov	r6, r0
 801bb4c:	2800      	cmp	r0, #0
 801bb4e:	d169      	bne.n	801bc24 <__gethex+0x11c>
 801bb50:	f898 0001 	ldrb.w	r0, [r8, #1]
 801bb54:	465d      	mov	r5, fp
 801bb56:	f7ff ffc2 	bl	801bade <__hexdig_fun>
 801bb5a:	2800      	cmp	r0, #0
 801bb5c:	d064      	beq.n	801bc28 <__gethex+0x120>
 801bb5e:	465a      	mov	r2, fp
 801bb60:	7810      	ldrb	r0, [r2, #0]
 801bb62:	2830      	cmp	r0, #48	; 0x30
 801bb64:	4690      	mov	r8, r2
 801bb66:	f102 0201 	add.w	r2, r2, #1
 801bb6a:	d0f9      	beq.n	801bb60 <__gethex+0x58>
 801bb6c:	f7ff ffb7 	bl	801bade <__hexdig_fun>
 801bb70:	2301      	movs	r3, #1
 801bb72:	fab0 f480 	clz	r4, r0
 801bb76:	0964      	lsrs	r4, r4, #5
 801bb78:	465e      	mov	r6, fp
 801bb7a:	9301      	str	r3, [sp, #4]
 801bb7c:	4642      	mov	r2, r8
 801bb7e:	4615      	mov	r5, r2
 801bb80:	3201      	adds	r2, #1
 801bb82:	7828      	ldrb	r0, [r5, #0]
 801bb84:	f7ff ffab 	bl	801bade <__hexdig_fun>
 801bb88:	2800      	cmp	r0, #0
 801bb8a:	d1f8      	bne.n	801bb7e <__gethex+0x76>
 801bb8c:	4994      	ldr	r1, [pc, #592]	; (801bde0 <__gethex+0x2d8>)
 801bb8e:	2201      	movs	r2, #1
 801bb90:	4628      	mov	r0, r5
 801bb92:	f7fd f8a4 	bl	8018cde <strncmp>
 801bb96:	b978      	cbnz	r0, 801bbb8 <__gethex+0xb0>
 801bb98:	b946      	cbnz	r6, 801bbac <__gethex+0xa4>
 801bb9a:	1c6e      	adds	r6, r5, #1
 801bb9c:	4632      	mov	r2, r6
 801bb9e:	4615      	mov	r5, r2
 801bba0:	3201      	adds	r2, #1
 801bba2:	7828      	ldrb	r0, [r5, #0]
 801bba4:	f7ff ff9b 	bl	801bade <__hexdig_fun>
 801bba8:	2800      	cmp	r0, #0
 801bbaa:	d1f8      	bne.n	801bb9e <__gethex+0x96>
 801bbac:	1b73      	subs	r3, r6, r5
 801bbae:	009e      	lsls	r6, r3, #2
 801bbb0:	e004      	b.n	801bbbc <__gethex+0xb4>
 801bbb2:	2400      	movs	r4, #0
 801bbb4:	4626      	mov	r6, r4
 801bbb6:	e7e1      	b.n	801bb7c <__gethex+0x74>
 801bbb8:	2e00      	cmp	r6, #0
 801bbba:	d1f7      	bne.n	801bbac <__gethex+0xa4>
 801bbbc:	782b      	ldrb	r3, [r5, #0]
 801bbbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bbc2:	2b50      	cmp	r3, #80	; 0x50
 801bbc4:	d13d      	bne.n	801bc42 <__gethex+0x13a>
 801bbc6:	786b      	ldrb	r3, [r5, #1]
 801bbc8:	2b2b      	cmp	r3, #43	; 0x2b
 801bbca:	d02f      	beq.n	801bc2c <__gethex+0x124>
 801bbcc:	2b2d      	cmp	r3, #45	; 0x2d
 801bbce:	d031      	beq.n	801bc34 <__gethex+0x12c>
 801bbd0:	1c69      	adds	r1, r5, #1
 801bbd2:	f04f 0b00 	mov.w	fp, #0
 801bbd6:	7808      	ldrb	r0, [r1, #0]
 801bbd8:	f7ff ff81 	bl	801bade <__hexdig_fun>
 801bbdc:	1e42      	subs	r2, r0, #1
 801bbde:	b2d2      	uxtb	r2, r2
 801bbe0:	2a18      	cmp	r2, #24
 801bbe2:	d82e      	bhi.n	801bc42 <__gethex+0x13a>
 801bbe4:	f1a0 0210 	sub.w	r2, r0, #16
 801bbe8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801bbec:	f7ff ff77 	bl	801bade <__hexdig_fun>
 801bbf0:	f100 3cff 	add.w	ip, r0, #4294967295
 801bbf4:	fa5f fc8c 	uxtb.w	ip, ip
 801bbf8:	f1bc 0f18 	cmp.w	ip, #24
 801bbfc:	d91d      	bls.n	801bc3a <__gethex+0x132>
 801bbfe:	f1bb 0f00 	cmp.w	fp, #0
 801bc02:	d000      	beq.n	801bc06 <__gethex+0xfe>
 801bc04:	4252      	negs	r2, r2
 801bc06:	4416      	add	r6, r2
 801bc08:	f8ca 1000 	str.w	r1, [sl]
 801bc0c:	b1dc      	cbz	r4, 801bc46 <__gethex+0x13e>
 801bc0e:	9b01      	ldr	r3, [sp, #4]
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	bf14      	ite	ne
 801bc14:	f04f 0800 	movne.w	r8, #0
 801bc18:	f04f 0806 	moveq.w	r8, #6
 801bc1c:	4640      	mov	r0, r8
 801bc1e:	b005      	add	sp, #20
 801bc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc24:	4645      	mov	r5, r8
 801bc26:	4626      	mov	r6, r4
 801bc28:	2401      	movs	r4, #1
 801bc2a:	e7c7      	b.n	801bbbc <__gethex+0xb4>
 801bc2c:	f04f 0b00 	mov.w	fp, #0
 801bc30:	1ca9      	adds	r1, r5, #2
 801bc32:	e7d0      	b.n	801bbd6 <__gethex+0xce>
 801bc34:	f04f 0b01 	mov.w	fp, #1
 801bc38:	e7fa      	b.n	801bc30 <__gethex+0x128>
 801bc3a:	230a      	movs	r3, #10
 801bc3c:	fb03 0002 	mla	r0, r3, r2, r0
 801bc40:	e7d0      	b.n	801bbe4 <__gethex+0xdc>
 801bc42:	4629      	mov	r1, r5
 801bc44:	e7e0      	b.n	801bc08 <__gethex+0x100>
 801bc46:	eba5 0308 	sub.w	r3, r5, r8
 801bc4a:	3b01      	subs	r3, #1
 801bc4c:	4621      	mov	r1, r4
 801bc4e:	2b07      	cmp	r3, #7
 801bc50:	dc0a      	bgt.n	801bc68 <__gethex+0x160>
 801bc52:	4648      	mov	r0, r9
 801bc54:	f7fe f84c 	bl	8019cf0 <_Balloc>
 801bc58:	4604      	mov	r4, r0
 801bc5a:	b940      	cbnz	r0, 801bc6e <__gethex+0x166>
 801bc5c:	4b61      	ldr	r3, [pc, #388]	; (801bde4 <__gethex+0x2dc>)
 801bc5e:	4602      	mov	r2, r0
 801bc60:	21e4      	movs	r1, #228	; 0xe4
 801bc62:	4861      	ldr	r0, [pc, #388]	; (801bde8 <__gethex+0x2e0>)
 801bc64:	f7fd f930 	bl	8018ec8 <__assert_func>
 801bc68:	3101      	adds	r1, #1
 801bc6a:	105b      	asrs	r3, r3, #1
 801bc6c:	e7ef      	b.n	801bc4e <__gethex+0x146>
 801bc6e:	f100 0a14 	add.w	sl, r0, #20
 801bc72:	2300      	movs	r3, #0
 801bc74:	495a      	ldr	r1, [pc, #360]	; (801bde0 <__gethex+0x2d8>)
 801bc76:	f8cd a004 	str.w	sl, [sp, #4]
 801bc7a:	469b      	mov	fp, r3
 801bc7c:	45a8      	cmp	r8, r5
 801bc7e:	d342      	bcc.n	801bd06 <__gethex+0x1fe>
 801bc80:	9801      	ldr	r0, [sp, #4]
 801bc82:	f840 bb04 	str.w	fp, [r0], #4
 801bc86:	eba0 000a 	sub.w	r0, r0, sl
 801bc8a:	1080      	asrs	r0, r0, #2
 801bc8c:	6120      	str	r0, [r4, #16]
 801bc8e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801bc92:	4658      	mov	r0, fp
 801bc94:	f7fe f91e 	bl	8019ed4 <__hi0bits>
 801bc98:	683d      	ldr	r5, [r7, #0]
 801bc9a:	eba8 0000 	sub.w	r0, r8, r0
 801bc9e:	42a8      	cmp	r0, r5
 801bca0:	dd59      	ble.n	801bd56 <__gethex+0x24e>
 801bca2:	eba0 0805 	sub.w	r8, r0, r5
 801bca6:	4641      	mov	r1, r8
 801bca8:	4620      	mov	r0, r4
 801bcaa:	f7fe fcaa 	bl	801a602 <__any_on>
 801bcae:	4683      	mov	fp, r0
 801bcb0:	b1b8      	cbz	r0, 801bce2 <__gethex+0x1da>
 801bcb2:	f108 33ff 	add.w	r3, r8, #4294967295
 801bcb6:	1159      	asrs	r1, r3, #5
 801bcb8:	f003 021f 	and.w	r2, r3, #31
 801bcbc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801bcc0:	f04f 0b01 	mov.w	fp, #1
 801bcc4:	fa0b f202 	lsl.w	r2, fp, r2
 801bcc8:	420a      	tst	r2, r1
 801bcca:	d00a      	beq.n	801bce2 <__gethex+0x1da>
 801bccc:	455b      	cmp	r3, fp
 801bcce:	dd06      	ble.n	801bcde <__gethex+0x1d6>
 801bcd0:	f1a8 0102 	sub.w	r1, r8, #2
 801bcd4:	4620      	mov	r0, r4
 801bcd6:	f7fe fc94 	bl	801a602 <__any_on>
 801bcda:	2800      	cmp	r0, #0
 801bcdc:	d138      	bne.n	801bd50 <__gethex+0x248>
 801bcde:	f04f 0b02 	mov.w	fp, #2
 801bce2:	4641      	mov	r1, r8
 801bce4:	4620      	mov	r0, r4
 801bce6:	f7ff fea8 	bl	801ba3a <rshift>
 801bcea:	4446      	add	r6, r8
 801bcec:	68bb      	ldr	r3, [r7, #8]
 801bcee:	42b3      	cmp	r3, r6
 801bcf0:	da41      	bge.n	801bd76 <__gethex+0x26e>
 801bcf2:	4621      	mov	r1, r4
 801bcf4:	4648      	mov	r0, r9
 801bcf6:	f7fe f83b 	bl	8019d70 <_Bfree>
 801bcfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bcfc:	2300      	movs	r3, #0
 801bcfe:	6013      	str	r3, [r2, #0]
 801bd00:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801bd04:	e78a      	b.n	801bc1c <__gethex+0x114>
 801bd06:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801bd0a:	2a2e      	cmp	r2, #46	; 0x2e
 801bd0c:	d014      	beq.n	801bd38 <__gethex+0x230>
 801bd0e:	2b20      	cmp	r3, #32
 801bd10:	d106      	bne.n	801bd20 <__gethex+0x218>
 801bd12:	9b01      	ldr	r3, [sp, #4]
 801bd14:	f843 bb04 	str.w	fp, [r3], #4
 801bd18:	f04f 0b00 	mov.w	fp, #0
 801bd1c:	9301      	str	r3, [sp, #4]
 801bd1e:	465b      	mov	r3, fp
 801bd20:	7828      	ldrb	r0, [r5, #0]
 801bd22:	9303      	str	r3, [sp, #12]
 801bd24:	f7ff fedb 	bl	801bade <__hexdig_fun>
 801bd28:	9b03      	ldr	r3, [sp, #12]
 801bd2a:	f000 000f 	and.w	r0, r0, #15
 801bd2e:	4098      	lsls	r0, r3
 801bd30:	ea4b 0b00 	orr.w	fp, fp, r0
 801bd34:	3304      	adds	r3, #4
 801bd36:	e7a1      	b.n	801bc7c <__gethex+0x174>
 801bd38:	45a8      	cmp	r8, r5
 801bd3a:	d8e8      	bhi.n	801bd0e <__gethex+0x206>
 801bd3c:	2201      	movs	r2, #1
 801bd3e:	4628      	mov	r0, r5
 801bd40:	9303      	str	r3, [sp, #12]
 801bd42:	f7fc ffcc 	bl	8018cde <strncmp>
 801bd46:	4926      	ldr	r1, [pc, #152]	; (801bde0 <__gethex+0x2d8>)
 801bd48:	9b03      	ldr	r3, [sp, #12]
 801bd4a:	2800      	cmp	r0, #0
 801bd4c:	d1df      	bne.n	801bd0e <__gethex+0x206>
 801bd4e:	e795      	b.n	801bc7c <__gethex+0x174>
 801bd50:	f04f 0b03 	mov.w	fp, #3
 801bd54:	e7c5      	b.n	801bce2 <__gethex+0x1da>
 801bd56:	da0b      	bge.n	801bd70 <__gethex+0x268>
 801bd58:	eba5 0800 	sub.w	r8, r5, r0
 801bd5c:	4621      	mov	r1, r4
 801bd5e:	4642      	mov	r2, r8
 801bd60:	4648      	mov	r0, r9
 801bd62:	f7fe fa1f 	bl	801a1a4 <__lshift>
 801bd66:	eba6 0608 	sub.w	r6, r6, r8
 801bd6a:	4604      	mov	r4, r0
 801bd6c:	f100 0a14 	add.w	sl, r0, #20
 801bd70:	f04f 0b00 	mov.w	fp, #0
 801bd74:	e7ba      	b.n	801bcec <__gethex+0x1e4>
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	42b3      	cmp	r3, r6
 801bd7a:	dd73      	ble.n	801be64 <__gethex+0x35c>
 801bd7c:	1b9e      	subs	r6, r3, r6
 801bd7e:	42b5      	cmp	r5, r6
 801bd80:	dc34      	bgt.n	801bdec <__gethex+0x2e4>
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	2b02      	cmp	r3, #2
 801bd86:	d023      	beq.n	801bdd0 <__gethex+0x2c8>
 801bd88:	2b03      	cmp	r3, #3
 801bd8a:	d025      	beq.n	801bdd8 <__gethex+0x2d0>
 801bd8c:	2b01      	cmp	r3, #1
 801bd8e:	d115      	bne.n	801bdbc <__gethex+0x2b4>
 801bd90:	42b5      	cmp	r5, r6
 801bd92:	d113      	bne.n	801bdbc <__gethex+0x2b4>
 801bd94:	2d01      	cmp	r5, #1
 801bd96:	d10b      	bne.n	801bdb0 <__gethex+0x2a8>
 801bd98:	9a02      	ldr	r2, [sp, #8]
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	6013      	str	r3, [r2, #0]
 801bd9e:	2301      	movs	r3, #1
 801bda0:	6123      	str	r3, [r4, #16]
 801bda2:	f8ca 3000 	str.w	r3, [sl]
 801bda6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bda8:	f04f 0862 	mov.w	r8, #98	; 0x62
 801bdac:	601c      	str	r4, [r3, #0]
 801bdae:	e735      	b.n	801bc1c <__gethex+0x114>
 801bdb0:	1e69      	subs	r1, r5, #1
 801bdb2:	4620      	mov	r0, r4
 801bdb4:	f7fe fc25 	bl	801a602 <__any_on>
 801bdb8:	2800      	cmp	r0, #0
 801bdba:	d1ed      	bne.n	801bd98 <__gethex+0x290>
 801bdbc:	4621      	mov	r1, r4
 801bdbe:	4648      	mov	r0, r9
 801bdc0:	f7fd ffd6 	bl	8019d70 <_Bfree>
 801bdc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	6013      	str	r3, [r2, #0]
 801bdca:	f04f 0850 	mov.w	r8, #80	; 0x50
 801bdce:	e725      	b.n	801bc1c <__gethex+0x114>
 801bdd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	d1f2      	bne.n	801bdbc <__gethex+0x2b4>
 801bdd6:	e7df      	b.n	801bd98 <__gethex+0x290>
 801bdd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d1dc      	bne.n	801bd98 <__gethex+0x290>
 801bdde:	e7ed      	b.n	801bdbc <__gethex+0x2b4>
 801bde0:	08020724 	.word	0x08020724
 801bde4:	080205be 	.word	0x080205be
 801bde8:	08020791 	.word	0x08020791
 801bdec:	f106 38ff 	add.w	r8, r6, #4294967295
 801bdf0:	f1bb 0f00 	cmp.w	fp, #0
 801bdf4:	d133      	bne.n	801be5e <__gethex+0x356>
 801bdf6:	f1b8 0f00 	cmp.w	r8, #0
 801bdfa:	d004      	beq.n	801be06 <__gethex+0x2fe>
 801bdfc:	4641      	mov	r1, r8
 801bdfe:	4620      	mov	r0, r4
 801be00:	f7fe fbff 	bl	801a602 <__any_on>
 801be04:	4683      	mov	fp, r0
 801be06:	ea4f 1268 	mov.w	r2, r8, asr #5
 801be0a:	2301      	movs	r3, #1
 801be0c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801be10:	f008 081f 	and.w	r8, r8, #31
 801be14:	fa03 f308 	lsl.w	r3, r3, r8
 801be18:	4213      	tst	r3, r2
 801be1a:	4631      	mov	r1, r6
 801be1c:	4620      	mov	r0, r4
 801be1e:	bf18      	it	ne
 801be20:	f04b 0b02 	orrne.w	fp, fp, #2
 801be24:	1bad      	subs	r5, r5, r6
 801be26:	f7ff fe08 	bl	801ba3a <rshift>
 801be2a:	687e      	ldr	r6, [r7, #4]
 801be2c:	f04f 0802 	mov.w	r8, #2
 801be30:	f1bb 0f00 	cmp.w	fp, #0
 801be34:	d04a      	beq.n	801becc <__gethex+0x3c4>
 801be36:	68fb      	ldr	r3, [r7, #12]
 801be38:	2b02      	cmp	r3, #2
 801be3a:	d016      	beq.n	801be6a <__gethex+0x362>
 801be3c:	2b03      	cmp	r3, #3
 801be3e:	d018      	beq.n	801be72 <__gethex+0x36a>
 801be40:	2b01      	cmp	r3, #1
 801be42:	d109      	bne.n	801be58 <__gethex+0x350>
 801be44:	f01b 0f02 	tst.w	fp, #2
 801be48:	d006      	beq.n	801be58 <__gethex+0x350>
 801be4a:	f8da 3000 	ldr.w	r3, [sl]
 801be4e:	ea4b 0b03 	orr.w	fp, fp, r3
 801be52:	f01b 0f01 	tst.w	fp, #1
 801be56:	d10f      	bne.n	801be78 <__gethex+0x370>
 801be58:	f048 0810 	orr.w	r8, r8, #16
 801be5c:	e036      	b.n	801becc <__gethex+0x3c4>
 801be5e:	f04f 0b01 	mov.w	fp, #1
 801be62:	e7d0      	b.n	801be06 <__gethex+0x2fe>
 801be64:	f04f 0801 	mov.w	r8, #1
 801be68:	e7e2      	b.n	801be30 <__gethex+0x328>
 801be6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be6c:	f1c3 0301 	rsb	r3, r3, #1
 801be70:	930f      	str	r3, [sp, #60]	; 0x3c
 801be72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be74:	2b00      	cmp	r3, #0
 801be76:	d0ef      	beq.n	801be58 <__gethex+0x350>
 801be78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801be7c:	f104 0214 	add.w	r2, r4, #20
 801be80:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801be84:	9301      	str	r3, [sp, #4]
 801be86:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801be8a:	2300      	movs	r3, #0
 801be8c:	4694      	mov	ip, r2
 801be8e:	f852 1b04 	ldr.w	r1, [r2], #4
 801be92:	f1b1 3fff 	cmp.w	r1, #4294967295
 801be96:	d01e      	beq.n	801bed6 <__gethex+0x3ce>
 801be98:	3101      	adds	r1, #1
 801be9a:	f8cc 1000 	str.w	r1, [ip]
 801be9e:	f1b8 0f02 	cmp.w	r8, #2
 801bea2:	f104 0214 	add.w	r2, r4, #20
 801bea6:	d13d      	bne.n	801bf24 <__gethex+0x41c>
 801bea8:	683b      	ldr	r3, [r7, #0]
 801beaa:	3b01      	subs	r3, #1
 801beac:	42ab      	cmp	r3, r5
 801beae:	d10b      	bne.n	801bec8 <__gethex+0x3c0>
 801beb0:	1169      	asrs	r1, r5, #5
 801beb2:	2301      	movs	r3, #1
 801beb4:	f005 051f 	and.w	r5, r5, #31
 801beb8:	fa03 f505 	lsl.w	r5, r3, r5
 801bebc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bec0:	421d      	tst	r5, r3
 801bec2:	bf18      	it	ne
 801bec4:	f04f 0801 	movne.w	r8, #1
 801bec8:	f048 0820 	orr.w	r8, r8, #32
 801becc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bece:	601c      	str	r4, [r3, #0]
 801bed0:	9b02      	ldr	r3, [sp, #8]
 801bed2:	601e      	str	r6, [r3, #0]
 801bed4:	e6a2      	b.n	801bc1c <__gethex+0x114>
 801bed6:	4290      	cmp	r0, r2
 801bed8:	f842 3c04 	str.w	r3, [r2, #-4]
 801bedc:	d8d6      	bhi.n	801be8c <__gethex+0x384>
 801bede:	68a2      	ldr	r2, [r4, #8]
 801bee0:	4593      	cmp	fp, r2
 801bee2:	db17      	blt.n	801bf14 <__gethex+0x40c>
 801bee4:	6861      	ldr	r1, [r4, #4]
 801bee6:	4648      	mov	r0, r9
 801bee8:	3101      	adds	r1, #1
 801beea:	f7fd ff01 	bl	8019cf0 <_Balloc>
 801beee:	4682      	mov	sl, r0
 801bef0:	b918      	cbnz	r0, 801befa <__gethex+0x3f2>
 801bef2:	4b1b      	ldr	r3, [pc, #108]	; (801bf60 <__gethex+0x458>)
 801bef4:	4602      	mov	r2, r0
 801bef6:	2184      	movs	r1, #132	; 0x84
 801bef8:	e6b3      	b.n	801bc62 <__gethex+0x15a>
 801befa:	6922      	ldr	r2, [r4, #16]
 801befc:	3202      	adds	r2, #2
 801befe:	f104 010c 	add.w	r1, r4, #12
 801bf02:	0092      	lsls	r2, r2, #2
 801bf04:	300c      	adds	r0, #12
 801bf06:	f7fc ffca 	bl	8018e9e <memcpy>
 801bf0a:	4621      	mov	r1, r4
 801bf0c:	4648      	mov	r0, r9
 801bf0e:	f7fd ff2f 	bl	8019d70 <_Bfree>
 801bf12:	4654      	mov	r4, sl
 801bf14:	6922      	ldr	r2, [r4, #16]
 801bf16:	1c51      	adds	r1, r2, #1
 801bf18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bf1c:	6121      	str	r1, [r4, #16]
 801bf1e:	2101      	movs	r1, #1
 801bf20:	6151      	str	r1, [r2, #20]
 801bf22:	e7bc      	b.n	801be9e <__gethex+0x396>
 801bf24:	6921      	ldr	r1, [r4, #16]
 801bf26:	4559      	cmp	r1, fp
 801bf28:	dd0b      	ble.n	801bf42 <__gethex+0x43a>
 801bf2a:	2101      	movs	r1, #1
 801bf2c:	4620      	mov	r0, r4
 801bf2e:	f7ff fd84 	bl	801ba3a <rshift>
 801bf32:	68bb      	ldr	r3, [r7, #8]
 801bf34:	3601      	adds	r6, #1
 801bf36:	42b3      	cmp	r3, r6
 801bf38:	f6ff aedb 	blt.w	801bcf2 <__gethex+0x1ea>
 801bf3c:	f04f 0801 	mov.w	r8, #1
 801bf40:	e7c2      	b.n	801bec8 <__gethex+0x3c0>
 801bf42:	f015 051f 	ands.w	r5, r5, #31
 801bf46:	d0f9      	beq.n	801bf3c <__gethex+0x434>
 801bf48:	9b01      	ldr	r3, [sp, #4]
 801bf4a:	441a      	add	r2, r3
 801bf4c:	f1c5 0520 	rsb	r5, r5, #32
 801bf50:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801bf54:	f7fd ffbe 	bl	8019ed4 <__hi0bits>
 801bf58:	42a8      	cmp	r0, r5
 801bf5a:	dbe6      	blt.n	801bf2a <__gethex+0x422>
 801bf5c:	e7ee      	b.n	801bf3c <__gethex+0x434>
 801bf5e:	bf00      	nop
 801bf60:	080205be 	.word	0x080205be

0801bf64 <L_shift>:
 801bf64:	f1c2 0208 	rsb	r2, r2, #8
 801bf68:	0092      	lsls	r2, r2, #2
 801bf6a:	b570      	push	{r4, r5, r6, lr}
 801bf6c:	f1c2 0620 	rsb	r6, r2, #32
 801bf70:	6843      	ldr	r3, [r0, #4]
 801bf72:	6804      	ldr	r4, [r0, #0]
 801bf74:	fa03 f506 	lsl.w	r5, r3, r6
 801bf78:	432c      	orrs	r4, r5
 801bf7a:	40d3      	lsrs	r3, r2
 801bf7c:	6004      	str	r4, [r0, #0]
 801bf7e:	f840 3f04 	str.w	r3, [r0, #4]!
 801bf82:	4288      	cmp	r0, r1
 801bf84:	d3f4      	bcc.n	801bf70 <L_shift+0xc>
 801bf86:	bd70      	pop	{r4, r5, r6, pc}

0801bf88 <__match>:
 801bf88:	b530      	push	{r4, r5, lr}
 801bf8a:	6803      	ldr	r3, [r0, #0]
 801bf8c:	3301      	adds	r3, #1
 801bf8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bf92:	b914      	cbnz	r4, 801bf9a <__match+0x12>
 801bf94:	6003      	str	r3, [r0, #0]
 801bf96:	2001      	movs	r0, #1
 801bf98:	bd30      	pop	{r4, r5, pc}
 801bf9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801bfa2:	2d19      	cmp	r5, #25
 801bfa4:	bf98      	it	ls
 801bfa6:	3220      	addls	r2, #32
 801bfa8:	42a2      	cmp	r2, r4
 801bfaa:	d0f0      	beq.n	801bf8e <__match+0x6>
 801bfac:	2000      	movs	r0, #0
 801bfae:	e7f3      	b.n	801bf98 <__match+0x10>

0801bfb0 <__hexnan>:
 801bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfb4:	680b      	ldr	r3, [r1, #0]
 801bfb6:	6801      	ldr	r1, [r0, #0]
 801bfb8:	115e      	asrs	r6, r3, #5
 801bfba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801bfbe:	f013 031f 	ands.w	r3, r3, #31
 801bfc2:	b087      	sub	sp, #28
 801bfc4:	bf18      	it	ne
 801bfc6:	3604      	addne	r6, #4
 801bfc8:	2500      	movs	r5, #0
 801bfca:	1f37      	subs	r7, r6, #4
 801bfcc:	4682      	mov	sl, r0
 801bfce:	4690      	mov	r8, r2
 801bfd0:	9301      	str	r3, [sp, #4]
 801bfd2:	f846 5c04 	str.w	r5, [r6, #-4]
 801bfd6:	46b9      	mov	r9, r7
 801bfd8:	463c      	mov	r4, r7
 801bfda:	9502      	str	r5, [sp, #8]
 801bfdc:	46ab      	mov	fp, r5
 801bfde:	784a      	ldrb	r2, [r1, #1]
 801bfe0:	1c4b      	adds	r3, r1, #1
 801bfe2:	9303      	str	r3, [sp, #12]
 801bfe4:	b342      	cbz	r2, 801c038 <__hexnan+0x88>
 801bfe6:	4610      	mov	r0, r2
 801bfe8:	9105      	str	r1, [sp, #20]
 801bfea:	9204      	str	r2, [sp, #16]
 801bfec:	f7ff fd77 	bl	801bade <__hexdig_fun>
 801bff0:	2800      	cmp	r0, #0
 801bff2:	d14f      	bne.n	801c094 <__hexnan+0xe4>
 801bff4:	9a04      	ldr	r2, [sp, #16]
 801bff6:	9905      	ldr	r1, [sp, #20]
 801bff8:	2a20      	cmp	r2, #32
 801bffa:	d818      	bhi.n	801c02e <__hexnan+0x7e>
 801bffc:	9b02      	ldr	r3, [sp, #8]
 801bffe:	459b      	cmp	fp, r3
 801c000:	dd13      	ble.n	801c02a <__hexnan+0x7a>
 801c002:	454c      	cmp	r4, r9
 801c004:	d206      	bcs.n	801c014 <__hexnan+0x64>
 801c006:	2d07      	cmp	r5, #7
 801c008:	dc04      	bgt.n	801c014 <__hexnan+0x64>
 801c00a:	462a      	mov	r2, r5
 801c00c:	4649      	mov	r1, r9
 801c00e:	4620      	mov	r0, r4
 801c010:	f7ff ffa8 	bl	801bf64 <L_shift>
 801c014:	4544      	cmp	r4, r8
 801c016:	d950      	bls.n	801c0ba <__hexnan+0x10a>
 801c018:	2300      	movs	r3, #0
 801c01a:	f1a4 0904 	sub.w	r9, r4, #4
 801c01e:	f844 3c04 	str.w	r3, [r4, #-4]
 801c022:	f8cd b008 	str.w	fp, [sp, #8]
 801c026:	464c      	mov	r4, r9
 801c028:	461d      	mov	r5, r3
 801c02a:	9903      	ldr	r1, [sp, #12]
 801c02c:	e7d7      	b.n	801bfde <__hexnan+0x2e>
 801c02e:	2a29      	cmp	r2, #41	; 0x29
 801c030:	d155      	bne.n	801c0de <__hexnan+0x12e>
 801c032:	3102      	adds	r1, #2
 801c034:	f8ca 1000 	str.w	r1, [sl]
 801c038:	f1bb 0f00 	cmp.w	fp, #0
 801c03c:	d04f      	beq.n	801c0de <__hexnan+0x12e>
 801c03e:	454c      	cmp	r4, r9
 801c040:	d206      	bcs.n	801c050 <__hexnan+0xa0>
 801c042:	2d07      	cmp	r5, #7
 801c044:	dc04      	bgt.n	801c050 <__hexnan+0xa0>
 801c046:	462a      	mov	r2, r5
 801c048:	4649      	mov	r1, r9
 801c04a:	4620      	mov	r0, r4
 801c04c:	f7ff ff8a 	bl	801bf64 <L_shift>
 801c050:	4544      	cmp	r4, r8
 801c052:	d934      	bls.n	801c0be <__hexnan+0x10e>
 801c054:	f1a8 0204 	sub.w	r2, r8, #4
 801c058:	4623      	mov	r3, r4
 801c05a:	f853 1b04 	ldr.w	r1, [r3], #4
 801c05e:	f842 1f04 	str.w	r1, [r2, #4]!
 801c062:	429f      	cmp	r7, r3
 801c064:	d2f9      	bcs.n	801c05a <__hexnan+0xaa>
 801c066:	1b3b      	subs	r3, r7, r4
 801c068:	f023 0303 	bic.w	r3, r3, #3
 801c06c:	3304      	adds	r3, #4
 801c06e:	3e03      	subs	r6, #3
 801c070:	3401      	adds	r4, #1
 801c072:	42a6      	cmp	r6, r4
 801c074:	bf38      	it	cc
 801c076:	2304      	movcc	r3, #4
 801c078:	4443      	add	r3, r8
 801c07a:	2200      	movs	r2, #0
 801c07c:	f843 2b04 	str.w	r2, [r3], #4
 801c080:	429f      	cmp	r7, r3
 801c082:	d2fb      	bcs.n	801c07c <__hexnan+0xcc>
 801c084:	683b      	ldr	r3, [r7, #0]
 801c086:	b91b      	cbnz	r3, 801c090 <__hexnan+0xe0>
 801c088:	4547      	cmp	r7, r8
 801c08a:	d126      	bne.n	801c0da <__hexnan+0x12a>
 801c08c:	2301      	movs	r3, #1
 801c08e:	603b      	str	r3, [r7, #0]
 801c090:	2005      	movs	r0, #5
 801c092:	e025      	b.n	801c0e0 <__hexnan+0x130>
 801c094:	3501      	adds	r5, #1
 801c096:	2d08      	cmp	r5, #8
 801c098:	f10b 0b01 	add.w	fp, fp, #1
 801c09c:	dd06      	ble.n	801c0ac <__hexnan+0xfc>
 801c09e:	4544      	cmp	r4, r8
 801c0a0:	d9c3      	bls.n	801c02a <__hexnan+0x7a>
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	f844 3c04 	str.w	r3, [r4, #-4]
 801c0a8:	2501      	movs	r5, #1
 801c0aa:	3c04      	subs	r4, #4
 801c0ac:	6822      	ldr	r2, [r4, #0]
 801c0ae:	f000 000f 	and.w	r0, r0, #15
 801c0b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801c0b6:	6020      	str	r0, [r4, #0]
 801c0b8:	e7b7      	b.n	801c02a <__hexnan+0x7a>
 801c0ba:	2508      	movs	r5, #8
 801c0bc:	e7b5      	b.n	801c02a <__hexnan+0x7a>
 801c0be:	9b01      	ldr	r3, [sp, #4]
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d0df      	beq.n	801c084 <__hexnan+0xd4>
 801c0c4:	f1c3 0320 	rsb	r3, r3, #32
 801c0c8:	f04f 32ff 	mov.w	r2, #4294967295
 801c0cc:	40da      	lsrs	r2, r3
 801c0ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801c0d2:	4013      	ands	r3, r2
 801c0d4:	f846 3c04 	str.w	r3, [r6, #-4]
 801c0d8:	e7d4      	b.n	801c084 <__hexnan+0xd4>
 801c0da:	3f04      	subs	r7, #4
 801c0dc:	e7d2      	b.n	801c084 <__hexnan+0xd4>
 801c0de:	2004      	movs	r0, #4
 801c0e0:	b007      	add	sp, #28
 801c0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c0e6 <__ascii_mbtowc>:
 801c0e6:	b082      	sub	sp, #8
 801c0e8:	b901      	cbnz	r1, 801c0ec <__ascii_mbtowc+0x6>
 801c0ea:	a901      	add	r1, sp, #4
 801c0ec:	b142      	cbz	r2, 801c100 <__ascii_mbtowc+0x1a>
 801c0ee:	b14b      	cbz	r3, 801c104 <__ascii_mbtowc+0x1e>
 801c0f0:	7813      	ldrb	r3, [r2, #0]
 801c0f2:	600b      	str	r3, [r1, #0]
 801c0f4:	7812      	ldrb	r2, [r2, #0]
 801c0f6:	1e10      	subs	r0, r2, #0
 801c0f8:	bf18      	it	ne
 801c0fa:	2001      	movne	r0, #1
 801c0fc:	b002      	add	sp, #8
 801c0fe:	4770      	bx	lr
 801c100:	4610      	mov	r0, r2
 801c102:	e7fb      	b.n	801c0fc <__ascii_mbtowc+0x16>
 801c104:	f06f 0001 	mvn.w	r0, #1
 801c108:	e7f8      	b.n	801c0fc <__ascii_mbtowc+0x16>

0801c10a <_realloc_r>:
 801c10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c10e:	4680      	mov	r8, r0
 801c110:	4614      	mov	r4, r2
 801c112:	460e      	mov	r6, r1
 801c114:	b921      	cbnz	r1, 801c120 <_realloc_r+0x16>
 801c116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c11a:	4611      	mov	r1, r2
 801c11c:	f7fd bd5c 	b.w	8019bd8 <_malloc_r>
 801c120:	b92a      	cbnz	r2, 801c12e <_realloc_r+0x24>
 801c122:	f7fd fce5 	bl	8019af0 <_free_r>
 801c126:	4625      	mov	r5, r4
 801c128:	4628      	mov	r0, r5
 801c12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c12e:	f000 f8f1 	bl	801c314 <_malloc_usable_size_r>
 801c132:	4284      	cmp	r4, r0
 801c134:	4607      	mov	r7, r0
 801c136:	d802      	bhi.n	801c13e <_realloc_r+0x34>
 801c138:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c13c:	d812      	bhi.n	801c164 <_realloc_r+0x5a>
 801c13e:	4621      	mov	r1, r4
 801c140:	4640      	mov	r0, r8
 801c142:	f7fd fd49 	bl	8019bd8 <_malloc_r>
 801c146:	4605      	mov	r5, r0
 801c148:	2800      	cmp	r0, #0
 801c14a:	d0ed      	beq.n	801c128 <_realloc_r+0x1e>
 801c14c:	42bc      	cmp	r4, r7
 801c14e:	4622      	mov	r2, r4
 801c150:	4631      	mov	r1, r6
 801c152:	bf28      	it	cs
 801c154:	463a      	movcs	r2, r7
 801c156:	f7fc fea2 	bl	8018e9e <memcpy>
 801c15a:	4631      	mov	r1, r6
 801c15c:	4640      	mov	r0, r8
 801c15e:	f7fd fcc7 	bl	8019af0 <_free_r>
 801c162:	e7e1      	b.n	801c128 <_realloc_r+0x1e>
 801c164:	4635      	mov	r5, r6
 801c166:	e7df      	b.n	801c128 <_realloc_r+0x1e>

0801c168 <__ascii_wctomb>:
 801c168:	b149      	cbz	r1, 801c17e <__ascii_wctomb+0x16>
 801c16a:	2aff      	cmp	r2, #255	; 0xff
 801c16c:	bf85      	ittet	hi
 801c16e:	238a      	movhi	r3, #138	; 0x8a
 801c170:	6003      	strhi	r3, [r0, #0]
 801c172:	700a      	strbls	r2, [r1, #0]
 801c174:	f04f 30ff 	movhi.w	r0, #4294967295
 801c178:	bf98      	it	ls
 801c17a:	2001      	movls	r0, #1
 801c17c:	4770      	bx	lr
 801c17e:	4608      	mov	r0, r1
 801c180:	4770      	bx	lr

0801c182 <__swhatbuf_r>:
 801c182:	b570      	push	{r4, r5, r6, lr}
 801c184:	460c      	mov	r4, r1
 801c186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c18a:	2900      	cmp	r1, #0
 801c18c:	b096      	sub	sp, #88	; 0x58
 801c18e:	4615      	mov	r5, r2
 801c190:	461e      	mov	r6, r3
 801c192:	da0d      	bge.n	801c1b0 <__swhatbuf_r+0x2e>
 801c194:	89a3      	ldrh	r3, [r4, #12]
 801c196:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c19a:	f04f 0100 	mov.w	r1, #0
 801c19e:	bf0c      	ite	eq
 801c1a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c1a4:	2340      	movne	r3, #64	; 0x40
 801c1a6:	2000      	movs	r0, #0
 801c1a8:	6031      	str	r1, [r6, #0]
 801c1aa:	602b      	str	r3, [r5, #0]
 801c1ac:	b016      	add	sp, #88	; 0x58
 801c1ae:	bd70      	pop	{r4, r5, r6, pc}
 801c1b0:	466a      	mov	r2, sp
 801c1b2:	f000 f879 	bl	801c2a8 <_fstat_r>
 801c1b6:	2800      	cmp	r0, #0
 801c1b8:	dbec      	blt.n	801c194 <__swhatbuf_r+0x12>
 801c1ba:	9901      	ldr	r1, [sp, #4]
 801c1bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c1c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c1c4:	4259      	negs	r1, r3
 801c1c6:	4159      	adcs	r1, r3
 801c1c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c1cc:	e7eb      	b.n	801c1a6 <__swhatbuf_r+0x24>

0801c1ce <__smakebuf_r>:
 801c1ce:	898b      	ldrh	r3, [r1, #12]
 801c1d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c1d2:	079d      	lsls	r5, r3, #30
 801c1d4:	4606      	mov	r6, r0
 801c1d6:	460c      	mov	r4, r1
 801c1d8:	d507      	bpl.n	801c1ea <__smakebuf_r+0x1c>
 801c1da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c1de:	6023      	str	r3, [r4, #0]
 801c1e0:	6123      	str	r3, [r4, #16]
 801c1e2:	2301      	movs	r3, #1
 801c1e4:	6163      	str	r3, [r4, #20]
 801c1e6:	b002      	add	sp, #8
 801c1e8:	bd70      	pop	{r4, r5, r6, pc}
 801c1ea:	ab01      	add	r3, sp, #4
 801c1ec:	466a      	mov	r2, sp
 801c1ee:	f7ff ffc8 	bl	801c182 <__swhatbuf_r>
 801c1f2:	9900      	ldr	r1, [sp, #0]
 801c1f4:	4605      	mov	r5, r0
 801c1f6:	4630      	mov	r0, r6
 801c1f8:	f7fd fcee 	bl	8019bd8 <_malloc_r>
 801c1fc:	b948      	cbnz	r0, 801c212 <__smakebuf_r+0x44>
 801c1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c202:	059a      	lsls	r2, r3, #22
 801c204:	d4ef      	bmi.n	801c1e6 <__smakebuf_r+0x18>
 801c206:	f023 0303 	bic.w	r3, r3, #3
 801c20a:	f043 0302 	orr.w	r3, r3, #2
 801c20e:	81a3      	strh	r3, [r4, #12]
 801c210:	e7e3      	b.n	801c1da <__smakebuf_r+0xc>
 801c212:	89a3      	ldrh	r3, [r4, #12]
 801c214:	6020      	str	r0, [r4, #0]
 801c216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c21a:	81a3      	strh	r3, [r4, #12]
 801c21c:	9b00      	ldr	r3, [sp, #0]
 801c21e:	6163      	str	r3, [r4, #20]
 801c220:	9b01      	ldr	r3, [sp, #4]
 801c222:	6120      	str	r0, [r4, #16]
 801c224:	b15b      	cbz	r3, 801c23e <__smakebuf_r+0x70>
 801c226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c22a:	4630      	mov	r0, r6
 801c22c:	f000 f84e 	bl	801c2cc <_isatty_r>
 801c230:	b128      	cbz	r0, 801c23e <__smakebuf_r+0x70>
 801c232:	89a3      	ldrh	r3, [r4, #12]
 801c234:	f023 0303 	bic.w	r3, r3, #3
 801c238:	f043 0301 	orr.w	r3, r3, #1
 801c23c:	81a3      	strh	r3, [r4, #12]
 801c23e:	89a3      	ldrh	r3, [r4, #12]
 801c240:	431d      	orrs	r5, r3
 801c242:	81a5      	strh	r5, [r4, #12]
 801c244:	e7cf      	b.n	801c1e6 <__smakebuf_r+0x18>

0801c246 <_raise_r>:
 801c246:	291f      	cmp	r1, #31
 801c248:	b538      	push	{r3, r4, r5, lr}
 801c24a:	4604      	mov	r4, r0
 801c24c:	460d      	mov	r5, r1
 801c24e:	d904      	bls.n	801c25a <_raise_r+0x14>
 801c250:	2316      	movs	r3, #22
 801c252:	6003      	str	r3, [r0, #0]
 801c254:	f04f 30ff 	mov.w	r0, #4294967295
 801c258:	bd38      	pop	{r3, r4, r5, pc}
 801c25a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c25c:	b112      	cbz	r2, 801c264 <_raise_r+0x1e>
 801c25e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c262:	b94b      	cbnz	r3, 801c278 <_raise_r+0x32>
 801c264:	4620      	mov	r0, r4
 801c266:	f000 f853 	bl	801c310 <_getpid_r>
 801c26a:	462a      	mov	r2, r5
 801c26c:	4601      	mov	r1, r0
 801c26e:	4620      	mov	r0, r4
 801c270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c274:	f000 b83a 	b.w	801c2ec <_kill_r>
 801c278:	2b01      	cmp	r3, #1
 801c27a:	d00a      	beq.n	801c292 <_raise_r+0x4c>
 801c27c:	1c59      	adds	r1, r3, #1
 801c27e:	d103      	bne.n	801c288 <_raise_r+0x42>
 801c280:	2316      	movs	r3, #22
 801c282:	6003      	str	r3, [r0, #0]
 801c284:	2001      	movs	r0, #1
 801c286:	e7e7      	b.n	801c258 <_raise_r+0x12>
 801c288:	2400      	movs	r4, #0
 801c28a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c28e:	4628      	mov	r0, r5
 801c290:	4798      	blx	r3
 801c292:	2000      	movs	r0, #0
 801c294:	e7e0      	b.n	801c258 <_raise_r+0x12>
	...

0801c298 <raise>:
 801c298:	4b02      	ldr	r3, [pc, #8]	; (801c2a4 <raise+0xc>)
 801c29a:	4601      	mov	r1, r0
 801c29c:	6818      	ldr	r0, [r3, #0]
 801c29e:	f7ff bfd2 	b.w	801c246 <_raise_r>
 801c2a2:	bf00      	nop
 801c2a4:	20000088 	.word	0x20000088

0801c2a8 <_fstat_r>:
 801c2a8:	b538      	push	{r3, r4, r5, lr}
 801c2aa:	4d07      	ldr	r5, [pc, #28]	; (801c2c8 <_fstat_r+0x20>)
 801c2ac:	2300      	movs	r3, #0
 801c2ae:	4604      	mov	r4, r0
 801c2b0:	4608      	mov	r0, r1
 801c2b2:	4611      	mov	r1, r2
 801c2b4:	602b      	str	r3, [r5, #0]
 801c2b6:	f7e4 ffca 	bl	800124e <_fstat>
 801c2ba:	1c43      	adds	r3, r0, #1
 801c2bc:	d102      	bne.n	801c2c4 <_fstat_r+0x1c>
 801c2be:	682b      	ldr	r3, [r5, #0]
 801c2c0:	b103      	cbz	r3, 801c2c4 <_fstat_r+0x1c>
 801c2c2:	6023      	str	r3, [r4, #0]
 801c2c4:	bd38      	pop	{r3, r4, r5, pc}
 801c2c6:	bf00      	nop
 801c2c8:	20077bd4 	.word	0x20077bd4

0801c2cc <_isatty_r>:
 801c2cc:	b538      	push	{r3, r4, r5, lr}
 801c2ce:	4d06      	ldr	r5, [pc, #24]	; (801c2e8 <_isatty_r+0x1c>)
 801c2d0:	2300      	movs	r3, #0
 801c2d2:	4604      	mov	r4, r0
 801c2d4:	4608      	mov	r0, r1
 801c2d6:	602b      	str	r3, [r5, #0]
 801c2d8:	f7e4 ffc9 	bl	800126e <_isatty>
 801c2dc:	1c43      	adds	r3, r0, #1
 801c2de:	d102      	bne.n	801c2e6 <_isatty_r+0x1a>
 801c2e0:	682b      	ldr	r3, [r5, #0]
 801c2e2:	b103      	cbz	r3, 801c2e6 <_isatty_r+0x1a>
 801c2e4:	6023      	str	r3, [r4, #0]
 801c2e6:	bd38      	pop	{r3, r4, r5, pc}
 801c2e8:	20077bd4 	.word	0x20077bd4

0801c2ec <_kill_r>:
 801c2ec:	b538      	push	{r3, r4, r5, lr}
 801c2ee:	4d07      	ldr	r5, [pc, #28]	; (801c30c <_kill_r+0x20>)
 801c2f0:	2300      	movs	r3, #0
 801c2f2:	4604      	mov	r4, r0
 801c2f4:	4608      	mov	r0, r1
 801c2f6:	4611      	mov	r1, r2
 801c2f8:	602b      	str	r3, [r5, #0]
 801c2fa:	f7e4 ff47 	bl	800118c <_kill>
 801c2fe:	1c43      	adds	r3, r0, #1
 801c300:	d102      	bne.n	801c308 <_kill_r+0x1c>
 801c302:	682b      	ldr	r3, [r5, #0]
 801c304:	b103      	cbz	r3, 801c308 <_kill_r+0x1c>
 801c306:	6023      	str	r3, [r4, #0]
 801c308:	bd38      	pop	{r3, r4, r5, pc}
 801c30a:	bf00      	nop
 801c30c:	20077bd4 	.word	0x20077bd4

0801c310 <_getpid_r>:
 801c310:	f7e4 bf34 	b.w	800117c <_getpid>

0801c314 <_malloc_usable_size_r>:
 801c314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c318:	1f18      	subs	r0, r3, #4
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	bfbc      	itt	lt
 801c31e:	580b      	ldrlt	r3, [r1, r0]
 801c320:	18c0      	addlt	r0, r0, r3
 801c322:	4770      	bx	lr

0801c324 <_init>:
 801c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c326:	bf00      	nop
 801c328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c32a:	bc08      	pop	{r3}
 801c32c:	469e      	mov	lr, r3
 801c32e:	4770      	bx	lr

0801c330 <_fini>:
 801c330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c332:	bf00      	nop
 801c334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c336:	bc08      	pop	{r3}
 801c338:	469e      	mov	lr, r3
 801c33a:	4770      	bx	lr
